/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Tue Apr  2 10:48:23 2024.
 */

#ifndef HV_CURRENT_H
#define HV_CURRENT_H

#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef CANLIB_BUILD
#define CANLIB_BUILD
#define CANLIB_BUILD_TIME 1712054903
#endif // CANLIB_BUILD

#define canlib_min(a,b) (((a) < (b)) ? (a) : (b))
#define canlib_max(a,b) (((a) > (b)) ? (a) : (b))

#ifndef CANLIB_PARKING
/* We know it's PACKING but PARKING sounds a bit better ;) */
#if defined(__MINGW32__)
#define CANLIB_PARKING                                                           __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define CANLIB_PARKING __attribute__((__packed__)) // , __aligned__(1)))
#endif                                             // defined(__MINGW32__)
#endif                                             // CANLIB_PARKING

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define HV_CURRENT_IVT_MSG_RESULT_WH_FRAME_ID (0x528u)
#define HV_CURRENT_IVT_MSG_RESULT_AS_FRAME_ID (0x527u)
#define HV_CURRENT_IVT_MSG_RESULT_W_FRAME_ID (0x526u)
#define HV_CURRENT_IVT_MSG_RESPONSE_FRAME_ID (0x511u)
#define HV_CURRENT_IVT_MSG_RESULT_T_FRAME_ID (0x525u)
#define HV_CURRENT_IVT_MSG_RESULT_U3_FRAME_ID (0x524u)
#define HV_CURRENT_IVT_MSG_RESULT_U2_FRAME_ID (0x523u)
#define HV_CURRENT_IVT_MSG_RESULT_U1_FRAME_ID (0x522u)
#define HV_CURRENT_IVT_MSG_RESULT_I_FRAME_ID (0x521u)
#define HV_CURRENT_IVT_MSG_CMD_FRAME_ID (0x411u)

/* Frame lengths in bytes. */
#define HV_CURRENT_IVT_MSG_RESULT_WH_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_RESULT_AS_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_RESULT_W_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_RESPONSE_BYTE_SIZE (8u)
#define HV_CURRENT_IVT_MSG_RESULT_T_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_RESULT_U3_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_RESULT_U2_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_RESULT_U1_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_RESULT_I_BYTE_SIZE (6u)
#define HV_CURRENT_IVT_MSG_CMD_BYTE_SIZE (8u)

/* Extended or standard frame types. */
#define HV_CURRENT_IVT_MSG_RESULT_WH_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESULT_AS_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESULT_W_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESPONSE_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESULT_T_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESULT_U3_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESULT_U2_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESULT_U1_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_RESULT_I_IS_EXTENDED (0)
#define HV_CURRENT_IVT_MSG_CMD_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Topics masks */


/* Signal choices. */
#define HV_CURRENT_IVT_MSG_RESULT_WH_IVT_ID_RESULT_WH_VT_RESULT_WH_CHOICE (7u)

#define HV_CURRENT_IVT_MSG_RESULT_AS_IVT_ID_RESULT_AS_VT_RESULT_AS_CHOICE (6u)

#define HV_CURRENT_IVT_MSG_RESULT_W_IVT_ID_RESULT_W_VT_RESULT_W_CHOICE (5u)

#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_MEASUREMENT_ERROR_CHOICE (128u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_SYSTEM_ERROR_CHOICE (129u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_OVERALL_LOGDATA_CHOICE (130u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_ERROR_LOG_LOGDATA_SINCE_RES_CHOICE (131u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_I_CHOICE (144u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_U1_CHOICE (145u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_U2_CHOICE (146u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_U3_CHOICE (147u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_T_CHOICE (148u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_W_CHOICE (149u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_AS_CHOICE (150u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RES_WH_CHOICE (151u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_COMMAND_CHOICE (157u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CAN_ID_RESPONSE_CHOICE (159u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_I_CHOICE (160u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_U1_CHOICE (161u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_U2_CHOICE (162u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_U3_CHOICE (163u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_T_CHOICE (164u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_W_CHOICE (165u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_AS_CHOICE (166u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CONFIG_RESULT_WH_CHOICE (167u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_RESET_ERROR_LOGDATA_CHOICE (176u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_TRIGGER_CHOICE (177u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_STORE_CHOICE (178u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_OC_TEST_TIME_CHOICE (179u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_MODE_CHOICE (180u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_THRESHOLD_POS_CHOICE (181u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_THRESHOLD_NEG_CHOICE (182u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_DEVICE_ID_CHOICE (185u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_SW_VERSION_CHOICE (186u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_SERIALNUMBER_CHOICE (187u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_ARTNR_CHOICE (188u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_GET_SET_ALIVE_CHOICE (191u)
#define HV_CURRENT_IVT_MSG_RESPONSE_IVT_ID_RESPONSE_RESP_CMD_WRONG_COMMAND_CHOICE (255u)

#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESONSE_ALL_MEAS_ERRORS_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESO_ERROR_OVERFLOW_ADC_CH_1_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_UNDERFLOW_ADC_CH_1_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_OVERFLOW_ADC_CH_2_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_UNDERFLOW_ADC_CH_2_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_VREF_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_CUR_MEAS_IMPLAUSIBLE_CHOICE (7u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP__ERROR_THERM_EMF_CORRECTION_CHOICE (8u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_MEAS_I1_OPENCIRC_CHOICE (9u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_MEAS_U1_OPENCIRC_CHOICE (10u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_MEAS_U2_OPENCIRC_CHOICE (11u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_MEAS_U3_OPENCIRC_CHOICE (12u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_NTC_H_OPENCIRC_CHOICE (13u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_NTC_I_OPENCIRC_CHOICE (14u)
#define HV_CURRENT_IVT_MSG_RESPONSE__80_RESP_MEASERROR_ITEM_RESP_ERROR_CALIBRATION_DATA_CHOICE (15u)

#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESONSE_ALL_SYSTEMERRORS_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_CODE_CRC_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_PARAMETER_CRC_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_CAN_BUS_RECEIVE_DATA_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_CAN_BUS_TRANSMIT_DATA_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_OVERTEMP_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_UNDERTEMP_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_POWER_FAILURE_CHOICE (7u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_SYSTEM_CLOCK_CHOICE (8u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_SYSTEM_INIT_CHOICE (9u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_CONFIGURATION_CHOICE (10u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_OVERCURRENT_DETECTION_CHOICE (11u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_EEPROM_RW_CHOICE (12u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_ADC_CLOCK_CHOICE (13u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_RESET_ILLEGAL_OPCODE_CHOICE (14u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_RESET_WATCHDOG_CHOICE (15u)
#define HV_CURRENT_IVT_MSG_RESPONSE__81_RESP_SYSTEMERROR_ITEM_RESP_ERROR_RESET_EMC_CHOICE (16u)

#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESPONSE_ON_OVERALL_LOGDATA_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_AH_COUNTER_OVERALL_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_AH_COUNTER_CHARGING_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_AH_COUNTER_DISCHARGING_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_OVERALL_CHOICE (16u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (19u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (20u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (21u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (22u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (23u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (24u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_OC_POSITIVE_ACTIVATED_CHOICE (27u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_OC_NEGATIVE_ACTIVATED_CHOICE (28u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_CURRENT_MAXIMUM_CHOICE (33u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_CURRENT_MINIMUM_CHOICE (34u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_U1_MAXIMUM_CHOICE (35u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_U1_MINIMUM_CHOICE (36u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_U2_MAXMIMUM_CHOICE (37u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_U2_MINIMUM_CHOICE (38u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_U3_MAXIMUM_CHOICE (39u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_U3_MINIMUM_CHOICE (40u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_TEMP_MAXMIMUM_CHOICE (41u)
#define HV_CURRENT_IVT_MSG_RESPONSE__82_RESP_ALLLOGDATA_ITEM_RESP_TEMP_MINIMUM_CHOICE (42u)

#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESPONSE_ALL_LOGDATA_SINCERESET_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_AH_COUNTER_OVERALL_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_AH_COUNTER_CHARGING_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_AH_COUNTER_DISCHARGING_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_OVERALL_CHOICE (16u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (19u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (20u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (21u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (22u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (23u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (24u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_OC_POSITIVE_ACTIVATED_CHOICE (27u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_OC_NEGATIVE_ACTIVATED_CHOICE (28u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_CURRENT_MAXIMUM_CHOICE (33u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_CURRENT_MINIMUM_CHOICE (34u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_U1_MAXIMUM_CHOICE (35u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_U1_MINIMUM_CHOICE (36u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_U2_MAXMIMUM_CHOICE (37u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_U2_MINIMUM_CHOICE (38u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_U3_MAXIMUM_CHOICE (39u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_U3_MINIMUM_CHOICE (40u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_TEMP_MAXMIMUM_CHOICE (41u)
#define HV_CURRENT_IVT_MSG_RESPONSE__83_RESP_LOGDATA_ITEM_RESP_TEMP_MINIMUM_CHOICE (42u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ALL_MEASUREMENT_ERRORS_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_OVERFLOW_ADC_CH1_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_UNDERFLOW_ADC_CH1_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_OVERFLOW_ADC_CH2_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_UNDERFLOW_ADC_CH2_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_VREF_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ERROR_CURRENT_IMPLAUSIBLE_CHOICE (7u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_THERMAL_EMF_CORRECTION_CHOICE (8u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CURRENT_MEASI1_OPENCIRCUIT_CHOICE (9u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_VOLTAGE_MEASU1_OPENCIRCUIT_CHOICE (10u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_VOLTAGE_MEASU2_OPENCIRCUIT_CHOICE (11u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_VOLTAGE_MEASU3_OPENCIRCUIT_CHOICE (12u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_NTC_H_OPENCIRCUIT_CHOICE (13u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_NTC_I_OPENCIRCUIT_CHOICE (14u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CALIBRATION_DATA__CHOICE (15u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ALL_SYSTEM_ERRORS_CHOICE (256u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CODE_CRC_CHOICE (257u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_PARAMETER_CRC_CHOICE (258u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CAN_BUS_RECEIVE_DATA_CHOICE (259u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CAN_BUS_TRANSMIT_DATA_CHOICE (260u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_OVERTEMP_CHOICE (261u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_UNDERTEMP_CHOICE (262u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_POWER_FAILURE_CHOICE (263u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_SYSTEM_CLOCK_CHOICE (264u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_SYSTEM_INIT_CHOICE (265u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CONFIGURATION_CHOICE (266u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_OVERCURRENT_DETECTION_CHOICE (267u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_EEPROM_RW_CHOICE (268u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ADC_CLOCK_CHOICE (269u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ILLEGAL_OPCODE_CHOICE (270u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RESET_WATCHDOG_CHOICE (271u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RESET_EMC_CHOICE (272u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ALL_LOGDATA_SINCE_RESET_CHOICE (512u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_AH_COUNTER_OVERALL_CHOICE (513u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_AH_COUNTER_CHARGING_CHOICE (514u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_AH_COUNTER_DISCHARGING_CHOICE (515u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ENERGY_COUNTER_OVERALL_CHOICE (516u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ENERGY_COUNTER_CHARGING_CHOICE (517u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_ENERGY_COUNTER_DISCHARGING_CHOICE (518u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUNTIME_OVERALL_CHOICE (528u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_CUR_IN_SPEC_LIMITS_CHOICE (529u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (530u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (531u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (532u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (533u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (534u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (535u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (536u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (537u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (538u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_OVERCUR_POS_ACTIVATED_CHOICE (539u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_RUN_OVERCUR_NEG_ACTIVATED_CHOICE (540u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CURRENT_MAXIMUM_CHOICE (545u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_CURRENT_MINIMUM_CHOICE (546u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U1_MAXIMUM_CHOICE (547u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U1_MINIMUM_CHOICE (548u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U2_MAXIMUM_CHOICE (549u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U2_MINIMUM_CHOICE (550u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U3_MAXIMUM_CHOICE (551u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_U3_MINIMUM_CHOICE (552u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_TEMP_MAXIMUM_CHOICE (553u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B0_RESP_RESET_ITEM_RESET_TEMP_MINIMUM_CHOICE (554u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TYPE_IVT_MOD_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TYPE_IVT_S_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A0_RESP_TRIGGERMODE_I_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A0_RESP_TRIGGERMODE_I_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A0_RESP_TRIGGERMODE_I_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A1_RESP_TRIGGERMODE_U1_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A1_RESP_TRIGGERMODE_U1_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A1_RESP_TRIGGERMODE_U1_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A2_RESP_TRIGGERMODE_U2_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A2_RESP_TRIGGERMODE_U2_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A2_RESP_TRIGGERMODE_U2_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A3_RESP_TRIGGERMODE_U3_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A3_RESP_TRIGGERMODE_U3_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A3_RESP_TRIGGERMODE_U3_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A4_RESP_TRIGGERMODE_T_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A4_RESP_TRIGGERMODE_T_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A4_RESP_TRIGGERMODE_T_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A5_RESP_TRIGGERMODE_W_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A5_RESP_TRIGGERMODE_W_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A5_RESP_TRIGGERMODE_W_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A6_RESP_TRIGGERMODE_AS_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A6_RESP_TRIGGERMODE_AS_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A6_RESP_TRIGGERMODE_AS_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__A7_RESP_TRIGGERMODE_WH_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A7_RESP_TRIGGERMODE_WH_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__A7_RESP_TRIGGERMODE_WH_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B4_RESP_ACTUAL_MODE_STOP_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B4_RESP_ACTUAL_MODE_RUN_CHOICE (1u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_100_A_CHOICE (100u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_300_A_CHOICE (300u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_500_A_CHOICE (500u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_1000_A_CHOICE (1000u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_CURRENT_2500_A_CHOICE (2500u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B4_RESP_STARTUP_MODE_STOP_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B4_RESP_STARTUP_MODE_RUN_CHOICE (1u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_VOLTAGE_CHAN_0_CHANNELS_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_VOLTAGE_CHAN_3_CHANNELS_CHOICE (3u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_TOI_I_CHOICE (3u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_COM_NONE_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_COM_CAN_1___TERMINATED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_COM_CAN_2___NOT_TERMINATED_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESPONSE__B9_RESP_DEVICE_V_SUPPLY_12__24_V_NOMINAL_SUPPLY_VOLTAGE_CHOICE (1u)

#define HV_CURRENT_IVT_MSG_RESULT_T_IVT_ID_RESULT_T_VT_RESULT_T_CHOICE (4u)

#define HV_CURRENT_IVT_MSG_RESULT_U3_IVT_ID_RESULT_U3_VT_RESULT_U3_CHOICE (3u)

#define HV_CURRENT_IVT_MSG_RESULT_U2_IVT_ID_RESULT_U2_VT_RESULT_U2_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_RESULT_U1_IVT_ID_RESULT_U1_VT_RESULT_U1_CHOICE (1u)

#define HV_CURRENT_IVT_MSG_RESULT_I_IVT_ID_RESULT_I_VT_RESULT_I_CHOICE (0u)

#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_I_CHOICE (16u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_U1_CHOICE (17u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_U2_CHOICE (18u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_U3_CHOICE (19u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_T_CHOICE (20u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_W_CHOICE (21u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_AS_CHOICE (22u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESULT_WH_CHOICE (23u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_CMD_CHOICE (29u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_CAN_ID_RESPONSE_CHOICE (31u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_I_CHOICE (32u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_U1_CHOICE (33u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_U2_CHOICE (34u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_U3_CHOICE (35u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_T_CHOICE (36u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_W_CHOICE (37u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_AS_CHOICE (38u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_RESULT_WH_CHOICE (39u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_RESET_ERR_LOG_CHOICE (48u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_TRIGGER_CHOICE (49u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_STORE_CHOICE (50u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_START_OC_TEST_CHOICE (51u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_MODE_CHOICE (52u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_THRESHOLD_POS_CHOICE (53u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_THRESHOLD_NEG_CHOICE (54u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_RESTART_TO_BITRATE_CHOICE (58u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_RESTART_TO_DEFAULT_CHOICE (61u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_SET_RESTART_CHOICE (63u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_MEASUREMENT_ERRORS_CHOICE (64u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_SYSTEM_ERRORS_CHOICE (65u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_OVERALL_LOGDATA_CHOICE (66u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_LOGDATA_SINCE_RESET_CHOICE (67u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_I_CHOICE (80u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_U1_CHOICE (81u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_U2_CHOICE (82u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_U3_CHOICE (83u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_T_CHOICE (84u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_W_CHOICE (85u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_AS_CHOICE (86u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RES_WH_CHOICE (87u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_COMMAND_CHOICE (93u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CAN_ID_RESPONSE_CHOICE (95u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_I_CHOICE (96u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_U1_CHOICE (97u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_U2_CHOICE (98u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_U3_CHOICE (99u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_T_CHOICE (100u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_W_CHOICE (101u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_AS_CHOICE (102u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CONFIG_RES_WH_CHOICE (103u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_OC_TEST_TIME_CHOICE (115u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_MODE_CHOICE (116u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_THRESHOLD_POS_CHOICE (117u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_THRESHOLD_NEG_CHOICE (118u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_DEVICE_ID_CHOICE (121u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_SW_VERSION_CHOICE (122u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_SN_CHOICE (123u)
#define HV_CURRENT_IVT_MSG_CMD_IVT_ID_CMD_GET_CMD_AND_INFO_ARTNR_CHOICE (124u)

#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ALL_MEASUREMENT_ERRORS_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_OVERFLOW_ADC_CH1_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_UNDERFLOW_ADC_CH1_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_OVERFLOW_ADC_CH2_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_UNDERFLOW_ADC_CH2_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_VREF_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ERROR_CURRENT_IMPLAUSIBLE_CHOICE (7u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_THERMAL_EMF_CORRECTION_CHOICE (8u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CURRENT_MEASI1_OPENCIRCUIT_CHOICE (9u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_VOLTAGE_MEASU1_OPENCIRCUIT_CHOICE (10u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_VOLTAGE_MEASU2_OPENCIRCUIT_CHOICE (11u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_VOLTAGE_MEASU3_OPENCIRCUIT_CHOICE (12u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_NTC_H_OPENCIRCUIT_CHOICE (13u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_NTC_I_OPENCIRCUIT_CHOICE (14u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CALIBRATION_DATA__CHOICE (15u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ALL_SYSTEM_ERRORS_CHOICE (256u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CODE_CRC_CHOICE (257u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_PARAMETER_CRC_CHOICE (258u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CAN_BUS_RECEIVE_DATA_CHOICE (259u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CAN_BUS_TRANSMIT_DATA_CHOICE (260u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_OVERTEMP_CHOICE (261u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_UNDERTEMP_CHOICE (262u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_POWER_FAILURE_CHOICE (263u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_SYSTEM_CLOCK_CHOICE (264u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_SYSTEM_INIT_CHOICE (265u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CONFIGURATION_CHOICE (266u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_OVERCURRENT_DETECTION_CHOICE (267u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_EEPROM_RW_CHOICE (268u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ADC_CLOCK_CHOICE (269u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ILLEGAL_OPCODE_CHOICE (270u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RESET_WATCHDOG_CHOICE (271u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RESET_EMC_CHOICE (272u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ALL_LOGDATA_SINCE_RESET_CHOICE (512u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_AH_COUNTER_OVERALL_CHOICE (513u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_AH_COUNTER_CHARGING_CHOICE (514u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_AH_COUNTER_DISCHARGING_CHOICE (515u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ENERGY_COUNTER_OVERALL_CHOICE (516u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ENERGY_COUNTER_CHARGING_CHOICE (517u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_ENERGY_COUNTER_DISCHARGING_CHOICE (518u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUNTIME_OVERALL_CHOICE (528u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_CUR_IN_SPEC_LIMITS_CHOICE (529u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (530u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_VOLT_1_IN_SPEC_LIMITS_CHOICE (531u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_VOLT_1_OUT_SPEC_LIMITS_CHOICE (532u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_VOLT_2_IN_SPEC_LIMITS_CHOICE (533u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_VOLT_2_OUT_SPEC_LIMITS_CHOICE (534u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_VOLT_3_IN_SPEC_LIMITS_CHOICE (535u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_VOLT_3_OUT_SPEC_LIMITS_CHOICE (536u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (537u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (538u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_OVERCUR_POS_ACTIVATED_CHOICE (539u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_RUN_OVERCUR_NEG_ACTIVATED_CHOICE (540u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CURRENT_MAXIMUM_CHOICE (545u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_CURRENT_MINIMUM_CHOICE (546u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_U1_MAXIMUM_CHOICE (547u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_U1_MINIMUM_CHOICE (548u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_U2_MAXIMUM_CHOICE (549u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_U2_MINIMUM_CHOICE (550u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_U3_MAXIMUM_CHOICE (551u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_U3_MINIMUM_CHOICE (552u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_TEMP_MAXIMUM_CHOICE (553u)
#define HV_CURRENT_IVT_MSG_CMD__30_RESET_ITEM_RESET_TEMP_MINIMUM_CHOICE (554u)

#define HV_CURRENT_IVT_MSG_CMD__3A_RESTART_TO_BITRATE_1000K_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_CMD__3A_RESTART_TO_BITRATE_500K_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_CMD__3A_RESTART_TO_BITRATE_250K_CHOICE (8u)

#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ALL_MEAS_ERRORS_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_ADC_INTERRUPT_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_OVERFLOW_ADC_CH_1_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_UNDERFLOW_ADC_CH_1_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_OVERFLOW_ADC_CH_2_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_UNDERFLOW_ADC_CH_2_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_VREF_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_CUR_MEAS_IMPLAUSIBLE_CHOICE (7u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_THERMAL_EMF_CORRECTION_CHOICE (8u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_CUR_MEAS_I1_OPENCIRC_CHOICE (9u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_VOLT_MEAS_U1_OPENCIRC_CHOICE (10u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_VOLT_MEAS_U2_OPENCIRC_CHOICE (11u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_VOLT_MEAS_U3_OPENCIRC_CHOICE (12u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_NTC_H_OPENCIRC_CHOICE (13u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_NTC_I_OPENCIRC_CHOICE (14u)
#define HV_CURRENT_IVT_MSG_CMD__40_GET_MEASERROR_ITEM_GET_ERROR_CALIBRATION_DATA_CHOICE (15u)

#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ALL_SYSTEM_ERRORS_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_CODE_CRC_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_CODE_PARAMETER_CRC_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_CAN__BUS_RECEIVE_DATA_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_CAN_BUS_TRANSMIT_DATA_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_OVERTEMP_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_UNDERTEMP_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_POWER_FAILURE_CHOICE (7u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_SYSTEM_CLOCK_CHOICE (8u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_SYSTEM_INIT_CHOICE (9u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_CONFIGURATION_CHOICE (10u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_OVERCURRENT_DETECTION_CHOICE (11u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_EEPROM_RW_CHOICE (12u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_ADC_CLOCK_CHOICE (13u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_RESET_ILLEGAL_OPCODE_CHOICE (14u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_RESET_WATCHDOG_CHOICE (15u)
#define HV_CURRENT_IVT_MSG_CMD__41_GET_SYSTEMERROR_ITEM_GET_ERROR_RESET_EMC_CHOICE (16u)

#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_OVERALL_LOGDATA_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_AH_COUNTER_OVERALL_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_AH_COUNTER_CHARGING_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_AH_COUNTER_DISCHARGING_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUNTIME_OVERALL_CHOICE (16u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_VOLT1_IN_SPEC_LIMITS_CHOICE (19u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_VOLT1_OUT_SPEC_LIMITS_CHOICE (20u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_VOLT2_IN_SPEC_LIMITS_CHOICE (21u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_VOLT2_OUT_SPEC_LIMITS_CHOICE (22u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_VOLT3_IN_SPEC_LIMITS_CHOICE (23u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_VOLT3_OUT_SPEC_LIMITS_CHOICE (24u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_OVERCUR_POS_ACTIVATED_CHOICE (27u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_RUN_OVERCUR_NEG_ACTIVATED_CHOICE (28u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_CURRENT_MAXIMUM_CHOICE (33u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_CURRENT_MINIMUM_CHOICE (34u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_U1_MAXMIMUM_CHOICE (35u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_U1_MINIMUM_CHOICE (36u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_U2_MAXIMUM_CHOICE (37u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_U2_MINIMUM_CHOICE (38u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_U3_MAXMIMUM__CHOICE (39u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_U3_MINIMUM_CHOICE (40u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_TEMPERATURE_MAXIMUM_CHOICE (41u)
#define HV_CURRENT_IVT_MSG_CMD__42_GET_ALLLOGDATA_ITEM_GET_TEMPERATURE_MINIMUM_CHOICE (42u)

#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_OVERALL_LOGDATA_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_AH_COUNTER_OVERALL_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_AH_COUNTER_CHARGING_CHOICE (2u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_AH_COUNTER_DISCHARGING_CHOICE (3u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_ENERGY_COUNTER_OVERALL_CHOICE (4u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_ENERGY_COUNTER_CHARGING_CHOICE (5u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_ENERGY_COUNTER_DISCHARGING_CHOICE (6u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUNTIME_OVERALL_CHOICE (16u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_CUR_IN_SPEC_LIMITS_CHOICE (17u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_CUR_OUT_SPEC_LIMITS_CHOICE (18u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_VOLT1_IN_SPEC_LIMITS_CHOICE (19u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_VOLT1_OUT_SPEC_LIMITS_CHOICE (20u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_VOLT2_IN_SPEC_LIMITS_CHOICE (21u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_VOLT2_OUT_SPEC_LIMITS_CHOICE (22u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_VOLT3_IN_SPEC_LIMITS_CHOICE (23u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_VOLT3_OUT_SPEC_LIMITS_CHOICE (24u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_TEMP_IN_SPEC_LIMITS_CHOICE (25u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_TEMP_OUT_SPEC_LIMITS_CHOICE (26u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_OVERCUR_POS_ACTIVATED_CHOICE (27u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_RUN_OVERCUR_NEG_ACTIVATED_CHOICE (28u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_CURRENT_MAXIMUM_CHOICE (33u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_CURRENT_MINIMUM_CHOICE (34u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_U1_MAXMIMUM_CHOICE (35u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_U1_MINIMUM_CHOICE (36u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_U2_MAXIMUM_CHOICE (37u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_U2_MINIMUM_CHOICE (38u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_U3_MAXMIMUM__CHOICE (39u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_U3_MINIMUM_CHOICE (40u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_TEMPERATURE_MAXIMUM_CHOICE (41u)
#define HV_CURRENT_IVT_MSG_CMD__43_GET_LOGDATA_ITEM_GET_TEMPERATURE_MINIMUM_CHOICE (42u)

#define HV_CURRENT_IVT_MSG_CMD__20_CONF_TRIGGERMODE_I_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__20_CONF_TRIGGERMODE_I_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__20_CONF_TRIGGERMODE_I_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__21_CONF_TRIGGERMODE_U1_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__21_CONF_TRIGGERMODE_U1_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__21_CONF_TRIGGERMODE_U1_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__22_CONF_TRIGGERMODE_U2_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__22_CONF_TRIGGERMODE_U2_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__22_CONF_TRIGGERMODE_U2_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__23_CONF_TRIGGERMODE_U3_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__23_CONF_TRIGGERMODE_U3_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__23_CONF_TRIGGERMODE_U3_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__24_CONF_TRIGGERMODE_T_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__24_CONF_TRIGGERMODE_T_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__24_CONF_TRIGGERMODE_T_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__25_CONF_TRIGGERMODE_W_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__25_CONF_TRIGGERMODE_W_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__25_CONF_TRIGGERMODE_W_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__26_CONF_TRIGGERMODE_AS_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__26_CONF_TRIGGERMODE_AS_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__26_CONF_TRIGGERMODE_AS_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__27_CONF_TRIGGERMODE_WH_DISABLED_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__27_CONF_TRIGGERMODE_WH_TRIGGERED_CHOICE (1u)
#define HV_CURRENT_IVT_MSG_CMD__27_CONF_TRIGGERMODE_WH_CYCLIC_CHOICE (2u)

#define HV_CURRENT_IVT_MSG_CMD__34_ACTUAL_MODE_STOP_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__34_ACTUAL_MODE_START_CHOICE (1u)

#define HV_CURRENT_IVT_MSG_CMD__34_STARTUP_MODE_STOP_CHOICE (0u)
#define HV_CURRENT_IVT_MSG_CMD__34_STARTUP_MODE_START_CHOICE (1u)

/* Indexes */
#define HV_CURRENT_IVT_MSG_RESULT_WH_INDEX 0
#define HV_CURRENT_IVT_MSG_RESULT_AS_INDEX 1
#define HV_CURRENT_IVT_MSG_RESULT_W_INDEX 2
#define HV_CURRENT_IVT_MSG_RESPONSE_INDEX 3
#define HV_CURRENT_IVT_MSG_RESULT_T_INDEX 4
#define HV_CURRENT_IVT_MSG_RESULT_U3_INDEX 5
#define HV_CURRENT_IVT_MSG_RESULT_U2_INDEX 6
#define HV_CURRENT_IVT_MSG_RESULT_U1_INDEX 7
#define HV_CURRENT_IVT_MSG_RESULT_I_INDEX 8
#define HV_CURRENT_IVT_MSG_CMD_INDEX 9


#define hv_current_MESSAGE_COUNT 10

#ifndef CANLIB_DEVICE_T
#define CANLIB_DEVICE_T
typedef struct {
    void* message;
    void* _converted;
    void* _raw;
    int _size_raw;
    int _size_converted;
} device_t;
void device_init(device_t *device);
void device_preallocate(device_t *device, int bytes);
void device_free(device_t *device);
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size);
#endif // CANLIB_DEVICE_T

#ifdef CANLIB_DEVICE_IMPLEMENTATION
#undef CANLIB_DEVICE_IMPLEMENTATION
void device_init(device_t *device) {
    device->message = NULL;
    device->_converted = NULL;
    device->_raw = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_preallocate(device_t *device, int bytes){
    if(device->_size_raw > 0)
        free(device->_raw);
    if(device->_size_converted > 0)
        free(device->_converted);
    device->_raw = malloc(bytes);
    device->_converted = malloc(bytes);
    device->_size_converted = device->_size_raw = bytes;
}
void device_free(device_t *device) {
    free(device->_raw);
    free(device->_converted);
    device->message = NULL;
    device->_raw = NULL;
    device->_converted = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size) {
    device->_raw = raw;
    device->_converted = converted;
    device->_size_raw = raw_size;
    device->_size_converted = converted_size;
}
#endif // CANLIB_DEVICE_IMPLEMENTATION

void hv_current_devices_deserialize_from_id(
    device_t* device,
    uint16_t message_id,
    uint8_t* data
#ifdef CANLIB_TIMESTAMP
    , uint64_t timestamp
#endif // CANLIB_TIMESTAMP
);

int hv_current_message_name_from_id(uint16_t id, char* buffer);
int hv_current_index_from_id(uint16_t id);
int hv_current_id_from_index(int index);

typedef enum {
	hv_current_ivt_msg_result_wh_ivt_id_result_wh_Vt_Result_Wh = 7,
} hv_current_ivt_msg_result_wh_ivt_id_result_wh;

typedef enum {
	hv_current_ivt_msg_result_as_ivt_id_result_as_Vt_Result_As = 6,
} hv_current_ivt_msg_result_as_ivt_id_result_as;

typedef enum {
	hv_current_ivt_msg_result_w_ivt_id_result_w_Vt_Result_W = 5,
} hv_current_ivt_msg_result_w_ivt_id_result_w;

typedef enum {
	hv_current_ivt_msg_response_ivt_id_response_Resp_Cmd_Wrong_Command = 255,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_ALIVE = 191,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_ArtNr = 188,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_Serialnumber = 187,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_SW_VERSION = 186,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_DEVICE_ID = 185,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_THRESHOLD_NEG = 182,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_THRESHOLD_POS = 181,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_MODE = 180,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_OC_TEST_TIME = 179,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_STORE = 178,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_TRIGGER = 177,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Get_Set_Reset_Error_Logdata = 176,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_Wh = 167,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_As = 166,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_W = 165,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_T = 164,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_U3 = 163,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_U2 = 162,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_U1 = 161,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Config_Result_I = 160,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Response = 159,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Command = 157,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_Wh = 151,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_As = 150,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_W = 149,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_I = 144,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_T = 148,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_U3 = 147,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_U2 = 146,
	hv_current_ivt_msg_response_ivt_id_response_Resp_CAN_ID_Res_U1 = 145,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Error_Log_Logdata_Since_Res = 131,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Error_Log_Overall_Logdata = 130,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Error_Log_System_Error = 129,
	hv_current_ivt_msg_response_ivt_id_response_Resp_Error_Log_Measurement_Error = 128,
} hv_current_ivt_msg_response_ivt_id_response;

typedef enum {
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_calibration_data = 15,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_ntc_I_OpenCirc = 14,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_ntc_h_OpenCirc = 13,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_meas_U3_OpenCirc = 12,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_meas_U2_OpenCirc = 11,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_meas_U1_OpenCirc = 10,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_meas_I1_OpenCirc = 9,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp__error_therm_EMF_correction = 8,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_cur_meas_implausible = 7,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_Vref = 6,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_Underflow_ADC_ch_2 = 5,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_Overflow_ADC_ch_2 = 4,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_Underflow_ADC_ch_1 = 3,
	hv_current_ivt_msg_response__80_resp_measerror_item_Reso_error_Overflow_ADC_ch_1 = 2,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resp_error_ADC_interrupt = 1,
	hv_current_ivt_msg_response__80_resp_measerror_item_Resonse_all_meas_errors = 0,
} hv_current_ivt_msg_response__80_resp_measerror_item;

typedef enum {
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Reset_EMC = 16,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Reset_Watchdog = 15,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Reset_illegal_opcode = 14,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_ADC_Clock = 13,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_eeprom_rw = 12,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Overcurrent_detection = 11,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Configuration = 10,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_System_Init = 9,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_System_Clock = 8,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Power_failure = 7,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Undertemp = 6,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Overtemp = 5,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_CAN_bus_transmit_Data = 4,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_CAN_bus_receive_Data = 3,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_Parameter_CRC = 2,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resp_error_code_CRC = 1,
	hv_current_ivt_msg_response__81_resp_systemerror_item_Resonse_all_SystemErrors = 0,
} hv_current_ivt_msg_response__81_resp_systemerror_item;

typedef enum {
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_temp_minimum = 42,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_temp_maxmimum = 41,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_U3_minimum = 40,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_U3_maximum = 39,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_U2_minimum = 38,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_U2_maxmimum = 37,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_U1_minimum = 36,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_U1_maximum = 35,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_current_minimum = 34,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_current_maximum = 33,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_oc_negative_activated = 28,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_oc_positive_activated = 27,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_temp_out_spec_limits = 26,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_temp_in_spec_limits = 25,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_volt_3_out_spec_limits = 24,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_volt_3_in_spec_limits = 23,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_volt_2_out_spec_limits = 22,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_volt_2_in_spec_limits = 21,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_volt_1_out_spec_limits = 20,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_volt_1_in_spec_limits = 19,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_cur_out_spec_limits = 18,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_cur_in_spec_limits = 17,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_run_overall = 16,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_energy_counter_discharging = 6,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_energy_counter_charging = 5,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_energy_counter_overall = 4,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_Ah_counter_discharging = 3,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_Ah_counter_charging = 2,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Resp_Ah_counter_overall = 1,
	hv_current_ivt_msg_response__82_resp_alllogdata_item_Response_on_Overall_Logdata = 0,
} hv_current_ivt_msg_response__82_resp_alllogdata_item;

typedef enum {
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_temp_minimum = 42,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_temp_maxmimum = 41,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_U3_minimum = 40,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_U3_maximum = 39,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_U2_minimum = 38,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_U2_maxmimum = 37,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_U1_minimum = 36,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_U1_maximum = 35,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_current_minimum = 34,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_current_maximum = 33,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_oc_negative_activated = 28,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_oc_positive_activated = 27,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_temp_out_spec_limits = 26,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_temp_in_spec_limits = 25,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_volt_3_out_spec_limits = 24,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_volt_3_in_spec_limits = 23,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_volt_2_out_spec_limits = 22,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_volt_2_in_spec_limits = 21,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_volt_1_out_spec_limits = 20,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_volt_1_in_spec_limits = 19,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_cur_out_spec_limits = 18,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_cur_in_spec_limits = 17,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_run_overall = 16,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_energy_counter_discharging = 6,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_energy_counter_charging = 5,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_energy_counter_overall = 4,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_Ah_counter_discharging = 3,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_Ah_counter_charging = 2,
	hv_current_ivt_msg_response__83_resp_logdata_item_Resp_Ah_counter_overall = 1,
	hv_current_ivt_msg_response__83_resp_logdata_item_Response_all_Logdata_SinceReset = 0,
} hv_current_ivt_msg_response__83_resp_logdata_item;

typedef enum {
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_temp_minimum = 554,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_temp_maximum = 553,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_U3_minimum = 552,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_U3_maximum = 551,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_U2_minimum = 550,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_U2_maximum = 549,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_U1_minimum = 548,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_U1_maximum = 547,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Current_minimum = 546,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Current_maximum = 545,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_overcur_neg_activated = 540,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_overcur_pos_activated = 539,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_temp_out_spec_limits = 538,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_temp_in_spec_limits = 537,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_volt_3_out_spec_limits = 536,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_volt_3_in_spec_limits = 535,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_volt_2_out_spec_limits = 534,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_volt_2_in_spec_limits = 533,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_volt_1_out_spec_limits = 532,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_volt_1_in_spec_limits = 531,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_cur_out_spec_limits = 530,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Run_cur_in_spec_limits = 529,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Runtime_overall = 528,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Energy_counter_discharging = 518,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Energy_counter_charging = 517,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Energy_counter_overall = 516,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Ah_counter_discharging = 515,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Ah_counter_charging = 514,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Ah_counter_overall = 513,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_all_Logdata_Since_Reset = 512,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Reset_EMC = 272,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Reset_Watchdog = 271,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_illegal_opcode = 270,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_ADC_Clock = 269,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_eeprom_rw = 268,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_overcurrent_detection = 267,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_configuration = 266,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_system_init = 265,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_system_clock = 264,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_power_failure = 263,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_undertemp = 262,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_overtemp = 261,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_CAN_bus_transmit_Data = 260,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_CAN_bus_receive_Data = 259,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Parameter_CRC = 258,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_Code_CRC = 257,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_all_System_errors = 256,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_calibration_data_ = 15,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_ntc_I_OpenCircuit = 14,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_ntc_h_OpenCircuit = 13,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_voltage_measU3_OpenCircuit = 12,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_voltage_measU2_OpenCircuit = 11,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_voltage_measU1_OpenCircuit = 10,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_current_measI1_OpenCircuit = 9,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_thermal_EMF_correction = 8,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_error_current_implausible = 7,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_error_Vref = 6,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_error_Underflow_ADC_ch2 = 5,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_error_Overflow_ADC_ch2 = 4,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_error_Underflow_ADC_ch1 = 3,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_error_Overflow_ADC_ch1 = 2,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_error_ADC_interrupt = 1,
	hv_current_ivt_msg_response__b0_resp_reset_item_Reset_all_measurement_errors = 0,
} hv_current_ivt_msg_response__b0_resp_reset_item;

typedef enum {
	hv_current_ivt_msg_response__b9_resp_device_type_IVT_S = 2,
	hv_current_ivt_msg_response__b9_resp_device_type_IVT_Mod = 1,
} hv_current_ivt_msg_response__b9_resp_device_type;

typedef enum {
	hv_current_ivt_msg_response__a0_resp_triggermode_i_CYCLIC = 2,
	hv_current_ivt_msg_response__a0_resp_triggermode_i_TRIGGERED = 1,
	hv_current_ivt_msg_response__a0_resp_triggermode_i_DISABLED = 0,
} hv_current_ivt_msg_response__a0_resp_triggermode_i;

typedef enum {
	hv_current_ivt_msg_response__a1_resp_triggermode_u1_CYCLIC = 2,
	hv_current_ivt_msg_response__a1_resp_triggermode_u1_TRIGGERED = 1,
	hv_current_ivt_msg_response__a1_resp_triggermode_u1_DISABLED = 0,
} hv_current_ivt_msg_response__a1_resp_triggermode_u1;

typedef enum {
	hv_current_ivt_msg_response__a2_resp_triggermode_u2_CYCLIC = 2,
	hv_current_ivt_msg_response__a2_resp_triggermode_u2_TRIGGERED = 1,
	hv_current_ivt_msg_response__a2_resp_triggermode_u2_DISABLED = 0,
} hv_current_ivt_msg_response__a2_resp_triggermode_u2;

typedef enum {
	hv_current_ivt_msg_response__a3_resp_triggermode_u3_CYCLIC = 2,
	hv_current_ivt_msg_response__a3_resp_triggermode_u3_TRIGGERED = 1,
	hv_current_ivt_msg_response__a3_resp_triggermode_u3_DISABLED = 0,
} hv_current_ivt_msg_response__a3_resp_triggermode_u3;

typedef enum {
	hv_current_ivt_msg_response__a4_resp_triggermode_t_CYCLIC = 2,
	hv_current_ivt_msg_response__a4_resp_triggermode_t_TRIGGERED = 1,
	hv_current_ivt_msg_response__a4_resp_triggermode_t_DISABLED = 0,
} hv_current_ivt_msg_response__a4_resp_triggermode_t;

typedef enum {
	hv_current_ivt_msg_response__a5_resp_triggermode_w_CYCLIC = 2,
	hv_current_ivt_msg_response__a5_resp_triggermode_w_TRIGGERED = 1,
	hv_current_ivt_msg_response__a5_resp_triggermode_w_DISABLED = 0,
} hv_current_ivt_msg_response__a5_resp_triggermode_w;

typedef enum {
	hv_current_ivt_msg_response__a6_resp_triggermode_as_CYCLIC = 2,
	hv_current_ivt_msg_response__a6_resp_triggermode_as_TRIGGERED = 1,
	hv_current_ivt_msg_response__a6_resp_triggermode_as_DISABLED = 0,
} hv_current_ivt_msg_response__a6_resp_triggermode_as;

typedef enum {
	hv_current_ivt_msg_response__a7_resp_triggermode_wh_CYCLIC = 2,
	hv_current_ivt_msg_response__a7_resp_triggermode_wh_TRIGGERED = 1,
	hv_current_ivt_msg_response__a7_resp_triggermode_wh_DISABLED = 0,
} hv_current_ivt_msg_response__a7_resp_triggermode_wh;

typedef enum {
	hv_current_ivt_msg_response__b4_resp_actual_mode_RUN = 1,
	hv_current_ivt_msg_response__b4_resp_actual_mode_STOP = 0,
} hv_current_ivt_msg_response__b4_resp_actual_mode;

typedef enum {
	hv_current_ivt_msg_response__b9_resp_device_current_2500_A = 2500,
	hv_current_ivt_msg_response__b9_resp_device_current_1000_A = 1000,
	hv_current_ivt_msg_response__b9_resp_device_current_500_A = 500,
	hv_current_ivt_msg_response__b9_resp_device_current_300_A = 300,
	hv_current_ivt_msg_response__b9_resp_device_current_100_A = 100,
} hv_current_ivt_msg_response__b9_resp_device_current;

typedef enum {
	hv_current_ivt_msg_response__b4_resp_startup_mode_Run = 1,
	hv_current_ivt_msg_response__b4_resp_startup_mode_Stop = 0,
} hv_current_ivt_msg_response__b4_resp_startup_mode;

typedef enum {
	hv_current_ivt_msg_response__b9_resp_device_voltage_chan_3_Channels = 3,
	hv_current_ivt_msg_response__b9_resp_device_voltage_chan_0_Channels = 0,
} hv_current_ivt_msg_response__b9_resp_device_voltage_chan;

typedef enum {
	hv_current_ivt_msg_response__b9_resp_device_toi_I = 3,
} hv_current_ivt_msg_response__b9_resp_device_toi;

typedef enum {
	hv_current_ivt_msg_response__b9_resp_device_com_CAN_2___not_terminated = 2,
	hv_current_ivt_msg_response__b9_resp_device_com_CAN_1___terminated = 1,
	hv_current_ivt_msg_response__b9_resp_device_com_none = 0,
} hv_current_ivt_msg_response__b9_resp_device_com;

typedef enum {
	hv_current_ivt_msg_response__b9_resp_device_v_supply_12__24_V_nominal_supply_voltage = 1,
} hv_current_ivt_msg_response__b9_resp_device_v_supply;

typedef enum {
	hv_current_ivt_msg_result_t_ivt_id_result_t_Vt_Result_T = 4,
} hv_current_ivt_msg_result_t_ivt_id_result_t;

typedef enum {
	hv_current_ivt_msg_result_u3_ivt_id_result_u3_Vt_Result_U3 = 3,
} hv_current_ivt_msg_result_u3_ivt_id_result_u3;

typedef enum {
	hv_current_ivt_msg_result_u2_ivt_id_result_u2_Vt_Result_U2 = 2,
} hv_current_ivt_msg_result_u2_ivt_id_result_u2;

typedef enum {
	hv_current_ivt_msg_result_u1_ivt_id_result_u1_Vt_Result_U1 = 1,
} hv_current_ivt_msg_result_u1_ivt_id_result_u1;

typedef enum {
	hv_current_ivt_msg_result_i_ivt_id_result_i_Vt_Result_I = 0,
} hv_current_ivt_msg_result_i_ivt_id_result_i;

typedef enum {
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_ArtNr = 124,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_SN = 123,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_SW_Version = 122,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_DEVICE_ID = 121,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_THRESHOLD_NEG = 118,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_THRESHOLD_POS = 117,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_MODE = 116,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_cmd_and_info_OC_TEST_TIME = 115,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_Wh = 103,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_As = 102,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_W = 101,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_T = 100,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_U3 = 99,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_U2 = 98,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_U1 = 97,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Config_Res_I = 96,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Response = 95,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Command = 93,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_Wh = 87,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_As = 86,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_W = 85,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_T = 84,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_U3 = 83,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_U2 = 82,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_U1 = 81,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_CAN_ID_Res_I = 80,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Logdata_Since_Reset = 67,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Overall_Logdata = 66,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_System_Errors = 65,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Get_Measurement_Errors = 64,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_RESTART = 63,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_RESTART_to_default = 61,
	hv_current_ivt_msg_cmd_ivt_id_cmd_RESTART_to_Bitrate = 58,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_THRESHOLD_neg = 54,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_THRESHOLD_pos = 53,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_I = 32,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_I = 16,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE = 52,
	hv_current_ivt_msg_cmd_ivt_id_cmd_START_OC_TEST = 51,
	hv_current_ivt_msg_cmd_ivt_id_cmd_STORE = 50,
	hv_current_ivt_msg_cmd_ivt_id_cmd_TRIGGER = 49,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Reset_Err_Log = 48,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_Wh = 39,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_As = 38,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_W = 37,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_Wh = 23,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_As = 22,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_W = 21,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_T = 20,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_U3 = 35,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Response = 31,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Cmd = 29,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_U3 = 19,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_U2 = 18,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_T = 36,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_U2 = 34,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_MODE_Result_U1 = 33,
	hv_current_ivt_msg_cmd_ivt_id_cmd_Set_CAN_ID_Result_U1 = 17,
} hv_current_ivt_msg_cmd_ivt_id_cmd;

typedef enum {
	hv_current_ivt_msg_cmd__30_reset_item_Reset_temp_minimum = 554,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_temp_maximum = 553,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_U3_minimum = 552,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_U3_maximum = 551,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_U2_minimum = 550,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_U2_maximum = 549,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_U1_minimum = 548,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_U1_maximum = 547,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Current_minimum = 546,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Current_maximum = 545,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_overcur_neg_activated = 540,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_overcur_pos_activated = 539,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_temp_out_spec_limits = 538,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_temp_in_spec_limits = 537,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_volt_3_out_spec_limits = 536,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_volt_3_in_spec_limits = 535,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_volt_2_out_spec_limits = 534,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_volt_2_in_spec_limits = 533,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_volt_1_out_spec_limits = 532,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_volt_1_in_spec_limits = 531,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_cur_out_spec_limits = 530,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Run_cur_in_spec_limits = 529,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Runtime_overall = 528,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Energy_counter_discharging = 518,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Energy_counter_charging = 517,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Energy_counter_overall = 516,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Ah_counter_discharging = 515,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Ah_counter_charging = 514,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Ah_counter_overall = 513,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_all_Logdata_Since_Reset = 512,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Reset_EMC = 272,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Reset_Watchdog = 271,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_illegal_opcode = 270,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_ADC_Clock = 269,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_eeprom_rw = 268,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_overcurrent_detection = 267,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_configuration = 266,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_system_init = 265,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_system_clock = 264,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_power_failure = 263,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_undertemp = 262,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_overtemp = 261,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_CAN_bus_transmit_Data = 260,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_CAN_bus_receive_Data = 259,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Parameter_CRC = 258,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_Code_CRC = 257,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_all_System_errors = 256,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_calibration_data_ = 15,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_ntc_I_OpenCircuit = 14,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_ntc_h_OpenCircuit = 13,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_voltage_measU3_OpenCircuit = 12,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_voltage_measU2_OpenCircuit = 11,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_voltage_measU1_OpenCircuit = 10,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_current_measI1_OpenCircuit = 9,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_thermal_EMF_correction = 8,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_error_current_implausible = 7,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_error_Vref = 6,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_error_Underflow_ADC_ch2 = 5,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_error_Overflow_ADC_ch2 = 4,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_error_Underflow_ADC_ch1 = 3,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_error_Overflow_ADC_ch1 = 2,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_error_ADC_interrupt = 1,
	hv_current_ivt_msg_cmd__30_reset_item_Reset_all_measurement_errors = 0,
} hv_current_ivt_msg_cmd__30_reset_item;

typedef enum {
	hv_current_ivt_msg_cmd__3a_restart_to_bitrate_250k = 8,
	hv_current_ivt_msg_cmd__3a_restart_to_bitrate_500k = 4,
	hv_current_ivt_msg_cmd__3a_restart_to_bitrate_1000k = 2,
} hv_current_ivt_msg_cmd__3a_restart_to_bitrate;

typedef enum {
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_calibration_data = 15,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_ntc_I_OpenCirc = 14,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_ntc_h_OpenCirc = 13,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_volt_meas_U3_OpenCirc = 12,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_volt_meas_U2_OpenCirc = 11,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_volt_meas_U1_OpenCirc = 10,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_cur_meas_I1_OpenCirc = 9,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_thermal_EMF_correction = 8,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_cur_meas_implausible = 7,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_Vref = 6,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_Underflow_ADC_ch_2 = 5,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_Overflow_ADC_ch_2 = 4,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_Underflow_ADC_ch_1 = 3,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_Overflow_ADC_ch_1 = 2,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_error_ADC_interrupt = 1,
	hv_current_ivt_msg_cmd__40_get_measerror_item_Get_all_meas_Errors = 0,
} hv_current_ivt_msg_cmd__40_get_measerror_item;

typedef enum {
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_reset_EMC = 16,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_reset_Watchdog = 15,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_reset_illegal_opcode = 14,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_ADC_clock = 13,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_eeprom_rw = 12,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_overcurrent_detection = 11,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_configuration = 10,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_system_init = 9,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_system_clock = 8,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_power_failure = 7,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_undertemp = 6,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_overtemp = 5,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_CAN_bus_transmit_Data = 4,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_CAN__bus_receive_Data = 3,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_Code_Parameter_CRC = 2,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_error_Code_CRC = 1,
	hv_current_ivt_msg_cmd__41_get_systemerror_item_Get_all_System_errors = 0,
} hv_current_ivt_msg_cmd__41_get_systemerror_item;

typedef enum {
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Temperature_minimum = 42,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Temperature_maximum = 41,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_U3_minimum = 40,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_U3_maxmimum_ = 39,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_U2_minimum = 38,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_U2_maximum = 37,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_U1_minimum = 36,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_U1_maxmimum = 35,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_current_minimum = 34,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_current_maximum = 33,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_overcur_neg_activated = 28,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_overcur_pos_activated = 27,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_temp_out_spec_limits = 26,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_temp_in_spec_limits = 25,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_volt3_out_spec_limits = 24,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_volt3_in_spec_limits = 23,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_volt2_out_spec_limits = 22,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_volt2_in_spec_limits = 21,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_volt1_out_spec_limits = 20,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_volt1_in_spec_limits = 19,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_run_cur_out_spec_limits = 18,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Run_cur_in_spec_limits = 17,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Runtime_overall = 16,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Energy_counter_discharging = 6,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Energy_counter_charging = 5,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Energy_counter_overall = 4,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Ah_counter_discharging = 3,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Ah_counter_charging = 2,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Ah_counter_overall = 1,
	hv_current_ivt_msg_cmd__42_get_alllogdata_item_Get_Overall_Logdata = 0,
} hv_current_ivt_msg_cmd__42_get_alllogdata_item;

typedef enum {
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Temperature_minimum = 42,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Temperature_maximum = 41,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_U3_minimum = 40,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_U3_maxmimum_ = 39,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_U2_minimum = 38,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_U2_maximum = 37,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_U1_minimum = 36,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_U1_maxmimum = 35,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_current_minimum = 34,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_current_maximum = 33,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_overcur_neg_activated = 28,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_overcur_pos_activated = 27,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_temp_out_spec_limits = 26,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_temp_in_spec_limits = 25,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_volt3_out_spec_limits = 24,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_volt3_in_spec_limits = 23,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_volt2_out_spec_limits = 22,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_volt2_in_spec_limits = 21,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_volt1_out_spec_limits = 20,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_volt1_in_spec_limits = 19,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_run_cur_out_spec_limits = 18,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Run_cur_in_spec_limits = 17,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Runtime_overall = 16,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Energy_counter_discharging = 6,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Energy_counter_charging = 5,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Energy_counter_overall = 4,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Ah_counter_discharging = 3,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Ah_counter_charging = 2,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Ah_counter_overall = 1,
	hv_current_ivt_msg_cmd__43_get_logdata_item_Get_Overall_Logdata = 0,
} hv_current_ivt_msg_cmd__43_get_logdata_item;

typedef enum {
	hv_current_ivt_msg_cmd__20_conf_triggermode_i_CYCLIC = 2,
	hv_current_ivt_msg_cmd__20_conf_triggermode_i_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__20_conf_triggermode_i_DISABLED = 0,
} hv_current_ivt_msg_cmd__20_conf_triggermode_i;

typedef enum {
	hv_current_ivt_msg_cmd__21_conf_triggermode_u1_CYCLIC = 2,
	hv_current_ivt_msg_cmd__21_conf_triggermode_u1_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__21_conf_triggermode_u1_DISABLED = 0,
} hv_current_ivt_msg_cmd__21_conf_triggermode_u1;

typedef enum {
	hv_current_ivt_msg_cmd__22_conf_triggermode_u2_CYCLIC = 2,
	hv_current_ivt_msg_cmd__22_conf_triggermode_u2_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__22_conf_triggermode_u2_DISABLED = 0,
} hv_current_ivt_msg_cmd__22_conf_triggermode_u2;

typedef enum {
	hv_current_ivt_msg_cmd__23_conf_triggermode_u3_CYCLIC = 2,
	hv_current_ivt_msg_cmd__23_conf_triggermode_u3_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__23_conf_triggermode_u3_DISABLED = 0,
} hv_current_ivt_msg_cmd__23_conf_triggermode_u3;

typedef enum {
	hv_current_ivt_msg_cmd__24_conf_triggermode_t_CYCLIC = 2,
	hv_current_ivt_msg_cmd__24_conf_triggermode_t_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__24_conf_triggermode_t_DISABLED = 0,
} hv_current_ivt_msg_cmd__24_conf_triggermode_t;

typedef enum {
	hv_current_ivt_msg_cmd__25_conf_triggermode_w_CYCLIC = 2,
	hv_current_ivt_msg_cmd__25_conf_triggermode_w_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__25_conf_triggermode_w_DISABLED = 0,
} hv_current_ivt_msg_cmd__25_conf_triggermode_w;

typedef enum {
	hv_current_ivt_msg_cmd__26_conf_triggermode_as_CYCLIC = 2,
	hv_current_ivt_msg_cmd__26_conf_triggermode_as_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__26_conf_triggermode_as_DISABLED = 0,
} hv_current_ivt_msg_cmd__26_conf_triggermode_as;

typedef enum {
	hv_current_ivt_msg_cmd__27_conf_triggermode_wh_CYCLIC = 2,
	hv_current_ivt_msg_cmd__27_conf_triggermode_wh_TRIGGERED = 1,
	hv_current_ivt_msg_cmd__27_conf_triggermode_wh_DISABLED = 0,
} hv_current_ivt_msg_cmd__27_conf_triggermode_wh;

typedef enum {
	hv_current_ivt_msg_cmd__34_actual_mode_START = 1,
	hv_current_ivt_msg_cmd__34_actual_mode_STOP = 0,
} hv_current_ivt_msg_cmd__34_actual_mode;

typedef enum {
	hv_current_ivt_msg_cmd__34_startup_mode_START = 1,
	hv_current_ivt_msg_cmd__34_startup_mode_STOP = 0,
} hv_current_ivt_msg_cmd__34_startup_mode;

/**
 * Signals in message IVT_Msg_Result_Wh.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 7..7 (7..7 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_wh_ivt_id_result_wh ivt_id_result_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_wh;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 Wh)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_wh;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_wh_t;

/**
 * Signals in message IVT_Msg_Result_Wh.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 7..7 (7..7 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_wh_ivt_id_result_wh ivt_id_result_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_wh_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_wh_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_wh_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_wh_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_wh;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 Wh)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_wh;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_wh_converted_t;

/**
 * Signals in message IVT_Msg_Result_As.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 6..6 (6..6 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_as_ivt_id_result_as ivt_id_result_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_as;

    /**
     * Range: -21474836478..2147483647 (-21474836478..2147483647 As)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_as;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_as_t;

/**
 * Signals in message IVT_Msg_Result_As.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 6..6 (6..6 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_as_ivt_id_result_as ivt_id_result_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_as_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_as_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_as_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_as_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_as;

    /**
     * Range: -21474836478..2147483647 (-21474836478..2147483647 As)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_as;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_as_converted_t;

/**
 * Signals in message IVT_Msg_Result_W.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 5..5 (5..5 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_w_ivt_id_result_w ivt_id_result_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_w;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 W)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_w;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_w_t;

/**
 * Signals in message IVT_Msg_Result_W.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 5..5 (5..5 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_w_ivt_id_result_w ivt_id_result_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_w_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_w_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_w_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_w_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_w;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 W)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_w;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_w_converted_t;

/**
 * Signals in message IVT_Msg_Response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response_ivt_id_response ivt_id_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_trigger_spare;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ff_wrong_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _bf_restart_alive_cmd_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__80_resp_measerror_item _80_resp_measerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__81_resp_systemerror_item _81_resp_systemerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__82_resp_alllogdata_item _82_resp_alllogdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__83_resp_logdata_item _83_resp_logdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _90_resp_can_id_val_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _91_resp_can_id_val_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _92_resp_can_id_val_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _93_resp_can_id_val_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _94_resp_can_id_val_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _95_resp_can_id_val_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _96_resp_can_id_val_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _97_resp_can_id_val_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9d_resp_can_id_val_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9f_resp_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_sign_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_sign_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_sign_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_sign_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_sign_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_sign_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_sign_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_sign_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b0_resp_reset_item _b0_resp_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b2_resp_store_dummy;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b3_resp_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_type _b9_resp_device_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_major_hw;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bb_resp_serien_nr;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _bc_resp_art_n;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_endianess_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_endianess_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_endianess_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_endianess_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_endianess_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_endianess_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_endianess_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_endianess_wh;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a0_resp_triggermode_i _a0_resp_triggermode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a1_resp_triggermode_u1 _a1_resp_triggermode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a2_resp_triggermode_u2 _a2_resp_triggermode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a3_resp_triggermode_u3 _a3_resp_triggermode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a4_resp_triggermode_t _a4_resp_triggermode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a5_resp_triggermode_w _a5_resp_triggermode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a6_resp_triggermode_as _a6_resp_triggermode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a7_resp_triggermode_wh _a7_resp_triggermode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b4_resp_actual_mode _b4_resp_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_07_trigger_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b2_resp_store_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_minor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_current _b9_resp_device_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _80_resp_measerror_count_mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _81_resp_systemerror_count_mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _82_resp_alllogdata_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _83_resp_logdata_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a0_resp_cycletime_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a1_resp_cycletime_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a2_resp_cycletime_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a3_resp_cycletime_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a4_resp_cycletime_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a5_resp_cycletime_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a6_resp_cycletime_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a7_resp_cycletime_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_06_trigger_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_05_trigger_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_04_trigger_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_03_trigger_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_02_trigger_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_01_trigger_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_00_trigger_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b4_resp_startup_mode _b4_resp_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bf_restart_alive_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_revision;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _90_resp_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _91_resp_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _92_resp_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _93_resp_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _94_resp_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _95_resp_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _96_resp_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _97_resp_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9d_resp_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9f_resp_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b0_resp_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b4_resp_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_voltage_chan _b9_resp_device_voltage_chan;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_vear;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_toi _b9_resp_device_toi;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t _ba_resp_sw_ver_month;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_com _b9_resp_device_com;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_day;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_v_supply _b9_resp_device_v_supply;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_internal;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_response_t;

/**
 * Signals in message IVT_Msg_Response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response_ivt_id_response ivt_id_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_trigger_spare;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ff_wrong_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _bf_restart_alive_cmd_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__80_resp_measerror_item _80_resp_measerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__81_resp_systemerror_item _81_resp_systemerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__82_resp_alllogdata_item _82_resp_alllogdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__83_resp_logdata_item _83_resp_logdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _90_resp_can_id_val_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _91_resp_can_id_val_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _92_resp_can_id_val_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _93_resp_can_id_val_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _94_resp_can_id_val_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _95_resp_can_id_val_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _96_resp_can_id_val_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _97_resp_can_id_val_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9d_resp_can_id_val_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9f_resp_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a0_resp_sign_i : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a1_resp_sign_u1 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a2_resp_sign_u2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a3_resp_sign_u3 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a4_resp_sign_t : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a5_resp_sign_w : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a6_resp_sign_as : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a7_resp_sign_wh : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b0_resp_reset_item _b0_resp_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b2_resp_store_dummy;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b3_resp_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_type _b9_resp_device_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_major_hw;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bb_resp_serien_nr;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _bc_resp_art_n;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a0_resp_endianess_i : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a1_resp_endianess_u1 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a2_resp_endianess_u2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a3_resp_endianess_u3 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a4_resp_endianess_t : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a5_resp_endianess_w : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a6_resp_endianess_as : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _a7_resp_endianess_wh : 1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a0_resp_triggermode_i _a0_resp_triggermode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a1_resp_triggermode_u1 _a1_resp_triggermode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a2_resp_triggermode_u2 _a2_resp_triggermode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a3_resp_triggermode_u3 _a3_resp_triggermode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a4_resp_triggermode_t _a4_resp_triggermode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a5_resp_triggermode_w _a5_resp_triggermode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a6_resp_triggermode_as _a6_resp_triggermode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__a7_resp_triggermode_wh _a7_resp_triggermode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b4_resp_actual_mode _b4_resp_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_07_trigger_wh : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b2_resp_store_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_minor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_current _b9_resp_device_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _80_resp_measerror_count_mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _81_resp_systemerror_count_mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _82_resp_alllogdata_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _83_resp_logdata_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a0_resp_cycletime_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a1_resp_cycletime_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a2_resp_cycletime_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a3_resp_cycletime_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a4_resp_cycletime_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a5_resp_cycletime_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a6_resp_cycletime_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a7_resp_cycletime_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_06_trigger_as : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_05_trigger_w : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_04_trigger_t : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_03_trigger_u3 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_02_trigger_u2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_01_trigger_u1 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _b1_00_trigger_i : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b4_resp_startup_mode _b4_resp_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bf_restart_alive_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_revision;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _90_resp_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _91_resp_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _92_resp_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _93_resp_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _94_resp_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _95_resp_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _96_resp_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _97_resp_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9d_resp_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9f_resp_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b0_resp_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b4_resp_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_voltage_chan _b9_resp_device_voltage_chan;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_vear;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_toi _b9_resp_device_toi;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t _ba_resp_sw_ver_month;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_com _b9_resp_device_com;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_day;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_response__b9_resp_device_v_supply _b9_resp_device_v_supply;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_internal;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_response_converted_t;

/**
 * Signals in message IVT_Msg_Result_T.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 4..4 (4..4 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_t_ivt_id_result_t ivt_id_result_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_t;

    /**
     * Range: -21474836480..21474836470 (-2147483648..2147483647 Â°C)
     * Scale: 0.1
     * Offset: 0
     */
    int32_t ivt_result_t;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_t_t;

/**
 * Signals in message IVT_Msg_Result_T.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 4..4 (4..4 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_t_ivt_id_result_t ivt_id_result_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_t_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_t_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_t_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_t_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_t;

    /**
     * Range: -21474836480..21474836470 (-2147483648..2147483647 Â°C)
     * Scale: 0.1
     * Offset: 0
     */
    float ivt_result_t;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_t_converted_t;

/**
 * Signals in message IVT_Msg_Result_U3.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 3..3 (3..3 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_u3_ivt_id_result_u3 ivt_id_result_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_u3;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u3;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_u3_t;

/**
 * Signals in message IVT_Msg_Result_U3.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 3..3 (3..3 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_u3_ivt_id_result_u3 ivt_id_result_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u3_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u3_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u3_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u3_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_u3;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u3;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_u3_converted_t;

/**
 * Signals in message IVT_Msg_Result_U2.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_u2_ivt_id_result_u2 ivt_id_result_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_u2;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u2;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_u2_t;

/**
 * Signals in message IVT_Msg_Result_U2.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_u2_ivt_id_result_u2 ivt_id_result_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u2_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u2_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u2_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u2_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_u2;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u2;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_u2_converted_t;

/**
 * Signals in message IVT_Msg_Result_U1.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_u1_ivt_id_result_u1 ivt_id_result_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_u1;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_u1_t;

/**
 * Signals in message IVT_Msg_Result_U1.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_u1_ivt_id_result_u1 ivt_id_result_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u1_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u1_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u1_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_u1_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_u1;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mV)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_u1_converted_t;

/**
 * Signals in message IVT_Msg_Result_I.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_i_ivt_id_result_i ivt_id_result_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_i;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mA)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_i;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_i_t;

/**
 * Signals in message IVT_Msg_Result_I.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_result_i_ivt_id_result_i ivt_id_result_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_i_system_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_i_measurement_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_i_channel_error : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int ivt_result_i_ocs : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msgcount_result_i;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mA)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_i;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_result_i_converted_t;

/**
 * Signals in message IVT_Msg_Cmd.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd_ivt_id_cmd ivt_id_cmd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_trigger_spare;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _10_set_can_id_val_i;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _11_set_can_id_val_u1;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _12_set_can_id_val_u2;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _13_set_can_id_val_u3;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _14_set_can_id_val_t;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _15_set_can_id_val_w;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _16_set_can_id_val_as;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _17_set_can_id_val_wh;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1d_set_can_id_val_command;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1f_set_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_sign_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_sign_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_sign_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_sign_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_sign_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_sign_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_sign_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_sign_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__30_reset_item _30_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _32_store_dummy;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _33_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__3a_restart_to_bitrate _3a_restart_to_bitrate;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3d_restart_default_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3f_restart_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__40_get_measerror_item _40_get_measerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__41_get_systemerror_item _41_get_systemerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__42_get_alllogdata_item _42_get_alllogdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__43_get_logdata_item _43_get_logdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _60_get_result_dummy_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _61_get_result_dummy_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _62_get_result_dummy_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _63_get_result_dummy_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _64_get_result_dummy_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _65_get_result_dummy_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _66_get_result_dummy_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _67_get_result_dummy_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _73_get_oc_test_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _74_get_mode_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _75_get_oc_pos_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _76_get_oc_neg_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _79_get_device_id_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7a_get_sw_version_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7b_get_serien_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7c_get_art_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_endianess_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_endianess_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_endianess_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_endianess_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_endianess_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_endianess_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_endianess_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_endianess_wh;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__20_conf_triggermode_i _20_conf_triggermode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__21_conf_triggermode_u1 _21_conf_triggermode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__22_conf_triggermode_u2 _22_conf_triggermode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__23_conf_triggermode_u3 _23_conf_triggermode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__24_conf_triggermode_t _24_conf_triggermode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__25_conf_triggermode_w _25_conf_triggermode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__26_conf_triggermode_as _26_conf_triggermode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__27_conf_triggermode_wh _27_conf_triggermode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__34_actual_mode _34_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_07_trigger_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _20_conf_cycletime_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _21_conf_cycletime_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _22_conf_cycletime_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _23_conf_cycletime_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _24_conf_cycletime_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _25_conf_cycletime_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _26_conf_cycletime_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _27_conf_cycletime_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_06_trigger_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_05_trigger_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_04_trigger_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_03_trigger_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_02_trigger_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_01_trigger_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_00_trigger_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__34_startup_mode _34_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _10_set_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _11_set_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _12_set_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _13_set_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _14_set_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _15_set_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _16_set_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _17_set_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1d_set_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1f_set_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _30_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _34_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _50_get_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _51_get_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _52_get_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _53_get_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _54_get_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _55_get_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _56_get_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _57_get_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5d_get_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5f_get_can_id_sn_response;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_cmd_t;

/**
 * Signals in message IVT_Msg_Cmd.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd_ivt_id_cmd ivt_id_cmd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_trigger_spare;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _10_set_can_id_val_i;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _11_set_can_id_val_u1;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _12_set_can_id_val_u2;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _13_set_can_id_val_u3;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _14_set_can_id_val_t;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _15_set_can_id_val_w;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _16_set_can_id_val_as;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _17_set_can_id_val_wh;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1d_set_can_id_val_command;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1f_set_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _20_conf_sign_i : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _21_conf_sign_u1 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _22_conf_sign_u2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _23_conf_sign_u3 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _24_conf_sign_t : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _25_conf_sign_w : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _26_conf_sign_as : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _27_conf_sign_wh : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__30_reset_item _30_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _32_store_dummy;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _33_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__3a_restart_to_bitrate _3a_restart_to_bitrate;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3d_restart_default_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3f_restart_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__40_get_measerror_item _40_get_measerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__41_get_systemerror_item _41_get_systemerror_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__42_get_alllogdata_item _42_get_alllogdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__43_get_logdata_item _43_get_logdata_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _60_get_result_dummy_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _61_get_result_dummy_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _62_get_result_dummy_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _63_get_result_dummy_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _64_get_result_dummy_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _65_get_result_dummy_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _66_get_result_dummy_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _67_get_result_dummy_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _73_get_oc_test_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _74_get_mode_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _75_get_oc_pos_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _76_get_oc_neg_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _79_get_device_id_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7a_get_sw_version_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7b_get_serien_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7c_get_art_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _20_conf_endianess_i : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _21_conf_endianess_u1 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _22_conf_endianess_u2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _23_conf_endianess_u3 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _24_conf_endianess_t : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _25_conf_endianess_w : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _26_conf_endianess_as : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _27_conf_endianess_wh : 1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__20_conf_triggermode_i _20_conf_triggermode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__21_conf_triggermode_u1 _21_conf_triggermode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__22_conf_triggermode_u2 _22_conf_triggermode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__23_conf_triggermode_u3 _23_conf_triggermode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__24_conf_triggermode_t _24_conf_triggermode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__25_conf_triggermode_w _25_conf_triggermode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__26_conf_triggermode_as _26_conf_triggermode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__27_conf_triggermode_wh _27_conf_triggermode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__34_actual_mode _34_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_07_trigger_wh : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _20_conf_cycletime_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _21_conf_cycletime_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _22_conf_cycletime_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _23_conf_cycletime_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _24_conf_cycletime_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _25_conf_cycletime_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _26_conf_cycletime_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _27_conf_cycletime_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_06_trigger_as : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_05_trigger_w : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_04_trigger_t : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_03_trigger_u3 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_02_trigger_u2 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_01_trigger_u1 : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    unsigned int _31_00_trigger_i : 1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    hv_current_ivt_msg_cmd__34_startup_mode _34_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _10_set_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _11_set_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _12_set_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _13_set_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _14_set_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _15_set_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _16_set_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _17_set_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1d_set_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1f_set_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _30_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _34_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _50_get_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _51_get_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _52_get_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _53_get_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _54_get_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _55_get_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _56_get_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _57_get_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5d_get_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5f_get_can_id_sn_response;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} hv_current_ivt_msg_cmd_converted_t;


void hv_current_ivt_msg_result_wh_raw_to_conversion(
    hv_current_ivt_msg_result_wh_converted_t *conversion,
    hv_current_ivt_msg_result_wh_ivt_id_result_wh ivt_id_result_wh,
    uint8_t ivt_result_wh_system_error,
    uint8_t ivt_result_wh_measurement_error,
    uint8_t ivt_result_wh_channel_error,
    uint8_t ivt_result_wh_ocs,
    uint8_t ivt_msgcount_result_wh,
    int32_t ivt_result_wh
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_wh_conversion_to_raw(
    hv_current_ivt_msg_result_wh_t *raw,
    hv_current_ivt_msg_result_wh_ivt_id_result_wh ivt_id_result_wh,
    uint8_t ivt_result_wh_system_error,
    uint8_t ivt_result_wh_measurement_error,
    uint8_t ivt_result_wh_channel_error,
    uint8_t ivt_result_wh_ocs,
    uint8_t ivt_msgcount_result_wh,
    int32_t ivt_result_wh
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_wh_raw_to_conversion_struct(
    hv_current_ivt_msg_result_wh_converted_t *conversion, 
    const hv_current_ivt_msg_result_wh_t *raw);


void hv_current_ivt_msg_result_wh_conversion_to_raw_struct(
    hv_current_ivt_msg_result_wh_t *raw,
    const hv_current_ivt_msg_result_wh_converted_t *conversion);

int hv_current_ivt_msg_result_wh_ivt_id_result_wh_enum_to_string(hv_current_ivt_msg_result_wh_ivt_id_result_wh value, char *buffer);

int hv_current_ivt_msg_result_wh_to_string(hv_current_ivt_msg_result_wh_t *message, char *buffer);

int hv_current_ivt_msg_result_wh_to_string_file(hv_current_ivt_msg_result_wh_t *message, FILE *buffer);

int hv_current_ivt_msg_result_wh_fields(char *buffer);

int hv_current_ivt_msg_result_wh_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_Wh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_wh_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_wh_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_Wh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_wh_unpack(
    hv_current_ivt_msg_result_wh_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_wh_ivt_id_result_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_wh_ivt_result_wh_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_wh_ivt_result_wh_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_wh_ivt_result_wh_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_wh_ivt_result_wh_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_wh_ivt_msgcount_result_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_wh_ivt_result_wh_is_in_range(int32_t value);


void hv_current_ivt_msg_result_as_raw_to_conversion(
    hv_current_ivt_msg_result_as_converted_t *conversion,
    hv_current_ivt_msg_result_as_ivt_id_result_as ivt_id_result_as,
    uint8_t ivt_result_as_system_error,
    uint8_t ivt_result_as_measurement_error,
    uint8_t ivt_result_as_channel_error,
    uint8_t ivt_result_as_ocs,
    uint8_t ivt_msgcount_result_as,
    int32_t ivt_result_as
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_as_conversion_to_raw(
    hv_current_ivt_msg_result_as_t *raw,
    hv_current_ivt_msg_result_as_ivt_id_result_as ivt_id_result_as,
    uint8_t ivt_result_as_system_error,
    uint8_t ivt_result_as_measurement_error,
    uint8_t ivt_result_as_channel_error,
    uint8_t ivt_result_as_ocs,
    uint8_t ivt_msgcount_result_as,
    int32_t ivt_result_as
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_as_raw_to_conversion_struct(
    hv_current_ivt_msg_result_as_converted_t *conversion, 
    const hv_current_ivt_msg_result_as_t *raw);


void hv_current_ivt_msg_result_as_conversion_to_raw_struct(
    hv_current_ivt_msg_result_as_t *raw,
    const hv_current_ivt_msg_result_as_converted_t *conversion);

int hv_current_ivt_msg_result_as_ivt_id_result_as_enum_to_string(hv_current_ivt_msg_result_as_ivt_id_result_as value, char *buffer);

int hv_current_ivt_msg_result_as_to_string(hv_current_ivt_msg_result_as_t *message, char *buffer);

int hv_current_ivt_msg_result_as_to_string_file(hv_current_ivt_msg_result_as_t *message, FILE *buffer);

int hv_current_ivt_msg_result_as_fields(char *buffer);

int hv_current_ivt_msg_result_as_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_As.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_as_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_as_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_As.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_as_unpack(
    hv_current_ivt_msg_result_as_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_as_ivt_id_result_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_as_ivt_result_as_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_as_ivt_result_as_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_as_ivt_result_as_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_as_ivt_result_as_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_as_ivt_msgcount_result_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_as_ivt_result_as_is_in_range(int32_t value);


void hv_current_ivt_msg_result_w_raw_to_conversion(
    hv_current_ivt_msg_result_w_converted_t *conversion,
    hv_current_ivt_msg_result_w_ivt_id_result_w ivt_id_result_w,
    uint8_t ivt_result_w_system_error,
    uint8_t ivt_result_w_measurement_error,
    uint8_t ivt_result_w_channel_error,
    uint8_t ivt_result_w_ocs,
    uint8_t ivt_msgcount_result_w,
    int32_t ivt_result_w
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_w_conversion_to_raw(
    hv_current_ivt_msg_result_w_t *raw,
    hv_current_ivt_msg_result_w_ivt_id_result_w ivt_id_result_w,
    uint8_t ivt_result_w_system_error,
    uint8_t ivt_result_w_measurement_error,
    uint8_t ivt_result_w_channel_error,
    uint8_t ivt_result_w_ocs,
    uint8_t ivt_msgcount_result_w,
    int32_t ivt_result_w
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_w_raw_to_conversion_struct(
    hv_current_ivt_msg_result_w_converted_t *conversion, 
    const hv_current_ivt_msg_result_w_t *raw);


void hv_current_ivt_msg_result_w_conversion_to_raw_struct(
    hv_current_ivt_msg_result_w_t *raw,
    const hv_current_ivt_msg_result_w_converted_t *conversion);

int hv_current_ivt_msg_result_w_ivt_id_result_w_enum_to_string(hv_current_ivt_msg_result_w_ivt_id_result_w value, char *buffer);

int hv_current_ivt_msg_result_w_to_string(hv_current_ivt_msg_result_w_t *message, char *buffer);

int hv_current_ivt_msg_result_w_to_string_file(hv_current_ivt_msg_result_w_t *message, FILE *buffer);

int hv_current_ivt_msg_result_w_fields(char *buffer);

int hv_current_ivt_msg_result_w_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_W.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_w_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_w_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_W.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_w_unpack(
    hv_current_ivt_msg_result_w_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_w_ivt_id_result_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_w_ivt_result_w_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_w_ivt_result_w_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_w_ivt_result_w_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_w_ivt_result_w_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_w_ivt_msgcount_result_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_w_ivt_result_w_is_in_range(int32_t value);


void hv_current_ivt_msg_response_raw_to_conversion(
    hv_current_ivt_msg_response_converted_t *conversion,
    hv_current_ivt_msg_response_ivt_id_response ivt_id_response,
    uint8_t _b1_trigger_spare,
    uint8_t _ff_wrong_command,
    uint16_t _bf_restart_alive_cmd_id,
    hv_current_ivt_msg_response__80_resp_measerror_item _80_resp_measerror_item,
    hv_current_ivt_msg_response__81_resp_systemerror_item _81_resp_systemerror_item,
    hv_current_ivt_msg_response__82_resp_alllogdata_item _82_resp_alllogdata_item,
    hv_current_ivt_msg_response__83_resp_logdata_item _83_resp_logdata_item,
    uint16_t _90_resp_can_id_val_i,
    uint16_t _91_resp_can_id_val_u1,
    uint16_t _92_resp_can_id_val_u2,
    uint16_t _93_resp_can_id_val_u3,
    uint16_t _94_resp_can_id_val_t,
    uint16_t _95_resp_can_id_val_w,
    uint16_t _96_resp_can_id_val_as,
    uint16_t _97_resp_can_id_val_wh,
    uint16_t _9d_resp_can_id_val_command,
    uint16_t _9f_resp_can_id_val_response,
    uint8_t _a0_resp_sign_i,
    uint8_t _a1_resp_sign_u1,
    uint8_t _a2_resp_sign_u2,
    uint8_t _a3_resp_sign_u3,
    uint8_t _a4_resp_sign_t,
    uint8_t _a5_resp_sign_w,
    uint8_t _a6_resp_sign_as,
    uint8_t _a7_resp_sign_wh,
    hv_current_ivt_msg_response__b0_resp_reset_item _b0_resp_reset_item,
    uint8_t _b2_resp_store_dummy,
    uint16_t _b3_resp_oc_test_time,
    int16_t _b5_resp_oc_pos_set_threshold,
    int16_t _b6_resp_oc_neg_set_threshold,
    hv_current_ivt_msg_response__b9_resp_device_type _b9_resp_device_type,
    uint8_t _ba_resp_sw_ver_major_hw,
    uint32_t _bb_resp_serien_nr,
    uint64_t _bc_resp_art_n,
    uint8_t _a0_resp_endianess_i,
    uint8_t _a1_resp_endianess_u1,
    uint8_t _a2_resp_endianess_u2,
    uint8_t _a3_resp_endianess_u3,
    uint8_t _a4_resp_endianess_t,
    uint8_t _a5_resp_endianess_w,
    uint8_t _a6_resp_endianess_as,
    uint8_t _a7_resp_endianess_wh,
    hv_current_ivt_msg_response__a0_resp_triggermode_i _a0_resp_triggermode_i,
    hv_current_ivt_msg_response__a1_resp_triggermode_u1 _a1_resp_triggermode_u1,
    hv_current_ivt_msg_response__a2_resp_triggermode_u2 _a2_resp_triggermode_u2,
    hv_current_ivt_msg_response__a3_resp_triggermode_u3 _a3_resp_triggermode_u3,
    hv_current_ivt_msg_response__a4_resp_triggermode_t _a4_resp_triggermode_t,
    hv_current_ivt_msg_response__a5_resp_triggermode_w _a5_resp_triggermode_w,
    hv_current_ivt_msg_response__a6_resp_triggermode_as _a6_resp_triggermode_as,
    hv_current_ivt_msg_response__a7_resp_triggermode_wh _a7_resp_triggermode_wh,
    hv_current_ivt_msg_response__b4_resp_actual_mode _b4_resp_actual_mode,
    uint8_t _b1_07_trigger_wh,
    uint32_t _b2_resp_store_device_sn,
    uint8_t _ba_resp_sw_ver_minor,
    hv_current_ivt_msg_response__b9_resp_device_current _b9_resp_device_current,
    uint16_t _80_resp_measerror_count_mask,
    uint16_t _81_resp_systemerror_count_mask,
    uint64_t _82_resp_alllogdata_counter,
    uint64_t _83_resp_logdata_counter,
    uint16_t _a0_resp_cycletime_i,
    uint16_t _a1_resp_cycletime_u1,
    uint16_t _a2_resp_cycletime_u2,
    uint16_t _a3_resp_cycletime_u3,
    uint16_t _a4_resp_cycletime_t,
    uint16_t _a5_resp_cycletime_w,
    uint16_t _a6_resp_cycletime_as,
    uint16_t _a7_resp_cycletime_wh,
    uint8_t _b1_06_trigger_as,
    uint8_t _b1_05_trigger_w,
    uint8_t _b1_04_trigger_t,
    uint8_t _b1_03_trigger_u3,
    uint8_t _b1_02_trigger_u2,
    uint8_t _b1_01_trigger_u1,
    uint8_t _b1_00_trigger_i,
    hv_current_ivt_msg_response__b4_resp_startup_mode _b4_resp_startup_mode,
    uint32_t _bf_restart_alive_sn,
    uint8_t _ba_resp_sw_ver_revision,
    uint32_t _90_resp_can_id_sn_i,
    uint32_t _91_resp_can_id_sn_u1,
    uint32_t _92_resp_can_id_sn_u2,
    uint32_t _93_resp_can_id_sn_u3,
    uint32_t _94_resp_can_id_sn_t,
    uint32_t _95_resp_can_id_sn_w,
    uint32_t _96_resp_can_id_sn_as,
    uint32_t _97_resp_can_id_sn_wh,
    uint32_t _9d_resp_can_id_sn_command,
    uint32_t _9f_resp_can_id_sn_response,
    uint32_t _b0_resp_reset_device_sn,
    uint16_t _b4_resp_code_level,
    int16_t _b5_resp_oc_pos_reset_threshold,
    int16_t _b6_resp_oc_neg_reset_threshold,
    hv_current_ivt_msg_response__b9_resp_device_voltage_chan _b9_resp_device_voltage_chan,
    uint8_t _ba_resp_sw_ver_vear,
    hv_current_ivt_msg_response__b9_resp_device_toi _b9_resp_device_toi,
    int8_t _ba_resp_sw_ver_month,
    hv_current_ivt_msg_response__b9_resp_device_com _b9_resp_device_com,
    uint8_t _ba_resp_sw_ver_day,
    hv_current_ivt_msg_response__b9_resp_device_v_supply _b9_resp_device_v_supply,
    uint8_t _ba_resp_sw_ver_internal
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_response_conversion_to_raw(
    hv_current_ivt_msg_response_t *raw,
    hv_current_ivt_msg_response_ivt_id_response ivt_id_response,
    uint8_t _b1_trigger_spare,
    uint8_t _ff_wrong_command,
    uint16_t _bf_restart_alive_cmd_id,
    hv_current_ivt_msg_response__80_resp_measerror_item _80_resp_measerror_item,
    hv_current_ivt_msg_response__81_resp_systemerror_item _81_resp_systemerror_item,
    hv_current_ivt_msg_response__82_resp_alllogdata_item _82_resp_alllogdata_item,
    hv_current_ivt_msg_response__83_resp_logdata_item _83_resp_logdata_item,
    uint16_t _90_resp_can_id_val_i,
    uint16_t _91_resp_can_id_val_u1,
    uint16_t _92_resp_can_id_val_u2,
    uint16_t _93_resp_can_id_val_u3,
    uint16_t _94_resp_can_id_val_t,
    uint16_t _95_resp_can_id_val_w,
    uint16_t _96_resp_can_id_val_as,
    uint16_t _97_resp_can_id_val_wh,
    uint16_t _9d_resp_can_id_val_command,
    uint16_t _9f_resp_can_id_val_response,
    uint8_t _a0_resp_sign_i,
    uint8_t _a1_resp_sign_u1,
    uint8_t _a2_resp_sign_u2,
    uint8_t _a3_resp_sign_u3,
    uint8_t _a4_resp_sign_t,
    uint8_t _a5_resp_sign_w,
    uint8_t _a6_resp_sign_as,
    uint8_t _a7_resp_sign_wh,
    hv_current_ivt_msg_response__b0_resp_reset_item _b0_resp_reset_item,
    uint8_t _b2_resp_store_dummy,
    uint16_t _b3_resp_oc_test_time,
    int16_t _b5_resp_oc_pos_set_threshold,
    int16_t _b6_resp_oc_neg_set_threshold,
    hv_current_ivt_msg_response__b9_resp_device_type _b9_resp_device_type,
    uint8_t _ba_resp_sw_ver_major_hw,
    uint32_t _bb_resp_serien_nr,
    uint64_t _bc_resp_art_n,
    uint8_t _a0_resp_endianess_i,
    uint8_t _a1_resp_endianess_u1,
    uint8_t _a2_resp_endianess_u2,
    uint8_t _a3_resp_endianess_u3,
    uint8_t _a4_resp_endianess_t,
    uint8_t _a5_resp_endianess_w,
    uint8_t _a6_resp_endianess_as,
    uint8_t _a7_resp_endianess_wh,
    hv_current_ivt_msg_response__a0_resp_triggermode_i _a0_resp_triggermode_i,
    hv_current_ivt_msg_response__a1_resp_triggermode_u1 _a1_resp_triggermode_u1,
    hv_current_ivt_msg_response__a2_resp_triggermode_u2 _a2_resp_triggermode_u2,
    hv_current_ivt_msg_response__a3_resp_triggermode_u3 _a3_resp_triggermode_u3,
    hv_current_ivt_msg_response__a4_resp_triggermode_t _a4_resp_triggermode_t,
    hv_current_ivt_msg_response__a5_resp_triggermode_w _a5_resp_triggermode_w,
    hv_current_ivt_msg_response__a6_resp_triggermode_as _a6_resp_triggermode_as,
    hv_current_ivt_msg_response__a7_resp_triggermode_wh _a7_resp_triggermode_wh,
    hv_current_ivt_msg_response__b4_resp_actual_mode _b4_resp_actual_mode,
    uint8_t _b1_07_trigger_wh,
    uint32_t _b2_resp_store_device_sn,
    uint8_t _ba_resp_sw_ver_minor,
    hv_current_ivt_msg_response__b9_resp_device_current _b9_resp_device_current,
    uint16_t _80_resp_measerror_count_mask,
    uint16_t _81_resp_systemerror_count_mask,
    uint64_t _82_resp_alllogdata_counter,
    uint64_t _83_resp_logdata_counter,
    uint16_t _a0_resp_cycletime_i,
    uint16_t _a1_resp_cycletime_u1,
    uint16_t _a2_resp_cycletime_u2,
    uint16_t _a3_resp_cycletime_u3,
    uint16_t _a4_resp_cycletime_t,
    uint16_t _a5_resp_cycletime_w,
    uint16_t _a6_resp_cycletime_as,
    uint16_t _a7_resp_cycletime_wh,
    uint8_t _b1_06_trigger_as,
    uint8_t _b1_05_trigger_w,
    uint8_t _b1_04_trigger_t,
    uint8_t _b1_03_trigger_u3,
    uint8_t _b1_02_trigger_u2,
    uint8_t _b1_01_trigger_u1,
    uint8_t _b1_00_trigger_i,
    hv_current_ivt_msg_response__b4_resp_startup_mode _b4_resp_startup_mode,
    uint32_t _bf_restart_alive_sn,
    uint8_t _ba_resp_sw_ver_revision,
    uint32_t _90_resp_can_id_sn_i,
    uint32_t _91_resp_can_id_sn_u1,
    uint32_t _92_resp_can_id_sn_u2,
    uint32_t _93_resp_can_id_sn_u3,
    uint32_t _94_resp_can_id_sn_t,
    uint32_t _95_resp_can_id_sn_w,
    uint32_t _96_resp_can_id_sn_as,
    uint32_t _97_resp_can_id_sn_wh,
    uint32_t _9d_resp_can_id_sn_command,
    uint32_t _9f_resp_can_id_sn_response,
    uint32_t _b0_resp_reset_device_sn,
    uint16_t _b4_resp_code_level,
    int16_t _b5_resp_oc_pos_reset_threshold,
    int16_t _b6_resp_oc_neg_reset_threshold,
    hv_current_ivt_msg_response__b9_resp_device_voltage_chan _b9_resp_device_voltage_chan,
    uint8_t _ba_resp_sw_ver_vear,
    hv_current_ivt_msg_response__b9_resp_device_toi _b9_resp_device_toi,
    int8_t _ba_resp_sw_ver_month,
    hv_current_ivt_msg_response__b9_resp_device_com _b9_resp_device_com,
    uint8_t _ba_resp_sw_ver_day,
    hv_current_ivt_msg_response__b9_resp_device_v_supply _b9_resp_device_v_supply,
    uint8_t _ba_resp_sw_ver_internal
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_response_raw_to_conversion_struct(
    hv_current_ivt_msg_response_converted_t *conversion, 
    const hv_current_ivt_msg_response_t *raw);


void hv_current_ivt_msg_response_conversion_to_raw_struct(
    hv_current_ivt_msg_response_t *raw,
    const hv_current_ivt_msg_response_converted_t *conversion);

int hv_current_ivt_msg_response_ivt_id_response_enum_to_string(hv_current_ivt_msg_response_ivt_id_response value, char *buffer);
int hv_current_ivt_msg_response__80_resp_measerror_item_enum_to_string(hv_current_ivt_msg_response__80_resp_measerror_item value, char *buffer);
int hv_current_ivt_msg_response__81_resp_systemerror_item_enum_to_string(hv_current_ivt_msg_response__81_resp_systemerror_item value, char *buffer);
int hv_current_ivt_msg_response__82_resp_alllogdata_item_enum_to_string(hv_current_ivt_msg_response__82_resp_alllogdata_item value, char *buffer);
int hv_current_ivt_msg_response__83_resp_logdata_item_enum_to_string(hv_current_ivt_msg_response__83_resp_logdata_item value, char *buffer);
int hv_current_ivt_msg_response__b0_resp_reset_item_enum_to_string(hv_current_ivt_msg_response__b0_resp_reset_item value, char *buffer);
int hv_current_ivt_msg_response__b9_resp_device_type_enum_to_string(hv_current_ivt_msg_response__b9_resp_device_type value, char *buffer);
int hv_current_ivt_msg_response__a0_resp_triggermode_i_enum_to_string(hv_current_ivt_msg_response__a0_resp_triggermode_i value, char *buffer);
int hv_current_ivt_msg_response__a1_resp_triggermode_u1_enum_to_string(hv_current_ivt_msg_response__a1_resp_triggermode_u1 value, char *buffer);
int hv_current_ivt_msg_response__a2_resp_triggermode_u2_enum_to_string(hv_current_ivt_msg_response__a2_resp_triggermode_u2 value, char *buffer);
int hv_current_ivt_msg_response__a3_resp_triggermode_u3_enum_to_string(hv_current_ivt_msg_response__a3_resp_triggermode_u3 value, char *buffer);
int hv_current_ivt_msg_response__a4_resp_triggermode_t_enum_to_string(hv_current_ivt_msg_response__a4_resp_triggermode_t value, char *buffer);
int hv_current_ivt_msg_response__a5_resp_triggermode_w_enum_to_string(hv_current_ivt_msg_response__a5_resp_triggermode_w value, char *buffer);
int hv_current_ivt_msg_response__a6_resp_triggermode_as_enum_to_string(hv_current_ivt_msg_response__a6_resp_triggermode_as value, char *buffer);
int hv_current_ivt_msg_response__a7_resp_triggermode_wh_enum_to_string(hv_current_ivt_msg_response__a7_resp_triggermode_wh value, char *buffer);
int hv_current_ivt_msg_response__b4_resp_actual_mode_enum_to_string(hv_current_ivt_msg_response__b4_resp_actual_mode value, char *buffer);
int hv_current_ivt_msg_response__b9_resp_device_current_enum_to_string(hv_current_ivt_msg_response__b9_resp_device_current value, char *buffer);
int hv_current_ivt_msg_response__b4_resp_startup_mode_enum_to_string(hv_current_ivt_msg_response__b4_resp_startup_mode value, char *buffer);
int hv_current_ivt_msg_response__b9_resp_device_voltage_chan_enum_to_string(hv_current_ivt_msg_response__b9_resp_device_voltage_chan value, char *buffer);
int hv_current_ivt_msg_response__b9_resp_device_toi_enum_to_string(hv_current_ivt_msg_response__b9_resp_device_toi value, char *buffer);
int hv_current_ivt_msg_response__b9_resp_device_com_enum_to_string(hv_current_ivt_msg_response__b9_resp_device_com value, char *buffer);
int hv_current_ivt_msg_response__b9_resp_device_v_supply_enum_to_string(hv_current_ivt_msg_response__b9_resp_device_v_supply value, char *buffer);

int hv_current_ivt_msg_response_to_string(hv_current_ivt_msg_response_t *message, char *buffer);

int hv_current_ivt_msg_response_to_string_file(hv_current_ivt_msg_response_t *message, FILE *buffer);

int hv_current_ivt_msg_response_fields(char *buffer);

int hv_current_ivt_msg_response_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_response_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_response_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_response_unpack(
    hv_current_ivt_msg_response_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response_ivt_id_response_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_trigger_spare_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ff_wrong_command_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__bf_restart_alive_cmd_id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__80_resp_measerror_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__81_resp_systemerror_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__82_resp_alllogdata_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__83_resp_logdata_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__90_resp_can_id_val_i_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__91_resp_can_id_val_u1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__92_resp_can_id_val_u2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__93_resp_can_id_val_u3_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__94_resp_can_id_val_t_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__95_resp_can_id_val_w_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__96_resp_can_id_val_as_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__97_resp_can_id_val_wh_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__9d_resp_can_id_val_command_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__9f_resp_can_id_val_response_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a0_resp_sign_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a1_resp_sign_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a2_resp_sign_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a3_resp_sign_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a4_resp_sign_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a5_resp_sign_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a6_resp_sign_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a7_resp_sign_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b0_resp_reset_item_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b2_resp_store_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b3_resp_oc_test_time_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b5_resp_oc_pos_set_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b6_resp_oc_neg_set_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b9_resp_device_type_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ba_resp_sw_ver_major_hw_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__bb_resp_serien_nr_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__bc_resp_art_n_is_in_range(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a0_resp_endianess_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a1_resp_endianess_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a2_resp_endianess_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a3_resp_endianess_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a4_resp_endianess_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a5_resp_endianess_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a6_resp_endianess_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a7_resp_endianess_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a0_resp_triggermode_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a1_resp_triggermode_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a2_resp_triggermode_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a3_resp_triggermode_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a4_resp_triggermode_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a5_resp_triggermode_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a6_resp_triggermode_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a7_resp_triggermode_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b4_resp_actual_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_07_trigger_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b2_resp_store_device_sn_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ba_resp_sw_ver_minor_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b9_resp_device_current_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__80_resp_measerror_count_mask_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__81_resp_systemerror_count_mask_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__82_resp_alllogdata_counter_is_in_range(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__83_resp_logdata_counter_is_in_range(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a0_resp_cycletime_i_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a1_resp_cycletime_u1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a2_resp_cycletime_u2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a3_resp_cycletime_u3_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a4_resp_cycletime_t_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a5_resp_cycletime_w_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a6_resp_cycletime_as_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__a7_resp_cycletime_wh_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_06_trigger_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_05_trigger_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_04_trigger_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_03_trigger_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_02_trigger_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_01_trigger_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b1_00_trigger_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b4_resp_startup_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__bf_restart_alive_sn_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ba_resp_sw_ver_revision_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__90_resp_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__91_resp_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__92_resp_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__93_resp_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__94_resp_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__95_resp_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__96_resp_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__97_resp_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__9d_resp_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__9f_resp_can_id_sn_response_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b0_resp_reset_device_sn_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b4_resp_code_level_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b5_resp_oc_pos_reset_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b6_resp_oc_neg_reset_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b9_resp_device_voltage_chan_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ba_resp_sw_ver_vear_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b9_resp_device_toi_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ba_resp_sw_ver_month_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b9_resp_device_com_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ba_resp_sw_ver_day_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__b9_resp_device_v_supply_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_response__ba_resp_sw_ver_internal_is_in_range(uint8_t value);


void hv_current_ivt_msg_result_t_raw_to_conversion(
    hv_current_ivt_msg_result_t_converted_t *conversion,
    hv_current_ivt_msg_result_t_ivt_id_result_t ivt_id_result_t,
    uint8_t ivt_result_t_system_error,
    uint8_t ivt_result_t_measurement_error,
    uint8_t ivt_result_t_channel_error,
    uint8_t ivt_result_t_ocs,
    uint8_t ivt_msgcount_result_t,
    float ivt_result_t
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_t_conversion_to_raw(
    hv_current_ivt_msg_result_t_t *raw,
    hv_current_ivt_msg_result_t_ivt_id_result_t ivt_id_result_t,
    uint8_t ivt_result_t_system_error,
    uint8_t ivt_result_t_measurement_error,
    uint8_t ivt_result_t_channel_error,
    uint8_t ivt_result_t_ocs,
    uint8_t ivt_msgcount_result_t,
    float ivt_result_t
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_t_raw_to_conversion_struct(
    hv_current_ivt_msg_result_t_converted_t *conversion, 
    const hv_current_ivt_msg_result_t_t *raw);


void hv_current_ivt_msg_result_t_conversion_to_raw_struct(
    hv_current_ivt_msg_result_t_t *raw,
    const hv_current_ivt_msg_result_t_converted_t *conversion);

int hv_current_ivt_msg_result_t_ivt_id_result_t_enum_to_string(hv_current_ivt_msg_result_t_ivt_id_result_t value, char *buffer);

int hv_current_ivt_msg_result_t_converted_to_string(hv_current_ivt_msg_result_t_converted_t *message, char *buffer);

int hv_current_ivt_msg_result_t_converted_to_string_file(hv_current_ivt_msg_result_t_converted_t *message, FILE *buffer);

int hv_current_ivt_msg_result_t_fields(char *buffer);

int hv_current_ivt_msg_result_t_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_T.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_t_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_t_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_T.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_t_unpack(
    hv_current_ivt_msg_result_t_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_t_ivt_id_result_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_t_ivt_result_t_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_t_ivt_result_t_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_t_ivt_result_t_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_t_ivt_result_t_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_t_ivt_msgcount_result_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t hv_current_ivt_msg_result_t_ivt_result_t_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float hv_current_ivt_msg_result_t_ivt_result_t_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_t_ivt_result_t_is_in_range(int32_t value);


void hv_current_ivt_msg_result_u3_raw_to_conversion(
    hv_current_ivt_msg_result_u3_converted_t *conversion,
    hv_current_ivt_msg_result_u3_ivt_id_result_u3 ivt_id_result_u3,
    uint8_t ivt_result_u3_system_error,
    uint8_t ivt_result_u3_measurement_error,
    uint8_t ivt_result_u3_channel_error,
    uint8_t ivt_result_u3_ocs,
    uint8_t ivt_msgcount_result_u3,
    int32_t ivt_result_u3
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_u3_conversion_to_raw(
    hv_current_ivt_msg_result_u3_t *raw,
    hv_current_ivt_msg_result_u3_ivt_id_result_u3 ivt_id_result_u3,
    uint8_t ivt_result_u3_system_error,
    uint8_t ivt_result_u3_measurement_error,
    uint8_t ivt_result_u3_channel_error,
    uint8_t ivt_result_u3_ocs,
    uint8_t ivt_msgcount_result_u3,
    int32_t ivt_result_u3
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_u3_raw_to_conversion_struct(
    hv_current_ivt_msg_result_u3_converted_t *conversion, 
    const hv_current_ivt_msg_result_u3_t *raw);


void hv_current_ivt_msg_result_u3_conversion_to_raw_struct(
    hv_current_ivt_msg_result_u3_t *raw,
    const hv_current_ivt_msg_result_u3_converted_t *conversion);

int hv_current_ivt_msg_result_u3_ivt_id_result_u3_enum_to_string(hv_current_ivt_msg_result_u3_ivt_id_result_u3 value, char *buffer);

int hv_current_ivt_msg_result_u3_to_string(hv_current_ivt_msg_result_u3_t *message, char *buffer);

int hv_current_ivt_msg_result_u3_to_string_file(hv_current_ivt_msg_result_u3_t *message, FILE *buffer);

int hv_current_ivt_msg_result_u3_fields(char *buffer);

int hv_current_ivt_msg_result_u3_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_U3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_u3_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_u3_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_U3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_u3_unpack(
    hv_current_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u3_ivt_id_result_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u3_ivt_result_u3_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u3_ivt_result_u3_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u3_ivt_result_u3_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u3_ivt_result_u3_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u3_ivt_msgcount_result_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u3_ivt_result_u3_is_in_range(int32_t value);


void hv_current_ivt_msg_result_u2_raw_to_conversion(
    hv_current_ivt_msg_result_u2_converted_t *conversion,
    hv_current_ivt_msg_result_u2_ivt_id_result_u2 ivt_id_result_u2,
    uint8_t ivt_result_u2_system_error,
    uint8_t ivt_result_u2_measurement_error,
    uint8_t ivt_result_u2_channel_error,
    uint8_t ivt_result_u2_ocs,
    uint8_t ivt_msgcount_result_u2,
    int32_t ivt_result_u2
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_u2_conversion_to_raw(
    hv_current_ivt_msg_result_u2_t *raw,
    hv_current_ivt_msg_result_u2_ivt_id_result_u2 ivt_id_result_u2,
    uint8_t ivt_result_u2_system_error,
    uint8_t ivt_result_u2_measurement_error,
    uint8_t ivt_result_u2_channel_error,
    uint8_t ivt_result_u2_ocs,
    uint8_t ivt_msgcount_result_u2,
    int32_t ivt_result_u2
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_u2_raw_to_conversion_struct(
    hv_current_ivt_msg_result_u2_converted_t *conversion, 
    const hv_current_ivt_msg_result_u2_t *raw);


void hv_current_ivt_msg_result_u2_conversion_to_raw_struct(
    hv_current_ivt_msg_result_u2_t *raw,
    const hv_current_ivt_msg_result_u2_converted_t *conversion);

int hv_current_ivt_msg_result_u2_ivt_id_result_u2_enum_to_string(hv_current_ivt_msg_result_u2_ivt_id_result_u2 value, char *buffer);

int hv_current_ivt_msg_result_u2_to_string(hv_current_ivt_msg_result_u2_t *message, char *buffer);

int hv_current_ivt_msg_result_u2_to_string_file(hv_current_ivt_msg_result_u2_t *message, FILE *buffer);

int hv_current_ivt_msg_result_u2_fields(char *buffer);

int hv_current_ivt_msg_result_u2_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_U2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_u2_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_u2_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_U2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_u2_unpack(
    hv_current_ivt_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u2_ivt_id_result_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u2_ivt_result_u2_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u2_ivt_result_u2_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u2_ivt_result_u2_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u2_ivt_result_u2_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u2_ivt_msgcount_result_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u2_ivt_result_u2_is_in_range(int32_t value);


void hv_current_ivt_msg_result_u1_raw_to_conversion(
    hv_current_ivt_msg_result_u1_converted_t *conversion,
    hv_current_ivt_msg_result_u1_ivt_id_result_u1 ivt_id_result_u1,
    uint8_t ivt_result_u1_system_error,
    uint8_t ivt_result_u1_measurement_error,
    uint8_t ivt_result_u1_channel_error,
    uint8_t ivt_result_u1_ocs,
    uint8_t ivt_msgcount_result_u1,
    int32_t ivt_result_u1
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_u1_conversion_to_raw(
    hv_current_ivt_msg_result_u1_t *raw,
    hv_current_ivt_msg_result_u1_ivt_id_result_u1 ivt_id_result_u1,
    uint8_t ivt_result_u1_system_error,
    uint8_t ivt_result_u1_measurement_error,
    uint8_t ivt_result_u1_channel_error,
    uint8_t ivt_result_u1_ocs,
    uint8_t ivt_msgcount_result_u1,
    int32_t ivt_result_u1
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_u1_raw_to_conversion_struct(
    hv_current_ivt_msg_result_u1_converted_t *conversion, 
    const hv_current_ivt_msg_result_u1_t *raw);


void hv_current_ivt_msg_result_u1_conversion_to_raw_struct(
    hv_current_ivt_msg_result_u1_t *raw,
    const hv_current_ivt_msg_result_u1_converted_t *conversion);

int hv_current_ivt_msg_result_u1_ivt_id_result_u1_enum_to_string(hv_current_ivt_msg_result_u1_ivt_id_result_u1 value, char *buffer);

int hv_current_ivt_msg_result_u1_to_string(hv_current_ivt_msg_result_u1_t *message, char *buffer);

int hv_current_ivt_msg_result_u1_to_string_file(hv_current_ivt_msg_result_u1_t *message, FILE *buffer);

int hv_current_ivt_msg_result_u1_fields(char *buffer);

int hv_current_ivt_msg_result_u1_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_U1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_u1_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_u1_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_U1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_u1_unpack(
    hv_current_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u1_ivt_id_result_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u1_ivt_result_u1_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u1_ivt_result_u1_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u1_ivt_result_u1_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u1_ivt_result_u1_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u1_ivt_msgcount_result_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_u1_ivt_result_u1_is_in_range(int32_t value);


void hv_current_ivt_msg_result_i_raw_to_conversion(
    hv_current_ivt_msg_result_i_converted_t *conversion,
    hv_current_ivt_msg_result_i_ivt_id_result_i ivt_id_result_i,
    uint8_t ivt_result_i_system_error,
    uint8_t ivt_result_i_measurement_error,
    uint8_t ivt_result_i_channel_error,
    uint8_t ivt_result_i_ocs,
    uint8_t ivt_msgcount_result_i,
    int32_t ivt_result_i
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_i_conversion_to_raw(
    hv_current_ivt_msg_result_i_t *raw,
    hv_current_ivt_msg_result_i_ivt_id_result_i ivt_id_result_i,
    uint8_t ivt_result_i_system_error,
    uint8_t ivt_result_i_measurement_error,
    uint8_t ivt_result_i_channel_error,
    uint8_t ivt_result_i_ocs,
    uint8_t ivt_msgcount_result_i,
    int32_t ivt_result_i
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_result_i_raw_to_conversion_struct(
    hv_current_ivt_msg_result_i_converted_t *conversion, 
    const hv_current_ivt_msg_result_i_t *raw);


void hv_current_ivt_msg_result_i_conversion_to_raw_struct(
    hv_current_ivt_msg_result_i_t *raw,
    const hv_current_ivt_msg_result_i_converted_t *conversion);

int hv_current_ivt_msg_result_i_ivt_id_result_i_enum_to_string(hv_current_ivt_msg_result_i_ivt_id_result_i value, char *buffer);

int hv_current_ivt_msg_result_i_to_string(hv_current_ivt_msg_result_i_t *message, char *buffer);

int hv_current_ivt_msg_result_i_to_string_file(hv_current_ivt_msg_result_i_t *message, FILE *buffer);

int hv_current_ivt_msg_result_i_fields(char *buffer);

int hv_current_ivt_msg_result_i_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Result_I.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_result_i_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_result_i_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Result_I.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_result_i_unpack(
    hv_current_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_i_ivt_id_result_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_i_ivt_result_i_system_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_i_ivt_result_i_measurement_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_i_ivt_result_i_channel_error_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_i_ivt_result_i_ocs_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_i_ivt_msgcount_result_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_result_i_ivt_result_i_is_in_range(int32_t value);


void hv_current_ivt_msg_cmd_raw_to_conversion(
    hv_current_ivt_msg_cmd_converted_t *conversion,
    hv_current_ivt_msg_cmd_ivt_id_cmd ivt_id_cmd,
    uint8_t _31_trigger_spare,
    uint16_t _10_set_can_id_val_i,
    uint16_t _11_set_can_id_val_u1,
    uint16_t _12_set_can_id_val_u2,
    uint16_t _13_set_can_id_val_u3,
    uint16_t _14_set_can_id_val_t,
    uint16_t _15_set_can_id_val_w,
    uint16_t _16_set_can_id_val_as,
    uint16_t _17_set_can_id_val_wh,
    uint16_t _1d_set_can_id_val_command,
    uint16_t _1f_set_can_id_val_response,
    uint8_t _20_conf_sign_i,
    uint8_t _21_conf_sign_u1,
    uint8_t _22_conf_sign_u2,
    uint8_t _23_conf_sign_u3,
    uint8_t _24_conf_sign_t,
    uint8_t _25_conf_sign_w,
    uint8_t _26_conf_sign_as,
    uint8_t _27_conf_sign_wh,
    hv_current_ivt_msg_cmd__30_reset_item _30_reset_item,
    uint8_t _32_store_dummy,
    uint16_t _33_oc_test_time,
    int16_t _35_oc_pos_set_threshold,
    int16_t _36_oc_neg_set_threshold,
    hv_current_ivt_msg_cmd__3a_restart_to_bitrate _3a_restart_to_bitrate,
    uint8_t _3d_restart_default_dummy,
    uint8_t _3f_restart_dummy,
    hv_current_ivt_msg_cmd__40_get_measerror_item _40_get_measerror_item,
    hv_current_ivt_msg_cmd__41_get_systemerror_item _41_get_systemerror_item,
    hv_current_ivt_msg_cmd__42_get_alllogdata_item _42_get_alllogdata_item,
    hv_current_ivt_msg_cmd__43_get_logdata_item _43_get_logdata_item,
    uint8_t _60_get_result_dummy_i,
    uint8_t _61_get_result_dummy_u1,
    uint8_t _62_get_result_dummy_u2,
    uint8_t _63_get_result_dummy_u3,
    uint8_t _64_get_result_dummy_t,
    uint8_t _65_get_result_dummy_w,
    uint8_t _66_get_result_dummy_as,
    uint8_t _67_get_result_dummy_wh,
    uint8_t _73_get_oc_test_dummy,
    uint8_t _74_get_mode_dummy,
    uint8_t _75_get_oc_pos_dummy,
    uint8_t _76_get_oc_neg_dummy,
    uint8_t _79_get_device_id_dummy,
    uint8_t _7a_get_sw_version_dummy,
    uint8_t _7b_get_serien_nr_dummy,
    uint8_t _7c_get_art_nr_dummy,
    uint8_t _20_conf_endianess_i,
    uint8_t _21_conf_endianess_u1,
    uint8_t _22_conf_endianess_u2,
    uint8_t _23_conf_endianess_u3,
    uint8_t _24_conf_endianess_t,
    uint8_t _25_conf_endianess_w,
    uint8_t _26_conf_endianess_as,
    uint8_t _27_conf_endianess_wh,
    hv_current_ivt_msg_cmd__20_conf_triggermode_i _20_conf_triggermode_i,
    hv_current_ivt_msg_cmd__21_conf_triggermode_u1 _21_conf_triggermode_u1,
    hv_current_ivt_msg_cmd__22_conf_triggermode_u2 _22_conf_triggermode_u2,
    hv_current_ivt_msg_cmd__23_conf_triggermode_u3 _23_conf_triggermode_u3,
    hv_current_ivt_msg_cmd__24_conf_triggermode_t _24_conf_triggermode_t,
    hv_current_ivt_msg_cmd__25_conf_triggermode_w _25_conf_triggermode_w,
    hv_current_ivt_msg_cmd__26_conf_triggermode_as _26_conf_triggermode_as,
    hv_current_ivt_msg_cmd__27_conf_triggermode_wh _27_conf_triggermode_wh,
    hv_current_ivt_msg_cmd__34_actual_mode _34_actual_mode,
    uint8_t _31_07_trigger_wh,
    uint16_t _20_conf_cycletime_i,
    uint16_t _21_conf_cycletime_u1,
    uint16_t _22_conf_cycletime_u2,
    uint16_t _23_conf_cycletime_u3,
    uint16_t _24_conf_cycletime_t,
    uint16_t _25_conf_cycletime_w,
    uint16_t _26_conf_cycletime_as,
    uint16_t _27_conf_cycletime_wh,
    uint8_t _31_06_trigger_as,
    uint8_t _31_05_trigger_w,
    uint8_t _31_04_trigger_t,
    uint8_t _31_03_trigger_u3,
    uint8_t _31_02_trigger_u2,
    uint8_t _31_01_trigger_u1,
    uint8_t _31_00_trigger_i,
    hv_current_ivt_msg_cmd__34_startup_mode _34_startup_mode,
    uint32_t _10_set_can_id_sn_i,
    uint32_t _11_set_can_id_sn_u1,
    uint32_t _12_set_can_id_sn_u2,
    uint32_t _13_set_can_id_sn_u3,
    uint32_t _14_set_can_id_sn_t,
    uint32_t _15_set_can_id_sn_w,
    uint32_t _16_set_can_id_sn_as,
    uint32_t _17_set_can_id_sn_wh,
    uint32_t _1d_set_can_id_sn_command,
    uint32_t _1f_set_can_id_sn_response,
    uint32_t _30_reset_device_sn,
    uint16_t _34_code_level,
    int16_t _35_oc_pos_reset_threshold,
    int16_t _36_oc_neg_reset_threshold,
    uint32_t _50_get_can_id_sn_i,
    uint32_t _51_get_can_id_sn_u1,
    uint32_t _52_get_can_id_sn_u2,
    uint32_t _53_get_can_id_sn_u3,
    uint32_t _54_get_can_id_sn_t,
    uint32_t _55_get_can_id_sn_w,
    uint32_t _56_get_can_id_sn_as,
    uint32_t _57_get_can_id_sn_wh,
    uint32_t _5d_get_can_id_sn_command,
    uint32_t _5f_get_can_id_sn_response
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_cmd_conversion_to_raw(
    hv_current_ivt_msg_cmd_t *raw,
    hv_current_ivt_msg_cmd_ivt_id_cmd ivt_id_cmd,
    uint8_t _31_trigger_spare,
    uint16_t _10_set_can_id_val_i,
    uint16_t _11_set_can_id_val_u1,
    uint16_t _12_set_can_id_val_u2,
    uint16_t _13_set_can_id_val_u3,
    uint16_t _14_set_can_id_val_t,
    uint16_t _15_set_can_id_val_w,
    uint16_t _16_set_can_id_val_as,
    uint16_t _17_set_can_id_val_wh,
    uint16_t _1d_set_can_id_val_command,
    uint16_t _1f_set_can_id_val_response,
    uint8_t _20_conf_sign_i,
    uint8_t _21_conf_sign_u1,
    uint8_t _22_conf_sign_u2,
    uint8_t _23_conf_sign_u3,
    uint8_t _24_conf_sign_t,
    uint8_t _25_conf_sign_w,
    uint8_t _26_conf_sign_as,
    uint8_t _27_conf_sign_wh,
    hv_current_ivt_msg_cmd__30_reset_item _30_reset_item,
    uint8_t _32_store_dummy,
    uint16_t _33_oc_test_time,
    int16_t _35_oc_pos_set_threshold,
    int16_t _36_oc_neg_set_threshold,
    hv_current_ivt_msg_cmd__3a_restart_to_bitrate _3a_restart_to_bitrate,
    uint8_t _3d_restart_default_dummy,
    uint8_t _3f_restart_dummy,
    hv_current_ivt_msg_cmd__40_get_measerror_item _40_get_measerror_item,
    hv_current_ivt_msg_cmd__41_get_systemerror_item _41_get_systemerror_item,
    hv_current_ivt_msg_cmd__42_get_alllogdata_item _42_get_alllogdata_item,
    hv_current_ivt_msg_cmd__43_get_logdata_item _43_get_logdata_item,
    uint8_t _60_get_result_dummy_i,
    uint8_t _61_get_result_dummy_u1,
    uint8_t _62_get_result_dummy_u2,
    uint8_t _63_get_result_dummy_u3,
    uint8_t _64_get_result_dummy_t,
    uint8_t _65_get_result_dummy_w,
    uint8_t _66_get_result_dummy_as,
    uint8_t _67_get_result_dummy_wh,
    uint8_t _73_get_oc_test_dummy,
    uint8_t _74_get_mode_dummy,
    uint8_t _75_get_oc_pos_dummy,
    uint8_t _76_get_oc_neg_dummy,
    uint8_t _79_get_device_id_dummy,
    uint8_t _7a_get_sw_version_dummy,
    uint8_t _7b_get_serien_nr_dummy,
    uint8_t _7c_get_art_nr_dummy,
    uint8_t _20_conf_endianess_i,
    uint8_t _21_conf_endianess_u1,
    uint8_t _22_conf_endianess_u2,
    uint8_t _23_conf_endianess_u3,
    uint8_t _24_conf_endianess_t,
    uint8_t _25_conf_endianess_w,
    uint8_t _26_conf_endianess_as,
    uint8_t _27_conf_endianess_wh,
    hv_current_ivt_msg_cmd__20_conf_triggermode_i _20_conf_triggermode_i,
    hv_current_ivt_msg_cmd__21_conf_triggermode_u1 _21_conf_triggermode_u1,
    hv_current_ivt_msg_cmd__22_conf_triggermode_u2 _22_conf_triggermode_u2,
    hv_current_ivt_msg_cmd__23_conf_triggermode_u3 _23_conf_triggermode_u3,
    hv_current_ivt_msg_cmd__24_conf_triggermode_t _24_conf_triggermode_t,
    hv_current_ivt_msg_cmd__25_conf_triggermode_w _25_conf_triggermode_w,
    hv_current_ivt_msg_cmd__26_conf_triggermode_as _26_conf_triggermode_as,
    hv_current_ivt_msg_cmd__27_conf_triggermode_wh _27_conf_triggermode_wh,
    hv_current_ivt_msg_cmd__34_actual_mode _34_actual_mode,
    uint8_t _31_07_trigger_wh,
    uint16_t _20_conf_cycletime_i,
    uint16_t _21_conf_cycletime_u1,
    uint16_t _22_conf_cycletime_u2,
    uint16_t _23_conf_cycletime_u3,
    uint16_t _24_conf_cycletime_t,
    uint16_t _25_conf_cycletime_w,
    uint16_t _26_conf_cycletime_as,
    uint16_t _27_conf_cycletime_wh,
    uint8_t _31_06_trigger_as,
    uint8_t _31_05_trigger_w,
    uint8_t _31_04_trigger_t,
    uint8_t _31_03_trigger_u3,
    uint8_t _31_02_trigger_u2,
    uint8_t _31_01_trigger_u1,
    uint8_t _31_00_trigger_i,
    hv_current_ivt_msg_cmd__34_startup_mode _34_startup_mode,
    uint32_t _10_set_can_id_sn_i,
    uint32_t _11_set_can_id_sn_u1,
    uint32_t _12_set_can_id_sn_u2,
    uint32_t _13_set_can_id_sn_u3,
    uint32_t _14_set_can_id_sn_t,
    uint32_t _15_set_can_id_sn_w,
    uint32_t _16_set_can_id_sn_as,
    uint32_t _17_set_can_id_sn_wh,
    uint32_t _1d_set_can_id_sn_command,
    uint32_t _1f_set_can_id_sn_response,
    uint32_t _30_reset_device_sn,
    uint16_t _34_code_level,
    int16_t _35_oc_pos_reset_threshold,
    int16_t _36_oc_neg_reset_threshold,
    uint32_t _50_get_can_id_sn_i,
    uint32_t _51_get_can_id_sn_u1,
    uint32_t _52_get_can_id_sn_u2,
    uint32_t _53_get_can_id_sn_u3,
    uint32_t _54_get_can_id_sn_t,
    uint32_t _55_get_can_id_sn_w,
    uint32_t _56_get_can_id_sn_as,
    uint32_t _57_get_can_id_sn_wh,
    uint32_t _5d_get_can_id_sn_command,
    uint32_t _5f_get_can_id_sn_response
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void hv_current_ivt_msg_cmd_raw_to_conversion_struct(
    hv_current_ivt_msg_cmd_converted_t *conversion, 
    const hv_current_ivt_msg_cmd_t *raw);


void hv_current_ivt_msg_cmd_conversion_to_raw_struct(
    hv_current_ivt_msg_cmd_t *raw,
    const hv_current_ivt_msg_cmd_converted_t *conversion);

int hv_current_ivt_msg_cmd_ivt_id_cmd_enum_to_string(hv_current_ivt_msg_cmd_ivt_id_cmd value, char *buffer);
int hv_current_ivt_msg_cmd__30_reset_item_enum_to_string(hv_current_ivt_msg_cmd__30_reset_item value, char *buffer);
int hv_current_ivt_msg_cmd__3a_restart_to_bitrate_enum_to_string(hv_current_ivt_msg_cmd__3a_restart_to_bitrate value, char *buffer);
int hv_current_ivt_msg_cmd__40_get_measerror_item_enum_to_string(hv_current_ivt_msg_cmd__40_get_measerror_item value, char *buffer);
int hv_current_ivt_msg_cmd__41_get_systemerror_item_enum_to_string(hv_current_ivt_msg_cmd__41_get_systemerror_item value, char *buffer);
int hv_current_ivt_msg_cmd__42_get_alllogdata_item_enum_to_string(hv_current_ivt_msg_cmd__42_get_alllogdata_item value, char *buffer);
int hv_current_ivt_msg_cmd__43_get_logdata_item_enum_to_string(hv_current_ivt_msg_cmd__43_get_logdata_item value, char *buffer);
int hv_current_ivt_msg_cmd__20_conf_triggermode_i_enum_to_string(hv_current_ivt_msg_cmd__20_conf_triggermode_i value, char *buffer);
int hv_current_ivt_msg_cmd__21_conf_triggermode_u1_enum_to_string(hv_current_ivt_msg_cmd__21_conf_triggermode_u1 value, char *buffer);
int hv_current_ivt_msg_cmd__22_conf_triggermode_u2_enum_to_string(hv_current_ivt_msg_cmd__22_conf_triggermode_u2 value, char *buffer);
int hv_current_ivt_msg_cmd__23_conf_triggermode_u3_enum_to_string(hv_current_ivt_msg_cmd__23_conf_triggermode_u3 value, char *buffer);
int hv_current_ivt_msg_cmd__24_conf_triggermode_t_enum_to_string(hv_current_ivt_msg_cmd__24_conf_triggermode_t value, char *buffer);
int hv_current_ivt_msg_cmd__25_conf_triggermode_w_enum_to_string(hv_current_ivt_msg_cmd__25_conf_triggermode_w value, char *buffer);
int hv_current_ivt_msg_cmd__26_conf_triggermode_as_enum_to_string(hv_current_ivt_msg_cmd__26_conf_triggermode_as value, char *buffer);
int hv_current_ivt_msg_cmd__27_conf_triggermode_wh_enum_to_string(hv_current_ivt_msg_cmd__27_conf_triggermode_wh value, char *buffer);
int hv_current_ivt_msg_cmd__34_actual_mode_enum_to_string(hv_current_ivt_msg_cmd__34_actual_mode value, char *buffer);
int hv_current_ivt_msg_cmd__34_startup_mode_enum_to_string(hv_current_ivt_msg_cmd__34_startup_mode value, char *buffer);

int hv_current_ivt_msg_cmd_to_string(hv_current_ivt_msg_cmd_t *message, char *buffer);

int hv_current_ivt_msg_cmd_to_string_file(hv_current_ivt_msg_cmd_t *message, FILE *buffer);

int hv_current_ivt_msg_cmd_fields(char *buffer);

int hv_current_ivt_msg_cmd_fields_file(FILE *buffer);

/**
 * Pack message IVT_Msg_Cmd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hv_current_ivt_msg_cmd_pack(
    uint8_t *dst_p,
    const hv_current_ivt_msg_cmd_t *src_p,
    size_t byte_size);

/**
 * Unpack message IVT_Msg_Cmd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hv_current_ivt_msg_cmd_unpack(
    hv_current_ivt_msg_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd_ivt_id_cmd_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_trigger_spare_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__10_set_can_id_val_i_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__11_set_can_id_val_u1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__12_set_can_id_val_u2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__13_set_can_id_val_u3_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__14_set_can_id_val_t_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__15_set_can_id_val_w_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__16_set_can_id_val_as_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__17_set_can_id_val_wh_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__1d_set_can_id_val_command_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__1f_set_can_id_val_response_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__20_conf_sign_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__21_conf_sign_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__22_conf_sign_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__23_conf_sign_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__24_conf_sign_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__25_conf_sign_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__26_conf_sign_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__27_conf_sign_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__30_reset_item_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__32_store_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__33_oc_test_time_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__35_oc_pos_set_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__36_oc_neg_set_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__3a_restart_to_bitrate_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__3d_restart_default_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__3f_restart_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__40_get_measerror_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__41_get_systemerror_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__42_get_alllogdata_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__43_get_logdata_item_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__60_get_result_dummy_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__61_get_result_dummy_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__62_get_result_dummy_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__63_get_result_dummy_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__64_get_result_dummy_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__65_get_result_dummy_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__66_get_result_dummy_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__67_get_result_dummy_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__73_get_oc_test_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__74_get_mode_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__75_get_oc_pos_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__76_get_oc_neg_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__79_get_device_id_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__7a_get_sw_version_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__7b_get_serien_nr_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__7c_get_art_nr_dummy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__20_conf_endianess_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__21_conf_endianess_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__22_conf_endianess_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__23_conf_endianess_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__24_conf_endianess_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__25_conf_endianess_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__26_conf_endianess_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__27_conf_endianess_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__20_conf_triggermode_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__21_conf_triggermode_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__22_conf_triggermode_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__23_conf_triggermode_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__24_conf_triggermode_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__25_conf_triggermode_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__26_conf_triggermode_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__27_conf_triggermode_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__34_actual_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_07_trigger_wh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__20_conf_cycletime_i_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__21_conf_cycletime_u1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__22_conf_cycletime_u2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__23_conf_cycletime_u3_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__24_conf_cycletime_t_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__25_conf_cycletime_w_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__26_conf_cycletime_as_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__27_conf_cycletime_wh_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_06_trigger_as_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_05_trigger_w_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_04_trigger_t_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_03_trigger_u3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_02_trigger_u2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_01_trigger_u1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__31_00_trigger_i_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__34_startup_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__10_set_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__11_set_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__12_set_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__13_set_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__14_set_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__15_set_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__16_set_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__17_set_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__1d_set_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__1f_set_can_id_sn_response_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__30_reset_device_sn_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__34_code_level_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__35_oc_pos_reset_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__36_oc_neg_reset_threshold_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__50_get_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__51_get_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__52_get_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__53_get_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__54_get_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__55_get_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__56_get_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__57_get_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__5d_get_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hv_current_ivt_msg_cmd__5f_get_can_id_sn_response_is_in_range(uint32_t value);

bool hv_current_id_is_message(uint16_t id);

int hv_current_to_string_from_id(uint16_t message_id, void* message, char* buffer);
int hv_current_fields_from_id(uint16_t message_id, char* buffer);
int hv_current_to_string_file_from_id(uint16_t message_id, void* message, FILE* buffer);
int hv_current_fields_file_from_id(uint16_t message_id, FILE* buffer);


typedef union CANLIB_PARKING {
    hv_current_ivt_msg_result_wh_t _ivt_msg_result_wh;
    hv_current_ivt_msg_result_as_t _ivt_msg_result_as;
    hv_current_ivt_msg_result_w_t _ivt_msg_result_w;
    hv_current_ivt_msg_response_t _ivt_msg_response;
    hv_current_ivt_msg_result_t_t _ivt_msg_result_t;
    hv_current_ivt_msg_result_u3_t _ivt_msg_result_u3;
    hv_current_ivt_msg_result_u2_t _ivt_msg_result_u2;
    hv_current_ivt_msg_result_u1_t _ivt_msg_result_u1;
    hv_current_ivt_msg_result_i_t _ivt_msg_result_i;
    hv_current_ivt_msg_cmd_t _ivt_msg_cmd;

} _hv_current_all_struct_raw;

typedef union CANLIB_PARKING {
    hv_current_ivt_msg_result_wh_converted_t _ivt_msg_result_wh;
    hv_current_ivt_msg_result_as_converted_t _ivt_msg_result_as;
    hv_current_ivt_msg_result_w_converted_t _ivt_msg_result_w;
    hv_current_ivt_msg_response_converted_t _ivt_msg_response;
    hv_current_ivt_msg_result_t_converted_t _ivt_msg_result_t;
    hv_current_ivt_msg_result_u3_converted_t _ivt_msg_result_u3;
    hv_current_ivt_msg_result_u2_converted_t _ivt_msg_result_u2;
    hv_current_ivt_msg_result_u1_converted_t _ivt_msg_result_u1;
    hv_current_ivt_msg_result_i_converted_t _ivt_msg_result_i;
    hv_current_ivt_msg_cmd_converted_t _ivt_msg_cmd;

} _hv_current_all_struct_converted;



#define hv_current_MAX_STRUCT_SIZE_RAW sizeof(_hv_current_all_struct_raw)
#define hv_current_MAX_STRUCT_SIZE_CONVERSION sizeof(_hv_current_all_struct_converted)

#ifdef __cplusplus
}
#endif

#endif
