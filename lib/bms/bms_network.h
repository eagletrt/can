/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Tue Apr  9 11:16:18 2024.
 */

#ifndef BMS_H
#define BMS_H

#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef CANLIB_BUILD
#define CANLIB_BUILD
#define CANLIB_BUILD_TIME 1712661378
#endif // CANLIB_BUILD

#define canlib_min(a,b) (((a) < (b)) ? (a) : (b))
#define canlib_max(a,b) (((a) > (b)) ? (a) : (b))

#ifndef CANLIB_PARKING
/* We know it's PACKING but PARKING sounds a bit better ;) */
#if defined(__MINGW32__)
#define CANLIB_PARKING                                                           __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define CANLIB_PARKING __attribute__((__packed__)) // , __aligned__(1)))
#endif                                             // defined(__MINGW32__)
#endif                                             // CANLIB_PARKING

#ifndef EINVAL
#    define EINVAL 22
#endif

/* General defines */
#define BMS_ONESHOT (-1)

/* Frame ids. */
#define BMS_BOARD_STATUS_FRAME_ID (0x401u)
#define BMS_TEMPERATURES_INFO_FRAME_ID (0x202u)
#define BMS_TEMPERATURES_FRAME_ID (0x602u)
#define BMS_VOLTAGES_INFO_FRAME_ID (0x204u)
#define BMS_VOLTAGES_FRAME_ID (0x604u)
#define BMS_SET_BALANCING_STATUS_FRAME_ID (0x10u)
#define BMS_JMP_TO_BLT_FRAME_ID (0x00u)
#define BMS_FLASH_CELLBOARD_0_TX_FRAME_ID (0x04u)
#define BMS_FLASH_CELLBOARD_0_RX_FRAME_ID (0x05u)
#define BMS_FLASH_CELLBOARD_1_TX_FRAME_ID (0x06u)
#define BMS_FLASH_CELLBOARD_1_RX_FRAME_ID (0x07u)
#define BMS_FLASH_CELLBOARD_2_TX_FRAME_ID (0x08u)
#define BMS_FLASH_CELLBOARD_2_RX_FRAME_ID (0x09u)
#define BMS_FLASH_CELLBOARD_3_TX_FRAME_ID (0x0au)
#define BMS_FLASH_CELLBOARD_3_RX_FRAME_ID (0x0bu)
#define BMS_FLASH_CELLBOARD_4_TX_FRAME_ID (0x0cu)
#define BMS_FLASH_CELLBOARD_4_RX_FRAME_ID (0x0du)
#define BMS_FLASH_CELLBOARD_5_TX_FRAME_ID (0x0eu)
#define BMS_FLASH_CELLBOARD_5_RX_FRAME_ID (0x0fu)
#define BMS_CELLBOARD_VERSION_FRAME_ID (0x603u)

/* Frame lengths in bytes. */
#define BMS_BOARD_STATUS_BYTE_SIZE (4u)
#define BMS_TEMPERATURES_INFO_BYTE_SIZE (7u)
#define BMS_TEMPERATURES_BYTE_SIZE (6u)
#define BMS_VOLTAGES_INFO_BYTE_SIZE (7u)
#define BMS_VOLTAGES_BYTE_SIZE (8u)
#define BMS_SET_BALANCING_STATUS_BYTE_SIZE (5u)
#define BMS_JMP_TO_BLT_BYTE_SIZE (2u)
#define BMS_FLASH_CELLBOARD_0_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_0_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_1_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_1_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_2_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_2_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_3_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_3_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_4_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_4_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_5_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_5_RX_BYTE_SIZE (0u)
#define BMS_CELLBOARD_VERSION_BYTE_SIZE (7u)

/* Extended or standard frame types. */
#define BMS_BOARD_STATUS_IS_EXTENDED (0)
#define BMS_TEMPERATURES_INFO_IS_EXTENDED (0)
#define BMS_TEMPERATURES_IS_EXTENDED (0)
#define BMS_VOLTAGES_INFO_IS_EXTENDED (0)
#define BMS_VOLTAGES_IS_EXTENDED (0)
#define BMS_SET_BALANCING_STATUS_IS_EXTENDED (0)
#define BMS_JMP_TO_BLT_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_0_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_0_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_1_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_1_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_2_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_2_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_3_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_3_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_4_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_4_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_5_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_5_RX_IS_EXTENDED (0)
#define BMS_CELLBOARD_VERSION_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define BMS_CELLBOARD_VERSION_CYCLE_TIME_MS (1000u)
#define BMS_BOARD_STATUS_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_TEMPERATURES_INFO_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_TEMPERATURES_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_VOLTAGES_INFO_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_VOLTAGES_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_SET_BALANCING_STATUS_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_JMP_TO_BLT_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_0_TX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_0_RX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_1_TX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_1_RX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_2_TX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_2_RX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_3_TX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_3_RX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_4_TX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_4_RX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_5_TX_CYCLE_TIME_MS (BMS_ONESHOT)
#define BMS_FLASH_CELLBOARD_5_RX_CYCLE_TIME_MS (BMS_ONESHOT)

/* Topics masks */
/* TOPIC STATUS */
#define BMS_TOPIC_MASK_STATUS 0b00000011111

#define BMS_TOPIC_FILTER_STATUS 0x1 // dec: 1 bin: 0b00000000001

#define BMS_ID_BOARD_STATUS 0x401 // dec: 1025 bin: 0b10000000001

/* TOPIC TEMPERATURE_INFO */
#define BMS_TOPIC_MASK_TEMPERATURE_INFO 0b00000011111

#define BMS_TOPIC_FILTER_TEMPERATURE_INFO 0x2 // dec: 2 bin: 0b00000000010

#define BMS_ID_TEMPERATURES_INFO 0x202 // dec: 514 bin: 0b01000000010
#define BMS_ID_TEMPERATURES 0x602 // dec: 1538 bin: 0b11000000010

/* TOPIC VOLTAGE_INFO */
#define BMS_TOPIC_MASK_VOLTAGE_INFO 0b00000011111

#define BMS_TOPIC_FILTER_VOLTAGE_INFO 0x4 // dec: 4 bin: 0b00000000100

#define BMS_ID_VOLTAGES_INFO 0x204 // dec: 516 bin: 0b01000000100
#define BMS_ID_VOLTAGES 0x604 // dec: 1540 bin: 0b11000000100

/* TOPIC BALANCING */
#define BMS_TOPIC_MASK_BALANCING 0b00000011111

#define BMS_TOPIC_FILTER_BALANCING 0x0 // dec: 0 bin: 0b00000000000

#define BMS_ID_SET_BALANCING_STATUS 0x10 // dec: 16 bin: 0b00000010000

/* TOPIC FIXED_IDS */
#define BMS_TOPIC_MASK_FIXED_IDS 0b00000011111

#define BMS_ID_JMP_TO_BLT 0x0 // dec: 0 bin: 0b00000000000
#define BMS_ID_FLASH_CELLBOARD_0_TX 0x4 // dec: 4 bin: 0b00000000100
#define BMS_ID_FLASH_CELLBOARD_0_RX 0x5 // dec: 5 bin: 0b00000000101
#define BMS_ID_FLASH_CELLBOARD_1_TX 0x6 // dec: 6 bin: 0b00000000110
#define BMS_ID_FLASH_CELLBOARD_1_RX 0x7 // dec: 7 bin: 0b00000000111
#define BMS_ID_FLASH_CELLBOARD_2_TX 0x8 // dec: 8 bin: 0b00000001000
#define BMS_ID_FLASH_CELLBOARD_2_RX 0x9 // dec: 9 bin: 0b00000001001
#define BMS_ID_FLASH_CELLBOARD_3_TX 0xA // dec: 10 bin: 0b00000001010
#define BMS_ID_FLASH_CELLBOARD_3_RX 0xB // dec: 11 bin: 0b00000001011
#define BMS_ID_FLASH_CELLBOARD_4_TX 0xC // dec: 12 bin: 0b00000001100
#define BMS_ID_FLASH_CELLBOARD_4_RX 0xD // dec: 13 bin: 0b00000001101
#define BMS_ID_FLASH_CELLBOARD_5_TX 0xE // dec: 14 bin: 0b00000001110
#define BMS_ID_FLASH_CELLBOARD_5_RX 0xF // dec: 15 bin: 0b00000001111

/* TOPIC VERSION */
#define BMS_TOPIC_MASK_VERSION 0b00000011111

#define BMS_TOPIC_FILTER_VERSION 0x3 // dec: 3 bin: 0b00000000011

#define BMS_ID_CELLBOARD_VERSION 0x603 // dec: 1539 bin: 0b11000000011



/* Signal choices. */
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_BOARD_STATUS_BALANCING_STATUS_OFF_CHOICE (0u)
#define BMS_BOARD_STATUS_BALANCING_STATUS_DISCHARGE_CHOICE (1u)

#define BMS_TEMPERATURES_INFO_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_TEMPERATURES_INFO_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_TEMPERATURES_INFO_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_TEMPERATURES_INFO_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_TEMPERATURES_INFO_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_TEMPERATURES_INFO_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_VOLTAGES_INFO_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_VOLTAGES_INFO_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_VOLTAGES_INFO_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_VOLTAGES_INFO_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_VOLTAGES_INFO_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_VOLTAGES_INFO_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_SET_BALANCING_STATUS_BALANCING_STATUS_OFF_CHOICE (0u)
#define BMS_SET_BALANCING_STATUS_BALANCING_STATUS_DISCHARGE_CHOICE (1u)

#define BMS_JMP_TO_BLT_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_JMP_TO_BLT_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_JMP_TO_BLT_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_JMP_TO_BLT_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_JMP_TO_BLT_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_JMP_TO_BLT_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_CELLBOARD_VERSION_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_CELLBOARD_VERSION_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_CELLBOARD_VERSION_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_CELLBOARD_VERSION_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_CELLBOARD_VERSION_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_CELLBOARD_VERSION_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

/* Indexes */
#define BMS_BOARD_STATUS_INDEX 0
#define BMS_TEMPERATURES_INFO_INDEX 1
#define BMS_TEMPERATURES_INDEX 2
#define BMS_VOLTAGES_INFO_INDEX 3
#define BMS_VOLTAGES_INDEX 4
#define BMS_SET_BALANCING_STATUS_INDEX 5
#define BMS_JMP_TO_BLT_INDEX 6
#define BMS_FLASH_CELLBOARD_0_TX_INDEX 7
#define BMS_FLASH_CELLBOARD_0_RX_INDEX 8
#define BMS_FLASH_CELLBOARD_1_TX_INDEX 9
#define BMS_FLASH_CELLBOARD_1_RX_INDEX 10
#define BMS_FLASH_CELLBOARD_2_TX_INDEX 11
#define BMS_FLASH_CELLBOARD_2_RX_INDEX 12
#define BMS_FLASH_CELLBOARD_3_TX_INDEX 13
#define BMS_FLASH_CELLBOARD_3_RX_INDEX 14
#define BMS_FLASH_CELLBOARD_4_TX_INDEX 15
#define BMS_FLASH_CELLBOARD_4_RX_INDEX 16
#define BMS_FLASH_CELLBOARD_5_TX_INDEX 17
#define BMS_FLASH_CELLBOARD_5_RX_INDEX 18
#define BMS_CELLBOARD_VERSION_INDEX 19


#define bms_MESSAGE_COUNT 20

#ifndef CANLIB_DEVICE_T
#define CANLIB_DEVICE_T
typedef struct {
    void* message;
    void* _converted;
    void* _raw;
    int _size_raw;
    int _size_converted;
} device_t;
void device_init(device_t *device);
void device_preallocate(device_t *device, int bytes);
void device_free(device_t *device);
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size);
#endif // CANLIB_DEVICE_T

#ifdef CANLIB_DEVICE_IMPLEMENTATION
#undef CANLIB_DEVICE_IMPLEMENTATION
void device_init(device_t *device) {
    device->message = NULL;
    device->_converted = NULL;
    device->_raw = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_preallocate(device_t *device, int bytes){
    if(device->_size_raw > 0)
        free(device->_raw);
    if(device->_size_converted > 0)
        free(device->_converted);
    device->_raw = malloc(bytes);
    device->_converted = malloc(bytes);
    device->_size_converted = device->_size_raw = bytes;
}
void device_free(device_t *device) {
    free(device->_raw);
    free(device->_converted);
    device->message = NULL;
    device->_raw = NULL;
    device->_converted = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size) {
    device->_raw = raw;
    device->_converted = converted;
    device->_size_raw = raw_size;
    device->_size_converted = converted_size;
}
#endif // CANLIB_DEVICE_IMPLEMENTATION

void bms_devices_deserialize_from_id(
    device_t* device,
    uint16_t message_id,
    uint8_t* data
#ifdef CANLIB_TIMESTAMP
    , uint64_t timestamp
#endif // CANLIB_TIMESTAMP
);

int bms_message_name_from_id(uint16_t id, char* buffer);
int bms_index_from_id(uint16_t id);
int bms_id_from_index(int index);

typedef enum {
	bms_board_status_cellboard_id_CELLBOARD_0 = 0,
	bms_board_status_cellboard_id_CELLBOARD_1 = 1,
	bms_board_status_cellboard_id_CELLBOARD_2 = 2,
	bms_board_status_cellboard_id_CELLBOARD_3 = 3,
	bms_board_status_cellboard_id_CELLBOARD_4 = 4,
	bms_board_status_cellboard_id_CELLBOARD_5 = 5,
} bms_board_status_cellboard_id;

typedef enum {
	bms_board_status_balancing_status_OFF = 0,
	bms_board_status_balancing_status_DISCHARGE = 1,
} bms_board_status_balancing_status;

typedef enum {
	bms_temperatures_info_cellboard_id_CELLBOARD_0 = 0,
	bms_temperatures_info_cellboard_id_CELLBOARD_1 = 1,
	bms_temperatures_info_cellboard_id_CELLBOARD_2 = 2,
	bms_temperatures_info_cellboard_id_CELLBOARD_3 = 3,
	bms_temperatures_info_cellboard_id_CELLBOARD_4 = 4,
	bms_temperatures_info_cellboard_id_CELLBOARD_5 = 5,
} bms_temperatures_info_cellboard_id;

typedef enum {
	bms_temperatures_cellboard_id_CELLBOARD_0 = 0,
	bms_temperatures_cellboard_id_CELLBOARD_1 = 1,
	bms_temperatures_cellboard_id_CELLBOARD_2 = 2,
	bms_temperatures_cellboard_id_CELLBOARD_3 = 3,
	bms_temperatures_cellboard_id_CELLBOARD_4 = 4,
	bms_temperatures_cellboard_id_CELLBOARD_5 = 5,
} bms_temperatures_cellboard_id;

typedef enum {
	bms_voltages_info_cellboard_id_CELLBOARD_0 = 0,
	bms_voltages_info_cellboard_id_CELLBOARD_1 = 1,
	bms_voltages_info_cellboard_id_CELLBOARD_2 = 2,
	bms_voltages_info_cellboard_id_CELLBOARD_3 = 3,
	bms_voltages_info_cellboard_id_CELLBOARD_4 = 4,
	bms_voltages_info_cellboard_id_CELLBOARD_5 = 5,
} bms_voltages_info_cellboard_id;

typedef enum {
	bms_voltages_cellboard_id_CELLBOARD_0 = 0,
	bms_voltages_cellboard_id_CELLBOARD_1 = 1,
	bms_voltages_cellboard_id_CELLBOARD_2 = 2,
	bms_voltages_cellboard_id_CELLBOARD_3 = 3,
	bms_voltages_cellboard_id_CELLBOARD_4 = 4,
	bms_voltages_cellboard_id_CELLBOARD_5 = 5,
} bms_voltages_cellboard_id;

typedef enum {
	bms_set_balancing_status_balancing_status_OFF = 0,
	bms_set_balancing_status_balancing_status_DISCHARGE = 1,
} bms_set_balancing_status_balancing_status;

typedef enum {
	bms_jmp_to_blt_cellboard_id_CELLBOARD_0 = 0,
	bms_jmp_to_blt_cellboard_id_CELLBOARD_1 = 1,
	bms_jmp_to_blt_cellboard_id_CELLBOARD_2 = 2,
	bms_jmp_to_blt_cellboard_id_CELLBOARD_3 = 3,
	bms_jmp_to_blt_cellboard_id_CELLBOARD_4 = 4,
	bms_jmp_to_blt_cellboard_id_CELLBOARD_5 = 5,
} bms_jmp_to_blt_cellboard_id;

typedef enum {
	bms_cellboard_version_cellboard_id_CELLBOARD_0 = 0,
	bms_cellboard_version_cellboard_id_CELLBOARD_1 = 1,
	bms_cellboard_version_cellboard_id_CELLBOARD_2 = 2,
	bms_cellboard_version_cellboard_id_CELLBOARD_3 = 3,
	bms_cellboard_version_cellboard_id_CELLBOARD_4 = 4,
	bms_cellboard_version_cellboard_id_CELLBOARD_5 = 5,
} bms_cellboard_version_cellboard_id;

/**
 * Signals in message BOARD_STATUS.
 *
 * Cellboard's status
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_cellboard_id cellboard_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_can_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_ltc_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_open_wire;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_balancing_status balancing_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing_cells_cell17;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_board_status_t;

/**
 * Signals in message BOARD_STATUS.
 *
 * Cellboard's status
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_cellboard_id cellboard_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_can_comm : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_ltc_comm : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_0 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_1 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_2 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_3 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_4 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_5 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_open_wire : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_balancing_status balancing_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell0 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell1 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell2 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell3 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell4 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell5 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell6 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell7 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell8 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell9 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell10 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell11 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell12 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell13 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell14 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell15 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell16 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int balancing_cells_cell17 : 1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_board_status_converted_t;

/**
 * Signals in message TEMPERATURES_INFO.
 *
 * Cellboard temperature precalculated values
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_temperatures_info_cellboard_id cellboard_id;

    /**
     * Range: 0..65535 (-20..80 -)
     * Scale: 0.0015259021896696422
     * Offset: -20
     */
    uint16_t min_temp;

    /**
     * Range: 0..65535 (-20..80 -)
     * Scale: 0.0015259021896696422
     * Offset: -20
     */
    uint16_t max_temp;

    /**
     * Range: 0..65535 (-20..80 -)
     * Scale: 0.0015259021896696422
     * Offset: -20
     */
    uint16_t avg_temp;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_temperatures_info_t;

/**
 * Signals in message TEMPERATURES_INFO.
 *
 * Cellboard temperature precalculated values
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_temperatures_info_cellboard_id cellboard_id;

    /**
     * Range: 0..65535 (-20..80 -)
     * Scale: 0.0015259021896696422
     * Offset: -20
     */
    float min_temp;

    /**
     * Range: 0..65535 (-20..80 -)
     * Scale: 0.0015259021896696422
     * Offset: -20
     */
    float max_temp;

    /**
     * Range: 0..65535 (-20..80 -)
     * Scale: 0.0015259021896696422
     * Offset: -20
     */
    float avg_temp;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_temperatures_info_converted_t;

/**
 * Signals in message TEMPERATURES.
 *
 * Cells' temperatures
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_temperatures_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp0;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp1;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp2;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp3;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_temperatures_t;

/**
 * Signals in message TEMPERATURES.
 *
 * Cells' temperatures
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_temperatures_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp0;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp1;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp2;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp3;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_temperatures_converted_t;

/**
 * Signals in message VOLTAGES_INFO.
 *
 * Cellboard voltages precalculated values
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_voltages_info_cellboard_id cellboard_id;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t min_voltage;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t max_voltage;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t avg_voltage;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_voltages_info_t;

/**
 * Signals in message VOLTAGES_INFO.
 *
 * Cellboard voltages precalculated values
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_voltages_info_cellboard_id cellboard_id;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float min_voltage;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float max_voltage;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float avg_voltage;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_voltages_info_converted_t;

/**
 * Signals in message VOLTAGES.
 *
 * Cells' voltages
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_voltages_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t voltage0;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t voltage1;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t voltage2;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_voltages_t;

/**
 * Signals in message VOLTAGES.
 *
 * Cells' voltages
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_voltages_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float voltage0;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float voltage1;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float voltage2;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_voltages_converted_t;

/**
 * Signals in message SET_BALANCING_STATUS.
 *
 * Set balancing status for cells
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t threshold;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t target;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    bms_set_balancing_status_balancing_status balancing_status;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_set_balancing_status_t;

/**
 * Signals in message SET_BALANCING_STATUS.
 *
 * Set balancing status for cells
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t threshold;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t target;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    bms_set_balancing_status_balancing_status balancing_status;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_set_balancing_status_converted_t;

/**
 * Signals in message JMP_TO_BLT.
 *
 * Starts firmware update
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_jmp_to_blt_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t board_index;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_jmp_to_blt_t;

/**
 * Signals in message JMP_TO_BLT.
 *
 * Starts firmware update
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_jmp_to_blt_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t board_index;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_jmp_to_blt_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_0_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_0_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_0_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_0_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_1_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_1_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_1_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_1_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_2_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_2_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_2_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_2_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_3_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_3_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_3_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_3_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_4_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_4_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_4_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_4_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_5_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_5_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_5_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_5_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_rx_converted_t;

/**
 * Signals in message CELLBOARD_VERSION.
 *
 * Periodic message containing current can definition version
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_cellboard_version_cellboard_id cellboard_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t component_version;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t canlib_build_time;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_cellboard_version_t;

/**
 * Signals in message CELLBOARD_VERSION.
 *
 * Periodic message containing current can definition version
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_cellboard_version_cellboard_id cellboard_id;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t component_version;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t canlib_build_time;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_cellboard_version_converted_t;


void bms_board_status_raw_to_conversion(
    bms_board_status_converted_t *conversion,
    bms_board_status_cellboard_id cellboard_id,
    uint8_t errors_can_comm,
    uint8_t errors_ltc_comm,
    uint8_t errors_temp_comm_0,
    uint8_t errors_temp_comm_1,
    uint8_t errors_temp_comm_2,
    uint8_t errors_temp_comm_3,
    uint8_t errors_temp_comm_4,
    uint8_t errors_temp_comm_5,
    uint8_t errors_open_wire,
    bms_board_status_balancing_status balancing_status,
    uint8_t balancing_cells_cell0,
    uint8_t balancing_cells_cell1,
    uint8_t balancing_cells_cell2,
    uint8_t balancing_cells_cell3,
    uint8_t balancing_cells_cell4,
    uint8_t balancing_cells_cell5,
    uint8_t balancing_cells_cell6,
    uint8_t balancing_cells_cell7,
    uint8_t balancing_cells_cell8,
    uint8_t balancing_cells_cell9,
    uint8_t balancing_cells_cell10,
    uint8_t balancing_cells_cell11,
    uint8_t balancing_cells_cell12,
    uint8_t balancing_cells_cell13,
    uint8_t balancing_cells_cell14,
    uint8_t balancing_cells_cell15,
    uint8_t balancing_cells_cell16,
    uint8_t balancing_cells_cell17
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_board_status_conversion_to_raw(
    bms_board_status_t *raw,
    bms_board_status_cellboard_id cellboard_id,
    uint8_t errors_can_comm,
    uint8_t errors_ltc_comm,
    uint8_t errors_temp_comm_0,
    uint8_t errors_temp_comm_1,
    uint8_t errors_temp_comm_2,
    uint8_t errors_temp_comm_3,
    uint8_t errors_temp_comm_4,
    uint8_t errors_temp_comm_5,
    uint8_t errors_open_wire,
    bms_board_status_balancing_status balancing_status,
    uint8_t balancing_cells_cell0,
    uint8_t balancing_cells_cell1,
    uint8_t balancing_cells_cell2,
    uint8_t balancing_cells_cell3,
    uint8_t balancing_cells_cell4,
    uint8_t balancing_cells_cell5,
    uint8_t balancing_cells_cell6,
    uint8_t balancing_cells_cell7,
    uint8_t balancing_cells_cell8,
    uint8_t balancing_cells_cell9,
    uint8_t balancing_cells_cell10,
    uint8_t balancing_cells_cell11,
    uint8_t balancing_cells_cell12,
    uint8_t balancing_cells_cell13,
    uint8_t balancing_cells_cell14,
    uint8_t balancing_cells_cell15,
    uint8_t balancing_cells_cell16,
    uint8_t balancing_cells_cell17
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_board_status_raw_to_conversion_struct(
    bms_board_status_converted_t *conversion, 
    const bms_board_status_t *raw);


void bms_board_status_conversion_to_raw_struct(
    bms_board_status_t *raw,
    const bms_board_status_converted_t *conversion);

int bms_board_status_cellboard_id_enum_to_string(bms_board_status_cellboard_id value, char *buffer);
int bms_board_status_balancing_status_enum_to_string(bms_board_status_balancing_status value, char *buffer);

int bms_board_status_to_string(bms_board_status_t *message, char *buffer);

int bms_board_status_to_string_file(bms_board_status_t *message, FILE *buffer);

int bms_board_status_fields(char *buffer);

int bms_board_status_fields_file(FILE *buffer);

/**
 * Pack message BOARD_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_board_status_pack(
    uint8_t *dst_p,
    const bms_board_status_t *src_p,
    size_t byte_size);

/**
 * Unpack message BOARD_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_board_status_unpack(
    bms_board_status_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_can_comm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_ltc_comm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_5_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_open_wire_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell5_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell6_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell7_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell8_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell9_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell10_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell14_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell15_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell16_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_cells_cell17_is_in_range(uint8_t value);


void bms_temperatures_info_raw_to_conversion(
    bms_temperatures_info_converted_t *conversion,
    bms_temperatures_info_cellboard_id cellboard_id,
    float min_temp,
    float max_temp,
    float avg_temp
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_temperatures_info_conversion_to_raw(
    bms_temperatures_info_t *raw,
    bms_temperatures_info_cellboard_id cellboard_id,
    float min_temp,
    float max_temp,
    float avg_temp
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_temperatures_info_raw_to_conversion_struct(
    bms_temperatures_info_converted_t *conversion, 
    const bms_temperatures_info_t *raw);


void bms_temperatures_info_conversion_to_raw_struct(
    bms_temperatures_info_t *raw,
    const bms_temperatures_info_converted_t *conversion);

int bms_temperatures_info_cellboard_id_enum_to_string(bms_temperatures_info_cellboard_id value, char *buffer);

int bms_temperatures_info_converted_to_string(bms_temperatures_info_converted_t *message, char *buffer);

int bms_temperatures_info_converted_to_string_file(bms_temperatures_info_converted_t *message, FILE *buffer);

int bms_temperatures_info_fields(char *buffer);

int bms_temperatures_info_fields_file(FILE *buffer);

/**
 * Pack message TEMPERATURES_INFO.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_temperatures_info_pack(
    uint8_t *dst_p,
    const bms_temperatures_info_t *src_p,
    size_t byte_size);

/**
 * Unpack message TEMPERATURES_INFO.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_temperatures_info_unpack(
    bms_temperatures_info_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_info_cellboard_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_temperatures_info_min_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_info_min_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_info_min_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_temperatures_info_max_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_info_max_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_info_max_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_temperatures_info_avg_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_info_avg_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_info_avg_temp_is_in_range(uint16_t value);


void bms_temperatures_raw_to_conversion(
    bms_temperatures_converted_t *conversion,
    bms_temperatures_cellboard_id cellboard_id,
    uint8_t start_index,
    float temp0,
    float temp1,
    float temp2,
    float temp3
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_temperatures_conversion_to_raw(
    bms_temperatures_t *raw,
    bms_temperatures_cellboard_id cellboard_id,
    uint8_t start_index,
    float temp0,
    float temp1,
    float temp2,
    float temp3
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_temperatures_raw_to_conversion_struct(
    bms_temperatures_converted_t *conversion, 
    const bms_temperatures_t *raw);


void bms_temperatures_conversion_to_raw_struct(
    bms_temperatures_t *raw,
    const bms_temperatures_converted_t *conversion);

int bms_temperatures_cellboard_id_enum_to_string(bms_temperatures_cellboard_id value, char *buffer);

int bms_temperatures_converted_to_string(bms_temperatures_converted_t *message, char *buffer);

int bms_temperatures_converted_to_string_file(bms_temperatures_converted_t *message, FILE *buffer);

int bms_temperatures_fields(char *buffer);

int bms_temperatures_fields_file(FILE *buffer);

/**
 * Pack message TEMPERATURES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_temperatures_pack(
    uint8_t *dst_p,
    const bms_temperatures_t *src_p,
    size_t byte_size);

/**
 * Unpack message TEMPERATURES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_temperatures_unpack(
    bms_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_start_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp3_is_in_range(uint8_t value);


void bms_voltages_info_raw_to_conversion(
    bms_voltages_info_converted_t *conversion,
    bms_voltages_info_cellboard_id cellboard_id,
    float min_voltage,
    float max_voltage,
    float avg_voltage
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_voltages_info_conversion_to_raw(
    bms_voltages_info_t *raw,
    bms_voltages_info_cellboard_id cellboard_id,
    float min_voltage,
    float max_voltage,
    float avg_voltage
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_voltages_info_raw_to_conversion_struct(
    bms_voltages_info_converted_t *conversion, 
    const bms_voltages_info_t *raw);


void bms_voltages_info_conversion_to_raw_struct(
    bms_voltages_info_t *raw,
    const bms_voltages_info_converted_t *conversion);

int bms_voltages_info_cellboard_id_enum_to_string(bms_voltages_info_cellboard_id value, char *buffer);

int bms_voltages_info_converted_to_string(bms_voltages_info_converted_t *message, char *buffer);

int bms_voltages_info_converted_to_string_file(bms_voltages_info_converted_t *message, FILE *buffer);

int bms_voltages_info_fields(char *buffer);

int bms_voltages_info_fields_file(FILE *buffer);

/**
 * Pack message VOLTAGES_INFO.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_voltages_info_pack(
    uint8_t *dst_p,
    const bms_voltages_info_t *src_p,
    size_t byte_size);

/**
 * Unpack message VOLTAGES_INFO.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_voltages_info_unpack(
    bms_voltages_info_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_info_cellboard_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_info_min_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_info_min_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_info_min_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_info_max_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_info_max_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_info_max_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_info_avg_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_info_avg_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_info_avg_voltage_is_in_range(uint16_t value);


void bms_voltages_raw_to_conversion(
    bms_voltages_converted_t *conversion,
    bms_voltages_cellboard_id cellboard_id,
    uint8_t start_index,
    float voltage0,
    float voltage1,
    float voltage2
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_voltages_conversion_to_raw(
    bms_voltages_t *raw,
    bms_voltages_cellboard_id cellboard_id,
    uint8_t start_index,
    float voltage0,
    float voltage1,
    float voltage2
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_voltages_raw_to_conversion_struct(
    bms_voltages_converted_t *conversion, 
    const bms_voltages_t *raw);


void bms_voltages_conversion_to_raw_struct(
    bms_voltages_t *raw,
    const bms_voltages_converted_t *conversion);

int bms_voltages_cellboard_id_enum_to_string(bms_voltages_cellboard_id value, char *buffer);

int bms_voltages_converted_to_string(bms_voltages_converted_t *message, char *buffer);

int bms_voltages_converted_to_string_file(bms_voltages_converted_t *message, FILE *buffer);

int bms_voltages_fields(char *buffer);

int bms_voltages_fields_file(FILE *buffer);

/**
 * Pack message VOLTAGES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_voltages_pack(
    uint8_t *dst_p,
    const bms_voltages_t *src_p,
    size_t byte_size);

/**
 * Unpack message VOLTAGES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_voltages_unpack(
    bms_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_start_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_voltage0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_voltage0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_voltage0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_voltage1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_voltage1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_voltage1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_voltage2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_voltage2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_voltage2_is_in_range(uint16_t value);


void bms_set_balancing_status_raw_to_conversion(
    bms_set_balancing_status_converted_t *conversion,
    uint16_t threshold,
    uint16_t target,
    bms_set_balancing_status_balancing_status balancing_status
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_set_balancing_status_conversion_to_raw(
    bms_set_balancing_status_t *raw,
    uint16_t threshold,
    uint16_t target,
    bms_set_balancing_status_balancing_status balancing_status
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_set_balancing_status_raw_to_conversion_struct(
    bms_set_balancing_status_converted_t *conversion, 
    const bms_set_balancing_status_t *raw);


void bms_set_balancing_status_conversion_to_raw_struct(
    bms_set_balancing_status_t *raw,
    const bms_set_balancing_status_converted_t *conversion);

int bms_set_balancing_status_balancing_status_enum_to_string(bms_set_balancing_status_balancing_status value, char *buffer);

int bms_set_balancing_status_to_string(bms_set_balancing_status_t *message, char *buffer);

int bms_set_balancing_status_to_string_file(bms_set_balancing_status_t *message, FILE *buffer);

int bms_set_balancing_status_fields(char *buffer);

int bms_set_balancing_status_fields_file(FILE *buffer);

/**
 * Pack message SET_BALANCING_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_set_balancing_status_pack(
    uint8_t *dst_p,
    const bms_set_balancing_status_t *src_p,
    size_t byte_size);

/**
 * Unpack message SET_BALANCING_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_set_balancing_status_unpack(
    bms_set_balancing_status_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_set_balancing_status_threshold_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_set_balancing_status_target_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_set_balancing_status_balancing_status_is_in_range(uint8_t value);


void bms_jmp_to_blt_raw_to_conversion(
    bms_jmp_to_blt_converted_t *conversion,
    bms_jmp_to_blt_cellboard_id cellboard_id,
    uint8_t board_index
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_jmp_to_blt_conversion_to_raw(
    bms_jmp_to_blt_t *raw,
    bms_jmp_to_blt_cellboard_id cellboard_id,
    uint8_t board_index
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_jmp_to_blt_raw_to_conversion_struct(
    bms_jmp_to_blt_converted_t *conversion, 
    const bms_jmp_to_blt_t *raw);


void bms_jmp_to_blt_conversion_to_raw_struct(
    bms_jmp_to_blt_t *raw,
    const bms_jmp_to_blt_converted_t *conversion);

int bms_jmp_to_blt_cellboard_id_enum_to_string(bms_jmp_to_blt_cellboard_id value, char *buffer);

int bms_jmp_to_blt_to_string(bms_jmp_to_blt_t *message, char *buffer);

int bms_jmp_to_blt_to_string_file(bms_jmp_to_blt_t *message, FILE *buffer);

int bms_jmp_to_blt_fields(char *buffer);

int bms_jmp_to_blt_fields_file(FILE *buffer);

/**
 * Pack message JMP_TO_BLT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_jmp_to_blt_pack(
    uint8_t *dst_p,
    const bms_jmp_to_blt_t *src_p,
    size_t byte_size);

/**
 * Unpack message JMP_TO_BLT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_jmp_to_blt_unpack(
    bms_jmp_to_blt_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_jmp_to_blt_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_jmp_to_blt_board_index_is_in_range(uint8_t value);


;


;


void bms_flash_cellboard_0_tx_raw_to_conversion_struct(
    bms_flash_cellboard_0_tx_converted_t *conversion, 
    const bms_flash_cellboard_0_tx_t *raw);


void bms_flash_cellboard_0_tx_conversion_to_raw_struct(
    bms_flash_cellboard_0_tx_t *raw,
    const bms_flash_cellboard_0_tx_converted_t *conversion);


int bms_flash_cellboard_0_tx_to_string(bms_flash_cellboard_0_tx_t *message, char *buffer);

int bms_flash_cellboard_0_tx_to_string_file(bms_flash_cellboard_0_tx_t *message, FILE *buffer);

int bms_flash_cellboard_0_tx_fields(char *buffer);

int bms_flash_cellboard_0_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_0_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_0_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_0_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_0_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_0_tx_unpack(
    bms_flash_cellboard_0_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_0_rx_raw_to_conversion_struct(
    bms_flash_cellboard_0_rx_converted_t *conversion, 
    const bms_flash_cellboard_0_rx_t *raw);


void bms_flash_cellboard_0_rx_conversion_to_raw_struct(
    bms_flash_cellboard_0_rx_t *raw,
    const bms_flash_cellboard_0_rx_converted_t *conversion);


int bms_flash_cellboard_0_rx_to_string(bms_flash_cellboard_0_rx_t *message, char *buffer);

int bms_flash_cellboard_0_rx_to_string_file(bms_flash_cellboard_0_rx_t *message, FILE *buffer);

int bms_flash_cellboard_0_rx_fields(char *buffer);

int bms_flash_cellboard_0_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_0_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_0_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_0_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_0_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_0_rx_unpack(
    bms_flash_cellboard_0_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_1_tx_raw_to_conversion_struct(
    bms_flash_cellboard_1_tx_converted_t *conversion, 
    const bms_flash_cellboard_1_tx_t *raw);


void bms_flash_cellboard_1_tx_conversion_to_raw_struct(
    bms_flash_cellboard_1_tx_t *raw,
    const bms_flash_cellboard_1_tx_converted_t *conversion);


int bms_flash_cellboard_1_tx_to_string(bms_flash_cellboard_1_tx_t *message, char *buffer);

int bms_flash_cellboard_1_tx_to_string_file(bms_flash_cellboard_1_tx_t *message, FILE *buffer);

int bms_flash_cellboard_1_tx_fields(char *buffer);

int bms_flash_cellboard_1_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_1_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_1_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_1_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_1_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_1_tx_unpack(
    bms_flash_cellboard_1_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_1_rx_raw_to_conversion_struct(
    bms_flash_cellboard_1_rx_converted_t *conversion, 
    const bms_flash_cellboard_1_rx_t *raw);


void bms_flash_cellboard_1_rx_conversion_to_raw_struct(
    bms_flash_cellboard_1_rx_t *raw,
    const bms_flash_cellboard_1_rx_converted_t *conversion);


int bms_flash_cellboard_1_rx_to_string(bms_flash_cellboard_1_rx_t *message, char *buffer);

int bms_flash_cellboard_1_rx_to_string_file(bms_flash_cellboard_1_rx_t *message, FILE *buffer);

int bms_flash_cellboard_1_rx_fields(char *buffer);

int bms_flash_cellboard_1_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_1_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_1_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_1_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_1_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_1_rx_unpack(
    bms_flash_cellboard_1_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_2_tx_raw_to_conversion_struct(
    bms_flash_cellboard_2_tx_converted_t *conversion, 
    const bms_flash_cellboard_2_tx_t *raw);


void bms_flash_cellboard_2_tx_conversion_to_raw_struct(
    bms_flash_cellboard_2_tx_t *raw,
    const bms_flash_cellboard_2_tx_converted_t *conversion);


int bms_flash_cellboard_2_tx_to_string(bms_flash_cellboard_2_tx_t *message, char *buffer);

int bms_flash_cellboard_2_tx_to_string_file(bms_flash_cellboard_2_tx_t *message, FILE *buffer);

int bms_flash_cellboard_2_tx_fields(char *buffer);

int bms_flash_cellboard_2_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_2_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_2_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_2_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_2_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_2_tx_unpack(
    bms_flash_cellboard_2_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_2_rx_raw_to_conversion_struct(
    bms_flash_cellboard_2_rx_converted_t *conversion, 
    const bms_flash_cellboard_2_rx_t *raw);


void bms_flash_cellboard_2_rx_conversion_to_raw_struct(
    bms_flash_cellboard_2_rx_t *raw,
    const bms_flash_cellboard_2_rx_converted_t *conversion);


int bms_flash_cellboard_2_rx_to_string(bms_flash_cellboard_2_rx_t *message, char *buffer);

int bms_flash_cellboard_2_rx_to_string_file(bms_flash_cellboard_2_rx_t *message, FILE *buffer);

int bms_flash_cellboard_2_rx_fields(char *buffer);

int bms_flash_cellboard_2_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_2_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_2_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_2_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_2_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_2_rx_unpack(
    bms_flash_cellboard_2_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_3_tx_raw_to_conversion_struct(
    bms_flash_cellboard_3_tx_converted_t *conversion, 
    const bms_flash_cellboard_3_tx_t *raw);


void bms_flash_cellboard_3_tx_conversion_to_raw_struct(
    bms_flash_cellboard_3_tx_t *raw,
    const bms_flash_cellboard_3_tx_converted_t *conversion);


int bms_flash_cellboard_3_tx_to_string(bms_flash_cellboard_3_tx_t *message, char *buffer);

int bms_flash_cellboard_3_tx_to_string_file(bms_flash_cellboard_3_tx_t *message, FILE *buffer);

int bms_flash_cellboard_3_tx_fields(char *buffer);

int bms_flash_cellboard_3_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_3_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_3_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_3_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_3_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_3_tx_unpack(
    bms_flash_cellboard_3_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_3_rx_raw_to_conversion_struct(
    bms_flash_cellboard_3_rx_converted_t *conversion, 
    const bms_flash_cellboard_3_rx_t *raw);


void bms_flash_cellboard_3_rx_conversion_to_raw_struct(
    bms_flash_cellboard_3_rx_t *raw,
    const bms_flash_cellboard_3_rx_converted_t *conversion);


int bms_flash_cellboard_3_rx_to_string(bms_flash_cellboard_3_rx_t *message, char *buffer);

int bms_flash_cellboard_3_rx_to_string_file(bms_flash_cellboard_3_rx_t *message, FILE *buffer);

int bms_flash_cellboard_3_rx_fields(char *buffer);

int bms_flash_cellboard_3_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_3_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_3_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_3_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_3_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_3_rx_unpack(
    bms_flash_cellboard_3_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_4_tx_raw_to_conversion_struct(
    bms_flash_cellboard_4_tx_converted_t *conversion, 
    const bms_flash_cellboard_4_tx_t *raw);


void bms_flash_cellboard_4_tx_conversion_to_raw_struct(
    bms_flash_cellboard_4_tx_t *raw,
    const bms_flash_cellboard_4_tx_converted_t *conversion);


int bms_flash_cellboard_4_tx_to_string(bms_flash_cellboard_4_tx_t *message, char *buffer);

int bms_flash_cellboard_4_tx_to_string_file(bms_flash_cellboard_4_tx_t *message, FILE *buffer);

int bms_flash_cellboard_4_tx_fields(char *buffer);

int bms_flash_cellboard_4_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_4_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_4_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_4_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_4_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_4_tx_unpack(
    bms_flash_cellboard_4_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_4_rx_raw_to_conversion_struct(
    bms_flash_cellboard_4_rx_converted_t *conversion, 
    const bms_flash_cellboard_4_rx_t *raw);


void bms_flash_cellboard_4_rx_conversion_to_raw_struct(
    bms_flash_cellboard_4_rx_t *raw,
    const bms_flash_cellboard_4_rx_converted_t *conversion);


int bms_flash_cellboard_4_rx_to_string(bms_flash_cellboard_4_rx_t *message, char *buffer);

int bms_flash_cellboard_4_rx_to_string_file(bms_flash_cellboard_4_rx_t *message, FILE *buffer);

int bms_flash_cellboard_4_rx_fields(char *buffer);

int bms_flash_cellboard_4_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_4_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_4_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_4_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_4_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_4_rx_unpack(
    bms_flash_cellboard_4_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_5_tx_raw_to_conversion_struct(
    bms_flash_cellboard_5_tx_converted_t *conversion, 
    const bms_flash_cellboard_5_tx_t *raw);


void bms_flash_cellboard_5_tx_conversion_to_raw_struct(
    bms_flash_cellboard_5_tx_t *raw,
    const bms_flash_cellboard_5_tx_converted_t *conversion);


int bms_flash_cellboard_5_tx_to_string(bms_flash_cellboard_5_tx_t *message, char *buffer);

int bms_flash_cellboard_5_tx_to_string_file(bms_flash_cellboard_5_tx_t *message, FILE *buffer);

int bms_flash_cellboard_5_tx_fields(char *buffer);

int bms_flash_cellboard_5_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_5_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_5_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_5_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_5_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_5_tx_unpack(
    bms_flash_cellboard_5_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_5_rx_raw_to_conversion_struct(
    bms_flash_cellboard_5_rx_converted_t *conversion, 
    const bms_flash_cellboard_5_rx_t *raw);


void bms_flash_cellboard_5_rx_conversion_to_raw_struct(
    bms_flash_cellboard_5_rx_t *raw,
    const bms_flash_cellboard_5_rx_converted_t *conversion);


int bms_flash_cellboard_5_rx_to_string(bms_flash_cellboard_5_rx_t *message, char *buffer);

int bms_flash_cellboard_5_rx_to_string_file(bms_flash_cellboard_5_rx_t *message, FILE *buffer);

int bms_flash_cellboard_5_rx_fields(char *buffer);

int bms_flash_cellboard_5_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_5_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_5_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_5_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_5_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_5_rx_unpack(
    bms_flash_cellboard_5_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


void bms_cellboard_version_raw_to_conversion(
    bms_cellboard_version_converted_t *conversion,
    bms_cellboard_version_cellboard_id cellboard_id,
    uint16_t component_version,
    uint32_t canlib_build_time
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_cellboard_version_conversion_to_raw(
    bms_cellboard_version_t *raw,
    bms_cellboard_version_cellboard_id cellboard_id,
    uint16_t component_version,
    uint32_t canlib_build_time
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_cellboard_version_raw_to_conversion_struct(
    bms_cellboard_version_converted_t *conversion, 
    const bms_cellboard_version_t *raw);


void bms_cellboard_version_conversion_to_raw_struct(
    bms_cellboard_version_t *raw,
    const bms_cellboard_version_converted_t *conversion);

int bms_cellboard_version_cellboard_id_enum_to_string(bms_cellboard_version_cellboard_id value, char *buffer);

int bms_cellboard_version_to_string(bms_cellboard_version_t *message, char *buffer);

int bms_cellboard_version_to_string_file(bms_cellboard_version_t *message, FILE *buffer);

int bms_cellboard_version_fields(char *buffer);

int bms_cellboard_version_fields_file(FILE *buffer);

/**
 * Pack message CELLBOARD_VERSION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_cellboard_version_pack(
    uint8_t *dst_p,
    const bms_cellboard_version_t *src_p,
    size_t byte_size);

/**
 * Unpack message CELLBOARD_VERSION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_cellboard_version_unpack(
    bms_cellboard_version_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_cellboard_version_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_cellboard_version_component_version_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_cellboard_version_canlib_build_time_is_in_range(uint32_t value);

bool bms_id_is_message(uint16_t id);

int bms_to_string_from_id(uint16_t message_id, void* message, char* buffer);
int bms_fields_from_id(uint16_t message_id, char* buffer);
int bms_to_string_file_from_id(uint16_t message_id, void* message, FILE* buffer);
int bms_fields_file_from_id(uint16_t message_id, FILE* buffer);


typedef union CANLIB_PARKING {
    bms_board_status_t _board_status;
    bms_temperatures_info_t _temperatures_info;
    bms_temperatures_t _temperatures;
    bms_voltages_info_t _voltages_info;
    bms_voltages_t _voltages;
    bms_set_balancing_status_t _set_balancing_status;
    bms_jmp_to_blt_t _jmp_to_blt;
    bms_flash_cellboard_0_tx_t _flash_cellboard_0_tx;
    bms_flash_cellboard_0_rx_t _flash_cellboard_0_rx;
    bms_flash_cellboard_1_tx_t _flash_cellboard_1_tx;
    bms_flash_cellboard_1_rx_t _flash_cellboard_1_rx;
    bms_flash_cellboard_2_tx_t _flash_cellboard_2_tx;
    bms_flash_cellboard_2_rx_t _flash_cellboard_2_rx;
    bms_flash_cellboard_3_tx_t _flash_cellboard_3_tx;
    bms_flash_cellboard_3_rx_t _flash_cellboard_3_rx;
    bms_flash_cellboard_4_tx_t _flash_cellboard_4_tx;
    bms_flash_cellboard_4_rx_t _flash_cellboard_4_rx;
    bms_flash_cellboard_5_tx_t _flash_cellboard_5_tx;
    bms_flash_cellboard_5_rx_t _flash_cellboard_5_rx;
    bms_cellboard_version_t _cellboard_version;

} _bms_all_struct_raw;

typedef union CANLIB_PARKING {
    bms_board_status_converted_t _board_status;
    bms_temperatures_info_converted_t _temperatures_info;
    bms_temperatures_converted_t _temperatures;
    bms_voltages_info_converted_t _voltages_info;
    bms_voltages_converted_t _voltages;
    bms_set_balancing_status_converted_t _set_balancing_status;
    bms_jmp_to_blt_converted_t _jmp_to_blt;
    bms_flash_cellboard_0_tx_converted_t _flash_cellboard_0_tx;
    bms_flash_cellboard_0_rx_converted_t _flash_cellboard_0_rx;
    bms_flash_cellboard_1_tx_converted_t _flash_cellboard_1_tx;
    bms_flash_cellboard_1_rx_converted_t _flash_cellboard_1_rx;
    bms_flash_cellboard_2_tx_converted_t _flash_cellboard_2_tx;
    bms_flash_cellboard_2_rx_converted_t _flash_cellboard_2_rx;
    bms_flash_cellboard_3_tx_converted_t _flash_cellboard_3_tx;
    bms_flash_cellboard_3_rx_converted_t _flash_cellboard_3_rx;
    bms_flash_cellboard_4_tx_converted_t _flash_cellboard_4_tx;
    bms_flash_cellboard_4_rx_converted_t _flash_cellboard_4_rx;
    bms_flash_cellboard_5_tx_converted_t _flash_cellboard_5_tx;
    bms_flash_cellboard_5_rx_converted_t _flash_cellboard_5_rx;
    bms_cellboard_version_converted_t _cellboard_version;

} _bms_all_struct_converted;



#define bms_MAX_STRUCT_SIZE_RAW sizeof(_bms_all_struct_raw)
#define bms_MAX_STRUCT_SIZE_CONVERSION sizeof(_bms_all_struct_converted)

#ifdef __cplusplus
}
#endif

#endif
