/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Tue Jun 20 17:04:23 2023.
 */

#ifndef BMS_H
#define BMS_H

#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef CANLIB_BUILD
#define CANLIB_BUILD
#define CANLIB_BUILD_TIME 1687280663
#endif // CANLIB_BUILD

#ifndef CANLIB_PARKING
/* We know it's PACKING but PARKING sounds a bit better ;) */
#if defined(__MINGW32__)
#define CANLIB_PARKING                                                           __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define CANLIB_PARKING __attribute__((__packed__)) // , __aligned__(1)))
#endif                                             // defined(__MINGW32__)
#endif                                             // CANLIB_PARKING

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define BMS_BOARD_STATUS_FRAME_ID (0x600u)
#define BMS_TEMPERATURES_FRAME_ID (0x501u)
#define BMS_VOLTAGES_FRAME_ID (0x203u)
#define BMS_BALANCING_FRAME_ID (0x202u)
#define BMS_FW_UPDATE_FRAME_ID (0x0au)
#define BMS_FLASH_CELLBOARD_0_TX_FRAME_ID (0x10u)
#define BMS_FLASH_CELLBOARD_0_RX_FRAME_ID (0x11u)
#define BMS_FLASH_CELLBOARD_1_TX_FRAME_ID (0x12u)
#define BMS_FLASH_CELLBOARD_1_RX_FRAME_ID (0x13u)
#define BMS_FLASH_CELLBOARD_2_TX_FRAME_ID (0x14u)
#define BMS_FLASH_CELLBOARD_2_RX_FRAME_ID (0x15u)
#define BMS_FLASH_CELLBOARD_3_TX_FRAME_ID (0x16u)
#define BMS_FLASH_CELLBOARD_3_RX_FRAME_ID (0x17u)
#define BMS_FLASH_CELLBOARD_4_TX_FRAME_ID (0x18u)
#define BMS_FLASH_CELLBOARD_4_RX_FRAME_ID (0x19u)
#define BMS_FLASH_CELLBOARD_5_TX_FRAME_ID (0x1au)
#define BMS_FLASH_CELLBOARD_5_RX_FRAME_ID (0x1bu)

/* Frame lengths in bytes. */
#define BMS_BOARD_STATUS_BYTE_SIZE (2u)
#define BMS_TEMPERATURES_BYTE_SIZE (6u)
#define BMS_VOLTAGES_BYTE_SIZE (8u)
#define BMS_BALANCING_BYTE_SIZE (4u)
#define BMS_FW_UPDATE_BYTE_SIZE (2u)
#define BMS_FLASH_CELLBOARD_0_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_0_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_1_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_1_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_2_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_2_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_3_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_3_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_4_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_4_RX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_5_TX_BYTE_SIZE (0u)
#define BMS_FLASH_CELLBOARD_5_RX_BYTE_SIZE (0u)

/* Extended or standard frame types. */
#define BMS_BOARD_STATUS_IS_EXTENDED (0)
#define BMS_TEMPERATURES_IS_EXTENDED (0)
#define BMS_VOLTAGES_IS_EXTENDED (0)
#define BMS_BALANCING_IS_EXTENDED (0)
#define BMS_FW_UPDATE_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_0_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_0_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_1_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_1_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_2_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_2_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_3_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_3_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_4_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_4_RX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_5_TX_IS_EXTENDED (0)
#define BMS_FLASH_CELLBOARD_5_RX_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Topics masks */
/* TOPIC STATUS */
#define BMS_TOPIC_MASK_STATUS 0b00000011111

#define BMS_TOPIC_FILTER_STATUS 0x0 // dec: 0 bin: 0b00000000000

#define BMS_ID_BOARD_STATUS 0x600 // dec: 1536 bin: 0b11000000000

/* TOPIC TEMPERATURE_INFO */
#define BMS_TOPIC_MASK_TEMPERATURE_INFO 0b00000011111

#define BMS_TOPIC_FILTER_TEMPERATURE_INFO 0x1 // dec: 1 bin: 0b00000000001

#define BMS_ID_TEMPERATURES 0x501 // dec: 1281 bin: 0b10100000001

/* TOPIC VOLTAGE_INFO */
#define BMS_TOPIC_MASK_VOLTAGE_INFO 0b00000011111

#define BMS_TOPIC_FILTER_VOLTAGE_INFO 0x3 // dec: 3 bin: 0b00000000011

#define BMS_ID_VOLTAGES 0x203 // dec: 515 bin: 0b01000000011

/* TOPIC BALANCING */
#define BMS_TOPIC_MASK_BALANCING 0b00000011111

#define BMS_TOPIC_FILTER_BALANCING 0x2 // dec: 2 bin: 0b00000000010

#define BMS_ID_BALANCING 0x202 // dec: 514 bin: 0b01000000010

/* TOPIC FIXED_IDS */
#define BMS_TOPIC_MASK_FIXED_IDS 0b00000011111

#define BMS_ID_FW_UPDATE 0xA // dec: 10 bin: 0b00000001010
#define BMS_ID_FLASH_CELLBOARD_0_TX 0x10 // dec: 16 bin: 0b00000010000
#define BMS_ID_FLASH_CELLBOARD_0_RX 0x11 // dec: 17 bin: 0b00000010001
#define BMS_ID_FLASH_CELLBOARD_1_TX 0x12 // dec: 18 bin: 0b00000010010
#define BMS_ID_FLASH_CELLBOARD_1_RX 0x13 // dec: 19 bin: 0b00000010011
#define BMS_ID_FLASH_CELLBOARD_2_TX 0x14 // dec: 20 bin: 0b00000010100
#define BMS_ID_FLASH_CELLBOARD_2_RX 0x15 // dec: 21 bin: 0b00000010101
#define BMS_ID_FLASH_CELLBOARD_3_TX 0x16 // dec: 22 bin: 0b00000010110
#define BMS_ID_FLASH_CELLBOARD_3_RX 0x17 // dec: 23 bin: 0b00000010111
#define BMS_ID_FLASH_CELLBOARD_4_TX 0x18 // dec: 24 bin: 0b00000011000
#define BMS_ID_FLASH_CELLBOARD_4_RX 0x19 // dec: 25 bin: 0b00000011001
#define BMS_ID_FLASH_CELLBOARD_5_TX 0x1A // dec: 26 bin: 0b00000011010
#define BMS_ID_FLASH_CELLBOARD_5_RX 0x1B // dec: 27 bin: 0b00000011011



/* Signal choices. */
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_BOARD_STATUS_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_BOARD_STATUS_BALANCING_STATUS_OFF_CHOICE (0u)
#define BMS_BOARD_STATUS_BALANCING_STATUS_DISCHARGE_CHOICE (1u)

#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_TEMPERATURES_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_VOLTAGES_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_BALANCING_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_BALANCING_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_BALANCING_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_BALANCING_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_BALANCING_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_BALANCING_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

#define BMS_FW_UPDATE_CELLBOARD_ID_CELLBOARD_0_CHOICE (0u)
#define BMS_FW_UPDATE_CELLBOARD_ID_CELLBOARD_1_CHOICE (1u)
#define BMS_FW_UPDATE_CELLBOARD_ID_CELLBOARD_2_CHOICE (2u)
#define BMS_FW_UPDATE_CELLBOARD_ID_CELLBOARD_3_CHOICE (3u)
#define BMS_FW_UPDATE_CELLBOARD_ID_CELLBOARD_4_CHOICE (4u)
#define BMS_FW_UPDATE_CELLBOARD_ID_CELLBOARD_5_CHOICE (5u)

/* Indexes */
#define BMS_BOARD_STATUS_INDEX 0
#define BMS_TEMPERATURES_INDEX 1
#define BMS_VOLTAGES_INDEX 2
#define BMS_BALANCING_INDEX 3
#define BMS_FW_UPDATE_INDEX 4
#define BMS_FLASH_CELLBOARD_0_TX_INDEX 5
#define BMS_FLASH_CELLBOARD_0_RX_INDEX 6
#define BMS_FLASH_CELLBOARD_1_TX_INDEX 7
#define BMS_FLASH_CELLBOARD_1_RX_INDEX 8
#define BMS_FLASH_CELLBOARD_2_TX_INDEX 9
#define BMS_FLASH_CELLBOARD_2_RX_INDEX 10
#define BMS_FLASH_CELLBOARD_3_TX_INDEX 11
#define BMS_FLASH_CELLBOARD_3_RX_INDEX 12
#define BMS_FLASH_CELLBOARD_4_TX_INDEX 13
#define BMS_FLASH_CELLBOARD_4_RX_INDEX 14
#define BMS_FLASH_CELLBOARD_5_TX_INDEX 15
#define BMS_FLASH_CELLBOARD_5_RX_INDEX 16


#define bms_MESSAGE_COUNT 17

#ifndef CANLIB_DEVICES_STRUCT
#define CANLIB_DEVICES_STRUCT
typedef struct {
    uint16_t id;
    void* message_raw;
    void* message_conversion;
} devices_t;
#endif // CANLIB_DEVICES_STRUCT

typedef devices_t bms_devices[bms_MESSAGE_COUNT];


bms_devices* bms_devices_new();
void bms_devices_free(bms_devices* devices);
void bms_devices_deserialize_from_id(
    bms_devices* devices,
    uint16_t message_id,
    uint8_t* data
#ifdef CANLIB_TIMESTAMP
    , uint64_t timestamp
#endif // CANLIB_TIMESTAMP
);

int bms_message_name_from_id(uint16_t id, char* buffer);
int bms_index_from_id(uint16_t id);
int bms_id_from_index(int index);

typedef enum {
	bms_board_status_cellboard_id_CELLBOARD_0 = 0,
	bms_board_status_cellboard_id_CELLBOARD_1 = 1,
	bms_board_status_cellboard_id_CELLBOARD_2 = 2,
	bms_board_status_cellboard_id_CELLBOARD_3 = 3,
	bms_board_status_cellboard_id_CELLBOARD_4 = 4,
	bms_board_status_cellboard_id_CELLBOARD_5 = 5,
} bms_board_status_cellboard_id;

typedef enum {
	bms_board_status_balancing_status_OFF = 0,
	bms_board_status_balancing_status_DISCHARGE = 1,
} bms_board_status_balancing_status;

typedef enum {
	bms_temperatures_cellboard_id_CELLBOARD_0 = 0,
	bms_temperatures_cellboard_id_CELLBOARD_1 = 1,
	bms_temperatures_cellboard_id_CELLBOARD_2 = 2,
	bms_temperatures_cellboard_id_CELLBOARD_3 = 3,
	bms_temperatures_cellboard_id_CELLBOARD_4 = 4,
	bms_temperatures_cellboard_id_CELLBOARD_5 = 5,
} bms_temperatures_cellboard_id;

typedef enum {
	bms_voltages_cellboard_id_CELLBOARD_0 = 0,
	bms_voltages_cellboard_id_CELLBOARD_1 = 1,
	bms_voltages_cellboard_id_CELLBOARD_2 = 2,
	bms_voltages_cellboard_id_CELLBOARD_3 = 3,
	bms_voltages_cellboard_id_CELLBOARD_4 = 4,
	bms_voltages_cellboard_id_CELLBOARD_5 = 5,
} bms_voltages_cellboard_id;

typedef enum {
	bms_balancing_cellboard_id_CELLBOARD_0 = 0,
	bms_balancing_cellboard_id_CELLBOARD_1 = 1,
	bms_balancing_cellboard_id_CELLBOARD_2 = 2,
	bms_balancing_cellboard_id_CELLBOARD_3 = 3,
	bms_balancing_cellboard_id_CELLBOARD_4 = 4,
	bms_balancing_cellboard_id_CELLBOARD_5 = 5,
} bms_balancing_cellboard_id;

typedef enum {
	bms_fw_update_cellboard_id_CELLBOARD_0 = 0,
	bms_fw_update_cellboard_id_CELLBOARD_1 = 1,
	bms_fw_update_cellboard_id_CELLBOARD_2 = 2,
	bms_fw_update_cellboard_id_CELLBOARD_3 = 3,
	bms_fw_update_cellboard_id_CELLBOARD_4 = 4,
	bms_fw_update_cellboard_id_CELLBOARD_5 = 5,
} bms_fw_update_cellboard_id;

/**
 * Signals in message BOARD_STATUS.
 *
 * Cellboard's status
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_cellboard_id cellboard_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_can_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_ltc_comm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_temp_comm_5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t errors_open_wire;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_balancing_status balancing_status;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_board_status_t;

/**
 * Signals in message BOARD_STATUS.
 *
 * Cellboard's status
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_cellboard_id cellboard_id;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_can_comm : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_ltc_comm : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_0 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_1 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_2 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_3 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_4 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_temp_comm_5 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int errors_open_wire : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    bms_board_status_balancing_status balancing_status;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_board_status_converted_t;

/**
 * Signals in message TEMPERATURES.
 *
 * Cells' temperatures
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_temperatures_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp0;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp1;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp2;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    uint8_t temp3;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_temperatures_t;

/**
 * Signals in message TEMPERATURES.
 *
 * Cells' temperatures
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_temperatures_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp0;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp1;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp2;

    /**
     * Range: 0..255 (-20..80 -)
     * Scale: 0.39215686274509803
     * Offset: -20
     */
    float temp3;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_temperatures_converted_t;

/**
 * Signals in message VOLTAGES.
 *
 * Cells' voltages
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_voltages_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t voltage0;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t voltage1;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    uint16_t voltage2;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_voltages_t;

/**
 * Signals in message VOLTAGES.
 *
 * Cells' voltages
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_voltages_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t start_index;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float voltage0;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float voltage1;

    /**
     * Range: 0..65535 (0..5 -)
     * Scale: 7.629510948348211e-05
     * Offset: 0
     */
    float voltage2;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_voltages_converted_t;

/**
 * Signals in message BALANCING.
 *
 * Set discharging status for cells
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_balancing_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t board_index;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell0;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell5;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell6;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell7;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell9;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell10;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell11;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell12;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell13;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell14;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell15;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell16;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cells_cell17;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_balancing_t;

/**
 * Signals in message BALANCING.
 *
 * Set discharging status for cells
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_balancing_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t board_index;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell0 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell1 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell2 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell3 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell4 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell5 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell6 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell7 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell8 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell9 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell10 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell11 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell12 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell13 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell14 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell15 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell16 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cells_cell17 : 1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_balancing_converted_t;

/**
 * Signals in message FW_UPDATE.
 *
 * Starts firmware update
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_fw_update_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t board_index;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_fw_update_t;

/**
 * Signals in message FW_UPDATE.
 *
 * Starts firmware update
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    bms_fw_update_cellboard_id cellboard_id;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t board_index;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_fw_update_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_0_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_0_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_0_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_0_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_0_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_1_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_1_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_1_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_1_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_1_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_2_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_2_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_2_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_2_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_2_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_3_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_3_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_3_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_3_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_3_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_4_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_4_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_4_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_4_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_4_rx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_5_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_tx_t;

/**
 * Signals in message FLASH_CELLBOARD_5_TX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_tx_converted_t;

/**
 * Signals in message FLASH_CELLBOARD_5_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_rx_t;

/**
 * Signals in message FLASH_CELLBOARD_5_RX.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} bms_flash_cellboard_5_rx_converted_t;


void bms_board_status_raw_to_conversion(
    bms_board_status_converted_t *conversion,
    bms_board_status_cellboard_id cellboard_id,
    uint8_t errors_can_comm,
    uint8_t errors_ltc_comm,
    uint8_t errors_temp_comm_0,
    uint8_t errors_temp_comm_1,
    uint8_t errors_temp_comm_2,
    uint8_t errors_temp_comm_3,
    uint8_t errors_temp_comm_4,
    uint8_t errors_temp_comm_5,
    uint8_t errors_open_wire,
    bms_board_status_balancing_status balancing_status
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_board_status_conversion_to_raw(
    bms_board_status_t *raw,
    bms_board_status_cellboard_id cellboard_id,
    uint8_t errors_can_comm,
    uint8_t errors_ltc_comm,
    uint8_t errors_temp_comm_0,
    uint8_t errors_temp_comm_1,
    uint8_t errors_temp_comm_2,
    uint8_t errors_temp_comm_3,
    uint8_t errors_temp_comm_4,
    uint8_t errors_temp_comm_5,
    uint8_t errors_open_wire,
    bms_board_status_balancing_status balancing_status
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_board_status_raw_to_conversion_struct(
    bms_board_status_converted_t *conversion, 
    const bms_board_status_t *raw);


void bms_board_status_conversion_to_raw_struct(
    bms_board_status_t *raw,
    const bms_board_status_converted_t *conversion);

int bms_board_status_cellboard_id_enum_to_string(bms_board_status_cellboard_id value, char *buffer);
int bms_board_status_balancing_status_enum_to_string(bms_board_status_balancing_status value, char *buffer);

int bms_board_status_to_string(bms_board_status_t *message, char *buffer);

int bms_board_status_to_string_file(bms_board_status_t *message, FILE *buffer);

int bms_board_status_fields(char *buffer);

int bms_board_status_fields_file(FILE *buffer);

/**
 * Pack message BOARD_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_board_status_pack(
    uint8_t *dst_p,
    const bms_board_status_t *src_p,
    size_t byte_size);

/**
 * Unpack message BOARD_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_board_status_unpack(
    bms_board_status_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_can_comm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_ltc_comm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_temp_comm_5_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_errors_open_wire_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_board_status_balancing_status_is_in_range(uint8_t value);


void bms_temperatures_raw_to_conversion(
    bms_temperatures_converted_t *conversion,
    bms_temperatures_cellboard_id cellboard_id,
    uint8_t start_index,
    float temp0,
    float temp1,
    float temp2,
    float temp3
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_temperatures_conversion_to_raw(
    bms_temperatures_t *raw,
    bms_temperatures_cellboard_id cellboard_id,
    uint8_t start_index,
    float temp0,
    float temp1,
    float temp2,
    float temp3
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_temperatures_raw_to_conversion_struct(
    bms_temperatures_converted_t *conversion, 
    const bms_temperatures_t *raw);


void bms_temperatures_conversion_to_raw_struct(
    bms_temperatures_t *raw,
    const bms_temperatures_converted_t *conversion);

int bms_temperatures_cellboard_id_enum_to_string(bms_temperatures_cellboard_id value, char *buffer);

int bms_temperatures_converted_to_string(bms_temperatures_converted_t *message, char *buffer);

int bms_temperatures_converted_to_string_file(bms_temperatures_converted_t *message, FILE *buffer);

int bms_temperatures_fields(char *buffer);

int bms_temperatures_fields_file(FILE *buffer);

/**
 * Pack message TEMPERATURES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_temperatures_pack(
    uint8_t *dst_p,
    const bms_temperatures_t *src_p,
    size_t byte_size);

/**
 * Unpack message TEMPERATURES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_temperatures_unpack(
    bms_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_start_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_temperatures_temp3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_temperatures_temp3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_temperatures_temp3_is_in_range(uint8_t value);


void bms_voltages_raw_to_conversion(
    bms_voltages_converted_t *conversion,
    bms_voltages_cellboard_id cellboard_id,
    uint8_t start_index,
    float voltage0,
    float voltage1,
    float voltage2
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_voltages_conversion_to_raw(
    bms_voltages_t *raw,
    bms_voltages_cellboard_id cellboard_id,
    uint8_t start_index,
    float voltage0,
    float voltage1,
    float voltage2
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_voltages_raw_to_conversion_struct(
    bms_voltages_converted_t *conversion, 
    const bms_voltages_t *raw);


void bms_voltages_conversion_to_raw_struct(
    bms_voltages_t *raw,
    const bms_voltages_converted_t *conversion);

int bms_voltages_cellboard_id_enum_to_string(bms_voltages_cellboard_id value, char *buffer);

int bms_voltages_converted_to_string(bms_voltages_converted_t *message, char *buffer);

int bms_voltages_converted_to_string_file(bms_voltages_converted_t *message, FILE *buffer);

int bms_voltages_fields(char *buffer);

int bms_voltages_fields_file(FILE *buffer);

/**
 * Pack message VOLTAGES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_voltages_pack(
    uint8_t *dst_p,
    const bms_voltages_t *src_p,
    size_t byte_size);

/**
 * Unpack message VOLTAGES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_voltages_unpack(
    bms_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_start_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_voltage0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_voltage0_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_voltage0_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_voltage1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_voltage1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_voltage1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_voltages_voltage2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float bms_voltages_voltage2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_voltages_voltage2_is_in_range(uint16_t value);


void bms_balancing_raw_to_conversion(
    bms_balancing_converted_t *conversion,
    bms_balancing_cellboard_id cellboard_id,
    uint8_t board_index,
    uint8_t cells_cell0,
    uint8_t cells_cell1,
    uint8_t cells_cell2,
    uint8_t cells_cell3,
    uint8_t cells_cell4,
    uint8_t cells_cell5,
    uint8_t cells_cell6,
    uint8_t cells_cell7,
    uint8_t cells_cell8,
    uint8_t cells_cell9,
    uint8_t cells_cell10,
    uint8_t cells_cell11,
    uint8_t cells_cell12,
    uint8_t cells_cell13,
    uint8_t cells_cell14,
    uint8_t cells_cell15,
    uint8_t cells_cell16,
    uint8_t cells_cell17
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_balancing_conversion_to_raw(
    bms_balancing_t *raw,
    bms_balancing_cellboard_id cellboard_id,
    uint8_t board_index,
    uint8_t cells_cell0,
    uint8_t cells_cell1,
    uint8_t cells_cell2,
    uint8_t cells_cell3,
    uint8_t cells_cell4,
    uint8_t cells_cell5,
    uint8_t cells_cell6,
    uint8_t cells_cell7,
    uint8_t cells_cell8,
    uint8_t cells_cell9,
    uint8_t cells_cell10,
    uint8_t cells_cell11,
    uint8_t cells_cell12,
    uint8_t cells_cell13,
    uint8_t cells_cell14,
    uint8_t cells_cell15,
    uint8_t cells_cell16,
    uint8_t cells_cell17
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_balancing_raw_to_conversion_struct(
    bms_balancing_converted_t *conversion, 
    const bms_balancing_t *raw);


void bms_balancing_conversion_to_raw_struct(
    bms_balancing_t *raw,
    const bms_balancing_converted_t *conversion);

int bms_balancing_cellboard_id_enum_to_string(bms_balancing_cellboard_id value, char *buffer);

int bms_balancing_to_string(bms_balancing_t *message, char *buffer);

int bms_balancing_to_string_file(bms_balancing_t *message, FILE *buffer);

int bms_balancing_fields(char *buffer);

int bms_balancing_fields_file(FILE *buffer);

/**
 * Pack message BALANCING.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_balancing_pack(
    uint8_t *dst_p,
    const bms_balancing_t *src_p,
    size_t byte_size);

/**
 * Unpack message BALANCING.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_balancing_unpack(
    bms_balancing_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_board_index_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell5_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell6_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell7_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell8_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell9_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell10_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell14_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell15_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell16_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_balancing_cells_cell17_is_in_range(uint8_t value);


void bms_fw_update_raw_to_conversion(
    bms_fw_update_converted_t *conversion,
    bms_fw_update_cellboard_id cellboard_id,
    uint8_t board_index
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_fw_update_conversion_to_raw(
    bms_fw_update_t *raw,
    bms_fw_update_cellboard_id cellboard_id,
    uint8_t board_index
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void bms_fw_update_raw_to_conversion_struct(
    bms_fw_update_converted_t *conversion, 
    const bms_fw_update_t *raw);


void bms_fw_update_conversion_to_raw_struct(
    bms_fw_update_t *raw,
    const bms_fw_update_converted_t *conversion);

int bms_fw_update_cellboard_id_enum_to_string(bms_fw_update_cellboard_id value, char *buffer);

int bms_fw_update_to_string(bms_fw_update_t *message, char *buffer);

int bms_fw_update_to_string_file(bms_fw_update_t *message, FILE *buffer);

int bms_fw_update_fields(char *buffer);

int bms_fw_update_fields_file(FILE *buffer);

/**
 * Pack message FW_UPDATE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_fw_update_pack(
    uint8_t *dst_p,
    const bms_fw_update_t *src_p,
    size_t byte_size);

/**
 * Unpack message FW_UPDATE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_fw_update_unpack(
    bms_fw_update_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_fw_update_cellboard_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_fw_update_board_index_is_in_range(uint8_t value);


;


;


void bms_flash_cellboard_0_tx_raw_to_conversion_struct(
    bms_flash_cellboard_0_tx_converted_t *conversion, 
    const bms_flash_cellboard_0_tx_t *raw);


void bms_flash_cellboard_0_tx_conversion_to_raw_struct(
    bms_flash_cellboard_0_tx_t *raw,
    const bms_flash_cellboard_0_tx_converted_t *conversion);


int bms_flash_cellboard_0_tx_to_string(bms_flash_cellboard_0_tx_t *message, char *buffer);

int bms_flash_cellboard_0_tx_to_string_file(bms_flash_cellboard_0_tx_t *message, FILE *buffer);

int bms_flash_cellboard_0_tx_fields(char *buffer);

int bms_flash_cellboard_0_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_0_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_0_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_0_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_0_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_0_tx_unpack(
    bms_flash_cellboard_0_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_0_rx_raw_to_conversion_struct(
    bms_flash_cellboard_0_rx_converted_t *conversion, 
    const bms_flash_cellboard_0_rx_t *raw);


void bms_flash_cellboard_0_rx_conversion_to_raw_struct(
    bms_flash_cellboard_0_rx_t *raw,
    const bms_flash_cellboard_0_rx_converted_t *conversion);


int bms_flash_cellboard_0_rx_to_string(bms_flash_cellboard_0_rx_t *message, char *buffer);

int bms_flash_cellboard_0_rx_to_string_file(bms_flash_cellboard_0_rx_t *message, FILE *buffer);

int bms_flash_cellboard_0_rx_fields(char *buffer);

int bms_flash_cellboard_0_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_0_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_0_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_0_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_0_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_0_rx_unpack(
    bms_flash_cellboard_0_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_1_tx_raw_to_conversion_struct(
    bms_flash_cellboard_1_tx_converted_t *conversion, 
    const bms_flash_cellboard_1_tx_t *raw);


void bms_flash_cellboard_1_tx_conversion_to_raw_struct(
    bms_flash_cellboard_1_tx_t *raw,
    const bms_flash_cellboard_1_tx_converted_t *conversion);


int bms_flash_cellboard_1_tx_to_string(bms_flash_cellboard_1_tx_t *message, char *buffer);

int bms_flash_cellboard_1_tx_to_string_file(bms_flash_cellboard_1_tx_t *message, FILE *buffer);

int bms_flash_cellboard_1_tx_fields(char *buffer);

int bms_flash_cellboard_1_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_1_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_1_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_1_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_1_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_1_tx_unpack(
    bms_flash_cellboard_1_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_1_rx_raw_to_conversion_struct(
    bms_flash_cellboard_1_rx_converted_t *conversion, 
    const bms_flash_cellboard_1_rx_t *raw);


void bms_flash_cellboard_1_rx_conversion_to_raw_struct(
    bms_flash_cellboard_1_rx_t *raw,
    const bms_flash_cellboard_1_rx_converted_t *conversion);


int bms_flash_cellboard_1_rx_to_string(bms_flash_cellboard_1_rx_t *message, char *buffer);

int bms_flash_cellboard_1_rx_to_string_file(bms_flash_cellboard_1_rx_t *message, FILE *buffer);

int bms_flash_cellboard_1_rx_fields(char *buffer);

int bms_flash_cellboard_1_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_1_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_1_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_1_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_1_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_1_rx_unpack(
    bms_flash_cellboard_1_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_2_tx_raw_to_conversion_struct(
    bms_flash_cellboard_2_tx_converted_t *conversion, 
    const bms_flash_cellboard_2_tx_t *raw);


void bms_flash_cellboard_2_tx_conversion_to_raw_struct(
    bms_flash_cellboard_2_tx_t *raw,
    const bms_flash_cellboard_2_tx_converted_t *conversion);


int bms_flash_cellboard_2_tx_to_string(bms_flash_cellboard_2_tx_t *message, char *buffer);

int bms_flash_cellboard_2_tx_to_string_file(bms_flash_cellboard_2_tx_t *message, FILE *buffer);

int bms_flash_cellboard_2_tx_fields(char *buffer);

int bms_flash_cellboard_2_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_2_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_2_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_2_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_2_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_2_tx_unpack(
    bms_flash_cellboard_2_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_2_rx_raw_to_conversion_struct(
    bms_flash_cellboard_2_rx_converted_t *conversion, 
    const bms_flash_cellboard_2_rx_t *raw);


void bms_flash_cellboard_2_rx_conversion_to_raw_struct(
    bms_flash_cellboard_2_rx_t *raw,
    const bms_flash_cellboard_2_rx_converted_t *conversion);


int bms_flash_cellboard_2_rx_to_string(bms_flash_cellboard_2_rx_t *message, char *buffer);

int bms_flash_cellboard_2_rx_to_string_file(bms_flash_cellboard_2_rx_t *message, FILE *buffer);

int bms_flash_cellboard_2_rx_fields(char *buffer);

int bms_flash_cellboard_2_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_2_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_2_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_2_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_2_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_2_rx_unpack(
    bms_flash_cellboard_2_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_3_tx_raw_to_conversion_struct(
    bms_flash_cellboard_3_tx_converted_t *conversion, 
    const bms_flash_cellboard_3_tx_t *raw);


void bms_flash_cellboard_3_tx_conversion_to_raw_struct(
    bms_flash_cellboard_3_tx_t *raw,
    const bms_flash_cellboard_3_tx_converted_t *conversion);


int bms_flash_cellboard_3_tx_to_string(bms_flash_cellboard_3_tx_t *message, char *buffer);

int bms_flash_cellboard_3_tx_to_string_file(bms_flash_cellboard_3_tx_t *message, FILE *buffer);

int bms_flash_cellboard_3_tx_fields(char *buffer);

int bms_flash_cellboard_3_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_3_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_3_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_3_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_3_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_3_tx_unpack(
    bms_flash_cellboard_3_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_3_rx_raw_to_conversion_struct(
    bms_flash_cellboard_3_rx_converted_t *conversion, 
    const bms_flash_cellboard_3_rx_t *raw);


void bms_flash_cellboard_3_rx_conversion_to_raw_struct(
    bms_flash_cellboard_3_rx_t *raw,
    const bms_flash_cellboard_3_rx_converted_t *conversion);


int bms_flash_cellboard_3_rx_to_string(bms_flash_cellboard_3_rx_t *message, char *buffer);

int bms_flash_cellboard_3_rx_to_string_file(bms_flash_cellboard_3_rx_t *message, FILE *buffer);

int bms_flash_cellboard_3_rx_fields(char *buffer);

int bms_flash_cellboard_3_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_3_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_3_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_3_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_3_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_3_rx_unpack(
    bms_flash_cellboard_3_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_4_tx_raw_to_conversion_struct(
    bms_flash_cellboard_4_tx_converted_t *conversion, 
    const bms_flash_cellboard_4_tx_t *raw);


void bms_flash_cellboard_4_tx_conversion_to_raw_struct(
    bms_flash_cellboard_4_tx_t *raw,
    const bms_flash_cellboard_4_tx_converted_t *conversion);


int bms_flash_cellboard_4_tx_to_string(bms_flash_cellboard_4_tx_t *message, char *buffer);

int bms_flash_cellboard_4_tx_to_string_file(bms_flash_cellboard_4_tx_t *message, FILE *buffer);

int bms_flash_cellboard_4_tx_fields(char *buffer);

int bms_flash_cellboard_4_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_4_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_4_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_4_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_4_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_4_tx_unpack(
    bms_flash_cellboard_4_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_4_rx_raw_to_conversion_struct(
    bms_flash_cellboard_4_rx_converted_t *conversion, 
    const bms_flash_cellboard_4_rx_t *raw);


void bms_flash_cellboard_4_rx_conversion_to_raw_struct(
    bms_flash_cellboard_4_rx_t *raw,
    const bms_flash_cellboard_4_rx_converted_t *conversion);


int bms_flash_cellboard_4_rx_to_string(bms_flash_cellboard_4_rx_t *message, char *buffer);

int bms_flash_cellboard_4_rx_to_string_file(bms_flash_cellboard_4_rx_t *message, FILE *buffer);

int bms_flash_cellboard_4_rx_fields(char *buffer);

int bms_flash_cellboard_4_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_4_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_4_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_4_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_4_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_4_rx_unpack(
    bms_flash_cellboard_4_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_5_tx_raw_to_conversion_struct(
    bms_flash_cellboard_5_tx_converted_t *conversion, 
    const bms_flash_cellboard_5_tx_t *raw);


void bms_flash_cellboard_5_tx_conversion_to_raw_struct(
    bms_flash_cellboard_5_tx_t *raw,
    const bms_flash_cellboard_5_tx_converted_t *conversion);


int bms_flash_cellboard_5_tx_to_string(bms_flash_cellboard_5_tx_t *message, char *buffer);

int bms_flash_cellboard_5_tx_to_string_file(bms_flash_cellboard_5_tx_t *message, FILE *buffer);

int bms_flash_cellboard_5_tx_fields(char *buffer);

int bms_flash_cellboard_5_tx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_5_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_5_tx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_5_tx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_5_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_5_tx_unpack(
    bms_flash_cellboard_5_tx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );


;


;


void bms_flash_cellboard_5_rx_raw_to_conversion_struct(
    bms_flash_cellboard_5_rx_converted_t *conversion, 
    const bms_flash_cellboard_5_rx_t *raw);


void bms_flash_cellboard_5_rx_conversion_to_raw_struct(
    bms_flash_cellboard_5_rx_t *raw,
    const bms_flash_cellboard_5_rx_converted_t *conversion);


int bms_flash_cellboard_5_rx_to_string(bms_flash_cellboard_5_rx_t *message, char *buffer);

int bms_flash_cellboard_5_rx_to_string_file(bms_flash_cellboard_5_rx_t *message, FILE *buffer);

int bms_flash_cellboard_5_rx_fields(char *buffer);

int bms_flash_cellboard_5_rx_fields_file(FILE *buffer);

/**
 * Pack message FLASH_CELLBOARD_5_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_flash_cellboard_5_rx_pack(
    uint8_t *dst_p,
    const bms_flash_cellboard_5_rx_t *src_p,
    size_t byte_size);

/**
 * Unpack message FLASH_CELLBOARD_5_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_flash_cellboard_5_rx_unpack(
    bms_flash_cellboard_5_rx_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

bool bms_id_is_message(uint16_t id);

int bms_to_string_from_id(uint16_t message_id, void* message, char* buffer);
int bms_fields_from_id(uint16_t message_id, char* buffer);
int bms_to_string_file_from_id(uint16_t message_id, void* message, FILE* buffer);
int bms_fields_file_from_id(uint16_t message_id, FILE* buffer);

#ifdef __cplusplus
}
#endif

#endif
