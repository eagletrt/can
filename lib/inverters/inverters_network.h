/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Tue Apr  9 11:16:17 2024.
 */

#ifndef INVERTERS_H
#define INVERTERS_H

#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef CANLIB_BUILD
#define CANLIB_BUILD
#define CANLIB_BUILD_TIME 1712661378
#endif // CANLIB_BUILD

#define canlib_min(a,b) (((a) < (b)) ? (a) : (b))
#define canlib_max(a,b) (((a) > (b)) ? (a) : (b))

#ifndef CANLIB_PARKING
/* We know it's PACKING but PARKING sounds a bit better ;) */
#if defined(__MINGW32__)
#define CANLIB_PARKING                                                           __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define CANLIB_PARKING __attribute__((__packed__)) // , __aligned__(1)))
#endif                                             // defined(__MINGW32__)
#endif                                             // CANLIB_PARKING

#ifndef EINVAL
#    define EINVAL 22
#endif

/* General defines */
#define INVERTERS_ONESHOT (-1)

/* Frame ids. */
#define INVERTERS_INV_L_SEND_FRAME_ID (0x201u)
#define INVERTERS_INV_L_RCV_FRAME_ID (0x181u)
#define INVERTERS_INV_R_SEND_FRAME_ID (0x202u)
#define INVERTERS_INV_R_RCV_FRAME_ID (0x182u)

/* Frame lengths in bytes. */
#define INVERTERS_INV_L_SEND_BYTE_SIZE (5u)
#define INVERTERS_INV_L_RCV_BYTE_SIZE (6u)
#define INVERTERS_INV_R_SEND_BYTE_SIZE (5u)
#define INVERTERS_INV_R_RCV_BYTE_SIZE (6u)

/* Extended or standard frame types. */
#define INVERTERS_INV_L_SEND_IS_EXTENDED (0)
#define INVERTERS_INV_L_RCV_IS_EXTENDED (0)
#define INVERTERS_INV_R_SEND_IS_EXTENDED (0)
#define INVERTERS_INV_R_RCV_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define INVERTERS_INV_L_SEND_CYCLE_TIME_MS (INVERTERS_ONESHOT)
#define INVERTERS_INV_L_RCV_CYCLE_TIME_MS (INVERTERS_ONESHOT)
#define INVERTERS_INV_R_SEND_CYCLE_TIME_MS (INVERTERS_ONESHOT)
#define INVERTERS_INV_R_RCV_CYCLE_TIME_MS (INVERTERS_ONESHOT)

/* Topics masks */


/* Signal choices. */
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_04_USER_KEY_CHOICE (4u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_09_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0F_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3D_READ_CMD_CHOICE (61u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_5B_PID_N_KACC_CHOICE (91u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C9_CURRENTCONTROL_XKP_CHOICE (201u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)

#define INVERTERS_INV_L_SEND_READ_ID_05H_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_L_SEND_READ_ID_06H_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_L_SEND_READ_ID_07H_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_L_SEND_READ_ID_08H_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_L_SEND_READ_ID_09H_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_L_SEND_READ_ID_0AH_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_L_SEND_READ_ID_0BH_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_L_SEND_READ_ID_0CH_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_L_SEND_READ_ID_0DH_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_L_SEND_READ_ID_0EH_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_L_SEND_READ_ID_0FH_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_L_SEND_READ_ID_10H_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_L_SEND_READ_ID_11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_SEND_READ_ID_12H_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_L_SEND_READ_ID_13H_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_L_SEND_READ_ID_14H_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_L_SEND_READ_ID_15H_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_L_SEND_READ_ID_16H_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_L_SEND_READ_ID_17H_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_L_SEND_READ_ID_18H_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_L_SEND_READ_ID_19H_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_L_SEND_READ_ID_1AH_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_L_SEND_READ_ID_1BH_FW_NR_CHOICE (27u)
#define INVERTERS_INV_L_SEND_READ_ID_1CH_I_KP_CHOICE (28u)
#define INVERTERS_INV_L_SEND_READ_ID_1DH_I_TI_CHOICE (29u)
#define INVERTERS_INV_L_SEND_READ_ID_1EH_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_L_SEND_READ_ID_1FH_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_L_SEND_READ_ID_20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_SEND_READ_ID_21H_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_L_SEND_READ_ID_22H_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_L_SEND_READ_ID_23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_SEND_READ_ID_24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_SEND_READ_ID_25H_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_L_SEND_READ_ID_26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_SEND_READ_ID_27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_SEND_READ_ID_28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_SEND_READ_ID_29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_SEND_READ_ID_2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_SEND_READ_ID_2BH_I_TIM_CHOICE (43u)
#define INVERTERS_INV_L_SEND_READ_ID_2CH_N_KP_CHOICE (44u)
#define INVERTERS_INV_L_SEND_READ_ID_2DH_N_TI_CHOICE (45u)
#define INVERTERS_INV_L_SEND_READ_ID_2EH_N_TD_CHOICE (46u)
#define INVERTERS_INV_L_SEND_READ_ID_2FH_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_L_SEND_READ_ID_30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_SEND_READ_ID_31H_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_L_SEND_READ_ID_32H_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_L_SEND_READ_ID_33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_SEND_READ_ID_34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_SEND_READ_ID_35H_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_L_SEND_READ_ID_36H_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_L_SEND_READ_ID_37H_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_L_SEND_READ_ID_38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_SEND_READ_ID_39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_SEND_READ_ID_3AH_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_L_SEND_READ_ID_3BH_N_TIM_CHOICE (59u)
#define INVERTERS_INV_L_SEND_READ_ID_3CH_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_L_SEND_READ_ID_3EH_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_L_SEND_READ_ID_3FH_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_L_SEND_READ_ID_40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_SEND_READ_ID_41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_SEND_READ_ID_42H_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_L_SEND_READ_ID_43H_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_SEND_READ_ID_44H_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_L_SEND_READ_ID_45H_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_SEND_READ_ID_46H_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_L_SEND_READ_ID_48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_SEND_READ_ID_49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_SEND_READ_ID_4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_SEND_READ_ID_4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_SEND_READ_ID_4CH_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_L_SEND_READ_ID_4DH_MOTOR_I_MAX_EFF_CHOICE (77u)
#define INVERTERS_INV_L_SEND_READ_ID_4EH_MOTOR_I_NOM_EFF_CHOICE (78u)
#define INVERTERS_INV_L_SEND_READ_ID_4FH_MOTOR_POLE_CHOICE (79u)
#define INVERTERS_INV_L_SEND_READ_ID_50H_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_L_SEND_READ_ID_51H_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_SEND_READ_ID_52H_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_L_SEND_READ_ID_53H_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_L_SEND_READ_ID_54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_SEND_READ_ID_55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_SEND_READ_ID_56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_SEND_READ_ID_57H_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_L_SEND_READ_ID_58H_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_L_SEND_READ_ID_59H_MOTOR_NOM_CHOICE (89u)
#define INVERTERS_INV_L_SEND_READ_ID_5AH_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_L_SEND_READ_ID_5BH_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_L_SEND_READ_ID_5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_SEND_READ_ID_5DH_N_CMD_CHOICE (93u)
#define INVERTERS_INV_L_SEND_READ_ID_5EH_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_L_SEND_READ_ID_5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_SEND_READ_ID_60H_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_L_SEND_READ_ID_61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_SEND_READ_ID_62H_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_L_SEND_READ_ID_63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_SEND_READ_ID_64H_DEVICE_MAINS_CHOICE (100u)
#define INVERTERS_INV_L_SEND_READ_ID_65H_REGEN_P_R_CHOICE (101u)
#define INVERTERS_INV_L_SEND_READ_ID_66H_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_L_SEND_READ_ID_67H_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_L_SEND_READ_ID_68H_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_L_SEND_READ_ID_69H_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_L_SEND_READ_ID_6AH_POS_KP_CHOICE (106u)
#define INVERTERS_INV_L_SEND_READ_ID_6BH_POS_TI_CHOICE (107u)
#define INVERTERS_INV_L_SEND_READ_ID_6CH_POS_TD_CHOICE (108u)
#define INVERTERS_INV_L_SEND_READ_ID_6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_SEND_READ_ID_6EH_POS_DEST_CHOICE (110u)
#define INVERTERS_INV_L_SEND_READ_ID_6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_SEND_READ_ID_70H_POS_ERR_CHOICE (112u)
#define INVERTERS_INV_L_SEND_READ_ID_71H_POS_TIM_CHOICE (113u)
#define INVERTERS_INV_L_SEND_READ_ID_72H_POS_OFFSETREF_CHOICE (114u)
#define INVERTERS_INV_L_SEND_READ_ID_73H_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_L_SEND_READ_ID_74H_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_SEND_READ_ID_75H_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_L_SEND_READ_ID_76H_POS_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_L_SEND_READ_ID_77H_POS_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_L_SEND_READ_ID_78H_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_L_SEND_READ_ID_79H_POS_TOL_WIN_CHOICE (121u)
#define INVERTERS_INV_L_SEND_READ_ID_7AH_POS_PRESET_CHOICE (122u)
#define INVERTERS_INV_L_SEND_READ_ID_7BH_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_L_SEND_READ_ID_7CH_POS_ND_SCALE_CHOICE (124u)
#define INVERTERS_INV_L_SEND_READ_ID_7DH_POS_ND_OFFSET_CHOICE (125u)
#define INVERTERS_INV_L_SEND_READ_ID_7EH_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_L_SEND_READ_ID_7FH_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_L_SEND_READ_ID_80H_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_L_SEND_READ_ID_83H_FUNC_PARA_READ_CHOICE (131u)
#define INVERTERS_INV_L_SEND_READ_ID_84H_FUNC_PARA_WRITE_CHOICE (132u)
#define INVERTERS_INV_L_SEND_READ_ID_85H_FUNC_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_L_SEND_READ_ID_88H_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_L_SEND_READ_ID_89H_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_L_SEND_READ_ID_8AH_VOUT_CHOICE (138u)
#define INVERTERS_INV_L_SEND_READ_ID_8BH_V_REF_CHOICE (139u)
#define INVERTERS_INV_L_SEND_READ_ID_8CH_V_KP_CHOICE (140u)
#define INVERTERS_INV_L_SEND_READ_ID_8DH_V_TI_CHOICE (141u)
#define INVERTERS_INV_L_SEND_READ_ID_8EH_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_L_SEND_READ_ID_8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_SEND_READ_ID_90H_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_L_SEND_READ_ID_91H_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_L_SEND_READ_ID_92H_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_L_SEND_READ_ID_93H_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_L_SEND_READ_ID_94H_CAN_ERROR_RXMSGLOST_CNTR_CHOICE (148u)
#define INVERTERS_INV_L_SEND_READ_ID_95H_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_L_SEND_READ_ID_96H_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_L_SEND_READ_ID_97H_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_L_SEND_READ_ID_99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_SEND_READ_ID_9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_SEND_READ_ID_A0H_MOUT_CHOICE (160u)
#define INVERTERS_INV_L_SEND_READ_ID_A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_SEND_READ_ID_A2H_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_L_SEND_READ_ID_A3H_M_TEMP_CHOICE (163u)
#define INVERTERS_INV_L_SEND_READ_ID_A4H_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_L_SEND_READ_ID_A5H_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_L_SEND_READ_ID_A6H_FB_INCPERROT_CHOICE (166u)
#define INVERTERS_INV_L_SEND_READ_ID_A7H_FB_POLE_CHOICE (167u)
#define INVERTERS_INV_L_SEND_READ_ID_A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_SEND_READ_ID_A9H_I3_ADC_CHOICE (169u)
#define INVERTERS_INV_L_SEND_READ_ID_AAH_I2_ADC_CHOICE (170u)
#define INVERTERS_INV_L_SEND_READ_ID_ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_L_SEND_READ_ID_ACH_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_L_SEND_READ_ID_ADH_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_L_SEND_READ_ID_AEH_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_L_SEND_READ_ID_AFH_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_L_SEND_READ_ID_B1H_MOTOR_LSQ_CHOICE (177u)
#define INVERTERS_INV_L_SEND_READ_ID_B2H_ID_NOM_CHOICE (178u)
#define INVERTERS_INV_L_SEND_READ_ID_B3H_MOTOR_LM_CHOICE (179u)
#define INVERTERS_INV_L_SEND_READ_ID_B4H_MOTOR_RR_CHOICE (180u)
#define INVERTERS_INV_L_SEND_READ_ID_B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_L_SEND_READ_ID_B6H_MOTOR_TR_CHOICE (182u)
#define INVERTERS_INV_L_SEND_READ_ID_B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_SEND_READ_ID_BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_SEND_READ_ID_BBH_MOTOR_LSD_CHOICE (187u)
#define INVERTERS_INV_L_SEND_READ_ID_BCH_MOTOR_RS_CHOICE (188u)
#define INVERTERS_INV_L_SEND_READ_ID_BDH_MOTOR_TS_CHOICE (189u)
#define INVERTERS_INV_L_SEND_READ_ID_BEH_DEF_END_1_CHOICE (190u)
#define INVERTERS_INV_L_SEND_READ_ID_BFH_DEF_END_2_CHOICE (191u)
#define INVERTERS_INV_L_SEND_READ_ID_C0H_DEF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_L_SEND_READ_ID_C1H_DEF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_L_SEND_READ_ID_C2H_DEF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_L_SEND_READ_ID_C3H_DEF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_L_SEND_READ_ID_C4H_I_MAX_PK_CHOICE (196u)
#define INVERTERS_INV_L_SEND_READ_ID_C5H_I_CON_EFF_CHOICE (197u)
#define INVERTERS_INV_L_SEND_READ_ID_C6H_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_L_SEND_READ_ID_C7H_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_L_SEND_READ_ID_C8H_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_L_SEND_READ_ID_C9H_I_XKP_CHOICE (201u)
#define INVERTERS_INV_L_SEND_READ_ID_CAH_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_L_SEND_READ_ID_CBH_I_KF_CHOICE (203u)
#define INVERTERS_INV_L_SEND_READ_ID_CCH_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_L_SEND_READ_ID_CDH_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_L_SEND_READ_ID_CEH_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_L_SEND_READ_ID_D0H_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_L_SEND_READ_ID_D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_SEND_READ_ID_D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_SEND_READ_ID_D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_SEND_READ_ID_D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_SEND_READ_ID_D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_SEND_READ_ID_D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_SEND_READ_ID_D7H_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_L_SEND_READ_ID_D8H_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_L_SEND_READ_ID_D9H_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_L_SEND_READ_ID_DAH_DEF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_L_SEND_READ_ID_DBH_DEF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_L_SEND_READ_ID_DCH_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_L_SEND_READ_ID_DEH_DS_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_SEND_READ_ID_DFH_DS_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_SEND_READ_ID_E0H_DS_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_SEND_READ_ID_E1H_DS_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_SEND_READ_ID_E2H_DS_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_SEND_READ_ID_E3H_DS_GO_CHOICE (227u)
#define INVERTERS_INV_L_SEND_READ_ID_E4H_DS_END_1_CHOICE (228u)
#define INVERTERS_INV_L_SEND_READ_ID_E5H_DS_END_2_CHOICE (229u)
#define INVERTERS_INV_L_SEND_READ_ID_E6H_DS_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_SEND_READ_ID_E7H_DS_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_SEND_READ_ID_E8H_DS_RUN_CHOICE (232u)
#define INVERTERS_INV_L_SEND_READ_ID_E9H_DS_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_SEND_READ_ID_EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_L_SEND_READ_ID_ECH_DS_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_L_SEND_READ_ID_EDH_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_L_SEND_READ_ID_EEH_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_L_SEND_READ_ID_EFH_DS_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_L_SEND_READ_ID_F0H_T_PEAK_CHOICE (240u)
#define INVERTERS_INV_L_SEND_READ_ID_F1H_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_L_SEND_READ_ID_F2H_DS_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_SEND_READ_ID_F3H_DS_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_SEND_READ_ID_F4H_DS_POSTOLERANCE_CHOICE (244u)
#define INVERTERS_INV_L_SEND_READ_ID_F5H_DS_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_SEND_READ_ID_F6H_INVERTER_POWER_CHOICE (246u)
#define INVERTERS_INV_L_SEND_READ_ID_F7H_INVERTER_WORK_CHOICE (247u)
#define INVERTERS_INV_L_SEND_READ_ID_F8H_AXIS_CHOICE (248u)
#define INVERTERS_INV_L_SEND_READ_ID_FBH_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_SEND_READ_ID_FCH_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_L_SEND_READ_ID_FEH_SUBV_SVNREV_NR_CHOICE (254u)

#define INVERTERS_INV_L_SEND_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_SEND_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_SEND_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_SEND_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_SEND_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_SEND_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_SEND_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_SEND_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_SEND_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_SEND_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_SEND_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_SEND_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_SEND_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_SEND_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_SEND_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_SEND_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_SEND_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_SEND_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_SEND_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_SEND_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_SEND_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_SEND_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_SEND_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_SEND_RET_INTERVAL_SINGLE_CHOICE (0u)
#define INVERTERS_INV_L_SEND_RET_INTERVAL_STOP_CHOICE (255u)

#define INVERTERS_INV_L_SEND_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_L_SEND_ACTIVE192_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_SEND_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_L_SEND_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_RCV_RCV_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_06_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0F_FU_EXTRA_CHOICE (9u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_11_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_19_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1B_FW_NR_CHOICE (27u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1F_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_20_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_22_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_23_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_24_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_26_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_27_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_28_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_29_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2A_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_30_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_32_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_33_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_37_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_38_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_39_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3A_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_40_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_41_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_42_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_43_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_45_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_48_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_49_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4A_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4B_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_52_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_54_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_55_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_56_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_57_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5B_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5C_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5D_N_CMD_CHOICE (93u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5F_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_61_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_63_ECODE_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_66_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6D_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6F_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_70_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_74_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_78_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7B_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8A_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8F_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_91_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_92_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_93_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_94_ECODE_1STERROR_CHOICE (148u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_95_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_96_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_97_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_97_LOGICOUTBLOCK_CHOICE (152u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_99_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_9A_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_9B_LOGICINBLOCK_CHOICE (155u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A0_M_OUTDIG_CHOICE (160u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A1_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A8_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A9_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AA_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AB_LOGIC_FREQUENCY_CHOICE (171u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AC_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AD_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AE_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AF_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B8_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BA_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C9_PID_I_XKP_CHOICE (201u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CC_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CE_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D5_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D6_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D8_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D9_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DE_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DF_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E0_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E1_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E2_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E3_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E4_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E5_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E6_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E7_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E8_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E9_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EB_DC_BUS_VOLTAGE_FILT_CHOICE (235u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EC_DIGSIGNAL_FB_LOSSOFSIG_CHOICE (236u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EF_DIGSIGNAL_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F2_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F3_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F4_DIGSIGNAL_POS_TOLERANCE_CHOICE (244u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F5_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F6_INVERTER_OUTPUT_POWER_CHOICE (246u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F7_INVERTER_OUTPUT_WORK_CHOICE (247u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_FB_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_FC_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_FE_FW_SUBV_REVIS_NR_CHOICE (254u)

#define INVERTERS_INV_L_RCV_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_RCV_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_RCV_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_RCV_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_RCV_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_RCV_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_RCV_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_RCV_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_RCV_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_RCV_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_RCV_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_RCV_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_RCV_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_RCV_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_RCV_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_RCV_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_RCV_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_RCV_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_RCV_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_RCV_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_RCV_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_RCV_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_RCV_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_L_RCV_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_RCV_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_L_RCV_ACTIVE192_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_SEND_SEND_MUX_ID_04_USER_KEY_CHOICE (4u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_09_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0F_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3D_READ_CMD_CHOICE (61u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_5B_PID_N_KACC_CHOICE (91u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C9_CURRENTCONTROL_XKP_CHOICE (201u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)

#define INVERTERS_INV_R_SEND_READ_ID_05H_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_R_SEND_READ_ID_06H_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_R_SEND_READ_ID_07H_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_R_SEND_READ_ID_08H_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_R_SEND_READ_ID_09H_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_R_SEND_READ_ID_0AH_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_R_SEND_READ_ID_0BH_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_R_SEND_READ_ID_0CH_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_R_SEND_READ_ID_0DH_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_R_SEND_READ_ID_0EH_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_R_SEND_READ_ID_0FH_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_R_SEND_READ_ID_10H_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_R_SEND_READ_ID_11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_SEND_READ_ID_12H_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_R_SEND_READ_ID_13H_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_R_SEND_READ_ID_14H_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_R_SEND_READ_ID_15H_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_R_SEND_READ_ID_16H_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_R_SEND_READ_ID_17H_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_R_SEND_READ_ID_18H_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_R_SEND_READ_ID_19H_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_R_SEND_READ_ID_1AH_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_R_SEND_READ_ID_1BH_FW_NR_CHOICE (27u)
#define INVERTERS_INV_R_SEND_READ_ID_1CH_I_KP_CHOICE (28u)
#define INVERTERS_INV_R_SEND_READ_ID_1DH_I_TI_CHOICE (29u)
#define INVERTERS_INV_R_SEND_READ_ID_1EH_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_R_SEND_READ_ID_1FH_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_R_SEND_READ_ID_20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_SEND_READ_ID_21H_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_R_SEND_READ_ID_22H_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_R_SEND_READ_ID_23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_SEND_READ_ID_24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_SEND_READ_ID_25H_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_R_SEND_READ_ID_26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_SEND_READ_ID_27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_SEND_READ_ID_28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_SEND_READ_ID_29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_SEND_READ_ID_2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_SEND_READ_ID_2BH_I_TIM_CHOICE (43u)
#define INVERTERS_INV_R_SEND_READ_ID_2CH_N_KP_CHOICE (44u)
#define INVERTERS_INV_R_SEND_READ_ID_2DH_N_TI_CHOICE (45u)
#define INVERTERS_INV_R_SEND_READ_ID_2EH_N_TD_CHOICE (46u)
#define INVERTERS_INV_R_SEND_READ_ID_2FH_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_R_SEND_READ_ID_30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_SEND_READ_ID_31H_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_R_SEND_READ_ID_32H_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_R_SEND_READ_ID_33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_SEND_READ_ID_34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_SEND_READ_ID_35H_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_R_SEND_READ_ID_36H_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_R_SEND_READ_ID_37H_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_R_SEND_READ_ID_38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_SEND_READ_ID_39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_SEND_READ_ID_3AH_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_R_SEND_READ_ID_3BH_N_TIM_CHOICE (59u)
#define INVERTERS_INV_R_SEND_READ_ID_3CH_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_R_SEND_READ_ID_3EH_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_R_SEND_READ_ID_3FH_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_R_SEND_READ_ID_40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_SEND_READ_ID_41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_SEND_READ_ID_42H_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_R_SEND_READ_ID_43H_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_SEND_READ_ID_44H_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_R_SEND_READ_ID_45H_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_SEND_READ_ID_46H_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_R_SEND_READ_ID_48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_SEND_READ_ID_49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_SEND_READ_ID_4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_SEND_READ_ID_4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_SEND_READ_ID_4CH_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_R_SEND_READ_ID_4DH_MOTOR_I_MAX_EFF_CHOICE (77u)
#define INVERTERS_INV_R_SEND_READ_ID_4EH_MOTOR_I_NOM_EFF_CHOICE (78u)
#define INVERTERS_INV_R_SEND_READ_ID_4FH_MOTOR_POLE_CHOICE (79u)
#define INVERTERS_INV_R_SEND_READ_ID_50H_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_R_SEND_READ_ID_51H_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_SEND_READ_ID_52H_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_R_SEND_READ_ID_53H_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_R_SEND_READ_ID_54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_SEND_READ_ID_55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_SEND_READ_ID_56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_SEND_READ_ID_57H_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_R_SEND_READ_ID_58H_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_R_SEND_READ_ID_59H_MOTOR_NOM_CHOICE (89u)
#define INVERTERS_INV_R_SEND_READ_ID_5AH_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_R_SEND_READ_ID_5BH_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_R_SEND_READ_ID_5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_SEND_READ_ID_5DH_N_CMD_CHOICE (93u)
#define INVERTERS_INV_R_SEND_READ_ID_5EH_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_R_SEND_READ_ID_5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_SEND_READ_ID_60H_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_R_SEND_READ_ID_61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_SEND_READ_ID_62H_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_R_SEND_READ_ID_63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_SEND_READ_ID_64H_DEVICE_MAINS_CHOICE (100u)
#define INVERTERS_INV_R_SEND_READ_ID_65H_REGEN_P_R_CHOICE (101u)
#define INVERTERS_INV_R_SEND_READ_ID_66H_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_R_SEND_READ_ID_67H_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_R_SEND_READ_ID_68H_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_R_SEND_READ_ID_69H_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_R_SEND_READ_ID_6AH_POS_KP_CHOICE (106u)
#define INVERTERS_INV_R_SEND_READ_ID_6BH_POS_TI_CHOICE (107u)
#define INVERTERS_INV_R_SEND_READ_ID_6CH_POS_TD_CHOICE (108u)
#define INVERTERS_INV_R_SEND_READ_ID_6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_SEND_READ_ID_6EH_POS_DEST_CHOICE (110u)
#define INVERTERS_INV_R_SEND_READ_ID_6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_SEND_READ_ID_70H_POS_ERR_CHOICE (112u)
#define INVERTERS_INV_R_SEND_READ_ID_71H_POS_TIM_CHOICE (113u)
#define INVERTERS_INV_R_SEND_READ_ID_72H_POS_OFFSETREF_CHOICE (114u)
#define INVERTERS_INV_R_SEND_READ_ID_73H_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_R_SEND_READ_ID_74H_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_SEND_READ_ID_75H_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_R_SEND_READ_ID_76H_POS_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_R_SEND_READ_ID_77H_POS_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_R_SEND_READ_ID_78H_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_R_SEND_READ_ID_79H_POS_TOL_WIN_CHOICE (121u)
#define INVERTERS_INV_R_SEND_READ_ID_7AH_POS_PRESET_CHOICE (122u)
#define INVERTERS_INV_R_SEND_READ_ID_7BH_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_R_SEND_READ_ID_7CH_POS_ND_SCALE_CHOICE (124u)
#define INVERTERS_INV_R_SEND_READ_ID_7DH_POS_ND_OFFSET_CHOICE (125u)
#define INVERTERS_INV_R_SEND_READ_ID_7EH_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_R_SEND_READ_ID_7FH_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_R_SEND_READ_ID_80H_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_R_SEND_READ_ID_83H_FUNC_PARA_READ_CHOICE (131u)
#define INVERTERS_INV_R_SEND_READ_ID_84H_FUNC_PARA_WRITE_CHOICE (132u)
#define INVERTERS_INV_R_SEND_READ_ID_85H_FUNC_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_R_SEND_READ_ID_88H_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_R_SEND_READ_ID_89H_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_R_SEND_READ_ID_8AH_VOUT_CHOICE (138u)
#define INVERTERS_INV_R_SEND_READ_ID_8BH_V_REF_CHOICE (139u)
#define INVERTERS_INV_R_SEND_READ_ID_8CH_V_KP_CHOICE (140u)
#define INVERTERS_INV_R_SEND_READ_ID_8DH_V_TI_CHOICE (141u)
#define INVERTERS_INV_R_SEND_READ_ID_8EH_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_R_SEND_READ_ID_8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_SEND_READ_ID_90H_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_R_SEND_READ_ID_91H_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_R_SEND_READ_ID_92H_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_R_SEND_READ_ID_93H_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_R_SEND_READ_ID_94H_CAN_ERROR_RXMSGLOST_CNTR_CHOICE (148u)
#define INVERTERS_INV_R_SEND_READ_ID_95H_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_R_SEND_READ_ID_96H_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_R_SEND_READ_ID_97H_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_R_SEND_READ_ID_99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_SEND_READ_ID_9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_SEND_READ_ID_A0H_MOUT_CHOICE (160u)
#define INVERTERS_INV_R_SEND_READ_ID_A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_SEND_READ_ID_A2H_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_R_SEND_READ_ID_A3H_M_TEMP_CHOICE (163u)
#define INVERTERS_INV_R_SEND_READ_ID_A4H_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_R_SEND_READ_ID_A5H_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_R_SEND_READ_ID_A6H_FB_INCPERROT_CHOICE (166u)
#define INVERTERS_INV_R_SEND_READ_ID_A7H_FB_POLE_CHOICE (167u)
#define INVERTERS_INV_R_SEND_READ_ID_A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_SEND_READ_ID_A9H_I3_ADC_CHOICE (169u)
#define INVERTERS_INV_R_SEND_READ_ID_AAH_I2_ADC_CHOICE (170u)
#define INVERTERS_INV_R_SEND_READ_ID_ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_R_SEND_READ_ID_ACH_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_R_SEND_READ_ID_ADH_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_R_SEND_READ_ID_AEH_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_R_SEND_READ_ID_AFH_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_R_SEND_READ_ID_B1H_MOTOR_LSQ_CHOICE (177u)
#define INVERTERS_INV_R_SEND_READ_ID_B2H_ID_NOM_CHOICE (178u)
#define INVERTERS_INV_R_SEND_READ_ID_B3H_MOTOR_LM_CHOICE (179u)
#define INVERTERS_INV_R_SEND_READ_ID_B4H_MOTOR_RR_CHOICE (180u)
#define INVERTERS_INV_R_SEND_READ_ID_B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_R_SEND_READ_ID_B6H_MOTOR_TR_CHOICE (182u)
#define INVERTERS_INV_R_SEND_READ_ID_B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_SEND_READ_ID_BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_SEND_READ_ID_BBH_MOTOR_LSD_CHOICE (187u)
#define INVERTERS_INV_R_SEND_READ_ID_BCH_MOTOR_RS_CHOICE (188u)
#define INVERTERS_INV_R_SEND_READ_ID_BDH_MOTOR_TS_CHOICE (189u)
#define INVERTERS_INV_R_SEND_READ_ID_BEH_DEF_END_1_CHOICE (190u)
#define INVERTERS_INV_R_SEND_READ_ID_BFH_DEF_END_2_CHOICE (191u)
#define INVERTERS_INV_R_SEND_READ_ID_C0H_DEF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_R_SEND_READ_ID_C1H_DEF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_R_SEND_READ_ID_C2H_DEF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_R_SEND_READ_ID_C3H_DEF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_R_SEND_READ_ID_C4H_I_MAX_PK_CHOICE (196u)
#define INVERTERS_INV_R_SEND_READ_ID_C5H_I_CON_EFF_CHOICE (197u)
#define INVERTERS_INV_R_SEND_READ_ID_C6H_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_R_SEND_READ_ID_C7H_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_R_SEND_READ_ID_C8H_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_R_SEND_READ_ID_C9H_I_XKP_CHOICE (201u)
#define INVERTERS_INV_R_SEND_READ_ID_CAH_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_R_SEND_READ_ID_CBH_I_KF_CHOICE (203u)
#define INVERTERS_INV_R_SEND_READ_ID_CCH_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_R_SEND_READ_ID_CDH_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_R_SEND_READ_ID_CEH_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_R_SEND_READ_ID_D0H_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_R_SEND_READ_ID_D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_SEND_READ_ID_D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_SEND_READ_ID_D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_SEND_READ_ID_D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_SEND_READ_ID_D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_SEND_READ_ID_D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_SEND_READ_ID_D7H_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_R_SEND_READ_ID_D8H_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_R_SEND_READ_ID_D9H_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_R_SEND_READ_ID_DAH_DEF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_R_SEND_READ_ID_DBH_DEF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_R_SEND_READ_ID_DCH_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_R_SEND_READ_ID_DEH_DS_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_SEND_READ_ID_DFH_DS_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_SEND_READ_ID_E0H_DS_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_SEND_READ_ID_E1H_DS_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_SEND_READ_ID_E2H_DS_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_SEND_READ_ID_E3H_DS_GO_CHOICE (227u)
#define INVERTERS_INV_R_SEND_READ_ID_E4H_DS_END_1_CHOICE (228u)
#define INVERTERS_INV_R_SEND_READ_ID_E5H_DS_END_2_CHOICE (229u)
#define INVERTERS_INV_R_SEND_READ_ID_E6H_DS_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_SEND_READ_ID_E7H_DS_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_SEND_READ_ID_E8H_DS_RUN_CHOICE (232u)
#define INVERTERS_INV_R_SEND_READ_ID_E9H_DS_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_SEND_READ_ID_EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_R_SEND_READ_ID_ECH_DS_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_R_SEND_READ_ID_EDH_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_R_SEND_READ_ID_EEH_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_R_SEND_READ_ID_EFH_DS_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_R_SEND_READ_ID_F0H_T_PEAK_CHOICE (240u)
#define INVERTERS_INV_R_SEND_READ_ID_F1H_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_R_SEND_READ_ID_F2H_DS_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_SEND_READ_ID_F3H_DS_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_SEND_READ_ID_F4H_DS_POSTOLERANCE_CHOICE (244u)
#define INVERTERS_INV_R_SEND_READ_ID_F5H_DS_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_SEND_READ_ID_F6H_INVERTER_POWER_CHOICE (246u)
#define INVERTERS_INV_R_SEND_READ_ID_F7H_INVERTER_WORK_CHOICE (247u)
#define INVERTERS_INV_R_SEND_READ_ID_F8H_AXIS_CHOICE (248u)
#define INVERTERS_INV_R_SEND_READ_ID_FBH_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_SEND_READ_ID_FCH_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_R_SEND_READ_ID_FEH_SUBV_SVNREV_NR_CHOICE (254u)

#define INVERTERS_INV_R_SEND_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_SEND_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_SEND_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_SEND_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_SEND_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_SEND_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_SEND_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_SEND_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_SEND_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_SEND_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_SEND_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_SEND_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_SEND_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_SEND_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_SEND_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_SEND_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_SEND_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_SEND_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_SEND_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_SEND_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_SEND_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_SEND_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_SEND_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_SEND_RET_INTERVAL_SINGLE_CHOICE (0u)
#define INVERTERS_INV_R_SEND_RET_INTERVAL_STOP_CHOICE (255u)

#define INVERTERS_INV_R_SEND_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_R_SEND_ACTIVE192_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_SEND_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_R_SEND_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_RCV_RCV_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_06_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0F_FU_EXTRA_CHOICE (9u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_11_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_19_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1B_FW_NR_CHOICE (27u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1F_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_20_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_22_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_23_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_24_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_26_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_27_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_28_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_29_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2A_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_30_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_32_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_33_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_37_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_38_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_39_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3A_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_40_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_41_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_42_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_43_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_45_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_48_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_49_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4A_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4B_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_52_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_54_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_55_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_56_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_57_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5B_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5C_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5D_N_CMD_CHOICE (93u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5F_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_61_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_63_ECODE_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_66_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6D_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6F_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_70_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_74_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_78_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7B_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8A_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8F_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_91_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_92_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_93_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_94_ECODE_1STERROR_CHOICE (148u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_95_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_96_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_97_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_97_LOGICOUTBLOCK_CHOICE (152u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_99_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_9A_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_9B_LOGICINBLOCK_CHOICE (155u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A0_M_OUTDIG_CHOICE (160u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A1_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A8_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A9_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AA_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AB_LOGIC_FREQUENCY_CHOICE (171u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AC_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AD_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AE_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AF_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B8_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BA_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C9_PID_I_XKP_CHOICE (201u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CC_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CE_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D5_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D6_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D8_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D9_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DE_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DF_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E0_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E1_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E2_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E3_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E4_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E5_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E6_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E7_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E8_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E9_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EB_DC_BUS_VOLTAGE_FILT_CHOICE (235u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EC_DIGSIGNAL_FB_LOSSOFSIG_CHOICE (236u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EF_DIGSIGNAL_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F2_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F3_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F4_DIGSIGNAL_POS_TOLERANCE_CHOICE (244u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F5_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F6_INVERTER_OUTPUT_POWER_CHOICE (246u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F7_INVERTER_OUTPUT_WORK_CHOICE (247u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_FB_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_FC_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_FE_FW_SUBV_REVIS_NR_CHOICE (254u)

#define INVERTERS_INV_R_RCV_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_RCV_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_RCV_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_RCV_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_RCV_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_RCV_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_RCV_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_RCV_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_RCV_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_RCV_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_RCV_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_RCV_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_RCV_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_RCV_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_RCV_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_RCV_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_RCV_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_RCV_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_RCV_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_RCV_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_RCV_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_RCV_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_RCV_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_R_RCV_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_RCV_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_R_RCV_ACTIVE192_HIGH_CHOICE (1u)

/* Indexes */
#define INVERTERS_INV_L_SEND_INDEX 0
#define INVERTERS_INV_L_RCV_INDEX 1
#define INVERTERS_INV_R_SEND_INDEX 2
#define INVERTERS_INV_R_RCV_INDEX 3


#define inverters_MESSAGE_COUNT 4

#ifndef CANLIB_DEVICE_T
#define CANLIB_DEVICE_T
typedef struct {
    void* message;
    void* _converted;
    void* _raw;
    int _size_raw;
    int _size_converted;
} device_t;
void device_init(device_t *device);
void device_preallocate(device_t *device, int bytes);
void device_free(device_t *device);
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size);
#endif // CANLIB_DEVICE_T

#ifdef CANLIB_DEVICE_IMPLEMENTATION
#undef CANLIB_DEVICE_IMPLEMENTATION
void device_init(device_t *device) {
    device->message = NULL;
    device->_converted = NULL;
    device->_raw = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_preallocate(device_t *device, int bytes){
    if(device->_size_raw > 0)
        free(device->_raw);
    if(device->_size_converted > 0)
        free(device->_converted);
    device->_raw = malloc(bytes);
    device->_converted = malloc(bytes);
    device->_size_converted = device->_size_raw = bytes;
}
void device_free(device_t *device) {
    free(device->_raw);
    free(device->_converted);
    device->message = NULL;
    device->_raw = NULL;
    device->_converted = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size) {
    device->_raw = raw;
    device->_converted = converted;
    device->_size_raw = raw_size;
    device->_size_converted = converted_size;
}
#endif // CANLIB_DEVICE_IMPLEMENTATION

void inverters_devices_deserialize_from_id(
    device_t* device,
    uint16_t message_id,
    uint8_t* data
#ifdef CANLIB_TIMESTAMP
    , uint64_t timestamp
#endif // CANLIB_TIMESTAMP
);

int inverters_message_name_from_id(uint16_t id, char* buffer);
int inverters_index_from_id(uint16_t id);
int inverters_id_from_index(int index);

typedef enum {
	inverters_inv_l_send_send_mux_ID_04_USER_Key = 4,
	inverters_inv_l_send_send_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_l_send_send_mux_ID_07_FU_T_dc = 7,
	inverters_inv_l_send_send_mux_ID_08_FU_V_dc = 8,
	inverters_inv_l_send_send_mux_ID_09_FU_Special = 9,
	inverters_inv_l_send_send_mux_ID_0A_FU_U_min = 10,
	inverters_inv_l_send_send_mux_ID_0B_FU_F_min = 11,
	inverters_inv_l_send_send_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_l_send_send_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_l_send_send_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_l_send_send_mux_ID_0F_FU_Extra = 15,
	inverters_inv_l_send_send_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_l_send_send_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_l_send_send_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_l_send_send_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_l_send_send_mux_ID_15_Oszi_Source = 21,
	inverters_inv_l_send_send_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_l_send_send_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_l_send_send_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_l_send_send_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_l_send_send_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_l_send_send_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_l_send_send_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_l_send_send_mux_ID_21_Id_setdig = 33,
	inverters_inv_l_send_send_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_l_send_send_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_l_send_send_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_l_send_send_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_l_send_send_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_l_send_send_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_l_send_send_mux_ID_31_N_setdig = 49,
	inverters_inv_l_send_send_mux_ID_34_N_Lim = 52,
	inverters_inv_l_send_send_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_l_send_send_mux_ID_36_CommandSource = 54,
	inverters_inv_l_send_send_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_l_send_send_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_l_send_send_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_l_send_send_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_l_send_send_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_l_send_send_mux_ID_3D_Read_Cmd = 61,
	inverters_inv_l_send_send_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_l_send_send_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_l_send_send_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_l_send_send_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_l_send_send_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_l_send_send_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_l_send_send_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_l_send_send_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_l_send_send_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_l_send_send_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_l_send_send_mux_ID_5A_Device_Options = 90,
	inverters_inv_l_send_send_mux_ID_5B_PID_n_Kacc = 91,
	inverters_inv_l_send_send_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_l_send_send_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_l_send_send_mux_ID_62_SerialNumber = 98,
	inverters_inv_l_send_send_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_l_send_send_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_l_send_send_mux_ID_67_Device_Type = 103,
	inverters_inv_l_send_send_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_l_send_send_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_l_send_send_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_l_send_send_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_l_send_send_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_l_send_send_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_l_send_send_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_l_send_send_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_l_send_send_mux_ID_73_CAN_NBT = 115,
	inverters_inv_l_send_send_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_l_send_send_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_l_send_send_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_l_send_send_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_l_send_send_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_l_send_send_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_l_send_send_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_l_send_send_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_l_send_send_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_l_send_send_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_l_send_send_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_l_send_send_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_l_send_send_mux_ID_85_Function_Special = 133,
	inverters_inv_l_send_send_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_l_send_send_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_l_send_send_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_l_send_send_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_l_send_send_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_l_send_send_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_l_send_send_mux_ID_90_M_setdig = 144,
	inverters_inv_l_send_send_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_l_send_send_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_l_send_send_mux_ID_A4_Motor_Options = 164,
	inverters_inv_l_send_send_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_l_send_send_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_l_send_send_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_l_send_send_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_l_send_send_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_l_send_send_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_l_send_send_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_l_send_send_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_l_send_send_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_l_send_send_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_l_send_send_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_l_send_send_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_l_send_send_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_l_send_send_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_l_send_send_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_l_send_send_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_l_send_send_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_l_send_send_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_l_send_send_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_l_send_send_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_l_send_send_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_l_send_send_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_l_send_send_mux_ID_C6_I_device = 198,
	inverters_inv_l_send_send_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_l_send_send_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_l_send_send_mux_ID_C9_CurrentControl_xKp = 201,
	inverters_inv_l_send_send_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_l_send_send_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_l_send_send_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_l_send_send_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_l_send_send_mux_ID_D1_Var_1 = 209,
	inverters_inv_l_send_send_mux_ID_D2_Var_2 = 210,
	inverters_inv_l_send_send_mux_ID_D3_Var_3 = 211,
	inverters_inv_l_send_send_mux_ID_D4_Var_4 = 212,
	inverters_inv_l_send_send_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_l_send_send_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_l_send_send_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_l_send_send_mux_ID_EE_V_Shunt = 238,
	inverters_inv_l_send_send_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_l_send_send_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_l_send_send_mux_ID_F8_Axis_Label = 248,
} inverters_inv_l_send_send_mux;

typedef enum {
	inverters_inv_l_send_read_id_05h_Motor_F_nom = 5,
	inverters_inv_l_send_read_id_06h_Motor_V_nom = 6,
	inverters_inv_l_send_read_id_07h_FU_T_dc = 7,
	inverters_inv_l_send_read_id_08h_FU_V_dc = 8,
	inverters_inv_l_send_read_id_09h_FU_Special = 9,
	inverters_inv_l_send_read_id_0Ah_FU_U_min = 10,
	inverters_inv_l_send_read_id_0Bh_FU_F_min = 11,
	inverters_inv_l_send_read_id_0Ch_FU_V_corner = 12,
	inverters_inv_l_send_read_id_0Dh_FU_F_corner = 13,
	inverters_inv_l_send_read_id_0Eh_Motor_Cos_Phi = 14,
	inverters_inv_l_send_read_id_0Fh_FU_Extra = 15,
	inverters_inv_l_send_read_id_10h_Oszi_Channel = 16,
	inverters_inv_l_send_read_id_11h_Control_Status = 17,
	inverters_inv_l_send_read_id_12h_Oszi_Triger_Level = 18,
	inverters_inv_l_send_read_id_13h_Oszi_Triger_Edge = 19,
	inverters_inv_l_send_read_id_14h_Oszi_Triger_Source = 20,
	inverters_inv_l_send_read_id_15h_Oszi_Source = 21,
	inverters_inv_l_send_read_id_16h_Oszi_Skip = 22,
	inverters_inv_l_send_read_id_17h_Oszi_Read_cmd = 23,
	inverters_inv_l_send_read_id_18h_Oszi_Run_cmd = 24,
	inverters_inv_l_send_read_id_19h_PWM_Enum = 25,
	inverters_inv_l_send_read_id_1Ah_Calib_Ref_Value = 26,
	inverters_inv_l_send_read_id_1Bh_FW_Nr = 27,
	inverters_inv_l_send_read_id_1Ch_I_Kp = 28,
	inverters_inv_l_send_read_id_1Dh_I_Ti = 29,
	inverters_inv_l_send_read_id_1Eh_Cutoffdig = 30,
	inverters_inv_l_send_read_id_1Fh_I3_Offset = 31,
	inverters_inv_l_send_read_id_20h_I_Actual = 32,
	inverters_inv_l_send_read_id_21h_Id_setdig = 33,
	inverters_inv_l_send_read_id_22h_I_cmd_ramp = 34,
	inverters_inv_l_send_read_id_23h_Id_Ref = 35,
	inverters_inv_l_send_read_id_24h_I_Max_Inuse = 36,
	inverters_inv_l_send_read_id_25h_I_Delta_Ramp = 37,
	inverters_inv_l_send_read_id_26h_I_cmd = 38,
	inverters_inv_l_send_read_id_27h_Iq_Actual = 39,
	inverters_inv_l_send_read_id_28h_Id_Actual = 40,
	inverters_inv_l_send_read_id_29h_Vq_Output = 41,
	inverters_inv_l_send_read_id_2Ah_Vd_Output = 42,
	inverters_inv_l_send_read_id_2Bh_I_TiM = 43,
	inverters_inv_l_send_read_id_2Ch_n_Kp = 44,
	inverters_inv_l_send_read_id_2Dh_n_Ti = 45,
	inverters_inv_l_send_read_id_2Eh_n_Td = 46,
	inverters_inv_l_send_read_id_2Fh_Ain_in_1_OffsScale = 47,
	inverters_inv_l_send_read_id_30h_N_Actual = 48,
	inverters_inv_l_send_read_id_31h_N_setdig = 49,
	inverters_inv_l_send_read_id_32h_N_cmd_ramp = 50,
	inverters_inv_l_send_read_id_33h_N_Error = 51,
	inverters_inv_l_send_read_id_34h_N_Lim = 52,
	inverters_inv_l_send_read_id_35h_Acc_Ramps = 53,
	inverters_inv_l_send_read_id_36h_CommandSource = 54,
	inverters_inv_l_send_read_id_37h_DZR_Sequencer_Value = 55,
	inverters_inv_l_send_read_id_38h_Iq_Error = 56,
	inverters_inv_l_send_read_id_39h_Id_Error = 57,
	inverters_inv_l_send_read_id_3Bh_n_TiM = 59,
	inverters_inv_l_send_read_id_3Ch_I_Derating_N_perc = 60,
	inverters_inv_l_send_read_id_3Eh_N_Lim_minus = 62,
	inverters_inv_l_send_read_id_3Fh_N_Lim_plus = 63,
	inverters_inv_l_send_read_id_40h_Status_Map = 64,
	inverters_inv_l_send_read_id_41h_Incr_Delta = 65,
	inverters_inv_l_send_read_id_42h_MotorPosition_Mech = 66,
	inverters_inv_l_send_read_id_43h_MotorPosition_Elec = 67,
	inverters_inv_l_send_read_id_44h_FeedBack_Offset_Angle = 68,
	inverters_inv_l_send_read_id_45h_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_l_send_read_id_46h_I_lim_dig_perc = 70,
	inverters_inv_l_send_read_id_48h_I_Limit_Inuse = 72,
	inverters_inv_l_send_read_id_49h_T_Motor = 73,
	inverters_inv_l_send_read_id_4Ah_T_Igbt = 74,
	inverters_inv_l_send_read_id_4Bh_T_Air_Inside = 75,
	inverters_inv_l_send_read_id_4Ch_I_Derating_TE = 76,
	inverters_inv_l_send_read_id_4Dh_Motor_I_max_eff = 77,
	inverters_inv_l_send_read_id_4Eh_Motor_I_nom_eff = 78,
	inverters_inv_l_send_read_id_4Fh_Motor_Pole = 79,
	inverters_inv_l_send_read_id_50h_Ain_in_1_Cutoff = 80,
	inverters_inv_l_send_read_id_51h_Kern_Mode_State = 81,
	inverters_inv_l_send_read_id_52h_Status_Mask = 82,
	inverters_inv_l_send_read_id_53h_Ain_in_2_Cutoff = 83,
	inverters_inv_l_send_read_id_54h_I1_Actual = 84,
	inverters_inv_l_send_read_id_55h_I2_Actual = 85,
	inverters_inv_l_send_read_id_56h_I3_Actual = 86,
	inverters_inv_l_send_read_id_57h_I_Limit_Inuse_ramp = 87,
	inverters_inv_l_send_read_id_58h_I_Derating_TD = 88,
	inverters_inv_l_send_read_id_59h_Motor_Nom = 89,
	inverters_inv_l_send_read_id_5Ah_Device_Options = 90,
	inverters_inv_l_send_read_id_5Bh_SpeedControl_Kacc = 91,
	inverters_inv_l_send_read_id_5Ch_Rotor_Signals = 92,
	inverters_inv_l_send_read_id_5Dh_N_cmd = 93,
	inverters_inv_l_send_read_id_5Eh_Speed_Filter = 94,
	inverters_inv_l_send_read_id_5Fh_I_Actual_Filt = 95,
	inverters_inv_l_send_read_id_60h_Ain_in_X_Filter = 96,
	inverters_inv_l_send_read_id_61h_Ixt_Monitor = 97,
	inverters_inv_l_send_read_id_62h_SerialNumber = 98,
	inverters_inv_l_send_read_id_63h_FPGA_Status = 99,
	inverters_inv_l_send_read_id_64h_Device_Mains = 100,
	inverters_inv_l_send_read_id_65h_Regen_P_R = 101,
	inverters_inv_l_send_read_id_67h_Device_Type = 103,
	inverters_inv_l_send_read_id_68h_CAN_ID_Rx = 104,
	inverters_inv_l_send_read_id_69h_CAN_ID_Tx = 105,
	inverters_inv_l_send_read_id_6Ah_Pos_Kp = 106,
	inverters_inv_l_send_read_id_6Bh_Pos_Ti = 107,
	inverters_inv_l_send_read_id_6Ch_Pos_Td = 108,
	inverters_inv_l_send_read_id_6Dh_Pos_Actual = 109,
	inverters_inv_l_send_read_id_6Eh_Pos_Dest = 110,
	inverters_inv_l_send_read_id_6Fh_Pos_Actual_2 = 111,
	inverters_inv_l_send_read_id_70h_Pos_Err = 112,
	inverters_inv_l_send_read_id_71h_Pos_TiM = 113,
	inverters_inv_l_send_read_id_72h_Pos_OffsetRef = 114,
	inverters_inv_l_send_read_id_73h_CAN_NBT = 115,
	inverters_inv_l_send_read_id_74h_Pos_Zero_Capture = 116,
	inverters_inv_l_send_read_id_75h_Pos_Ref_Reso_Edge = 117,
	inverters_inv_l_send_read_id_76h_Pos_Speed_1 = 118,
	inverters_inv_l_send_read_id_77h_Pos_Speed_2 = 119,
	inverters_inv_l_send_read_id_78h_Pos_Ref_Start = 120,
	inverters_inv_l_send_read_id_79h_Pos_Tol_Win = 121,
	inverters_inv_l_send_read_id_7Ah_Pos_Preset = 122,
	inverters_inv_l_send_read_id_7Bh_Pos_Zero_Offset = 123,
	inverters_inv_l_send_read_id_7Ch_Pos_ND_Scale = 124,
	inverters_inv_l_send_read_id_7Dh_Pos_ND_Offset = 125,
	inverters_inv_l_send_read_id_7Eh_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_l_send_read_id_7Fh_Pos_Offset_Slack = 127,
	inverters_inv_l_send_read_id_80h_Pos_Diff_Slack = 128,
	inverters_inv_l_send_read_id_83h_Func_Para_Read = 131,
	inverters_inv_l_send_read_id_84h_Func_Para_Write = 132,
	inverters_inv_l_send_read_id_85h_Func_Special = 133,
	inverters_inv_l_send_read_id_88h_CAN_ID_2_Rx = 136,
	inverters_inv_l_send_read_id_89h_CAN_ID_2_Tx = 137,
	inverters_inv_l_send_read_id_8Ah_Vout = 138,
	inverters_inv_l_send_read_id_8Bh_V_Ref = 139,
	inverters_inv_l_send_read_id_8Ch_V_Kp = 140,
	inverters_inv_l_send_read_id_8Dh_V_Ti = 141,
	inverters_inv_l_send_read_id_8Eh_Clear_Error_List = 142,
	inverters_inv_l_send_read_id_8Fh_ErrorWarning_Map = 143,
	inverters_inv_l_send_read_id_90h_M_setdig = 144,
	inverters_inv_l_send_read_id_91h_Pos_cmd_int = 145,
	inverters_inv_l_send_read_id_92h_CAN_Error_BusOff_cntr = 146,
	inverters_inv_l_send_read_id_93h_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_l_send_read_id_94h_CAN_Error_RxMsgLost_cntr = 148,
	inverters_inv_l_send_read_id_95h_CAN_Error_NoAck_cntr = 149,
	inverters_inv_l_send_read_id_96h_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_l_send_read_id_97h_CAN_Error_Bit_cntr = 151,
	inverters_inv_l_send_read_id_99h_Info_Timer_Diff = 153,
	inverters_inv_l_send_read_id_9Ah_Temp_DEBUG = 154,
	inverters_inv_l_send_read_id_A0h_Mout = 160,
	inverters_inv_l_send_read_id_A1h_Ballast_cntr = 161,
	inverters_inv_l_send_read_id_A2h_I_Derating_TM = 162,
	inverters_inv_l_send_read_id_A3h_M_Temp = 163,
	inverters_inv_l_send_read_id_A4h_Motor_Options = 164,
	inverters_inv_l_send_read_id_A5h_DC_Bus_MinMax_Lim = 165,
	inverters_inv_l_send_read_id_A6h_FB_IncPerRot = 166,
	inverters_inv_l_send_read_id_A7h_FB_Pole = 167,
	inverters_inv_l_send_read_id_A8h_N_Actual_Filt = 168,
	inverters_inv_l_send_read_id_A9h_I3_ADC = 169,
	inverters_inv_l_send_read_id_AAh_I2_ADC = 170,
	inverters_inv_l_send_read_id_ABh_Logic_Freq = 171,
	inverters_inv_l_send_read_id_ACh_PWM_1_56 = 172,
	inverters_inv_l_send_read_id_ADh_PWM_2_34 = 173,
	inverters_inv_l_send_read_id_AEh_PWM_3_12 = 174,
	inverters_inv_l_send_read_id_AFh_Timer_Delta = 175,
	inverters_inv_l_send_read_id_B1h_Motor_Lsq = 177,
	inverters_inv_l_send_read_id_B2h_Id_Nom = 178,
	inverters_inv_l_send_read_id_B3h_Motor_Lm = 179,
	inverters_inv_l_send_read_id_B4h_Motor_Rr = 180,
	inverters_inv_l_send_read_id_B5h_Id_Min = 181,
	inverters_inv_l_send_read_id_B6h_Motor_Tr = 182,
	inverters_inv_l_send_read_id_B8h_Ptr_1_DEBUG = 184,
	inverters_inv_l_send_read_id_BAh_Ptr_2_DEBUG = 186,
	inverters_inv_l_send_read_id_BBh_Motor_Lsd = 187,
	inverters_inv_l_send_read_id_BCh_Motor_Rs = 188,
	inverters_inv_l_send_read_id_BDh_Motor_Ts = 189,
	inverters_inv_l_send_read_id_BEh_def_END_1 = 190,
	inverters_inv_l_send_read_id_BFh_def_END_2 = 191,
	inverters_inv_l_send_read_id_C0h_def_DIN_1 = 192,
	inverters_inv_l_send_read_id_C1h_def_DIN_2 = 193,
	inverters_inv_l_send_read_id_C2h_def_OUT_1 = 194,
	inverters_inv_l_send_read_id_C3h_def_OUT_2 = 195,
	inverters_inv_l_send_read_id_C4h_I_max_pk = 196,
	inverters_inv_l_send_read_id_C5h_I_con_eff = 197,
	inverters_inv_l_send_read_id_C6h_I_device = 198,
	inverters_inv_l_send_read_id_C7h_RLim_MRcp_Ramp = 199,
	inverters_inv_l_send_read_id_C8h_Nmax100perc = 200,
	inverters_inv_l_send_read_id_C9h_I_xKp = 201,
	inverters_inv_l_send_read_id_CAh_Bat_Opr_Limits = 202,
	inverters_inv_l_send_read_id_CBh_I_Kf = 203,
	inverters_inv_l_send_read_id_CCh_Car_Mode_Status = 204,
	inverters_inv_l_send_read_id_CDh_Car_Mode_Config = 205,
	inverters_inv_l_send_read_id_CEh_N_Rpm_MaxInt = 206,
	inverters_inv_l_send_read_id_D0h_CAN_Timeout = 208,
	inverters_inv_l_send_read_id_D1h_Var_1 = 209,
	inverters_inv_l_send_read_id_D2h_Var_2 = 210,
	inverters_inv_l_send_read_id_D3h_Var_3 = 211,
	inverters_inv_l_send_read_id_D4h_Var_4 = 212,
	inverters_inv_l_send_read_id_D5h_Ain_in_1 = 213,
	inverters_inv_l_send_read_id_D6h_Ain_in_2 = 214,
	inverters_inv_l_send_read_id_D7h_Ain_in_2_OffsScale = 215,
	inverters_inv_l_send_read_id_D8h_LogicReadBitsIN_OUT = 216,
	inverters_inv_l_send_read_id_D9h_I_200perc = 217,
	inverters_inv_l_send_read_id_DAh_def_OUT_3 = 218,
	inverters_inv_l_send_read_id_DBh_def_OUT_4 = 219,
	inverters_inv_l_send_read_id_DCh_DAC_Source_ID = 220,
	inverters_inv_l_send_read_id_DEh_DS_DOUT_3 = 222,
	inverters_inv_l_send_read_id_DFh_DS_DOUT_4 = 223,
	inverters_inv_l_send_read_id_E0h_DS_DOUT_1 = 224,
	inverters_inv_l_send_read_id_E1h_DS_DOUT_2 = 225,
	inverters_inv_l_send_read_id_E2h_DS_Rdy_BTB = 226,
	inverters_inv_l_send_read_id_E3h_DS_GO = 227,
	inverters_inv_l_send_read_id_E4h_DS_END_1 = 228,
	inverters_inv_l_send_read_id_E5h_DS_END_2 = 229,
	inverters_inv_l_send_read_id_E6h_DS_DIN_1 = 230,
	inverters_inv_l_send_read_id_E7h_DS_DIN_2 = 231,
	inverters_inv_l_send_read_id_E8h_DS_RUN = 232,
	inverters_inv_l_send_read_id_E9h_DS_I_Fault = 233,
	inverters_inv_l_send_read_id_EBh_Vdc_Bus = 235,
	inverters_inv_l_send_read_id_ECh_DS_FB_LossOfSignal = 236,
	inverters_inv_l_send_read_id_EDh_Dec_Ramps = 237,
	inverters_inv_l_send_read_id_EEh_V_Shunt = 238,
	inverters_inv_l_send_read_id_EFh_DS_NoHWFault = 239,
	inverters_inv_l_send_read_id_F0h_T_peak = 240,
	inverters_inv_l_send_read_id_F1h_Brake_Delay = 241,
	inverters_inv_l_send_read_id_F2h_DS_Brake = 242,
	inverters_inv_l_send_read_id_F3h_DS_Icns = 243,
	inverters_inv_l_send_read_id_F4h_DS_PosTolerance = 244,
	inverters_inv_l_send_read_id_F5h_DS_LessN0 = 245,
	inverters_inv_l_send_read_id_F6h_Inverter_Power = 246,
	inverters_inv_l_send_read_id_F7h_Inverter_Work = 247,
	inverters_inv_l_send_read_id_F8h_Axis = 248,
	inverters_inv_l_send_read_id_FBh_Ain_in_1_Calc = 251,
	inverters_inv_l_send_read_id_FCh_Ain_in_2_Calc = 252,
	inverters_inv_l_send_read_id_66h_DC_Bus_Voltage = 102,
	inverters_inv_l_send_read_id_3Ah_M_cmd_ramp = 58,
	inverters_inv_l_send_read_id_FEh_Subv_SVNRev_Nr = 254,
} inverters_inv_l_send_read_id;

typedef enum {
	inverters_inv_l_send_def_din_1__Off_ = 0,
	inverters_inv_l_send_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_send_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_send_def_din_1_Ref_Plus = 3,
	inverters_inv_l_send_def_din_1_Limit_Plus = 4,
	inverters_inv_l_send_def_din_1_Limit_Minus = 5,
	inverters_inv_l_send_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_send_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_l_send_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_l_send_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_l_send_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_send_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_send_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_l_send_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_send_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_send_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_send_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_send_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_send_def_din_1_I_limit_dig_ = 18,
	inverters_inv_l_send_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_send_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_send_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_send_def_din_1_Handwheel = 22,
	inverters_inv_l_send_def_din_1_Brake_Car = 23,
	inverters_inv_l_send_def_din_1_Recup_Disabled = 24,
	inverters_inv_l_send_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_send_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_send_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_send_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_send_def_din_1;

typedef enum {
	inverters_inv_l_send_def_end_1__Off_ = 0,
	inverters_inv_l_send_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_send_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_send_def_end_1_Ref_Plus = 3,
	inverters_inv_l_send_def_end_1_Limit_Plus = 4,
	inverters_inv_l_send_def_end_1_Limit_Minus = 5,
	inverters_inv_l_send_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_send_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_l_send_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_l_send_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_l_send_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_send_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_send_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_l_send_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_send_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_send_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_send_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_send_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_send_def_end_1_I_limit_dig_ = 18,
	inverters_inv_l_send_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_send_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_send_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_send_def_end_1_Handwheel = 22,
	inverters_inv_l_send_def_end_1_Brake_Car = 23,
	inverters_inv_l_send_def_end_1_Recup_Disabled = 24,
	inverters_inv_l_send_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_send_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_send_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_send_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_send_def_end_1;

typedef enum {
	inverters_inv_l_send_ret_interval_Stop = 255,
	inverters_inv_l_send_ret_interval_Single = 0,
} inverters_inv_l_send_ret_interval;

typedef enum {
	inverters_inv_l_send_active192_Low = 0,
	inverters_inv_l_send_active192_High = 1,
} inverters_inv_l_send_active192;

typedef enum {
	inverters_inv_l_send_active190_Low = 0,
	inverters_inv_l_send_active190_High = 1,
} inverters_inv_l_send_active190;

typedef enum {
	inverters_inv_l_rcv_rcv_mux_ID_30_N_Actual = 48,
	inverters_inv_l_rcv_rcv_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_l_rcv_rcv_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_l_rcv_rcv_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_l_rcv_rcv_mux_ID_A8_N_Actual_Filt = 168,
	inverters_inv_l_rcv_rcv_mux_ID_1B_FW_Nr = 27,
	inverters_inv_l_rcv_rcv_mux_ID_67_Device_Type = 103,
	inverters_inv_l_rcv_rcv_mux_ID_62_SerialNumber = 98,
	inverters_inv_l_rcv_rcv_mux_ID_F8_Axis_Label = 248,
	inverters_inv_l_rcv_rcv_mux_ID_C6_I_device = 198,
	inverters_inv_l_rcv_rcv_mux_ID_EE_V_Shunt = 238,
	inverters_inv_l_rcv_rcv_mux_ID_D9_I_200perc = 217,
	inverters_inv_l_rcv_rcv_mux_ID_5A_Device_Options = 90,
	inverters_inv_l_rcv_rcv_mux_ID_40_Status_Map = 64,
	inverters_inv_l_rcv_rcv_mux_ID_8F_ErrorWarning_Map = 143,
	inverters_inv_l_rcv_rcv_mux_ID_D8_LogicReadBitsIN_OUT = 216,
	inverters_inv_l_rcv_rcv_mux_ID_D5_Ain_in_1 = 213,
	inverters_inv_l_rcv_rcv_mux_ID_D6_Ain_in_2 = 214,
	inverters_inv_l_rcv_rcv_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_l_rcv_rcv_mux_ID_31_N_setdig = 49,
	inverters_inv_l_rcv_rcv_mux_ID_5D_N_cmd = 93,
	inverters_inv_l_rcv_rcv_mux_ID_32_N_cmd_ramp = 50,
	inverters_inv_l_rcv_rcv_mux_ID_34_N_Lim = 52,
	inverters_inv_l_rcv_rcv_mux_ID_33_N_Error = 51,
	inverters_inv_l_rcv_rcv_mux_ID_90_M_setdig = 144,
	inverters_inv_l_rcv_rcv_mux_ID_21_Id_setdig = 33,
	inverters_inv_l_rcv_rcv_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_l_rcv_rcv_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_l_rcv_rcv_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_l_rcv_rcv_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_l_rcv_rcv_mux_ID_48_I_Limit_Inuse = 72,
	inverters_inv_l_rcv_rcv_mux_ID_26_I_cmd = 38,
	inverters_inv_l_rcv_rcv_mux_ID_22_I_cmd_ramp = 34,
	inverters_inv_l_rcv_rcv_mux_ID_20_I_Actual = 32,
	inverters_inv_l_rcv_rcv_mux_ID_5F_I_Actual_Filt = 95,
	inverters_inv_l_rcv_rcv_mux_ID_27_Iq_Actual = 39,
	inverters_inv_l_rcv_rcv_mux_ID_28_Id_Actual = 40,
	inverters_inv_l_rcv_rcv_mux_ID_38_Iq_Error = 56,
	inverters_inv_l_rcv_rcv_mux_ID_39_Id_Error = 57,
	inverters_inv_l_rcv_rcv_mux_ID_54_I1_Actual = 84,
	inverters_inv_l_rcv_rcv_mux_ID_55_I2_Actual = 85,
	inverters_inv_l_rcv_rcv_mux_ID_56_I3_Actual = 86,
	inverters_inv_l_rcv_rcv_mux_ID_A9_I3_ADC_Value = 169,
	inverters_inv_l_rcv_rcv_mux_ID_AA_I2_ADC_Value = 170,
	inverters_inv_l_rcv_rcv_mux_ID_29_Vq_Output = 41,
	inverters_inv_l_rcv_rcv_mux_ID_2A_Vd_Output = 42,
	inverters_inv_l_rcv_rcv_mux_ID_8A_V_Output = 138,
	inverters_inv_l_rcv_rcv_mux_ID_49_T_Motor = 73,
	inverters_inv_l_rcv_rcv_mux_ID_4A_T_Igbt = 74,
	inverters_inv_l_rcv_rcv_mux_ID_4B_T_Air_Inside = 75,
	inverters_inv_l_rcv_rcv_mux_ID_EB_DC_Bus_Voltage_Filt = 235,
	inverters_inv_l_rcv_rcv_mux_ID_E4_DigInput_END_1 = 228,
	inverters_inv_l_rcv_rcv_mux_ID_E6_DigInput_DIN_1 = 230,
	inverters_inv_l_rcv_rcv_mux_ID_E5_DigInput_END_2 = 229,
	inverters_inv_l_rcv_rcv_mux_ID_E7_DigInput_DIN_2 = 231,
	inverters_inv_l_rcv_rcv_mux_ID_E8_DigInput_RUN = 232,
	inverters_inv_l_rcv_rcv_mux_ID_E0_DigOutput_DOUT_1 = 224,
	inverters_inv_l_rcv_rcv_mux_ID_E1_DigOutput_DOUT_2 = 225,
	inverters_inv_l_rcv_rcv_mux_ID_DE_DigOutput_DOUT_3 = 222,
	inverters_inv_l_rcv_rcv_mux_ID_E2_DigOutput_Rdy_BTB = 226,
	inverters_inv_l_rcv_rcv_mux_ID_E9_Error_I_Fault = 233,
	inverters_inv_l_rcv_rcv_mux_ID_DF_DigOutput_DOUT_4 = 223,
	inverters_inv_l_rcv_rcv_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_l_rcv_rcv_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_l_rcv_rcv_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_l_rcv_rcv_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_l_rcv_rcv_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_l_rcv_rcv_mux_ID_36_CommandSource = 54,
	inverters_inv_l_rcv_rcv_mux_ID_23_Id_Ref = 35,
	inverters_inv_l_rcv_rcv_mux_ID_A0_M_outdig = 160,
	inverters_inv_l_rcv_rcv_mux_ID_B8_Ptr_1_DEBUG = 184,
	inverters_inv_l_rcv_rcv_mux_ID_BA_Ptr_2_DEBUG = 186,
	inverters_inv_l_rcv_rcv_mux_ID_9A_Temp_DEBUG = 154,
	inverters_inv_l_rcv_rcv_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_l_rcv_rcv_mux_ID_06_Motor_V_nom = 6,
	inverters_inv_l_rcv_rcv_mux_ID_07_FU_T_dc = 7,
	inverters_inv_l_rcv_rcv_mux_ID_08_FU_V_dc = 8,
	inverters_inv_l_rcv_rcv_mux_ID_0A_FU_U_min = 10,
	inverters_inv_l_rcv_rcv_mux_ID_0B_FU_F_min = 11,
	inverters_inv_l_rcv_rcv_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_l_rcv_rcv_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_l_rcv_rcv_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_l_rcv_rcv_mux_ID_19_PWM_Enum = 25,
	inverters_inv_l_rcv_rcv_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_l_rcv_rcv_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_l_rcv_rcv_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_l_rcv_rcv_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_l_rcv_rcv_mux_ID_1F_I3_Offset = 31,
	inverters_inv_l_rcv_rcv_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_l_rcv_rcv_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_l_rcv_rcv_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_l_rcv_rcv_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_l_rcv_rcv_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_l_rcv_rcv_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_l_rcv_rcv_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_l_rcv_rcv_mux_ID_37_DZR_Sequencer_Value = 55,
	inverters_inv_l_rcv_rcv_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_l_rcv_rcv_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_l_rcv_rcv_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_l_rcv_rcv_mux_ID_41_Incr_Delta = 65,
	inverters_inv_l_rcv_rcv_mux_ID_42_MotorPosition_Mech = 66,
	inverters_inv_l_rcv_rcv_mux_ID_43_MotorPosition_Elec = 67,
	inverters_inv_l_rcv_rcv_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_l_rcv_rcv_mux_ID_45_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_l_rcv_rcv_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_l_rcv_rcv_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_l_rcv_rcv_mux_ID_11_Control_Status = 17,
	inverters_inv_l_rcv_rcv_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_l_rcv_rcv_mux_ID_52_Status_Mask = 82,
	inverters_inv_l_rcv_rcv_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_l_rcv_rcv_mux_ID_57_I_Limit_Inuse_ramp = 87,
	inverters_inv_l_rcv_rcv_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_l_rcv_rcv_mux_ID_5B_SpeedControl_Kacc = 91,
	inverters_inv_l_rcv_rcv_mux_ID_5C_Rotor_Signals = 92,
	inverters_inv_l_rcv_rcv_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_l_rcv_rcv_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_l_rcv_rcv_mux_ID_61_Ixt_Monitor = 97,
	inverters_inv_l_rcv_rcv_mux_ID_63_ECODE_Status = 99,
	inverters_inv_l_rcv_rcv_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_l_rcv_rcv_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_l_rcv_rcv_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_l_rcv_rcv_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_l_rcv_rcv_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_l_rcv_rcv_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_l_rcv_rcv_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_l_rcv_rcv_mux_ID_6D_Pos_Actual = 109,
	inverters_inv_l_rcv_rcv_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_l_rcv_rcv_mux_ID_6F_Pos_Actual_2 = 111,
	inverters_inv_l_rcv_rcv_mux_ID_70_Pos_Error = 112,
	inverters_inv_l_rcv_rcv_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_l_rcv_rcv_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_l_rcv_rcv_mux_ID_73_CAN_NBT = 115,
	inverters_inv_l_rcv_rcv_mux_ID_74_Pos_Zero_Capture = 116,
	inverters_inv_l_rcv_rcv_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_l_rcv_rcv_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_l_rcv_rcv_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_l_rcv_rcv_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_l_rcv_rcv_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_l_rcv_rcv_mux_ID_7B_Pos_Zero_Offset = 123,
	inverters_inv_l_rcv_rcv_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_l_rcv_rcv_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_l_rcv_rcv_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_l_rcv_rcv_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_l_rcv_rcv_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_l_rcv_rcv_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_l_rcv_rcv_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_l_rcv_rcv_mux_ID_85_Function_Special = 133,
	inverters_inv_l_rcv_rcv_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_l_rcv_rcv_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_l_rcv_rcv_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_l_rcv_rcv_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_l_rcv_rcv_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_l_rcv_rcv_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_l_rcv_rcv_mux_ID_91_Pos_cmd_int = 145,
	inverters_inv_l_rcv_rcv_mux_ID_92_CAN_Error_BusOff_cntr = 146,
	inverters_inv_l_rcv_rcv_mux_ID_93_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_l_rcv_rcv_mux_ID_94_ECODE_1stError = 148,
	inverters_inv_l_rcv_rcv_mux_ID_95_CAN_Error_NoAck_cntr = 149,
	inverters_inv_l_rcv_rcv_mux_ID_96_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_l_rcv_rcv_mux_ID_97_CAN_Error_Bit_cntr = 151,
	inverters_inv_l_rcv_rcv_mux_ID_99_Info_Timer_Diff = 153,
	inverters_inv_l_rcv_rcv_mux_ID_A1_Ballast_cntr = 161,
	inverters_inv_l_rcv_rcv_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_l_rcv_rcv_mux_ID_A4_Motor_Options = 164,
	inverters_inv_l_rcv_rcv_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_l_rcv_rcv_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_l_rcv_rcv_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_l_rcv_rcv_mux_ID_AB_Logic_Frequency = 171,
	inverters_inv_l_rcv_rcv_mux_ID_AC_PWM_1_56 = 172,
	inverters_inv_l_rcv_rcv_mux_ID_AD_PWM_2_34 = 173,
	inverters_inv_l_rcv_rcv_mux_ID_AE_PWM_3_12 = 174,
	inverters_inv_l_rcv_rcv_mux_ID_AF_Timer_Delta = 175,
	inverters_inv_l_rcv_rcv_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_l_rcv_rcv_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_l_rcv_rcv_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_l_rcv_rcv_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_l_rcv_rcv_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_l_rcv_rcv_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_l_rcv_rcv_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_l_rcv_rcv_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_l_rcv_rcv_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_l_rcv_rcv_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_l_rcv_rcv_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_l_rcv_rcv_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_l_rcv_rcv_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_l_rcv_rcv_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_l_rcv_rcv_mux_ID_24_I_Max_Inuse = 36,
	inverters_inv_l_rcv_rcv_mux_ID_E3_DigSignal_GO = 227,
	inverters_inv_l_rcv_rcv_mux_ID_F2_DigSignal_Brake = 242,
	inverters_inv_l_rcv_rcv_mux_ID_F3_DigSignal_Icns = 243,
	inverters_inv_l_rcv_rcv_mux_ID_F5_DigSignal_LessN0 = 245,
	inverters_inv_l_rcv_rcv_mux_ID_F4_DigSignal_Pos_Tolerance = 244,
	inverters_inv_l_rcv_rcv_mux_ID_FB_Ain_in_1_Calc = 251,
	inverters_inv_l_rcv_rcv_mux_ID_FC_Ain_in_2_Calc = 252,
	inverters_inv_l_rcv_rcv_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_l_rcv_rcv_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_l_rcv_rcv_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_l_rcv_rcv_mux_ID_C9_PID_I_xKp = 201,
	inverters_inv_l_rcv_rcv_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_l_rcv_rcv_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_l_rcv_rcv_mux_ID_CC_Car_Mode_Status = 204,
	inverters_inv_l_rcv_rcv_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_l_rcv_rcv_mux_ID_CE_N_Rpm_MaxInt = 206,
	inverters_inv_l_rcv_rcv_mux_ID_D1_Var_1 = 209,
	inverters_inv_l_rcv_rcv_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_l_rcv_rcv_mux_ID_D2_Var_2 = 210,
	inverters_inv_l_rcv_rcv_mux_ID_D3_Var_3 = 211,
	inverters_inv_l_rcv_rcv_mux_ID_D4_Var_4 = 212,
	inverters_inv_l_rcv_rcv_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_l_rcv_rcv_mux_ID_EC_DigSignal_FB_LossOfSig = 236,
	inverters_inv_l_rcv_rcv_mux_ID_EF_DigSignal_NoHWFault = 239,
	inverters_inv_l_rcv_rcv_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_l_rcv_rcv_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_l_rcv_rcv_mux_ID_F6_Inverter_Output_Power = 246,
	inverters_inv_l_rcv_rcv_mux_ID_F7_Inverter_Output_Work = 247,
	inverters_inv_l_rcv_rcv_mux_ID_0F_FU_Extra = 9,
	inverters_inv_l_rcv_rcv_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_l_rcv_rcv_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_l_rcv_rcv_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_l_rcv_rcv_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_l_rcv_rcv_mux_ID_15_Oszi_Source = 21,
	inverters_inv_l_rcv_rcv_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_l_rcv_rcv_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_l_rcv_rcv_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_l_rcv_rcv_mux_ID_78_Pos_Ref_Start = 120,
	inverters_inv_l_rcv_rcv_mux_ID_66_DC_Bus_Voltage = 102,
	inverters_inv_l_rcv_rcv_mux_ID_3A_M_cmd_ramp = 58,
	inverters_inv_l_rcv_rcv_mux_ID_97_LogicOutBlock = 152,
	inverters_inv_l_rcv_rcv_mux_ID_9B_LogicInBlock = 155,
	inverters_inv_l_rcv_rcv_mux_ID_FE_FW_Subv_Revis_Nr = 254,
} inverters_inv_l_rcv_rcv_mux;

typedef enum {
	inverters_inv_l_rcv_def_end_1__Off_ = 0,
	inverters_inv_l_rcv_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_rcv_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_rcv_def_end_1_Ref_Plus = 3,
	inverters_inv_l_rcv_def_end_1_Limit_Plus = 4,
	inverters_inv_l_rcv_def_end_1_Limit_Minus = 5,
	inverters_inv_l_rcv_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_rcv_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_l_rcv_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_l_rcv_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_l_rcv_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_rcv_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_rcv_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_l_rcv_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_rcv_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_rcv_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_rcv_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_rcv_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_rcv_def_end_1_I_limit_dig_ = 18,
	inverters_inv_l_rcv_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_rcv_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_rcv_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_rcv_def_end_1_Handwheel = 22,
	inverters_inv_l_rcv_def_end_1_Brake_Car = 23,
	inverters_inv_l_rcv_def_end_1_Recup_Disabled = 24,
	inverters_inv_l_rcv_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_rcv_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_rcv_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_rcv_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_rcv_def_end_1;

typedef enum {
	inverters_inv_l_rcv_def_din_1__Off_ = 0,
	inverters_inv_l_rcv_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_rcv_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_rcv_def_din_1_Ref_Plus = 3,
	inverters_inv_l_rcv_def_din_1_Limit_Plus = 4,
	inverters_inv_l_rcv_def_din_1_Limit_Minus = 5,
	inverters_inv_l_rcv_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_rcv_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_l_rcv_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_l_rcv_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_l_rcv_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_rcv_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_rcv_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_l_rcv_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_rcv_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_rcv_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_rcv_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_rcv_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_rcv_def_din_1_I_limit_dig_ = 18,
	inverters_inv_l_rcv_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_rcv_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_rcv_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_rcv_def_din_1_Handwheel = 22,
	inverters_inv_l_rcv_def_din_1_Brake_Car = 23,
	inverters_inv_l_rcv_def_din_1_Recup_Disabled = 24,
	inverters_inv_l_rcv_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_rcv_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_rcv_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_rcv_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_rcv_def_din_1;

typedef enum {
	inverters_inv_l_rcv_active190_Low = 0,
	inverters_inv_l_rcv_active190_High = 1,
} inverters_inv_l_rcv_active190;

typedef enum {
	inverters_inv_l_rcv_active192_Low = 0,
	inverters_inv_l_rcv_active192_High = 1,
} inverters_inv_l_rcv_active192;

typedef enum {
	inverters_inv_r_send_send_mux_ID_04_USER_Key = 4,
	inverters_inv_r_send_send_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_r_send_send_mux_ID_07_FU_T_dc = 7,
	inverters_inv_r_send_send_mux_ID_08_FU_V_dc = 8,
	inverters_inv_r_send_send_mux_ID_09_FU_Special = 9,
	inverters_inv_r_send_send_mux_ID_0A_FU_U_min = 10,
	inverters_inv_r_send_send_mux_ID_0B_FU_F_min = 11,
	inverters_inv_r_send_send_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_r_send_send_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_r_send_send_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_r_send_send_mux_ID_0F_FU_Extra = 15,
	inverters_inv_r_send_send_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_r_send_send_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_r_send_send_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_r_send_send_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_r_send_send_mux_ID_15_Oszi_Source = 21,
	inverters_inv_r_send_send_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_r_send_send_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_r_send_send_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_r_send_send_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_r_send_send_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_r_send_send_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_r_send_send_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_r_send_send_mux_ID_21_Id_setdig = 33,
	inverters_inv_r_send_send_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_r_send_send_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_r_send_send_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_r_send_send_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_r_send_send_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_r_send_send_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_r_send_send_mux_ID_31_N_setdig = 49,
	inverters_inv_r_send_send_mux_ID_34_N_Lim = 52,
	inverters_inv_r_send_send_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_r_send_send_mux_ID_36_CommandSource = 54,
	inverters_inv_r_send_send_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_r_send_send_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_r_send_send_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_r_send_send_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_r_send_send_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_r_send_send_mux_ID_3D_Read_Cmd = 61,
	inverters_inv_r_send_send_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_r_send_send_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_r_send_send_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_r_send_send_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_r_send_send_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_r_send_send_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_r_send_send_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_r_send_send_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_r_send_send_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_r_send_send_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_r_send_send_mux_ID_5A_Device_Options = 90,
	inverters_inv_r_send_send_mux_ID_5B_PID_n_Kacc = 91,
	inverters_inv_r_send_send_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_r_send_send_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_r_send_send_mux_ID_62_SerialNumber = 98,
	inverters_inv_r_send_send_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_r_send_send_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_r_send_send_mux_ID_67_Device_Type = 103,
	inverters_inv_r_send_send_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_r_send_send_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_r_send_send_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_r_send_send_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_r_send_send_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_r_send_send_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_r_send_send_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_r_send_send_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_r_send_send_mux_ID_73_CAN_NBT = 115,
	inverters_inv_r_send_send_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_r_send_send_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_r_send_send_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_r_send_send_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_r_send_send_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_r_send_send_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_r_send_send_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_r_send_send_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_r_send_send_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_r_send_send_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_r_send_send_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_r_send_send_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_r_send_send_mux_ID_85_Function_Special = 133,
	inverters_inv_r_send_send_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_r_send_send_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_r_send_send_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_r_send_send_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_r_send_send_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_r_send_send_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_r_send_send_mux_ID_90_M_setdig = 144,
	inverters_inv_r_send_send_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_r_send_send_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_r_send_send_mux_ID_A4_Motor_Options = 164,
	inverters_inv_r_send_send_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_r_send_send_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_r_send_send_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_r_send_send_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_r_send_send_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_r_send_send_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_r_send_send_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_r_send_send_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_r_send_send_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_r_send_send_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_r_send_send_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_r_send_send_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_r_send_send_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_r_send_send_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_r_send_send_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_r_send_send_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_r_send_send_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_r_send_send_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_r_send_send_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_r_send_send_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_r_send_send_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_r_send_send_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_r_send_send_mux_ID_C6_I_device = 198,
	inverters_inv_r_send_send_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_r_send_send_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_r_send_send_mux_ID_C9_CurrentControl_xKp = 201,
	inverters_inv_r_send_send_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_r_send_send_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_r_send_send_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_r_send_send_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_r_send_send_mux_ID_D1_Var_1 = 209,
	inverters_inv_r_send_send_mux_ID_D2_Var_2 = 210,
	inverters_inv_r_send_send_mux_ID_D3_Var_3 = 211,
	inverters_inv_r_send_send_mux_ID_D4_Var_4 = 212,
	inverters_inv_r_send_send_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_r_send_send_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_r_send_send_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_r_send_send_mux_ID_EE_V_Shunt = 238,
	inverters_inv_r_send_send_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_r_send_send_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_r_send_send_mux_ID_F8_Axis_Label = 248,
} inverters_inv_r_send_send_mux;

typedef enum {
	inverters_inv_r_send_read_id_05h_Motor_F_nom = 5,
	inverters_inv_r_send_read_id_06h_Motor_V_nom = 6,
	inverters_inv_r_send_read_id_07h_FU_T_dc = 7,
	inverters_inv_r_send_read_id_08h_FU_V_dc = 8,
	inverters_inv_r_send_read_id_09h_FU_Special = 9,
	inverters_inv_r_send_read_id_0Ah_FU_U_min = 10,
	inverters_inv_r_send_read_id_0Bh_FU_F_min = 11,
	inverters_inv_r_send_read_id_0Ch_FU_V_corner = 12,
	inverters_inv_r_send_read_id_0Dh_FU_F_corner = 13,
	inverters_inv_r_send_read_id_0Eh_Motor_Cos_Phi = 14,
	inverters_inv_r_send_read_id_0Fh_FU_Extra = 15,
	inverters_inv_r_send_read_id_10h_Oszi_Channel = 16,
	inverters_inv_r_send_read_id_11h_Control_Status = 17,
	inverters_inv_r_send_read_id_12h_Oszi_Triger_Level = 18,
	inverters_inv_r_send_read_id_13h_Oszi_Triger_Edge = 19,
	inverters_inv_r_send_read_id_14h_Oszi_Triger_Source = 20,
	inverters_inv_r_send_read_id_15h_Oszi_Source = 21,
	inverters_inv_r_send_read_id_16h_Oszi_Skip = 22,
	inverters_inv_r_send_read_id_17h_Oszi_Read_cmd = 23,
	inverters_inv_r_send_read_id_18h_Oszi_Run_cmd = 24,
	inverters_inv_r_send_read_id_19h_PWM_Enum = 25,
	inverters_inv_r_send_read_id_1Ah_Calib_Ref_Value = 26,
	inverters_inv_r_send_read_id_1Bh_FW_Nr = 27,
	inverters_inv_r_send_read_id_1Ch_I_Kp = 28,
	inverters_inv_r_send_read_id_1Dh_I_Ti = 29,
	inverters_inv_r_send_read_id_1Eh_Cutoffdig = 30,
	inverters_inv_r_send_read_id_1Fh_I3_Offset = 31,
	inverters_inv_r_send_read_id_20h_I_Actual = 32,
	inverters_inv_r_send_read_id_21h_Id_setdig = 33,
	inverters_inv_r_send_read_id_22h_I_cmd_ramp = 34,
	inverters_inv_r_send_read_id_23h_Id_Ref = 35,
	inverters_inv_r_send_read_id_24h_I_Max_Inuse = 36,
	inverters_inv_r_send_read_id_25h_I_Delta_Ramp = 37,
	inverters_inv_r_send_read_id_26h_I_cmd = 38,
	inverters_inv_r_send_read_id_27h_Iq_Actual = 39,
	inverters_inv_r_send_read_id_28h_Id_Actual = 40,
	inverters_inv_r_send_read_id_29h_Vq_Output = 41,
	inverters_inv_r_send_read_id_2Ah_Vd_Output = 42,
	inverters_inv_r_send_read_id_2Bh_I_TiM = 43,
	inverters_inv_r_send_read_id_2Ch_n_Kp = 44,
	inverters_inv_r_send_read_id_2Dh_n_Ti = 45,
	inverters_inv_r_send_read_id_2Eh_n_Td = 46,
	inverters_inv_r_send_read_id_2Fh_Ain_in_1_OffsScale = 47,
	inverters_inv_r_send_read_id_30h_N_Actual = 48,
	inverters_inv_r_send_read_id_31h_N_setdig = 49,
	inverters_inv_r_send_read_id_32h_N_cmd_ramp = 50,
	inverters_inv_r_send_read_id_33h_N_Error = 51,
	inverters_inv_r_send_read_id_34h_N_Lim = 52,
	inverters_inv_r_send_read_id_35h_Acc_Ramps = 53,
	inverters_inv_r_send_read_id_36h_CommandSource = 54,
	inverters_inv_r_send_read_id_37h_DZR_Sequencer_Value = 55,
	inverters_inv_r_send_read_id_38h_Iq_Error = 56,
	inverters_inv_r_send_read_id_39h_Id_Error = 57,
	inverters_inv_r_send_read_id_3Bh_n_TiM = 59,
	inverters_inv_r_send_read_id_3Ch_I_Derating_N_perc = 60,
	inverters_inv_r_send_read_id_3Eh_N_Lim_minus = 62,
	inverters_inv_r_send_read_id_3Fh_N_Lim_plus = 63,
	inverters_inv_r_send_read_id_40h_Status_Map = 64,
	inverters_inv_r_send_read_id_41h_Incr_Delta = 65,
	inverters_inv_r_send_read_id_42h_MotorPosition_Mech = 66,
	inverters_inv_r_send_read_id_43h_MotorPosition_Elec = 67,
	inverters_inv_r_send_read_id_44h_FeedBack_Offset_Angle = 68,
	inverters_inv_r_send_read_id_45h_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_r_send_read_id_46h_I_lim_dig_perc = 70,
	inverters_inv_r_send_read_id_48h_I_Limit_Inuse = 72,
	inverters_inv_r_send_read_id_49h_T_Motor = 73,
	inverters_inv_r_send_read_id_4Ah_T_Igbt = 74,
	inverters_inv_r_send_read_id_4Bh_T_Air_Inside = 75,
	inverters_inv_r_send_read_id_4Ch_I_Derating_TE = 76,
	inverters_inv_r_send_read_id_4Dh_Motor_I_max_eff = 77,
	inverters_inv_r_send_read_id_4Eh_Motor_I_nom_eff = 78,
	inverters_inv_r_send_read_id_4Fh_Motor_Pole = 79,
	inverters_inv_r_send_read_id_50h_Ain_in_1_Cutoff = 80,
	inverters_inv_r_send_read_id_51h_Kern_Mode_State = 81,
	inverters_inv_r_send_read_id_52h_Status_Mask = 82,
	inverters_inv_r_send_read_id_53h_Ain_in_2_Cutoff = 83,
	inverters_inv_r_send_read_id_54h_I1_Actual = 84,
	inverters_inv_r_send_read_id_55h_I2_Actual = 85,
	inverters_inv_r_send_read_id_56h_I3_Actual = 86,
	inverters_inv_r_send_read_id_57h_I_Limit_Inuse_ramp = 87,
	inverters_inv_r_send_read_id_58h_I_Derating_TD = 88,
	inverters_inv_r_send_read_id_59h_Motor_Nom = 89,
	inverters_inv_r_send_read_id_5Ah_Device_Options = 90,
	inverters_inv_r_send_read_id_5Bh_SpeedControl_Kacc = 91,
	inverters_inv_r_send_read_id_5Ch_Rotor_Signals = 92,
	inverters_inv_r_send_read_id_5Dh_N_cmd = 93,
	inverters_inv_r_send_read_id_5Eh_Speed_Filter = 94,
	inverters_inv_r_send_read_id_5Fh_I_Actual_Filt = 95,
	inverters_inv_r_send_read_id_60h_Ain_in_X_Filter = 96,
	inverters_inv_r_send_read_id_61h_Ixt_Monitor = 97,
	inverters_inv_r_send_read_id_62h_SerialNumber = 98,
	inverters_inv_r_send_read_id_63h_FPGA_Status = 99,
	inverters_inv_r_send_read_id_64h_Device_Mains = 100,
	inverters_inv_r_send_read_id_65h_Regen_P_R = 101,
	inverters_inv_r_send_read_id_67h_Device_Type = 103,
	inverters_inv_r_send_read_id_68h_CAN_ID_Rx = 104,
	inverters_inv_r_send_read_id_69h_CAN_ID_Tx = 105,
	inverters_inv_r_send_read_id_6Ah_Pos_Kp = 106,
	inverters_inv_r_send_read_id_6Bh_Pos_Ti = 107,
	inverters_inv_r_send_read_id_6Ch_Pos_Td = 108,
	inverters_inv_r_send_read_id_6Dh_Pos_Actual = 109,
	inverters_inv_r_send_read_id_6Eh_Pos_Dest = 110,
	inverters_inv_r_send_read_id_6Fh_Pos_Actual_2 = 111,
	inverters_inv_r_send_read_id_70h_Pos_Err = 112,
	inverters_inv_r_send_read_id_71h_Pos_TiM = 113,
	inverters_inv_r_send_read_id_72h_Pos_OffsetRef = 114,
	inverters_inv_r_send_read_id_73h_CAN_NBT = 115,
	inverters_inv_r_send_read_id_74h_Pos_Zero_Capture = 116,
	inverters_inv_r_send_read_id_75h_Pos_Ref_Reso_Edge = 117,
	inverters_inv_r_send_read_id_76h_Pos_Speed_1 = 118,
	inverters_inv_r_send_read_id_77h_Pos_Speed_2 = 119,
	inverters_inv_r_send_read_id_78h_Pos_Ref_Start = 120,
	inverters_inv_r_send_read_id_79h_Pos_Tol_Win = 121,
	inverters_inv_r_send_read_id_7Ah_Pos_Preset = 122,
	inverters_inv_r_send_read_id_7Bh_Pos_Zero_Offset = 123,
	inverters_inv_r_send_read_id_7Ch_Pos_ND_Scale = 124,
	inverters_inv_r_send_read_id_7Dh_Pos_ND_Offset = 125,
	inverters_inv_r_send_read_id_7Eh_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_r_send_read_id_7Fh_Pos_Offset_Slack = 127,
	inverters_inv_r_send_read_id_80h_Pos_Diff_Slack = 128,
	inverters_inv_r_send_read_id_83h_Func_Para_Read = 131,
	inverters_inv_r_send_read_id_84h_Func_Para_Write = 132,
	inverters_inv_r_send_read_id_85h_Func_Special = 133,
	inverters_inv_r_send_read_id_88h_CAN_ID_2_Rx = 136,
	inverters_inv_r_send_read_id_89h_CAN_ID_2_Tx = 137,
	inverters_inv_r_send_read_id_8Ah_Vout = 138,
	inverters_inv_r_send_read_id_8Bh_V_Ref = 139,
	inverters_inv_r_send_read_id_8Ch_V_Kp = 140,
	inverters_inv_r_send_read_id_8Dh_V_Ti = 141,
	inverters_inv_r_send_read_id_8Eh_Clear_Error_List = 142,
	inverters_inv_r_send_read_id_8Fh_ErrorWarning_Map = 143,
	inverters_inv_r_send_read_id_90h_M_setdig = 144,
	inverters_inv_r_send_read_id_91h_Pos_cmd_int = 145,
	inverters_inv_r_send_read_id_92h_CAN_Error_BusOff_cntr = 146,
	inverters_inv_r_send_read_id_93h_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_r_send_read_id_94h_CAN_Error_RxMsgLost_cntr = 148,
	inverters_inv_r_send_read_id_95h_CAN_Error_NoAck_cntr = 149,
	inverters_inv_r_send_read_id_96h_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_r_send_read_id_97h_CAN_Error_Bit_cntr = 151,
	inverters_inv_r_send_read_id_99h_Info_Timer_Diff = 153,
	inverters_inv_r_send_read_id_9Ah_Temp_DEBUG = 154,
	inverters_inv_r_send_read_id_A0h_Mout = 160,
	inverters_inv_r_send_read_id_A1h_Ballast_cntr = 161,
	inverters_inv_r_send_read_id_A2h_I_Derating_TM = 162,
	inverters_inv_r_send_read_id_A3h_M_Temp = 163,
	inverters_inv_r_send_read_id_A4h_Motor_Options = 164,
	inverters_inv_r_send_read_id_A5h_DC_Bus_MinMax_Lim = 165,
	inverters_inv_r_send_read_id_A6h_FB_IncPerRot = 166,
	inverters_inv_r_send_read_id_A7h_FB_Pole = 167,
	inverters_inv_r_send_read_id_A8h_N_Actual_Filt = 168,
	inverters_inv_r_send_read_id_A9h_I3_ADC = 169,
	inverters_inv_r_send_read_id_AAh_I2_ADC = 170,
	inverters_inv_r_send_read_id_ABh_Logic_Freq = 171,
	inverters_inv_r_send_read_id_ACh_PWM_1_56 = 172,
	inverters_inv_r_send_read_id_ADh_PWM_2_34 = 173,
	inverters_inv_r_send_read_id_AEh_PWM_3_12 = 174,
	inverters_inv_r_send_read_id_AFh_Timer_Delta = 175,
	inverters_inv_r_send_read_id_B1h_Motor_Lsq = 177,
	inverters_inv_r_send_read_id_B2h_Id_Nom = 178,
	inverters_inv_r_send_read_id_B3h_Motor_Lm = 179,
	inverters_inv_r_send_read_id_B4h_Motor_Rr = 180,
	inverters_inv_r_send_read_id_B5h_Id_Min = 181,
	inverters_inv_r_send_read_id_B6h_Motor_Tr = 182,
	inverters_inv_r_send_read_id_B8h_Ptr_1_DEBUG = 184,
	inverters_inv_r_send_read_id_BAh_Ptr_2_DEBUG = 186,
	inverters_inv_r_send_read_id_BBh_Motor_Lsd = 187,
	inverters_inv_r_send_read_id_BCh_Motor_Rs = 188,
	inverters_inv_r_send_read_id_BDh_Motor_Ts = 189,
	inverters_inv_r_send_read_id_BEh_def_END_1 = 190,
	inverters_inv_r_send_read_id_BFh_def_END_2 = 191,
	inverters_inv_r_send_read_id_C0h_def_DIN_1 = 192,
	inverters_inv_r_send_read_id_C1h_def_DIN_2 = 193,
	inverters_inv_r_send_read_id_C2h_def_OUT_1 = 194,
	inverters_inv_r_send_read_id_C3h_def_OUT_2 = 195,
	inverters_inv_r_send_read_id_C4h_I_max_pk = 196,
	inverters_inv_r_send_read_id_C5h_I_con_eff = 197,
	inverters_inv_r_send_read_id_C6h_I_device = 198,
	inverters_inv_r_send_read_id_C7h_RLim_MRcp_Ramp = 199,
	inverters_inv_r_send_read_id_C8h_Nmax100perc = 200,
	inverters_inv_r_send_read_id_C9h_I_xKp = 201,
	inverters_inv_r_send_read_id_CAh_Bat_Opr_Limits = 202,
	inverters_inv_r_send_read_id_CBh_I_Kf = 203,
	inverters_inv_r_send_read_id_CCh_Car_Mode_Status = 204,
	inverters_inv_r_send_read_id_CDh_Car_Mode_Config = 205,
	inverters_inv_r_send_read_id_CEh_N_Rpm_MaxInt = 206,
	inverters_inv_r_send_read_id_D0h_CAN_Timeout = 208,
	inverters_inv_r_send_read_id_D1h_Var_1 = 209,
	inverters_inv_r_send_read_id_D2h_Var_2 = 210,
	inverters_inv_r_send_read_id_D3h_Var_3 = 211,
	inverters_inv_r_send_read_id_D4h_Var_4 = 212,
	inverters_inv_r_send_read_id_D5h_Ain_in_1 = 213,
	inverters_inv_r_send_read_id_D6h_Ain_in_2 = 214,
	inverters_inv_r_send_read_id_D7h_Ain_in_2_OffsScale = 215,
	inverters_inv_r_send_read_id_D8h_LogicReadBitsIN_OUT = 216,
	inverters_inv_r_send_read_id_D9h_I_200perc = 217,
	inverters_inv_r_send_read_id_DAh_def_OUT_3 = 218,
	inverters_inv_r_send_read_id_DBh_def_OUT_4 = 219,
	inverters_inv_r_send_read_id_DCh_DAC_Source_ID = 220,
	inverters_inv_r_send_read_id_DEh_DS_DOUT_3 = 222,
	inverters_inv_r_send_read_id_DFh_DS_DOUT_4 = 223,
	inverters_inv_r_send_read_id_E0h_DS_DOUT_1 = 224,
	inverters_inv_r_send_read_id_E1h_DS_DOUT_2 = 225,
	inverters_inv_r_send_read_id_E2h_DS_Rdy_BTB = 226,
	inverters_inv_r_send_read_id_E3h_DS_GO = 227,
	inverters_inv_r_send_read_id_E4h_DS_END_1 = 228,
	inverters_inv_r_send_read_id_E5h_DS_END_2 = 229,
	inverters_inv_r_send_read_id_E6h_DS_DIN_1 = 230,
	inverters_inv_r_send_read_id_E7h_DS_DIN_2 = 231,
	inverters_inv_r_send_read_id_E8h_DS_RUN = 232,
	inverters_inv_r_send_read_id_E9h_DS_I_Fault = 233,
	inverters_inv_r_send_read_id_EBh_Vdc_Bus = 235,
	inverters_inv_r_send_read_id_ECh_DS_FB_LossOfSignal = 236,
	inverters_inv_r_send_read_id_EDh_Dec_Ramps = 237,
	inverters_inv_r_send_read_id_EEh_V_Shunt = 238,
	inverters_inv_r_send_read_id_EFh_DS_NoHWFault = 239,
	inverters_inv_r_send_read_id_F0h_T_peak = 240,
	inverters_inv_r_send_read_id_F1h_Brake_Delay = 241,
	inverters_inv_r_send_read_id_F2h_DS_Brake = 242,
	inverters_inv_r_send_read_id_F3h_DS_Icns = 243,
	inverters_inv_r_send_read_id_F4h_DS_PosTolerance = 244,
	inverters_inv_r_send_read_id_F5h_DS_LessN0 = 245,
	inverters_inv_r_send_read_id_F6h_Inverter_Power = 246,
	inverters_inv_r_send_read_id_F7h_Inverter_Work = 247,
	inverters_inv_r_send_read_id_F8h_Axis = 248,
	inverters_inv_r_send_read_id_FBh_Ain_in_1_Calc = 251,
	inverters_inv_r_send_read_id_FCh_Ain_in_2_Calc = 252,
	inverters_inv_r_send_read_id_66h_DC_Bus_Voltage = 102,
	inverters_inv_r_send_read_id_3Ah_M_cmd_ramp = 58,
	inverters_inv_r_send_read_id_FEh_Subv_SVNRev_Nr = 254,
} inverters_inv_r_send_read_id;

typedef enum {
	inverters_inv_r_send_def_din_1__Off_ = 0,
	inverters_inv_r_send_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_send_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_send_def_din_1_Ref_Plus = 3,
	inverters_inv_r_send_def_din_1_Limit_Plus = 4,
	inverters_inv_r_send_def_din_1_Limit_Minus = 5,
	inverters_inv_r_send_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_send_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_r_send_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_r_send_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_r_send_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_send_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_send_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_r_send_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_send_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_send_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_send_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_send_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_send_def_din_1_I_limit_dig_ = 18,
	inverters_inv_r_send_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_send_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_send_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_send_def_din_1_Handwheel = 22,
	inverters_inv_r_send_def_din_1_Brake_Car = 23,
	inverters_inv_r_send_def_din_1_Recup_Disabled = 24,
	inverters_inv_r_send_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_send_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_send_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_send_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_send_def_din_1;

typedef enum {
	inverters_inv_r_send_def_end_1__Off_ = 0,
	inverters_inv_r_send_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_send_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_send_def_end_1_Ref_Plus = 3,
	inverters_inv_r_send_def_end_1_Limit_Plus = 4,
	inverters_inv_r_send_def_end_1_Limit_Minus = 5,
	inverters_inv_r_send_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_send_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_r_send_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_r_send_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_r_send_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_send_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_send_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_r_send_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_send_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_send_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_send_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_send_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_send_def_end_1_I_limit_dig_ = 18,
	inverters_inv_r_send_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_send_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_send_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_send_def_end_1_Handwheel = 22,
	inverters_inv_r_send_def_end_1_Brake_Car = 23,
	inverters_inv_r_send_def_end_1_Recup_Disabled = 24,
	inverters_inv_r_send_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_send_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_send_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_send_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_send_def_end_1;

typedef enum {
	inverters_inv_r_send_ret_interval_Stop = 255,
	inverters_inv_r_send_ret_interval_Single = 0,
} inverters_inv_r_send_ret_interval;

typedef enum {
	inverters_inv_r_send_active192_Low = 0,
	inverters_inv_r_send_active192_High = 1,
} inverters_inv_r_send_active192;

typedef enum {
	inverters_inv_r_send_active190_Low = 0,
	inverters_inv_r_send_active190_High = 1,
} inverters_inv_r_send_active190;

typedef enum {
	inverters_inv_r_rcv_rcv_mux_ID_30_N_Actual = 48,
	inverters_inv_r_rcv_rcv_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_r_rcv_rcv_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_r_rcv_rcv_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_r_rcv_rcv_mux_ID_A8_N_Actual_Filt = 168,
	inverters_inv_r_rcv_rcv_mux_ID_1B_FW_Nr = 27,
	inverters_inv_r_rcv_rcv_mux_ID_67_Device_Type = 103,
	inverters_inv_r_rcv_rcv_mux_ID_62_SerialNumber = 98,
	inverters_inv_r_rcv_rcv_mux_ID_F8_Axis_Label = 248,
	inverters_inv_r_rcv_rcv_mux_ID_C6_I_device = 198,
	inverters_inv_r_rcv_rcv_mux_ID_EE_V_Shunt = 238,
	inverters_inv_r_rcv_rcv_mux_ID_D9_I_200perc = 217,
	inverters_inv_r_rcv_rcv_mux_ID_5A_Device_Options = 90,
	inverters_inv_r_rcv_rcv_mux_ID_40_Status_Map = 64,
	inverters_inv_r_rcv_rcv_mux_ID_8F_ErrorWarning_Map = 143,
	inverters_inv_r_rcv_rcv_mux_ID_D8_LogicReadBitsIN_OUT = 216,
	inverters_inv_r_rcv_rcv_mux_ID_D5_Ain_in_1 = 213,
	inverters_inv_r_rcv_rcv_mux_ID_D6_Ain_in_2 = 214,
	inverters_inv_r_rcv_rcv_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_r_rcv_rcv_mux_ID_31_N_setdig = 49,
	inverters_inv_r_rcv_rcv_mux_ID_5D_N_cmd = 93,
	inverters_inv_r_rcv_rcv_mux_ID_32_N_cmd_ramp = 50,
	inverters_inv_r_rcv_rcv_mux_ID_34_N_Lim = 52,
	inverters_inv_r_rcv_rcv_mux_ID_33_N_Error = 51,
	inverters_inv_r_rcv_rcv_mux_ID_90_M_setdig = 144,
	inverters_inv_r_rcv_rcv_mux_ID_21_Id_setdig = 33,
	inverters_inv_r_rcv_rcv_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_r_rcv_rcv_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_r_rcv_rcv_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_r_rcv_rcv_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_r_rcv_rcv_mux_ID_48_I_Limit_Inuse = 72,
	inverters_inv_r_rcv_rcv_mux_ID_26_I_cmd = 38,
	inverters_inv_r_rcv_rcv_mux_ID_22_I_cmd_ramp = 34,
	inverters_inv_r_rcv_rcv_mux_ID_20_I_Actual = 32,
	inverters_inv_r_rcv_rcv_mux_ID_5F_I_Actual_Filt = 95,
	inverters_inv_r_rcv_rcv_mux_ID_27_Iq_Actual = 39,
	inverters_inv_r_rcv_rcv_mux_ID_28_Id_Actual = 40,
	inverters_inv_r_rcv_rcv_mux_ID_38_Iq_Error = 56,
	inverters_inv_r_rcv_rcv_mux_ID_39_Id_Error = 57,
	inverters_inv_r_rcv_rcv_mux_ID_54_I1_Actual = 84,
	inverters_inv_r_rcv_rcv_mux_ID_55_I2_Actual = 85,
	inverters_inv_r_rcv_rcv_mux_ID_56_I3_Actual = 86,
	inverters_inv_r_rcv_rcv_mux_ID_A9_I3_ADC_Value = 169,
	inverters_inv_r_rcv_rcv_mux_ID_AA_I2_ADC_Value = 170,
	inverters_inv_r_rcv_rcv_mux_ID_29_Vq_Output = 41,
	inverters_inv_r_rcv_rcv_mux_ID_2A_Vd_Output = 42,
	inverters_inv_r_rcv_rcv_mux_ID_8A_V_Output = 138,
	inverters_inv_r_rcv_rcv_mux_ID_49_T_Motor = 73,
	inverters_inv_r_rcv_rcv_mux_ID_4A_T_Igbt = 74,
	inverters_inv_r_rcv_rcv_mux_ID_4B_T_Air_Inside = 75,
	inverters_inv_r_rcv_rcv_mux_ID_EB_DC_Bus_Voltage_Filt = 235,
	inverters_inv_r_rcv_rcv_mux_ID_E4_DigInput_END_1 = 228,
	inverters_inv_r_rcv_rcv_mux_ID_E6_DigInput_DIN_1 = 230,
	inverters_inv_r_rcv_rcv_mux_ID_E5_DigInput_END_2 = 229,
	inverters_inv_r_rcv_rcv_mux_ID_E7_DigInput_DIN_2 = 231,
	inverters_inv_r_rcv_rcv_mux_ID_E8_DigInput_RUN = 232,
	inverters_inv_r_rcv_rcv_mux_ID_E0_DigOutput_DOUT_1 = 224,
	inverters_inv_r_rcv_rcv_mux_ID_E1_DigOutput_DOUT_2 = 225,
	inverters_inv_r_rcv_rcv_mux_ID_DE_DigOutput_DOUT_3 = 222,
	inverters_inv_r_rcv_rcv_mux_ID_E2_DigOutput_Rdy_BTB = 226,
	inverters_inv_r_rcv_rcv_mux_ID_E9_Error_I_Fault = 233,
	inverters_inv_r_rcv_rcv_mux_ID_DF_DigOutput_DOUT_4 = 223,
	inverters_inv_r_rcv_rcv_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_r_rcv_rcv_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_r_rcv_rcv_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_r_rcv_rcv_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_r_rcv_rcv_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_r_rcv_rcv_mux_ID_36_CommandSource = 54,
	inverters_inv_r_rcv_rcv_mux_ID_23_Id_Ref = 35,
	inverters_inv_r_rcv_rcv_mux_ID_A0_M_outdig = 160,
	inverters_inv_r_rcv_rcv_mux_ID_B8_Ptr_1_DEBUG = 184,
	inverters_inv_r_rcv_rcv_mux_ID_BA_Ptr_2_DEBUG = 186,
	inverters_inv_r_rcv_rcv_mux_ID_9A_Temp_DEBUG = 154,
	inverters_inv_r_rcv_rcv_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_r_rcv_rcv_mux_ID_06_Motor_V_nom = 6,
	inverters_inv_r_rcv_rcv_mux_ID_07_FU_T_dc = 7,
	inverters_inv_r_rcv_rcv_mux_ID_08_FU_V_dc = 8,
	inverters_inv_r_rcv_rcv_mux_ID_0A_FU_U_min = 10,
	inverters_inv_r_rcv_rcv_mux_ID_0B_FU_F_min = 11,
	inverters_inv_r_rcv_rcv_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_r_rcv_rcv_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_r_rcv_rcv_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_r_rcv_rcv_mux_ID_19_PWM_Enum = 25,
	inverters_inv_r_rcv_rcv_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_r_rcv_rcv_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_r_rcv_rcv_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_r_rcv_rcv_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_r_rcv_rcv_mux_ID_1F_I3_Offset = 31,
	inverters_inv_r_rcv_rcv_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_r_rcv_rcv_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_r_rcv_rcv_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_r_rcv_rcv_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_r_rcv_rcv_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_r_rcv_rcv_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_r_rcv_rcv_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_r_rcv_rcv_mux_ID_37_DZR_Sequencer_Value = 55,
	inverters_inv_r_rcv_rcv_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_r_rcv_rcv_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_r_rcv_rcv_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_r_rcv_rcv_mux_ID_41_Incr_Delta = 65,
	inverters_inv_r_rcv_rcv_mux_ID_42_MotorPosition_Mech = 66,
	inverters_inv_r_rcv_rcv_mux_ID_43_MotorPosition_Elec = 67,
	inverters_inv_r_rcv_rcv_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_r_rcv_rcv_mux_ID_45_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_r_rcv_rcv_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_r_rcv_rcv_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_r_rcv_rcv_mux_ID_11_Control_Status = 17,
	inverters_inv_r_rcv_rcv_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_r_rcv_rcv_mux_ID_52_Status_Mask = 82,
	inverters_inv_r_rcv_rcv_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_r_rcv_rcv_mux_ID_57_I_Limit_Inuse_ramp = 87,
	inverters_inv_r_rcv_rcv_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_r_rcv_rcv_mux_ID_5B_SpeedControl_Kacc = 91,
	inverters_inv_r_rcv_rcv_mux_ID_5C_Rotor_Signals = 92,
	inverters_inv_r_rcv_rcv_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_r_rcv_rcv_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_r_rcv_rcv_mux_ID_61_Ixt_Monitor = 97,
	inverters_inv_r_rcv_rcv_mux_ID_63_ECODE_Status = 99,
	inverters_inv_r_rcv_rcv_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_r_rcv_rcv_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_r_rcv_rcv_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_r_rcv_rcv_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_r_rcv_rcv_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_r_rcv_rcv_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_r_rcv_rcv_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_r_rcv_rcv_mux_ID_6D_Pos_Actual = 109,
	inverters_inv_r_rcv_rcv_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_r_rcv_rcv_mux_ID_6F_Pos_Actual_2 = 111,
	inverters_inv_r_rcv_rcv_mux_ID_70_Pos_Error = 112,
	inverters_inv_r_rcv_rcv_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_r_rcv_rcv_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_r_rcv_rcv_mux_ID_73_CAN_NBT = 115,
	inverters_inv_r_rcv_rcv_mux_ID_74_Pos_Zero_Capture = 116,
	inverters_inv_r_rcv_rcv_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_r_rcv_rcv_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_r_rcv_rcv_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_r_rcv_rcv_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_r_rcv_rcv_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_r_rcv_rcv_mux_ID_7B_Pos_Zero_Offset = 123,
	inverters_inv_r_rcv_rcv_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_r_rcv_rcv_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_r_rcv_rcv_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_r_rcv_rcv_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_r_rcv_rcv_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_r_rcv_rcv_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_r_rcv_rcv_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_r_rcv_rcv_mux_ID_85_Function_Special = 133,
	inverters_inv_r_rcv_rcv_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_r_rcv_rcv_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_r_rcv_rcv_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_r_rcv_rcv_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_r_rcv_rcv_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_r_rcv_rcv_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_r_rcv_rcv_mux_ID_91_Pos_cmd_int = 145,
	inverters_inv_r_rcv_rcv_mux_ID_92_CAN_Error_BusOff_cntr = 146,
	inverters_inv_r_rcv_rcv_mux_ID_93_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_r_rcv_rcv_mux_ID_94_ECODE_1stError = 148,
	inverters_inv_r_rcv_rcv_mux_ID_95_CAN_Error_NoAck_cntr = 149,
	inverters_inv_r_rcv_rcv_mux_ID_96_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_r_rcv_rcv_mux_ID_97_CAN_Error_Bit_cntr = 151,
	inverters_inv_r_rcv_rcv_mux_ID_99_Info_Timer_Diff = 153,
	inverters_inv_r_rcv_rcv_mux_ID_A1_Ballast_cntr = 161,
	inverters_inv_r_rcv_rcv_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_r_rcv_rcv_mux_ID_A4_Motor_Options = 164,
	inverters_inv_r_rcv_rcv_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_r_rcv_rcv_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_r_rcv_rcv_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_r_rcv_rcv_mux_ID_AB_Logic_Frequency = 171,
	inverters_inv_r_rcv_rcv_mux_ID_AC_PWM_1_56 = 172,
	inverters_inv_r_rcv_rcv_mux_ID_AD_PWM_2_34 = 173,
	inverters_inv_r_rcv_rcv_mux_ID_AE_PWM_3_12 = 174,
	inverters_inv_r_rcv_rcv_mux_ID_AF_Timer_Delta = 175,
	inverters_inv_r_rcv_rcv_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_r_rcv_rcv_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_r_rcv_rcv_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_r_rcv_rcv_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_r_rcv_rcv_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_r_rcv_rcv_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_r_rcv_rcv_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_r_rcv_rcv_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_r_rcv_rcv_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_r_rcv_rcv_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_r_rcv_rcv_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_r_rcv_rcv_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_r_rcv_rcv_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_r_rcv_rcv_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_r_rcv_rcv_mux_ID_24_I_Max_Inuse = 36,
	inverters_inv_r_rcv_rcv_mux_ID_E3_DigSignal_GO = 227,
	inverters_inv_r_rcv_rcv_mux_ID_F2_DigSignal_Brake = 242,
	inverters_inv_r_rcv_rcv_mux_ID_F3_DigSignal_Icns = 243,
	inverters_inv_r_rcv_rcv_mux_ID_F5_DigSignal_LessN0 = 245,
	inverters_inv_r_rcv_rcv_mux_ID_F4_DigSignal_Pos_Tolerance = 244,
	inverters_inv_r_rcv_rcv_mux_ID_FB_Ain_in_1_Calc = 251,
	inverters_inv_r_rcv_rcv_mux_ID_FC_Ain_in_2_Calc = 252,
	inverters_inv_r_rcv_rcv_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_r_rcv_rcv_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_r_rcv_rcv_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_r_rcv_rcv_mux_ID_C9_PID_I_xKp = 201,
	inverters_inv_r_rcv_rcv_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_r_rcv_rcv_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_r_rcv_rcv_mux_ID_CC_Car_Mode_Status = 204,
	inverters_inv_r_rcv_rcv_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_r_rcv_rcv_mux_ID_CE_N_Rpm_MaxInt = 206,
	inverters_inv_r_rcv_rcv_mux_ID_D1_Var_1 = 209,
	inverters_inv_r_rcv_rcv_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_r_rcv_rcv_mux_ID_D2_Var_2 = 210,
	inverters_inv_r_rcv_rcv_mux_ID_D3_Var_3 = 211,
	inverters_inv_r_rcv_rcv_mux_ID_D4_Var_4 = 212,
	inverters_inv_r_rcv_rcv_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_r_rcv_rcv_mux_ID_EC_DigSignal_FB_LossOfSig = 236,
	inverters_inv_r_rcv_rcv_mux_ID_EF_DigSignal_NoHWFault = 239,
	inverters_inv_r_rcv_rcv_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_r_rcv_rcv_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_r_rcv_rcv_mux_ID_F6_Inverter_Output_Power = 246,
	inverters_inv_r_rcv_rcv_mux_ID_F7_Inverter_Output_Work = 247,
	inverters_inv_r_rcv_rcv_mux_ID_0F_FU_Extra = 9,
	inverters_inv_r_rcv_rcv_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_r_rcv_rcv_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_r_rcv_rcv_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_r_rcv_rcv_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_r_rcv_rcv_mux_ID_15_Oszi_Source = 21,
	inverters_inv_r_rcv_rcv_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_r_rcv_rcv_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_r_rcv_rcv_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_r_rcv_rcv_mux_ID_78_Pos_Ref_Start = 120,
	inverters_inv_r_rcv_rcv_mux_ID_66_DC_Bus_Voltage = 102,
	inverters_inv_r_rcv_rcv_mux_ID_3A_M_cmd_ramp = 58,
	inverters_inv_r_rcv_rcv_mux_ID_97_LogicOutBlock = 152,
	inverters_inv_r_rcv_rcv_mux_ID_9B_LogicInBlock = 155,
	inverters_inv_r_rcv_rcv_mux_ID_FE_FW_Subv_Revis_Nr = 254,
} inverters_inv_r_rcv_rcv_mux;

typedef enum {
	inverters_inv_r_rcv_def_end_1__Off_ = 0,
	inverters_inv_r_rcv_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_rcv_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_rcv_def_end_1_Ref_Plus = 3,
	inverters_inv_r_rcv_def_end_1_Limit_Plus = 4,
	inverters_inv_r_rcv_def_end_1_Limit_Minus = 5,
	inverters_inv_r_rcv_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_rcv_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_r_rcv_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_r_rcv_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_r_rcv_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_rcv_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_rcv_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_r_rcv_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_rcv_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_rcv_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_rcv_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_rcv_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_rcv_def_end_1_I_limit_dig_ = 18,
	inverters_inv_r_rcv_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_rcv_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_rcv_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_rcv_def_end_1_Handwheel = 22,
	inverters_inv_r_rcv_def_end_1_Brake_Car = 23,
	inverters_inv_r_rcv_def_end_1_Recup_Disabled = 24,
	inverters_inv_r_rcv_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_rcv_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_rcv_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_rcv_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_rcv_def_end_1;

typedef enum {
	inverters_inv_r_rcv_def_din_1__Off_ = 0,
	inverters_inv_r_rcv_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_rcv_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_rcv_def_din_1_Ref_Plus = 3,
	inverters_inv_r_rcv_def_din_1_Limit_Plus = 4,
	inverters_inv_r_rcv_def_din_1_Limit_Minus = 5,
	inverters_inv_r_rcv_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_rcv_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_r_rcv_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_r_rcv_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_r_rcv_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_rcv_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_rcv_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_r_rcv_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_rcv_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_rcv_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_rcv_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_rcv_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_rcv_def_din_1_I_limit_dig_ = 18,
	inverters_inv_r_rcv_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_rcv_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_rcv_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_rcv_def_din_1_Handwheel = 22,
	inverters_inv_r_rcv_def_din_1_Brake_Car = 23,
	inverters_inv_r_rcv_def_din_1_Recup_Disabled = 24,
	inverters_inv_r_rcv_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_rcv_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_rcv_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_rcv_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_rcv_def_din_1;

typedef enum {
	inverters_inv_r_rcv_active190_Low = 0,
	inverters_inv_r_rcv_active190_High = 1,
} inverters_inv_r_rcv_active190;

typedef enum {
	inverters_inv_r_rcv_active192_Low = 0,
	inverters_inv_r_rcv_active192_High = 1,
} inverters_inv_r_rcv_active192;

/**
 * Signals in message INV_L_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_send_mux send_mux;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_read_id read_id;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32767.99609375046566123179659..32766.99609386967493657172482 (-32768..32767 -)
     * Scale: 1.0000001192092896
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_end_1 def_end_1;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active190 active190;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_send_t;

/**
 * Signals in message INV_L_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_send_mux send_mux;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_read_id read_id;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32767.99609375046566123179659..32766.99609386967493657172482 (-32768..32767 -)
     * Scale: 1.0000001192092896
     * Offset: 0
     */
    float m_setdig__iq;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_end_1 def_end_1;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active190 active190;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_send_converted_t;

/**
 * Signals in message INV_L_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: 32768..32767 (3276.8..3276.7 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t n_actual_filt;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ena64;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_badparas;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_end_1 def_end_1;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_1;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd_ramp;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t iq_actual;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    uint16_t vdc_bus_filt;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ena82;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_din_1 def_din_1;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ncr064;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powerfault;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ncr082;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_plus64;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_rfe_fault;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_plus82;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_minus64;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_bustimeout;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_minus82;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ok64;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_feedbacksignal;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frgrun;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ok82;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icns64;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powervoltage_low;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfe216;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icns82;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tnlim64;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_motortemp;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tnlim82;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pn64;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_devicetemp;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pn82;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ni64;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_overvoltage;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_1_on;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ni82;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _n064;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ipeak;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_2_on;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _n082;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsw64;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_raceaway;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t btbrdy;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsw82;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal064;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_user;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t go216;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal082;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal64;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_3_on;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal82;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tol64;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_4_on;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tol82;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy64;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_hwerr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t goff;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy82;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk064;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ballast;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active190 active190;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk1216;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk082;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active192 active192;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signmag64;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_warning_0;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signmag82;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip64;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_illegal_status;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip82;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_minus64;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_safe_in;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_minus82;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_plus64;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_plus82;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irddig64;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irddig82;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iuserchd64;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iuserchd82;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdn64;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_motortemp;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdn82;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdti64;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_devicetemp;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdti82;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtir64;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_vout_sat;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtir82;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _10hz64;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ipeak;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _10hz82;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtm64;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_raceaway;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtm82;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdana64;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdana82;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iwcns64;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iwcns82;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfepulse64;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfepulse82;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t md64;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t md82;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hndwhl64;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ballast;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hndwhl82;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_rcv_t;

/**
 * Signals in message INV_L_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: 32768..32767 (3276.8..3276.7 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    float n_actual_filt;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ena64 : 1;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_badparas : 1;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_end_1 def_end_1;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_1 : 1;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd_ramp;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float iq_actual;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    float vdc_bus_filt;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ena82 : 1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_din_1 def_din_1;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ncr064 : 1;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powerfault : 1;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ncr082 : 1;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_plus64 : 1;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_rfe_fault : 1;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_plus82 : 1;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_minus64 : 1;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_bustimeout : 1;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_1 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_minus82 : 1;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ok64 : 1;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_feedbacksignal : 1;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int frgrun : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ok82 : 1;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int icns64 : 1;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powervoltage_low : 1;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfe216 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int icns82 : 1;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tnlim64 : 1;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_motortemp : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tnlim82 : 1;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int pn64 : 1;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_devicetemp : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int pn82 : 1;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ni64 : 1;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_overvoltage : 1;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_1_on : 1;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ni82 : 1;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _n064 : 1;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ipeak : 1;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_2_on : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _n082 : 1;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsw64 : 1;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_raceaway : 1;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int btbrdy : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsw82 : 1;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal064 : 1;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_user : 1;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int go216 : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal082 : 1;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal64 : 1;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_3_on : 1;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal82 : 1;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tol64 : 1;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_4_on : 1;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tol82 : 1;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy64 : 1;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_hwerr : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int goff : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy82 : 1;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk064 : 1;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ballast : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active190 active190;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk1216 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk082 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active192 active192;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signmag64 : 1;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_warning_0 : 1;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signmag82 : 1;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip64 : 1;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_illegal_status : 1;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip82 : 1;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_minus64 : 1;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_safe_in : 1;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_minus82 : 1;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_plus64 : 1;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_plus82 : 1;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irddig64 : 1;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irddig82 : 1;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iuserchd64 : 1;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iuserchd82 : 1;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdn64 : 1;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_motortemp : 1;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdn82 : 1;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdti64 : 1;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_devicetemp : 1;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdti82 : 1;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtir64 : 1;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_vout_sat : 1;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtir82 : 1;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _10hz64 : 1;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ipeak : 1;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _10hz82 : 1;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtm64 : 1;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_raceaway : 1;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtm82 : 1;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdana64 : 1;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdana82 : 1;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iwcns64 : 1;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iwcns82 : 1;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfepulse64 : 1;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfepulse82 : 1;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int md64 : 1;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int md82 : 1;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int hndwhl64 : 1;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ballast : 1;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int hndwhl82 : 1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_rcv_converted_t;

/**
 * Signals in message INV_R_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_send_mux send_mux;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_read_id read_id;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32767.99609375046566123179659..32766.99609386967493657172482 (-32768..32767 -)
     * Scale: 1.0000001192092896
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_end_1 def_end_1;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active190 active190;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_send_t;

/**
 * Signals in message INV_R_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_send_mux send_mux;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_read_id read_id;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32767.99609375046566123179659..32766.99609386967493657172482 (-32768..32767 -)
     * Scale: 1.0000001192092896
     * Offset: 0
     */
    float m_setdig__iq;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_end_1 def_end_1;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active190 active190;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_send_converted_t;

/**
 * Signals in message INV_R_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: 32768..32767 (3276.8..3276.7 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t n_actual_filt;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ena64;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_badparas;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_end_1 def_end_1;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_1;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd_ramp;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t iq_actual;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    uint16_t vdc_bus_filt;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ena82;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_din_1 def_din_1;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ncr064;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powerfault;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ncr082;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_plus64;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_rfe_fault;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_plus82;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_minus64;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_bustimeout;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_minus82;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ok64;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_feedbacksignal;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frgrun;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ok82;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icns64;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powervoltage_low;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfe216;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icns82;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tnlim64;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_motortemp;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tnlim82;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pn64;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_devicetemp;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pn82;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ni64;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_overvoltage;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_1_on;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ni82;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _n064;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ipeak;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_2_on;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _n082;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsw64;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_raceaway;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t btbrdy;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsw82;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal064;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_user;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t go216;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal082;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal64;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_3_on;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal82;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tol64;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_4_on;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tol82;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy64;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_hwerr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t goff;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy82;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk064;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ballast;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active190 active190;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk1216;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk082;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active192 active192;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signmag64;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_warning_0;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signmag82;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip64;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_illegal_status;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip82;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_minus64;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_safe_in;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_minus82;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_plus64;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_plus82;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irddig64;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irddig82;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iuserchd64;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iuserchd82;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdn64;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_motortemp;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdn82;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdti64;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_devicetemp;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdti82;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtir64;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_vout_sat;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtir82;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _10hz64;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ipeak;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _10hz82;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtm64;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_raceaway;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtm82;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdana64;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdana82;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iwcns64;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iwcns82;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfepulse64;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfepulse82;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t md64;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t md82;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hndwhl64;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ballast;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hndwhl82;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_rcv_t;

/**
 * Signals in message INV_R_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: 32768..32767 (3276.8..3276.7 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    float n_actual_filt;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ena64 : 1;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_badparas : 1;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_end_1 def_end_1;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_1 : 1;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd_ramp;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float iq_actual;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    float vdc_bus_filt;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ena82 : 1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_din_1 def_din_1;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ncr064 : 1;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powerfault : 1;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ncr082 : 1;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_plus64 : 1;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_rfe_fault : 1;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_plus82 : 1;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_minus64 : 1;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_bustimeout : 1;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_1 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_minus82 : 1;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ok64 : 1;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_feedbacksignal : 1;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int frgrun : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ok82 : 1;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int icns64 : 1;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powervoltage_low : 1;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfe216 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int icns82 : 1;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tnlim64 : 1;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_motortemp : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tnlim82 : 1;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int pn64 : 1;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_devicetemp : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int pn82 : 1;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ni64 : 1;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_overvoltage : 1;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_1_on : 1;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ni82 : 1;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _n064 : 1;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ipeak : 1;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_2_on : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _n082 : 1;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsw64 : 1;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_raceaway : 1;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int btbrdy : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsw82 : 1;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal064 : 1;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_user : 1;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int go216 : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal082 : 1;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal64 : 1;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_3_on : 1;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal82 : 1;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tol64 : 1;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_4_on : 1;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tol82 : 1;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy64 : 1;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_hwerr : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int goff : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy82 : 1;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk064 : 1;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ballast : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active190 active190;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk1216 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk082 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active192 active192;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signmag64 : 1;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_warning_0 : 1;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signmag82 : 1;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip64 : 1;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_illegal_status : 1;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip82 : 1;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_minus64 : 1;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_safe_in : 1;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_minus82 : 1;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_plus64 : 1;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_plus82 : 1;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irddig64 : 1;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irddig82 : 1;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iuserchd64 : 1;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iuserchd82 : 1;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdn64 : 1;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_motortemp : 1;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdn82 : 1;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdti64 : 1;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_devicetemp : 1;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdti82 : 1;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtir64 : 1;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_vout_sat : 1;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtir82 : 1;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _10hz64 : 1;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ipeak : 1;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _10hz82 : 1;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtm64 : 1;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_raceaway : 1;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtm82 : 1;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdana64 : 1;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdana82 : 1;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iwcns64 : 1;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iwcns82 : 1;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfepulse64 : 1;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfepulse82 : 1;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int md64 : 1;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int md82 : 1;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int hndwhl64 : 1;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ballast : 1;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int hndwhl82 : 1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_rcv_converted_t;


void inverters_inv_l_send_raw_to_conversion(
    inverters_inv_l_send_converted_t *conversion,
    inverters_inv_l_send_send_mux send_mux,
    inverters_inv_l_send_read_id read_id,
    uint8_t km_rsvd_0,
    float m_setdig__iq,
    inverters_inv_l_send_def_din_1 def_din_1,
    inverters_inv_l_send_def_end_1 def_end_1,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t km_speed_0,
    uint8_t km_frg_off,
    uint8_t km_cal_off,
    uint8_t km_tx_tog_stat,
    uint8_t km_i_limit,
    uint8_t km_n_clip,
    uint8_t km_mix_ana_on,
    inverters_inv_l_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t km_rsvd_12,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t km_debug_test,
    inverters_inv_l_send_active192 active192,
    inverters_inv_l_send_active190 active190,
    uint16_t m_r_rcp
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_send_conversion_to_raw(
    inverters_inv_l_send_t *raw,
    inverters_inv_l_send_send_mux send_mux,
    inverters_inv_l_send_read_id read_id,
    uint8_t km_rsvd_0,
    float m_setdig__iq,
    inverters_inv_l_send_def_din_1 def_din_1,
    inverters_inv_l_send_def_end_1 def_end_1,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t km_speed_0,
    uint8_t km_frg_off,
    uint8_t km_cal_off,
    uint8_t km_tx_tog_stat,
    uint8_t km_i_limit,
    uint8_t km_n_clip,
    uint8_t km_mix_ana_on,
    inverters_inv_l_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t km_rsvd_12,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t km_debug_test,
    inverters_inv_l_send_active192 active192,
    inverters_inv_l_send_active190 active190,
    uint16_t m_r_rcp
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_send_raw_to_conversion_struct(
    inverters_inv_l_send_converted_t *conversion, 
    const inverters_inv_l_send_t *raw);


void inverters_inv_l_send_conversion_to_raw_struct(
    inverters_inv_l_send_t *raw,
    const inverters_inv_l_send_converted_t *conversion);

int inverters_inv_l_send_send_mux_enum_to_string(inverters_inv_l_send_send_mux value, char *buffer);
int inverters_inv_l_send_read_id_enum_to_string(inverters_inv_l_send_read_id value, char *buffer);
int inverters_inv_l_send_def_din_1_enum_to_string(inverters_inv_l_send_def_din_1 value, char *buffer);
int inverters_inv_l_send_def_end_1_enum_to_string(inverters_inv_l_send_def_end_1 value, char *buffer);
int inverters_inv_l_send_ret_interval_enum_to_string(inverters_inv_l_send_ret_interval value, char *buffer);
int inverters_inv_l_send_active192_enum_to_string(inverters_inv_l_send_active192 value, char *buffer);
int inverters_inv_l_send_active190_enum_to_string(inverters_inv_l_send_active190 value, char *buffer);

int inverters_inv_l_send_converted_to_string(inverters_inv_l_send_converted_t *message, char *buffer);

int inverters_inv_l_send_converted_to_string_file(inverters_inv_l_send_converted_t *message, FILE *buffer);

int inverters_inv_l_send_fields(char *buffer);

int inverters_inv_l_send_fields_file(FILE *buffer);

/**
 * Pack message INV_L_SEND.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_l_send_pack(
    uint8_t *dst_p,
    const inverters_inv_l_send_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_L_SEND.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_l_send_unpack(
    inverters_inv_l_send_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_send_mux_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_read_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_m_setdig__iq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_m_setdig__iq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_m_setdig__iq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_def_end_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_r_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_nmax100perc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ret_interval_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_allow_sync_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_m_r_rcp_is_in_range(uint16_t value);


void inverters_inv_l_rcv_raw_to_conversion(
    inverters_inv_l_rcv_converted_t *conversion,
    inverters_inv_l_rcv_rcv_mux rcv_mux,
    float n_actual_filt,
    uint8_t ena64,
    uint8_t err_badparas,
    inverters_inv_l_rcv_def_end_1 def_end_1,
    uint8_t lmt_active_1,
    float i_cmd,
    float i_cmd_ramp,
    float iq_actual,
    uint16_t t_motor,
    uint16_t t_igbt,
    float vdc_bus_filt,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    inverters_inv_l_rcv_def_din_1 def_din_1,
    int16_t m_cmd_ramp,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t ncr064,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t lim_plus64,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t lim_minus64,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ok64,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t icns64,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t tnlim64,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t pn64,
    uint8_t err_devicetemp,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ni64,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    uint8_t km_allow_sync,
    uint8_t ni82,
    uint8_t _n064,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t rsw64,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t cal064,
    uint8_t err_user,
    uint8_t go216,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t cal64,
    uint8_t d_out_3_on,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t tol64,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t rdy64,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t brk064,
    uint8_t err_ballast,
    inverters_inv_l_rcv_active190 active190,
    uint8_t brk1216,
    uint8_t km_debug_test,
    uint8_t brk082,
    inverters_inv_l_rcv_active192 active192,
    uint8_t signmag64,
    uint8_t warn_warning_0,
    uint8_t signmag82,
    int16_t free,
    uint16_t m_r_rcp,
    uint8_t nclip64,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t nclip_minus64,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t nclip_plus64,
    uint8_t nclip_plus82,
    uint8_t irddig64,
    uint8_t irddig82,
    uint8_t iuserchd64,
    uint8_t iuserchd82,
    uint8_t irdn64,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint8_t irdti64,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t irdtir64,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t _10hz64,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t irdtm64,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana64,
    uint8_t irdana82,
    uint8_t iwcns64,
    uint8_t iwcns82,
    uint8_t rfepulse64,
    uint8_t rfepulse82,
    uint8_t md64,
    uint8_t md82,
    uint8_t hndwhl64,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_rcv_conversion_to_raw(
    inverters_inv_l_rcv_t *raw,
    inverters_inv_l_rcv_rcv_mux rcv_mux,
    float n_actual_filt,
    uint8_t ena64,
    uint8_t err_badparas,
    inverters_inv_l_rcv_def_end_1 def_end_1,
    uint8_t lmt_active_1,
    float i_cmd,
    float i_cmd_ramp,
    float iq_actual,
    uint16_t t_motor,
    uint16_t t_igbt,
    float vdc_bus_filt,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    inverters_inv_l_rcv_def_din_1 def_din_1,
    int16_t m_cmd_ramp,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t ncr064,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t lim_plus64,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t lim_minus64,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ok64,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t icns64,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t tnlim64,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t pn64,
    uint8_t err_devicetemp,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ni64,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    uint8_t km_allow_sync,
    uint8_t ni82,
    uint8_t _n064,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t rsw64,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t cal064,
    uint8_t err_user,
    uint8_t go216,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t cal64,
    uint8_t d_out_3_on,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t tol64,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t rdy64,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t brk064,
    uint8_t err_ballast,
    inverters_inv_l_rcv_active190 active190,
    uint8_t brk1216,
    uint8_t km_debug_test,
    uint8_t brk082,
    inverters_inv_l_rcv_active192 active192,
    uint8_t signmag64,
    uint8_t warn_warning_0,
    uint8_t signmag82,
    int16_t free,
    uint16_t m_r_rcp,
    uint8_t nclip64,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t nclip_minus64,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t nclip_plus64,
    uint8_t nclip_plus82,
    uint8_t irddig64,
    uint8_t irddig82,
    uint8_t iuserchd64,
    uint8_t iuserchd82,
    uint8_t irdn64,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint8_t irdti64,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t irdtir64,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t _10hz64,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t irdtm64,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana64,
    uint8_t irdana82,
    uint8_t iwcns64,
    uint8_t iwcns82,
    uint8_t rfepulse64,
    uint8_t rfepulse82,
    uint8_t md64,
    uint8_t md82,
    uint8_t hndwhl64,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_rcv_raw_to_conversion_struct(
    inverters_inv_l_rcv_converted_t *conversion, 
    const inverters_inv_l_rcv_t *raw);


void inverters_inv_l_rcv_conversion_to_raw_struct(
    inverters_inv_l_rcv_t *raw,
    const inverters_inv_l_rcv_converted_t *conversion);

int inverters_inv_l_rcv_rcv_mux_enum_to_string(inverters_inv_l_rcv_rcv_mux value, char *buffer);
int inverters_inv_l_rcv_def_end_1_enum_to_string(inverters_inv_l_rcv_def_end_1 value, char *buffer);
int inverters_inv_l_rcv_def_din_1_enum_to_string(inverters_inv_l_rcv_def_din_1 value, char *buffer);
int inverters_inv_l_rcv_active190_enum_to_string(inverters_inv_l_rcv_active190 value, char *buffer);
int inverters_inv_l_rcv_active192_enum_to_string(inverters_inv_l_rcv_active192 value, char *buffer);

int inverters_inv_l_rcv_converted_to_string(inverters_inv_l_rcv_converted_t *message, char *buffer);

int inverters_inv_l_rcv_converted_to_string_file(inverters_inv_l_rcv_converted_t *message, FILE *buffer);

int inverters_inv_l_rcv_fields(char *buffer);

int inverters_inv_l_rcv_fields_file(FILE *buffer);

/**
 * Pack message INV_L_RCV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_l_rcv_pack(
    uint8_t *dst_p,
    const inverters_inv_l_rcv_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_L_RCV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_l_rcv_unpack(
    inverters_inv_l_rcv_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rcv_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_actual_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_actual_filt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_actual_filt_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ena64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_badparas_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_def_end_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lmt_active_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_cmd_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_cmd_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_iq_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_iq_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iq_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_motor_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_igbt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_vdc_bus_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_vdc_bus_filt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_vdc_bus_filt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ena82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_r_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nmax100perc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ncr064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_powerfault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lmt_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ncr082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lim_plus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_rfe_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_in_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lim_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lim_minus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_bustimeout_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_in_active_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lim_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ok64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_feedbacksignal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_frgrun_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ok82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_icns64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_powervoltage_low_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rfe216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_icns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_tnlim64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_tnlim82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pn64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ni64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_overvoltage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_1_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_allow_sync_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ni82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv__n064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_2_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv__n082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rsw64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_btbrdy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rsw82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cal064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_user_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_go216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cal082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cal64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_3_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cal82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_tol64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_4_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_tol82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rdy64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_hwerr_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_goff_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rdy82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_brk064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_brk1216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_brk082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signmag64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_warning_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signmag82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_free_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_r_rcp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_illegal_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip_minus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_safe_in_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip_plus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irddig64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irddig82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iuserchd64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iuserchd82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdn64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdti64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdti82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdtir64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_vout_sat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdtir82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv__10hz64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv__10hz82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdtm64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdtm82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdana64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdana82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iwcns64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iwcns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rfepulse64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rfepulse82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_md64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_md82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_hndwhl64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_hndwhl82_is_in_range(uint8_t value);


void inverters_inv_r_send_raw_to_conversion(
    inverters_inv_r_send_converted_t *conversion,
    inverters_inv_r_send_send_mux send_mux,
    inverters_inv_r_send_read_id read_id,
    uint8_t km_rsvd_0,
    float m_setdig__iq,
    inverters_inv_r_send_def_din_1 def_din_1,
    inverters_inv_r_send_def_end_1 def_end_1,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t km_speed_0,
    uint8_t km_frg_off,
    uint8_t km_cal_off,
    uint8_t km_tx_tog_stat,
    uint8_t km_i_limit,
    uint8_t km_n_clip,
    uint8_t km_mix_ana_on,
    inverters_inv_r_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t km_rsvd_12,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t km_debug_test,
    inverters_inv_r_send_active192 active192,
    inverters_inv_r_send_active190 active190,
    uint16_t m_r_rcp
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_send_conversion_to_raw(
    inverters_inv_r_send_t *raw,
    inverters_inv_r_send_send_mux send_mux,
    inverters_inv_r_send_read_id read_id,
    uint8_t km_rsvd_0,
    float m_setdig__iq,
    inverters_inv_r_send_def_din_1 def_din_1,
    inverters_inv_r_send_def_end_1 def_end_1,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t km_speed_0,
    uint8_t km_frg_off,
    uint8_t km_cal_off,
    uint8_t km_tx_tog_stat,
    uint8_t km_i_limit,
    uint8_t km_n_clip,
    uint8_t km_mix_ana_on,
    inverters_inv_r_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t km_rsvd_12,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t km_debug_test,
    inverters_inv_r_send_active192 active192,
    inverters_inv_r_send_active190 active190,
    uint16_t m_r_rcp
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_send_raw_to_conversion_struct(
    inverters_inv_r_send_converted_t *conversion, 
    const inverters_inv_r_send_t *raw);


void inverters_inv_r_send_conversion_to_raw_struct(
    inverters_inv_r_send_t *raw,
    const inverters_inv_r_send_converted_t *conversion);

int inverters_inv_r_send_send_mux_enum_to_string(inverters_inv_r_send_send_mux value, char *buffer);
int inverters_inv_r_send_read_id_enum_to_string(inverters_inv_r_send_read_id value, char *buffer);
int inverters_inv_r_send_def_din_1_enum_to_string(inverters_inv_r_send_def_din_1 value, char *buffer);
int inverters_inv_r_send_def_end_1_enum_to_string(inverters_inv_r_send_def_end_1 value, char *buffer);
int inverters_inv_r_send_ret_interval_enum_to_string(inverters_inv_r_send_ret_interval value, char *buffer);
int inverters_inv_r_send_active192_enum_to_string(inverters_inv_r_send_active192 value, char *buffer);
int inverters_inv_r_send_active190_enum_to_string(inverters_inv_r_send_active190 value, char *buffer);

int inverters_inv_r_send_converted_to_string(inverters_inv_r_send_converted_t *message, char *buffer);

int inverters_inv_r_send_converted_to_string_file(inverters_inv_r_send_converted_t *message, FILE *buffer);

int inverters_inv_r_send_fields(char *buffer);

int inverters_inv_r_send_fields_file(FILE *buffer);

/**
 * Pack message INV_R_SEND.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_r_send_pack(
    uint8_t *dst_p,
    const inverters_inv_r_send_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_R_SEND.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_r_send_unpack(
    inverters_inv_r_send_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_send_mux_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_read_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_m_setdig__iq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_m_setdig__iq_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_m_setdig__iq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_def_end_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_r_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_nmax100perc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ret_interval_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_allow_sync_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_m_r_rcp_is_in_range(uint16_t value);


void inverters_inv_r_rcv_raw_to_conversion(
    inverters_inv_r_rcv_converted_t *conversion,
    inverters_inv_r_rcv_rcv_mux rcv_mux,
    float n_actual_filt,
    uint8_t ena64,
    uint8_t err_badparas,
    inverters_inv_r_rcv_def_end_1 def_end_1,
    uint8_t lmt_active_1,
    float i_cmd,
    float i_cmd_ramp,
    float iq_actual,
    uint16_t t_motor,
    uint16_t t_igbt,
    float vdc_bus_filt,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    inverters_inv_r_rcv_def_din_1 def_din_1,
    int16_t m_cmd_ramp,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t ncr064,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t lim_plus64,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t lim_minus64,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ok64,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t icns64,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t tnlim64,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t pn64,
    uint8_t err_devicetemp,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ni64,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    uint8_t km_allow_sync,
    uint8_t ni82,
    uint8_t _n064,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t rsw64,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t cal064,
    uint8_t err_user,
    uint8_t go216,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t cal64,
    uint8_t d_out_3_on,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t tol64,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t rdy64,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t brk064,
    uint8_t err_ballast,
    inverters_inv_r_rcv_active190 active190,
    uint8_t brk1216,
    uint8_t km_debug_test,
    uint8_t brk082,
    inverters_inv_r_rcv_active192 active192,
    uint8_t signmag64,
    uint8_t warn_warning_0,
    uint8_t signmag82,
    int16_t free,
    uint16_t m_r_rcp,
    uint8_t nclip64,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t nclip_minus64,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t nclip_plus64,
    uint8_t nclip_plus82,
    uint8_t irddig64,
    uint8_t irddig82,
    uint8_t iuserchd64,
    uint8_t iuserchd82,
    uint8_t irdn64,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint8_t irdti64,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t irdtir64,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t _10hz64,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t irdtm64,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana64,
    uint8_t irdana82,
    uint8_t iwcns64,
    uint8_t iwcns82,
    uint8_t rfepulse64,
    uint8_t rfepulse82,
    uint8_t md64,
    uint8_t md82,
    uint8_t hndwhl64,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_rcv_conversion_to_raw(
    inverters_inv_r_rcv_t *raw,
    inverters_inv_r_rcv_rcv_mux rcv_mux,
    float n_actual_filt,
    uint8_t ena64,
    uint8_t err_badparas,
    inverters_inv_r_rcv_def_end_1 def_end_1,
    uint8_t lmt_active_1,
    float i_cmd,
    float i_cmd_ramp,
    float iq_actual,
    uint16_t t_motor,
    uint16_t t_igbt,
    float vdc_bus_filt,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    inverters_inv_r_rcv_def_din_1 def_din_1,
    int16_t m_cmd_ramp,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint8_t ncr064,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t lim_plus64,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t lim_minus64,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ok64,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t icns64,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t tnlim64,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t pn64,
    uint8_t err_devicetemp,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ni64,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    uint8_t km_allow_sync,
    uint8_t ni82,
    uint8_t _n064,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t rsw64,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t cal064,
    uint8_t err_user,
    uint8_t go216,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t cal64,
    uint8_t d_out_3_on,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t tol64,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t rdy64,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t brk064,
    uint8_t err_ballast,
    inverters_inv_r_rcv_active190 active190,
    uint8_t brk1216,
    uint8_t km_debug_test,
    uint8_t brk082,
    inverters_inv_r_rcv_active192 active192,
    uint8_t signmag64,
    uint8_t warn_warning_0,
    uint8_t signmag82,
    int16_t free,
    uint16_t m_r_rcp,
    uint8_t nclip64,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t nclip_minus64,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t nclip_plus64,
    uint8_t nclip_plus82,
    uint8_t irddig64,
    uint8_t irddig82,
    uint8_t iuserchd64,
    uint8_t iuserchd82,
    uint8_t irdn64,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint8_t irdti64,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t irdtir64,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t _10hz64,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t irdtm64,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana64,
    uint8_t irdana82,
    uint8_t iwcns64,
    uint8_t iwcns82,
    uint8_t rfepulse64,
    uint8_t rfepulse82,
    uint8_t md64,
    uint8_t md82,
    uint8_t hndwhl64,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_rcv_raw_to_conversion_struct(
    inverters_inv_r_rcv_converted_t *conversion, 
    const inverters_inv_r_rcv_t *raw);


void inverters_inv_r_rcv_conversion_to_raw_struct(
    inverters_inv_r_rcv_t *raw,
    const inverters_inv_r_rcv_converted_t *conversion);

int inverters_inv_r_rcv_rcv_mux_enum_to_string(inverters_inv_r_rcv_rcv_mux value, char *buffer);
int inverters_inv_r_rcv_def_end_1_enum_to_string(inverters_inv_r_rcv_def_end_1 value, char *buffer);
int inverters_inv_r_rcv_def_din_1_enum_to_string(inverters_inv_r_rcv_def_din_1 value, char *buffer);
int inverters_inv_r_rcv_active190_enum_to_string(inverters_inv_r_rcv_active190 value, char *buffer);
int inverters_inv_r_rcv_active192_enum_to_string(inverters_inv_r_rcv_active192 value, char *buffer);

int inverters_inv_r_rcv_converted_to_string(inverters_inv_r_rcv_converted_t *message, char *buffer);

int inverters_inv_r_rcv_converted_to_string_file(inverters_inv_r_rcv_converted_t *message, FILE *buffer);

int inverters_inv_r_rcv_fields(char *buffer);

int inverters_inv_r_rcv_fields_file(FILE *buffer);

/**
 * Pack message INV_R_RCV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_r_rcv_pack(
    uint8_t *dst_p,
    const inverters_inv_r_rcv_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_R_RCV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_r_rcv_unpack(
    inverters_inv_r_rcv_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rcv_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_actual_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_actual_filt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_actual_filt_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ena64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_badparas_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_def_end_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lmt_active_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_cmd_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_cmd_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_iq_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_iq_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iq_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_motor_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_igbt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_vdc_bus_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_vdc_bus_filt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_vdc_bus_filt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ena82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_r_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nmax100perc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ncr064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_powerfault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lmt_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ncr082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lim_plus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_rfe_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_in_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lim_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lim_minus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_bustimeout_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_in_active_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lim_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ok64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_feedbacksignal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_frgrun_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ok82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_icns64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_powervoltage_low_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rfe216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_icns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_tnlim64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_tnlim82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pn64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ni64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_overvoltage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_1_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_allow_sync_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ni82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv__n064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_2_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv__n082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rsw64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_btbrdy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rsw82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cal064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_user_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_go216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cal082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cal64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_3_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cal82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_tol64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_4_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_tol82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rdy64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_hwerr_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_goff_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rdy82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_brk064_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_brk1216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_brk082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signmag64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_warning_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signmag82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_free_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_r_rcp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_illegal_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip_minus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_safe_in_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip_plus64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irddig64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irddig82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iuserchd64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iuserchd82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdn64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdti64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdti82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdtir64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_vout_sat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdtir82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv__10hz64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv__10hz82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdtm64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdtm82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdana64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdana82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iwcns64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iwcns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rfepulse64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rfepulse82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_md64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_md82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_hndwhl64_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_hndwhl82_is_in_range(uint8_t value);

bool inverters_id_is_message(uint16_t id);

int inverters_to_string_from_id(uint16_t message_id, void* message, char* buffer);
int inverters_fields_from_id(uint16_t message_id, char* buffer);
int inverters_to_string_file_from_id(uint16_t message_id, void* message, FILE* buffer);
int inverters_fields_file_from_id(uint16_t message_id, FILE* buffer);


typedef union CANLIB_PARKING {
    inverters_inv_l_send_t _inv_l_send;
    inverters_inv_l_rcv_t _inv_l_rcv;
    inverters_inv_r_send_t _inv_r_send;
    inverters_inv_r_rcv_t _inv_r_rcv;

} _inverters_all_struct_raw;

typedef union CANLIB_PARKING {
    inverters_inv_l_send_converted_t _inv_l_send;
    inverters_inv_l_rcv_converted_t _inv_l_rcv;
    inverters_inv_r_send_converted_t _inv_r_send;
    inverters_inv_r_rcv_converted_t _inv_r_rcv;

} _inverters_all_struct_converted;



#define inverters_MAX_STRUCT_SIZE_RAW sizeof(_inverters_all_struct_raw)
#define inverters_MAX_STRUCT_SIZE_CONVERSION sizeof(_inverters_all_struct_converted)

#ifdef __cplusplus
}
#endif

#endif
