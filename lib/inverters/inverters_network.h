/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Thu Jun 29 22:13:28 2023.
 */

#ifndef INVERTERS_H
#define INVERTERS_H

#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef CANLIB_BUILD
#define CANLIB_BUILD
#define CANLIB_BUILD_TIME 1688076811
#endif // CANLIB_BUILD

#ifndef CANLIB_PARKING
/* We know it's PACKING but PARKING sounds a bit better ;) */
#if defined(__MINGW32__)
#define CANLIB_PARKING                                                           __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define CANLIB_PARKING __attribute__((__packed__)) // , __aligned__(1)))
#endif                                             // defined(__MINGW32__)
#endif                                             // CANLIB_PARKING

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define INVERTERS_INV_L_SEND_FRAME_ID (0x201u)
#define INVERTERS_INV_L_RCV_FRAME_ID (0x181u)
#define INVERTERS_INV_R_SEND_FRAME_ID (0x13au)
#define INVERTERS_INV_R_RCV_FRAME_ID (0x182u)

/* Frame lengths in bytes. */
#define INVERTERS_INV_L_SEND_BYTE_SIZE (5u)
#define INVERTERS_INV_L_RCV_BYTE_SIZE (6u)
#define INVERTERS_INV_R_SEND_BYTE_SIZE (5u)
#define INVERTERS_INV_R_RCV_BYTE_SIZE (6u)

/* Extended or standard frame types. */
#define INVERTERS_INV_L_SEND_IS_EXTENDED (0)
#define INVERTERS_INV_L_RCV_IS_EXTENDED (0)
#define INVERTERS_INV_R_SEND_IS_EXTENDED (0)
#define INVERTERS_INV_R_RCV_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Topics masks */


/* Signal choices. */
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_04_USER_KEY_CHOICE (4u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_09_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_0F_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3D_READ_CMD_CHOICE (61u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_5B_PID_N_KACC_CHOICE (91u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_C9_CURRENTCONTROL_XKP_CHOICE (201u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_L_SEND_SEND_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)

#define INVERTERS_INV_L_SEND_READ_ID_05H_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_L_SEND_READ_ID_06H_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_L_SEND_READ_ID_07H_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_L_SEND_READ_ID_08H_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_L_SEND_READ_ID_09H_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_L_SEND_READ_ID_0AH_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_L_SEND_READ_ID_0BH_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_L_SEND_READ_ID_0CH_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_L_SEND_READ_ID_0DH_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_L_SEND_READ_ID_0EH_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_L_SEND_READ_ID_0FH_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_L_SEND_READ_ID_10H_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_L_SEND_READ_ID_11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_SEND_READ_ID_12H_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_L_SEND_READ_ID_13H_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_L_SEND_READ_ID_14H_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_L_SEND_READ_ID_15H_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_L_SEND_READ_ID_16H_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_L_SEND_READ_ID_17H_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_L_SEND_READ_ID_18H_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_L_SEND_READ_ID_19H_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_L_SEND_READ_ID_1AH_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_L_SEND_READ_ID_1BH_FW_NR_CHOICE (27u)
#define INVERTERS_INV_L_SEND_READ_ID_1CH_I_KP_CHOICE (28u)
#define INVERTERS_INV_L_SEND_READ_ID_1DH_I_TI_CHOICE (29u)
#define INVERTERS_INV_L_SEND_READ_ID_1EH_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_L_SEND_READ_ID_1FH_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_L_SEND_READ_ID_20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_SEND_READ_ID_21H_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_L_SEND_READ_ID_22H_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_L_SEND_READ_ID_23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_SEND_READ_ID_24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_SEND_READ_ID_25H_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_L_SEND_READ_ID_26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_SEND_READ_ID_27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_SEND_READ_ID_28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_SEND_READ_ID_29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_SEND_READ_ID_2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_SEND_READ_ID_2BH_I_TIM_CHOICE (43u)
#define INVERTERS_INV_L_SEND_READ_ID_2CH_N_KP_CHOICE (44u)
#define INVERTERS_INV_L_SEND_READ_ID_2DH_N_TI_CHOICE (45u)
#define INVERTERS_INV_L_SEND_READ_ID_2EH_N_TD_CHOICE (46u)
#define INVERTERS_INV_L_SEND_READ_ID_2FH_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_L_SEND_READ_ID_30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_SEND_READ_ID_31H_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_L_SEND_READ_ID_32H_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_L_SEND_READ_ID_33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_SEND_READ_ID_34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_SEND_READ_ID_35H_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_L_SEND_READ_ID_36H_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_L_SEND_READ_ID_37H_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_L_SEND_READ_ID_38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_SEND_READ_ID_39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_SEND_READ_ID_3AH_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_L_SEND_READ_ID_3BH_N_TIM_CHOICE (59u)
#define INVERTERS_INV_L_SEND_READ_ID_3CH_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_L_SEND_READ_ID_3EH_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_L_SEND_READ_ID_3FH_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_L_SEND_READ_ID_40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_SEND_READ_ID_41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_SEND_READ_ID_42H_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_L_SEND_READ_ID_43H_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_SEND_READ_ID_44H_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_L_SEND_READ_ID_45H_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_SEND_READ_ID_46H_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_L_SEND_READ_ID_48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_SEND_READ_ID_49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_SEND_READ_ID_4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_SEND_READ_ID_4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_SEND_READ_ID_4CH_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_L_SEND_READ_ID_4DH_MOTOR_I_MAX_EFF_CHOICE (77u)
#define INVERTERS_INV_L_SEND_READ_ID_4EH_MOTOR_I_NOM_EFF_CHOICE (78u)
#define INVERTERS_INV_L_SEND_READ_ID_4FH_MOTOR_POLE_CHOICE (79u)
#define INVERTERS_INV_L_SEND_READ_ID_50H_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_L_SEND_READ_ID_51H_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_SEND_READ_ID_52H_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_L_SEND_READ_ID_53H_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_L_SEND_READ_ID_54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_SEND_READ_ID_55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_SEND_READ_ID_56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_SEND_READ_ID_57H_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_L_SEND_READ_ID_58H_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_L_SEND_READ_ID_59H_MOTOR_NOM_CHOICE (89u)
#define INVERTERS_INV_L_SEND_READ_ID_5AH_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_L_SEND_READ_ID_5BH_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_L_SEND_READ_ID_5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_SEND_READ_ID_5DH_N_CMD_CHOICE (93u)
#define INVERTERS_INV_L_SEND_READ_ID_5EH_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_L_SEND_READ_ID_5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_SEND_READ_ID_60H_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_L_SEND_READ_ID_61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_SEND_READ_ID_62H_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_L_SEND_READ_ID_63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_SEND_READ_ID_64H_DEVICE_MAINS_CHOICE (100u)
#define INVERTERS_INV_L_SEND_READ_ID_65H_REGEN_P_R_CHOICE (101u)
#define INVERTERS_INV_L_SEND_READ_ID_66H_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_L_SEND_READ_ID_67H_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_L_SEND_READ_ID_68H_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_L_SEND_READ_ID_69H_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_L_SEND_READ_ID_6AH_POS_KP_CHOICE (106u)
#define INVERTERS_INV_L_SEND_READ_ID_6BH_POS_TI_CHOICE (107u)
#define INVERTERS_INV_L_SEND_READ_ID_6CH_POS_TD_CHOICE (108u)
#define INVERTERS_INV_L_SEND_READ_ID_6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_SEND_READ_ID_6EH_POS_DEST_CHOICE (110u)
#define INVERTERS_INV_L_SEND_READ_ID_6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_SEND_READ_ID_70H_POS_ERR_CHOICE (112u)
#define INVERTERS_INV_L_SEND_READ_ID_71H_POS_TIM_CHOICE (113u)
#define INVERTERS_INV_L_SEND_READ_ID_72H_POS_OFFSETREF_CHOICE (114u)
#define INVERTERS_INV_L_SEND_READ_ID_73H_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_L_SEND_READ_ID_74H_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_SEND_READ_ID_75H_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_L_SEND_READ_ID_76H_POS_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_L_SEND_READ_ID_77H_POS_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_L_SEND_READ_ID_78H_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_L_SEND_READ_ID_79H_POS_TOL_WIN_CHOICE (121u)
#define INVERTERS_INV_L_SEND_READ_ID_7AH_POS_PRESET_CHOICE (122u)
#define INVERTERS_INV_L_SEND_READ_ID_7BH_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_L_SEND_READ_ID_7CH_POS_ND_SCALE_CHOICE (124u)
#define INVERTERS_INV_L_SEND_READ_ID_7DH_POS_ND_OFFSET_CHOICE (125u)
#define INVERTERS_INV_L_SEND_READ_ID_7EH_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_L_SEND_READ_ID_7FH_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_L_SEND_READ_ID_80H_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_L_SEND_READ_ID_83H_FUNC_PARA_READ_CHOICE (131u)
#define INVERTERS_INV_L_SEND_READ_ID_84H_FUNC_PARA_WRITE_CHOICE (132u)
#define INVERTERS_INV_L_SEND_READ_ID_85H_FUNC_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_L_SEND_READ_ID_88H_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_L_SEND_READ_ID_89H_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_L_SEND_READ_ID_8AH_VOUT_CHOICE (138u)
#define INVERTERS_INV_L_SEND_READ_ID_8BH_V_REF_CHOICE (139u)
#define INVERTERS_INV_L_SEND_READ_ID_8CH_V_KP_CHOICE (140u)
#define INVERTERS_INV_L_SEND_READ_ID_8DH_V_TI_CHOICE (141u)
#define INVERTERS_INV_L_SEND_READ_ID_8EH_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_L_SEND_READ_ID_8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_SEND_READ_ID_90H_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_L_SEND_READ_ID_91H_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_L_SEND_READ_ID_92H_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_L_SEND_READ_ID_93H_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_L_SEND_READ_ID_94H_CAN_ERROR_RXMSGLOST_CNTR_CHOICE (148u)
#define INVERTERS_INV_L_SEND_READ_ID_95H_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_L_SEND_READ_ID_96H_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_L_SEND_READ_ID_97H_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_L_SEND_READ_ID_99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_SEND_READ_ID_9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_SEND_READ_ID_A0H_MOUT_CHOICE (160u)
#define INVERTERS_INV_L_SEND_READ_ID_A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_SEND_READ_ID_A2H_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_L_SEND_READ_ID_A3H_M_TEMP_CHOICE (163u)
#define INVERTERS_INV_L_SEND_READ_ID_A4H_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_L_SEND_READ_ID_A5H_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_L_SEND_READ_ID_A6H_FB_INCPERROT_CHOICE (166u)
#define INVERTERS_INV_L_SEND_READ_ID_A7H_FB_POLE_CHOICE (167u)
#define INVERTERS_INV_L_SEND_READ_ID_A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_SEND_READ_ID_A9H_I3_ADC_CHOICE (169u)
#define INVERTERS_INV_L_SEND_READ_ID_AAH_I2_ADC_CHOICE (170u)
#define INVERTERS_INV_L_SEND_READ_ID_ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_L_SEND_READ_ID_ACH_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_L_SEND_READ_ID_ADH_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_L_SEND_READ_ID_AEH_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_L_SEND_READ_ID_AFH_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_L_SEND_READ_ID_B1H_MOTOR_LSQ_CHOICE (177u)
#define INVERTERS_INV_L_SEND_READ_ID_B2H_ID_NOM_CHOICE (178u)
#define INVERTERS_INV_L_SEND_READ_ID_B3H_MOTOR_LM_CHOICE (179u)
#define INVERTERS_INV_L_SEND_READ_ID_B4H_MOTOR_RR_CHOICE (180u)
#define INVERTERS_INV_L_SEND_READ_ID_B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_L_SEND_READ_ID_B6H_MOTOR_TR_CHOICE (182u)
#define INVERTERS_INV_L_SEND_READ_ID_B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_SEND_READ_ID_BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_SEND_READ_ID_BBH_MOTOR_LSD_CHOICE (187u)
#define INVERTERS_INV_L_SEND_READ_ID_BCH_MOTOR_RS_CHOICE (188u)
#define INVERTERS_INV_L_SEND_READ_ID_BDH_MOTOR_TS_CHOICE (189u)
#define INVERTERS_INV_L_SEND_READ_ID_BEH_DEF_END_1_CHOICE (190u)
#define INVERTERS_INV_L_SEND_READ_ID_BFH_DEF_END_2_CHOICE (191u)
#define INVERTERS_INV_L_SEND_READ_ID_C0H_DEF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_L_SEND_READ_ID_C1H_DEF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_L_SEND_READ_ID_C2H_DEF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_L_SEND_READ_ID_C3H_DEF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_L_SEND_READ_ID_C4H_I_MAX_PK_CHOICE (196u)
#define INVERTERS_INV_L_SEND_READ_ID_C5H_I_CON_EFF_CHOICE (197u)
#define INVERTERS_INV_L_SEND_READ_ID_C6H_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_L_SEND_READ_ID_C7H_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_L_SEND_READ_ID_C8H_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_L_SEND_READ_ID_C9H_I_XKP_CHOICE (201u)
#define INVERTERS_INV_L_SEND_READ_ID_CAH_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_L_SEND_READ_ID_CBH_I_KF_CHOICE (203u)
#define INVERTERS_INV_L_SEND_READ_ID_CCH_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_L_SEND_READ_ID_CDH_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_L_SEND_READ_ID_CEH_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_L_SEND_READ_ID_D0H_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_L_SEND_READ_ID_D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_SEND_READ_ID_D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_SEND_READ_ID_D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_SEND_READ_ID_D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_SEND_READ_ID_D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_SEND_READ_ID_D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_SEND_READ_ID_D7H_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_L_SEND_READ_ID_D8H_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_L_SEND_READ_ID_D9H_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_L_SEND_READ_ID_DAH_DEF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_L_SEND_READ_ID_DBH_DEF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_L_SEND_READ_ID_DCH_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_L_SEND_READ_ID_DEH_DS_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_SEND_READ_ID_DFH_DS_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_SEND_READ_ID_E0H_DS_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_SEND_READ_ID_E1H_DS_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_SEND_READ_ID_E2H_DS_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_SEND_READ_ID_E3H_DS_GO_CHOICE (227u)
#define INVERTERS_INV_L_SEND_READ_ID_E4H_DS_END_1_CHOICE (228u)
#define INVERTERS_INV_L_SEND_READ_ID_E5H_DS_END_2_CHOICE (229u)
#define INVERTERS_INV_L_SEND_READ_ID_E6H_DS_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_SEND_READ_ID_E7H_DS_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_SEND_READ_ID_E8H_DS_RUN_CHOICE (232u)
#define INVERTERS_INV_L_SEND_READ_ID_E9H_DS_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_SEND_READ_ID_EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_L_SEND_READ_ID_ECH_DS_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_L_SEND_READ_ID_EDH_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_L_SEND_READ_ID_EEH_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_L_SEND_READ_ID_EFH_DS_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_L_SEND_READ_ID_F0H_T_PEAK_CHOICE (240u)
#define INVERTERS_INV_L_SEND_READ_ID_F1H_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_L_SEND_READ_ID_F2H_DS_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_SEND_READ_ID_F3H_DS_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_SEND_READ_ID_F4H_DS_POSTOLERANCE_CHOICE (244u)
#define INVERTERS_INV_L_SEND_READ_ID_F5H_DS_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_SEND_READ_ID_F6H_INVERTER_POWER_CHOICE (246u)
#define INVERTERS_INV_L_SEND_READ_ID_F7H_INVERTER_WORK_CHOICE (247u)
#define INVERTERS_INV_L_SEND_READ_ID_F8H_AXIS_CHOICE (248u)
#define INVERTERS_INV_L_SEND_READ_ID_FBH_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_SEND_READ_ID_FCH_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_L_SEND_READ_ID_FEH_SUBV_SVNREV_NR_CHOICE (254u)

#define INVERTERS_INV_L_SEND_DEVICETYPE_HOMEMADE_CHOICE (0u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS205_2PH_230V_CHOICE (14u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS403_2PH_400V_CHOICE (15u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS205_NEU_230V_CHOICE (16u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS403_NEU_400V_CHOICE (17u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS405_CHOICE (19u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS412_CHOICE (21u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS420_CHOICE (23u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS450_CHOICE (25u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS475_CHOICE (27u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS4100_CHOICE (29u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS4820_CHOICE (48u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS451_CHOICE (49u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS476_CHOICE (51u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DS8020_CHOICE (56u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DPC440_CHOICE (60u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DPC460_CHOICE (65u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_DPC460_DC1Q_3P_CHOICE (67u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMO_160_60_CHOICE (81u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMO_160_120_CHOICE (83u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMO_160_180_CHOICE (85u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMO_360_60_CHOICE (87u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMO_360_120_CHOICE (89u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMO_360_180_CHOICE (91u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMO_360_240_CHOICE (93u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_62_80_CHOICE (112u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_62_80_CHOICE (113u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_62_120_CHOICE (114u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_62_120_CHOICE (115u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_62_250_CHOICE (116u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_62_250_CHOICE (117u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_62_350_CHOICE (118u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_62_350_CHOICE (119u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_62_450_CHOICE (120u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_62_450_CHOICE (121u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_160_50_CHOICE (122u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_160_50_CHOICE (123u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_160_100_CHOICE (124u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_160_100_CHOICE (125u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_3_160_200_CHOICE (126u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOBIL_D3_2_160_200_CHOICE (127u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOCAR_700_160_CHOICE (192u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOCAR_700_100_CHOICE (193u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOCAR_700_900_CHOICE (194u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOCAR_700_200_DC_CHOICE (203u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOCAR_400_400_CHOICE (204u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOCAR_700_400_CHOICE (205u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_BAMOCAR_400_250_CHOICE (206u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_KOEPFER_V1_700_400_CHOICE (240u)
#define INVERTERS_INV_L_SEND_DEVICETYPE_KOEPFER_V2_700_400_CHOICE (241u)

#define INVERTERS_INV_L_SEND_CAN_NBT_1000_KBPS_CHOICE (16386u)
#define INVERTERS_INV_L_SEND_CAN_NBT_625_KBPS_CHOICE (16404u)
#define INVERTERS_INV_L_SEND_CAN_NBT_500_KBPS_CHOICE (16421u)
#define INVERTERS_INV_L_SEND_CAN_NBT_250_KBPS_CHOICE (16476u)
#define INVERTERS_INV_L_SEND_CAN_NBT_100_KBPS_CHOICE (17445u)

#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ROT_ENC_TTL_CHOICE (0u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_RESOLVER_CHOICE (1u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ABS_ENC_SC_CHOICE (2u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ROT_TACHO_CHOICE (3u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ROT_CHOICE (4u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_DC_TACHO_CHOICE (5u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_DC_ARM_CHOICE (6u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_BL_ARM_CHOICE (7u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ENC_TTL_CHOICE (8u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ENC_SC_CHOICE (9u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ABS_SC_CHOICE (10u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_DC_ARM_VIR_CHOICE (11u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_SLS_CHOICE (12u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_SLS_SMO_CHOICE (13u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_SLS_USENS_CHOICE (14u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ANAIN1_CALC_CHOICE (15u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_ANAIN2_CALC_CHOICE (16u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_PANASONIC_CHOICE (17u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_1_DC_BUS_CHOICE (18u)

#define INVERTERS_INV_L_SEND_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_SEND_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_SEND_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_SEND_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_SEND_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_SEND_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_SEND_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_SEND_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_SEND_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_SEND_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_SEND_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_SEND_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_SEND_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_SEND_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_SEND_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_SEND_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_SEND_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_SEND_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_SEND_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_SEND_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_SEND_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_SEND_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_SEND_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_SEND_DEF_END_2__OFF__CHOICE (0u)
#define INVERTERS_INV_L_SEND_DEF_END_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_SEND_DEF_END_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_SEND_DEF_END_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_SEND_DEF_END_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_SEND_DEF_END_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_SEND_DEF_END_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_SEND_DEF_END_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_SEND_DEF_END_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_SEND_DEF_END_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_SEND_DEF_END_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_SEND_DEF_END_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_SEND_DEF_END_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_SEND_DEF_END_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_SEND_DEF_END_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_SEND_DEF_END_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_SEND_DEF_END_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_SEND_DEF_END_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_SEND_DEF_END_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_SEND_DEF_END_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_SEND_DEF_END_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_SEND_DEF_END_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_SEND_DEF_END_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_SEND_DEF_END_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_SEND_DEF_END_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_SEND_DEF_END_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_SEND_DEF_END_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_SEND_DEF_END_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_SEND_DEF_END_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_SEND_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_SEND_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_SEND_DEF_DIN_2__OFF__CHOICE (0u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_SEND_DEF_DIN_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_SEND_MO_FEEDBACK_2___CHOICE (0u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_2_ENC_POSITION_CHOICE (1u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_2_ENC_INFO_CHOICE (2u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_2_ENC_HAND__CHOICE (3u)
#define INVERTERS_INV_L_SEND_MO_FEEDBACK_2_SSI_CHOICE (4u)

#define INVERTERS_INV_L_SEND_RET_INTERVAL_SINGLE_CHOICE (0u)
#define INVERTERS_INV_L_SEND_RET_INTERVAL_STOP_CHOICE (255u)

#define INVERTERS_INV_L_SEND_MO_SC1_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_L_SEND_MO_SC1_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_L_SEND_MO_SC1_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_L_SEND_MO_SC2_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_L_SEND_MO_SC2_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_L_SEND_MO_SC2_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_L_SEND_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_L_SEND_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_SEND_ACTIVE191_LOW_CHOICE (0u)
#define INVERTERS_INV_L_SEND_ACTIVE191_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_SEND_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_L_SEND_ACTIVE192_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_SEND_ACTIVE193_LOW_CHOICE (0u)
#define INVERTERS_INV_L_SEND_ACTIVE193_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_RCV_RCV_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_06_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0F_FU_EXTRA_CHOICE (9u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_11_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_19_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1B_FW_NR_CHOICE (27u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_1F_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_20_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_22_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_23_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_24_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_26_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_27_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_28_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_29_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2A_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_30_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_32_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_33_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_37_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_38_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_39_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3A_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_40_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_41_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_42_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_43_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_45_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_48_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_49_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4A_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4B_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_52_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_54_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_55_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_56_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_57_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5B_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5C_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5D_N_CMD_CHOICE (93u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_5F_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_61_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_63_ECODE_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_66_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6D_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_6F_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_70_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_74_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_78_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7B_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8A_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_8F_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_91_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_92_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_93_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_94_ECODE_1STERROR_CHOICE (148u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_95_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_96_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_97_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_97_LOGICOUTBLOCK_CHOICE (152u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_99_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_9A_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_9B_LOGICINBLOCK_CHOICE (155u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A0_M_OUTDIG_CHOICE (160u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A1_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A8_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_A9_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AA_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AB_LOGIC_FREQUENCY_CHOICE (171u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AC_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AD_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AE_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_AF_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_B8_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BA_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_C9_PID_I_XKP_CHOICE (201u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CC_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_CE_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D5_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D6_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D8_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_D9_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DE_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_DF_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E0_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E1_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E2_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E3_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E4_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E5_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E6_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E7_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E8_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_E9_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EB_DC_BUS_VOLTAGE_FILT_CHOICE (235u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EC_DIGSIGNAL_FB_LOSSOFSIG_CHOICE (236u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_EF_DIGSIGNAL_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F2_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F3_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F4_DIGSIGNAL_POS_TOLERANCE_CHOICE (244u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F5_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F6_INVERTER_OUTPUT_POWER_CHOICE (246u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F7_INVERTER_OUTPUT_WORK_CHOICE (247u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_FB_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_FC_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_L_RCV_RCV_MUX_ID_FE_FW_SUBV_REVIS_NR_CHOICE (254u)

#define INVERTERS_INV_L_RCV_DEVICETYPE_HOMEMADE_CHOICE (0u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS205_2PH_230V_CHOICE (14u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS403_2PH_400V_CHOICE (15u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS205_NEU_230V_CHOICE (16u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS403_NEU_400V_CHOICE (17u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS405_CHOICE (19u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS412_CHOICE (21u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS420_CHOICE (23u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS450_CHOICE (25u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS475_CHOICE (27u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS4100_CHOICE (29u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS4820_CHOICE (48u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS451_CHOICE (49u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS476_CHOICE (51u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DS8020_CHOICE (56u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DPC440_CHOICE (60u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DPC460_CHOICE (65u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_DPC460_DC1Q_3P_CHOICE (67u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMO_160_60_CHOICE (81u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMO_160_120_CHOICE (83u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMO_160_180_CHOICE (85u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMO_360_60_CHOICE (87u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMO_360_120_CHOICE (89u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMO_360_180_CHOICE (91u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMO_360_240_CHOICE (93u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_62_80_CHOICE (112u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_62_80_CHOICE (113u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_62_120_CHOICE (114u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_62_120_CHOICE (115u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_62_250_CHOICE (116u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_62_250_CHOICE (117u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_62_350_CHOICE (118u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_62_350_CHOICE (119u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_62_450_CHOICE (120u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_62_450_CHOICE (121u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_160_50_CHOICE (122u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_160_50_CHOICE (123u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_160_100_CHOICE (124u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_160_100_CHOICE (125u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_3_160_200_CHOICE (126u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOBIL_D3_2_160_200_CHOICE (127u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOCAR_700_160_CHOICE (192u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOCAR_700_100_CHOICE (193u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOCAR_700_900_CHOICE (194u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOCAR_700_200_DC_CHOICE (203u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOCAR_400_400_CHOICE (204u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOCAR_700_400_CHOICE (205u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_BAMOCAR_400_250_CHOICE (206u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_KOEPFER_V1_700_400_CHOICE (240u)
#define INVERTERS_INV_L_RCV_DEVICETYPE_KOEPFER_V2_700_400_CHOICE (241u)

#define INVERTERS_INV_L_RCV_CAN_NBT_1000_KBPS_CHOICE (16386u)
#define INVERTERS_INV_L_RCV_CAN_NBT_625_KBPS_CHOICE (16404u)
#define INVERTERS_INV_L_RCV_CAN_NBT_500_KBPS_CHOICE (16421u)
#define INVERTERS_INV_L_RCV_CAN_NBT_250_KBPS_CHOICE (16476u)
#define INVERTERS_INV_L_RCV_CAN_NBT_100_KBPS_CHOICE (17445u)

#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ROT_ENC_TTL_CHOICE (0u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_RESOLVER_CHOICE (1u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ABS_ENC_SC_CHOICE (2u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ROT_TACHO_CHOICE (3u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ROT_CHOICE (4u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_DC_TACHO_CHOICE (5u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_DC_ARM_CHOICE (6u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_BL_ARM_CHOICE (7u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ENC_TTL_CHOICE (8u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ENC_SC_CHOICE (9u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ABS_SC_CHOICE (10u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_DC_ARM_VIR_CHOICE (11u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_SLS_CHOICE (12u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_SLS_SMO_CHOICE (13u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_SLS_USENS_CHOICE (14u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ANAIN1_CALC_CHOICE (15u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_ANAIN2_CALC_CHOICE (16u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_PANASONIC_CHOICE (17u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_1_DC_BUS_CHOICE (18u)

#define INVERTERS_INV_L_RCV_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_RCV_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_RCV_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_RCV_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_RCV_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_RCV_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_RCV_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_RCV_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_RCV_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_RCV_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_RCV_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_RCV_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_RCV_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_RCV_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_RCV_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_RCV_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_RCV_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_RCV_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_RCV_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_RCV_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_RCV_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_RCV_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_RCV_DEF_END_2__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_DEF_END_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_RCV_DEF_END_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_RCV_DEF_END_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_RCV_DEF_END_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_RCV_DEF_END_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_RCV_DEF_END_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_RCV_DEF_END_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_RCV_DEF_END_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_RCV_DEF_END_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_RCV_DEF_END_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_RCV_DEF_END_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_RCV_DEF_END_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_RCV_DEF_END_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_RCV_DEF_END_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_RCV_DEF_END_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_RCV_DEF_END_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_RCV_DEF_END_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_RCV_DEF_END_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_RCV_DEF_END_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_RCV_DEF_END_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_RCV_DEF_END_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_RCV_DEF_END_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_RCV_DEF_END_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_RCV_DEF_END_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_RCV_DEF_END_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_RCV_DEF_END_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_RCV_DEF_END_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_RCV_DEF_END_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_RCV_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_RCV_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_RCV_DEF_DIN_2__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_L_RCV_DEF_DIN_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_L_RCV_CS_AIN_1_MODE__10_10V__CHOICE (0u)
#define INVERTERS_INV_L_RCV_CS_AIN_1_MODE__0_10V__CHOICE (1u)
#define INVERTERS_INV_L_RCV_CS_AIN_1_MODE__4_20MA__CHOICE (2u)
#define INVERTERS_INV_L_RCV_CS_AIN_1_MODE__1_9V__CHOICE (3u)

#define INVERTERS_INV_L_RCV_COMPARE_VAR194__0__CHOICE (0u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR194__1__CHOICE (1u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR194__VAR_1__CHOICE (2u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR194__VAR_2__CHOICE (3u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR194__VAR_3__CHOICE (4u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR194__VAR_4__CHOICE (5u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR194__AIN_1__CHOICE (6u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR194__AIN_2__CHOICE (7u)

#define INVERTERS_INV_L_RCV_COMPARE_VAR195__0__CHOICE (0u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR195__1__CHOICE (1u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR195__VAR_1__CHOICE (2u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR195__VAR_2__CHOICE (3u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR195__VAR_3__CHOICE (4u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR195__VAR_4__CHOICE (5u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR195__AIN_1__CHOICE (6u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR195__AIN_2__CHOICE (7u)

#define INVERTERS_INV_L_RCV_COMPARE_VAR218__0__CHOICE (0u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR218__1__CHOICE (1u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR218__VAR_1__CHOICE (2u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR218__VAR_2__CHOICE (3u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR218__VAR_3__CHOICE (4u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR218__VAR_4__CHOICE (5u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR218__AIN_1__CHOICE (6u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR218__AIN_2__CHOICE (7u)

#define INVERTERS_INV_L_RCV_COMPARE_VAR219__0__CHOICE (0u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR219__1__CHOICE (1u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR219__VAR_1__CHOICE (2u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR219__VAR_2__CHOICE (3u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR219__VAR_3__CHOICE (4u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR219__VAR_4__CHOICE (5u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR219__AIN_1__CHOICE (6u)
#define INVERTERS_INV_L_RCV_COMPARE_VAR219__AIN_2__CHOICE (7u)

#define INVERTERS_INV_L_RCV_MO_FEEDBACK_2___CHOICE (0u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_2_ENC_POSITION_CHOICE (1u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_2_ENC_INFO_CHOICE (2u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_2_ENC_HAND__CHOICE (3u)
#define INVERTERS_INV_L_RCV_MO_FEEDBACK_2_SSI_CHOICE (4u)

#define INVERTERS_INV_L_RCV_CS_AIN_2_MODE__10_10V__CHOICE (0u)
#define INVERTERS_INV_L_RCV_CS_AIN_2_MODE__0_10V__CHOICE (1u)
#define INVERTERS_INV_L_RCV_CS_AIN_2_MODE__4_20MA__CHOICE (2u)
#define INVERTERS_INV_L_RCV_CS_AIN_2_MODE__1_9V__CHOICE (3u)

#define INVERTERS_INV_L_RCV_MO_SC1_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_L_RCV_MO_SC1_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_L_RCV_MO_SC1_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_L_RCV_SOURCE_ID194__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_RCV_SOURCE_ID194__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_L_RCV_SOURCE_ID195__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_RCV_SOURCE_ID195__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_L_RCV_SOURCE_ID218__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_RCV_SOURCE_ID218__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_L_RCV_SOURCE_ID219__OFF__CHOICE (0u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_L_RCV_SOURCE_ID219__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_L_RCV_CS_CMD_TYPE_DIGITAL_COMMANDS_CHOICE (0u)
#define INVERTERS_INV_L_RCV_CS_CMD_TYPE_DIG_ANA_SPEED_CHOICE (1u)
#define INVERTERS_INV_L_RCV_CS_CMD_TYPE_ANALOG_SPEED_CHOICE (2u)
#define INVERTERS_INV_L_RCV_CS_CMD_TYPE_ANALOG_TORQUE_CHOICE (3u)

#define INVERTERS_INV_L_RCV_MO_SC2_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_L_RCV_MO_SC2_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_L_RCV_MO_SC2_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_L_RCV_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_L_RCV_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_RCV_ACTIVE191_LOW_CHOICE (0u)
#define INVERTERS_INV_L_RCV_ACTIVE191_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_RCV_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_L_RCV_ACTIVE192_HIGH_CHOICE (1u)

#define INVERTERS_INV_L_RCV_ACTIVE193_LOW_CHOICE (0u)
#define INVERTERS_INV_L_RCV_ACTIVE193_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_SEND_SEND_MUX_ID_04_USER_KEY_CHOICE (4u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_09_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_0F_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3D_READ_CMD_CHOICE (61u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_5B_PID_N_KACC_CHOICE (91u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_C9_CURRENTCONTROL_XKP_CHOICE (201u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_R_SEND_SEND_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)

#define INVERTERS_INV_R_SEND_READ_ID_05H_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_R_SEND_READ_ID_06H_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_R_SEND_READ_ID_07H_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_R_SEND_READ_ID_08H_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_R_SEND_READ_ID_09H_FU_SPECIAL_CHOICE (9u)
#define INVERTERS_INV_R_SEND_READ_ID_0AH_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_R_SEND_READ_ID_0BH_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_R_SEND_READ_ID_0CH_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_R_SEND_READ_ID_0DH_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_R_SEND_READ_ID_0EH_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_R_SEND_READ_ID_0FH_FU_EXTRA_CHOICE (15u)
#define INVERTERS_INV_R_SEND_READ_ID_10H_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_R_SEND_READ_ID_11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_SEND_READ_ID_12H_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_R_SEND_READ_ID_13H_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_R_SEND_READ_ID_14H_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_R_SEND_READ_ID_15H_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_R_SEND_READ_ID_16H_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_R_SEND_READ_ID_17H_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_R_SEND_READ_ID_18H_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_R_SEND_READ_ID_19H_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_R_SEND_READ_ID_1AH_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_R_SEND_READ_ID_1BH_FW_NR_CHOICE (27u)
#define INVERTERS_INV_R_SEND_READ_ID_1CH_I_KP_CHOICE (28u)
#define INVERTERS_INV_R_SEND_READ_ID_1DH_I_TI_CHOICE (29u)
#define INVERTERS_INV_R_SEND_READ_ID_1EH_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_R_SEND_READ_ID_1FH_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_R_SEND_READ_ID_20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_SEND_READ_ID_21H_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_R_SEND_READ_ID_22H_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_R_SEND_READ_ID_23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_SEND_READ_ID_24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_SEND_READ_ID_25H_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_R_SEND_READ_ID_26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_SEND_READ_ID_27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_SEND_READ_ID_28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_SEND_READ_ID_29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_SEND_READ_ID_2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_SEND_READ_ID_2BH_I_TIM_CHOICE (43u)
#define INVERTERS_INV_R_SEND_READ_ID_2CH_N_KP_CHOICE (44u)
#define INVERTERS_INV_R_SEND_READ_ID_2DH_N_TI_CHOICE (45u)
#define INVERTERS_INV_R_SEND_READ_ID_2EH_N_TD_CHOICE (46u)
#define INVERTERS_INV_R_SEND_READ_ID_2FH_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_R_SEND_READ_ID_30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_SEND_READ_ID_31H_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_R_SEND_READ_ID_32H_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_R_SEND_READ_ID_33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_SEND_READ_ID_34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_SEND_READ_ID_35H_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_R_SEND_READ_ID_36H_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_R_SEND_READ_ID_37H_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_R_SEND_READ_ID_38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_SEND_READ_ID_39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_SEND_READ_ID_3AH_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_R_SEND_READ_ID_3BH_N_TIM_CHOICE (59u)
#define INVERTERS_INV_R_SEND_READ_ID_3CH_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_R_SEND_READ_ID_3EH_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_R_SEND_READ_ID_3FH_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_R_SEND_READ_ID_40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_SEND_READ_ID_41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_SEND_READ_ID_42H_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_R_SEND_READ_ID_43H_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_SEND_READ_ID_44H_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_R_SEND_READ_ID_45H_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_SEND_READ_ID_46H_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_R_SEND_READ_ID_48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_SEND_READ_ID_49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_SEND_READ_ID_4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_SEND_READ_ID_4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_SEND_READ_ID_4CH_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_R_SEND_READ_ID_4DH_MOTOR_I_MAX_EFF_CHOICE (77u)
#define INVERTERS_INV_R_SEND_READ_ID_4EH_MOTOR_I_NOM_EFF_CHOICE (78u)
#define INVERTERS_INV_R_SEND_READ_ID_4FH_MOTOR_POLE_CHOICE (79u)
#define INVERTERS_INV_R_SEND_READ_ID_50H_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_R_SEND_READ_ID_51H_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_SEND_READ_ID_52H_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_R_SEND_READ_ID_53H_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_R_SEND_READ_ID_54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_SEND_READ_ID_55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_SEND_READ_ID_56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_SEND_READ_ID_57H_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_R_SEND_READ_ID_58H_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_R_SEND_READ_ID_59H_MOTOR_NOM_CHOICE (89u)
#define INVERTERS_INV_R_SEND_READ_ID_5AH_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_R_SEND_READ_ID_5BH_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_R_SEND_READ_ID_5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_SEND_READ_ID_5DH_N_CMD_CHOICE (93u)
#define INVERTERS_INV_R_SEND_READ_ID_5EH_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_R_SEND_READ_ID_5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_SEND_READ_ID_60H_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_R_SEND_READ_ID_61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_SEND_READ_ID_62H_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_R_SEND_READ_ID_63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_SEND_READ_ID_64H_DEVICE_MAINS_CHOICE (100u)
#define INVERTERS_INV_R_SEND_READ_ID_65H_REGEN_P_R_CHOICE (101u)
#define INVERTERS_INV_R_SEND_READ_ID_66H_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_R_SEND_READ_ID_67H_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_R_SEND_READ_ID_68H_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_R_SEND_READ_ID_69H_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_R_SEND_READ_ID_6AH_POS_KP_CHOICE (106u)
#define INVERTERS_INV_R_SEND_READ_ID_6BH_POS_TI_CHOICE (107u)
#define INVERTERS_INV_R_SEND_READ_ID_6CH_POS_TD_CHOICE (108u)
#define INVERTERS_INV_R_SEND_READ_ID_6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_SEND_READ_ID_6EH_POS_DEST_CHOICE (110u)
#define INVERTERS_INV_R_SEND_READ_ID_6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_SEND_READ_ID_70H_POS_ERR_CHOICE (112u)
#define INVERTERS_INV_R_SEND_READ_ID_71H_POS_TIM_CHOICE (113u)
#define INVERTERS_INV_R_SEND_READ_ID_72H_POS_OFFSETREF_CHOICE (114u)
#define INVERTERS_INV_R_SEND_READ_ID_73H_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_R_SEND_READ_ID_74H_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_SEND_READ_ID_75H_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_R_SEND_READ_ID_76H_POS_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_R_SEND_READ_ID_77H_POS_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_R_SEND_READ_ID_78H_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_R_SEND_READ_ID_79H_POS_TOL_WIN_CHOICE (121u)
#define INVERTERS_INV_R_SEND_READ_ID_7AH_POS_PRESET_CHOICE (122u)
#define INVERTERS_INV_R_SEND_READ_ID_7BH_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_R_SEND_READ_ID_7CH_POS_ND_SCALE_CHOICE (124u)
#define INVERTERS_INV_R_SEND_READ_ID_7DH_POS_ND_OFFSET_CHOICE (125u)
#define INVERTERS_INV_R_SEND_READ_ID_7EH_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_R_SEND_READ_ID_7FH_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_R_SEND_READ_ID_80H_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_R_SEND_READ_ID_83H_FUNC_PARA_READ_CHOICE (131u)
#define INVERTERS_INV_R_SEND_READ_ID_84H_FUNC_PARA_WRITE_CHOICE (132u)
#define INVERTERS_INV_R_SEND_READ_ID_85H_FUNC_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_R_SEND_READ_ID_88H_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_R_SEND_READ_ID_89H_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_R_SEND_READ_ID_8AH_VOUT_CHOICE (138u)
#define INVERTERS_INV_R_SEND_READ_ID_8BH_V_REF_CHOICE (139u)
#define INVERTERS_INV_R_SEND_READ_ID_8CH_V_KP_CHOICE (140u)
#define INVERTERS_INV_R_SEND_READ_ID_8DH_V_TI_CHOICE (141u)
#define INVERTERS_INV_R_SEND_READ_ID_8EH_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_R_SEND_READ_ID_8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_SEND_READ_ID_90H_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_R_SEND_READ_ID_91H_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_R_SEND_READ_ID_92H_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_R_SEND_READ_ID_93H_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_R_SEND_READ_ID_94H_CAN_ERROR_RXMSGLOST_CNTR_CHOICE (148u)
#define INVERTERS_INV_R_SEND_READ_ID_95H_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_R_SEND_READ_ID_96H_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_R_SEND_READ_ID_97H_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_R_SEND_READ_ID_99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_SEND_READ_ID_9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_SEND_READ_ID_A0H_MOUT_CHOICE (160u)
#define INVERTERS_INV_R_SEND_READ_ID_A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_SEND_READ_ID_A2H_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_R_SEND_READ_ID_A3H_M_TEMP_CHOICE (163u)
#define INVERTERS_INV_R_SEND_READ_ID_A4H_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_R_SEND_READ_ID_A5H_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_R_SEND_READ_ID_A6H_FB_INCPERROT_CHOICE (166u)
#define INVERTERS_INV_R_SEND_READ_ID_A7H_FB_POLE_CHOICE (167u)
#define INVERTERS_INV_R_SEND_READ_ID_A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_SEND_READ_ID_A9H_I3_ADC_CHOICE (169u)
#define INVERTERS_INV_R_SEND_READ_ID_AAH_I2_ADC_CHOICE (170u)
#define INVERTERS_INV_R_SEND_READ_ID_ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_R_SEND_READ_ID_ACH_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_R_SEND_READ_ID_ADH_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_R_SEND_READ_ID_AEH_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_R_SEND_READ_ID_AFH_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_R_SEND_READ_ID_B1H_MOTOR_LSQ_CHOICE (177u)
#define INVERTERS_INV_R_SEND_READ_ID_B2H_ID_NOM_CHOICE (178u)
#define INVERTERS_INV_R_SEND_READ_ID_B3H_MOTOR_LM_CHOICE (179u)
#define INVERTERS_INV_R_SEND_READ_ID_B4H_MOTOR_RR_CHOICE (180u)
#define INVERTERS_INV_R_SEND_READ_ID_B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_R_SEND_READ_ID_B6H_MOTOR_TR_CHOICE (182u)
#define INVERTERS_INV_R_SEND_READ_ID_B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_SEND_READ_ID_BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_SEND_READ_ID_BBH_MOTOR_LSD_CHOICE (187u)
#define INVERTERS_INV_R_SEND_READ_ID_BCH_MOTOR_RS_CHOICE (188u)
#define INVERTERS_INV_R_SEND_READ_ID_BDH_MOTOR_TS_CHOICE (189u)
#define INVERTERS_INV_R_SEND_READ_ID_BEH_DEF_END_1_CHOICE (190u)
#define INVERTERS_INV_R_SEND_READ_ID_BFH_DEF_END_2_CHOICE (191u)
#define INVERTERS_INV_R_SEND_READ_ID_C0H_DEF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_R_SEND_READ_ID_C1H_DEF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_R_SEND_READ_ID_C2H_DEF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_R_SEND_READ_ID_C3H_DEF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_R_SEND_READ_ID_C4H_I_MAX_PK_CHOICE (196u)
#define INVERTERS_INV_R_SEND_READ_ID_C5H_I_CON_EFF_CHOICE (197u)
#define INVERTERS_INV_R_SEND_READ_ID_C6H_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_R_SEND_READ_ID_C7H_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_R_SEND_READ_ID_C8H_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_R_SEND_READ_ID_C9H_I_XKP_CHOICE (201u)
#define INVERTERS_INV_R_SEND_READ_ID_CAH_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_R_SEND_READ_ID_CBH_I_KF_CHOICE (203u)
#define INVERTERS_INV_R_SEND_READ_ID_CCH_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_R_SEND_READ_ID_CDH_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_R_SEND_READ_ID_CEH_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_R_SEND_READ_ID_D0H_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_R_SEND_READ_ID_D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_SEND_READ_ID_D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_SEND_READ_ID_D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_SEND_READ_ID_D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_SEND_READ_ID_D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_SEND_READ_ID_D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_SEND_READ_ID_D7H_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_R_SEND_READ_ID_D8H_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_R_SEND_READ_ID_D9H_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_R_SEND_READ_ID_DAH_DEF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_R_SEND_READ_ID_DBH_DEF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_R_SEND_READ_ID_DCH_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_R_SEND_READ_ID_DEH_DS_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_SEND_READ_ID_DFH_DS_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_SEND_READ_ID_E0H_DS_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_SEND_READ_ID_E1H_DS_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_SEND_READ_ID_E2H_DS_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_SEND_READ_ID_E3H_DS_GO_CHOICE (227u)
#define INVERTERS_INV_R_SEND_READ_ID_E4H_DS_END_1_CHOICE (228u)
#define INVERTERS_INV_R_SEND_READ_ID_E5H_DS_END_2_CHOICE (229u)
#define INVERTERS_INV_R_SEND_READ_ID_E6H_DS_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_SEND_READ_ID_E7H_DS_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_SEND_READ_ID_E8H_DS_RUN_CHOICE (232u)
#define INVERTERS_INV_R_SEND_READ_ID_E9H_DS_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_SEND_READ_ID_EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_R_SEND_READ_ID_ECH_DS_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_R_SEND_READ_ID_EDH_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_R_SEND_READ_ID_EEH_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_R_SEND_READ_ID_EFH_DS_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_R_SEND_READ_ID_F0H_T_PEAK_CHOICE (240u)
#define INVERTERS_INV_R_SEND_READ_ID_F1H_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_R_SEND_READ_ID_F2H_DS_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_SEND_READ_ID_F3H_DS_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_SEND_READ_ID_F4H_DS_POSTOLERANCE_CHOICE (244u)
#define INVERTERS_INV_R_SEND_READ_ID_F5H_DS_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_SEND_READ_ID_F6H_INVERTER_POWER_CHOICE (246u)
#define INVERTERS_INV_R_SEND_READ_ID_F7H_INVERTER_WORK_CHOICE (247u)
#define INVERTERS_INV_R_SEND_READ_ID_F8H_AXIS_CHOICE (248u)
#define INVERTERS_INV_R_SEND_READ_ID_FBH_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_SEND_READ_ID_FCH_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_R_SEND_READ_ID_FEH_SUBV_SVNREV_NR_CHOICE (254u)

#define INVERTERS_INV_R_SEND_DEVICETYPE_HOMEMADE_CHOICE (0u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS205_2PH_230V_CHOICE (14u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS403_2PH_400V_CHOICE (15u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS205_NEU_230V_CHOICE (16u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS403_NEU_400V_CHOICE (17u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS405_CHOICE (19u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS412_CHOICE (21u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS420_CHOICE (23u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS450_CHOICE (25u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS475_CHOICE (27u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS4100_CHOICE (29u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS4820_CHOICE (48u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS451_CHOICE (49u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS476_CHOICE (51u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DS8020_CHOICE (56u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DPC440_CHOICE (60u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DPC460_CHOICE (65u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_DPC460_DC1Q_3P_CHOICE (67u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMO_160_60_CHOICE (81u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMO_160_120_CHOICE (83u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMO_160_180_CHOICE (85u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMO_360_60_CHOICE (87u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMO_360_120_CHOICE (89u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMO_360_180_CHOICE (91u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMO_360_240_CHOICE (93u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_62_80_CHOICE (112u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_62_80_CHOICE (113u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_62_120_CHOICE (114u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_62_120_CHOICE (115u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_62_250_CHOICE (116u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_62_250_CHOICE (117u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_62_350_CHOICE (118u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_62_350_CHOICE (119u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_62_450_CHOICE (120u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_62_450_CHOICE (121u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_160_50_CHOICE (122u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_160_50_CHOICE (123u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_160_100_CHOICE (124u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_160_100_CHOICE (125u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_3_160_200_CHOICE (126u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOBIL_D3_2_160_200_CHOICE (127u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOCAR_700_160_CHOICE (192u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOCAR_700_100_CHOICE (193u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOCAR_700_900_CHOICE (194u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOCAR_700_200_DC_CHOICE (203u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOCAR_400_400_CHOICE (204u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOCAR_700_400_CHOICE (205u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_BAMOCAR_400_250_CHOICE (206u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_KOEPFER_V1_700_400_CHOICE (240u)
#define INVERTERS_INV_R_SEND_DEVICETYPE_KOEPFER_V2_700_400_CHOICE (241u)

#define INVERTERS_INV_R_SEND_CAN_NBT_1000_KBPS_CHOICE (16386u)
#define INVERTERS_INV_R_SEND_CAN_NBT_625_KBPS_CHOICE (16404u)
#define INVERTERS_INV_R_SEND_CAN_NBT_500_KBPS_CHOICE (16421u)
#define INVERTERS_INV_R_SEND_CAN_NBT_250_KBPS_CHOICE (16476u)
#define INVERTERS_INV_R_SEND_CAN_NBT_100_KBPS_CHOICE (17445u)

#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ROT_ENC_TTL_CHOICE (0u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_RESOLVER_CHOICE (1u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ABS_ENC_SC_CHOICE (2u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ROT_TACHO_CHOICE (3u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ROT_CHOICE (4u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_DC_TACHO_CHOICE (5u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_DC_ARM_CHOICE (6u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_BL_ARM_CHOICE (7u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ENC_TTL_CHOICE (8u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ENC_SC_CHOICE (9u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ABS_SC_CHOICE (10u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_DC_ARM_VIR_CHOICE (11u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_SLS_CHOICE (12u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_SLS_SMO_CHOICE (13u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_SLS_USENS_CHOICE (14u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ANAIN1_CALC_CHOICE (15u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_ANAIN2_CALC_CHOICE (16u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_PANASONIC_CHOICE (17u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_1_DC_BUS_CHOICE (18u)

#define INVERTERS_INV_R_SEND_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_SEND_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_SEND_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_SEND_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_SEND_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_SEND_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_SEND_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_SEND_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_SEND_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_SEND_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_SEND_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_SEND_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_SEND_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_SEND_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_SEND_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_SEND_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_SEND_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_SEND_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_SEND_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_SEND_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_SEND_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_SEND_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_SEND_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_SEND_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_SEND_DEF_END_2__OFF__CHOICE (0u)
#define INVERTERS_INV_R_SEND_DEF_END_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_SEND_DEF_END_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_SEND_DEF_END_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_SEND_DEF_END_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_SEND_DEF_END_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_SEND_DEF_END_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_SEND_DEF_END_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_SEND_DEF_END_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_SEND_DEF_END_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_SEND_DEF_END_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_SEND_DEF_END_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_SEND_DEF_END_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_SEND_DEF_END_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_SEND_DEF_END_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_SEND_DEF_END_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_SEND_DEF_END_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_SEND_DEF_END_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_SEND_DEF_END_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_SEND_DEF_END_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_SEND_DEF_END_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_SEND_DEF_END_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_SEND_DEF_END_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_SEND_DEF_END_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_SEND_DEF_END_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_SEND_DEF_END_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_SEND_DEF_END_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_SEND_DEF_END_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_SEND_DEF_END_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_SEND_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_SEND_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_SEND_DEF_DIN_2__OFF__CHOICE (0u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_SEND_DEF_DIN_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_SEND_MO_FEEDBACK_2___CHOICE (0u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_2_ENC_POSITION_CHOICE (1u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_2_ENC_INFO_CHOICE (2u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_2_ENC_HAND__CHOICE (3u)
#define INVERTERS_INV_R_SEND_MO_FEEDBACK_2_SSI_CHOICE (4u)

#define INVERTERS_INV_R_SEND_RET_INTERVAL_SINGLE_CHOICE (0u)
#define INVERTERS_INV_R_SEND_RET_INTERVAL_STOP_CHOICE (255u)

#define INVERTERS_INV_R_SEND_MO_SC1_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_R_SEND_MO_SC1_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_R_SEND_MO_SC1_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_R_SEND_MO_SC2_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_R_SEND_MO_SC2_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_R_SEND_MO_SC2_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_R_SEND_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_R_SEND_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_SEND_ACTIVE191_LOW_CHOICE (0u)
#define INVERTERS_INV_R_SEND_ACTIVE191_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_SEND_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_R_SEND_ACTIVE192_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_SEND_ACTIVE193_LOW_CHOICE (0u)
#define INVERTERS_INV_R_SEND_ACTIVE193_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_RCV_RCV_MUX_ID_05_MOTOR_F_NOM_CHOICE (5u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_06_MOTOR_V_NOM_CHOICE (6u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_07_FU_T_DC_CHOICE (7u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_08_FU_V_DC_CHOICE (8u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0F_FU_EXTRA_CHOICE (9u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0A_FU_U_MIN_CHOICE (10u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0B_FU_F_MIN_CHOICE (11u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0C_FU_V_CORNER_CHOICE (12u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0D_FU_F_CORNER_CHOICE (13u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_0E_MOTOR_COS_PHI_CHOICE (14u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_10_OSZI_CHANNEL_CHOICE (16u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_11_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_12_OSZI_TRIGER_LEVEL_CHOICE (18u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_13_OSZI_TRIGER_EDGE_CHOICE (19u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_14_OSZI_TRIGER_SOURCE_CHOICE (20u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_15_OSZI_SOURCE_CHOICE (21u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_16_OSZI_SKIP_CHOICE (22u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_17_OSZI_READ_CMD_CHOICE (23u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_18_OSZI_RUN_CMD_CHOICE (24u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_19_PWM_ENUM_CHOICE (25u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1A_CALIB_REF_VALUE_CHOICE (26u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1B_FW_NR_CHOICE (27u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1C_PID_I_KP_CHOICE (28u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1D_PID_I_TI_CHOICE (29u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1E_CUTOFFDIG_CHOICE (30u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_1F_I3_OFFSET_CHOICE (31u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_20_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_21_ID_SETDIG_CHOICE (33u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_22_I_CMD_RAMP_CHOICE (34u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_23_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_24_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_25_I_DELTA_RAMP_CHOICE (37u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_26_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_27_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_28_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_29_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2A_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2B_PID_I_TIM_CHOICE (43u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2C_PID_N_KP_CHOICE (44u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2D_PID_N_TI_CHOICE (45u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2E_PID_N_TD_CHOICE (46u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_2F_AIN_IN_1_OFFSSCALE_CHOICE (47u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_30_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_31_N_SETDIG_CHOICE (49u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_32_N_CMD_RAMP_CHOICE (50u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_33_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_34_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_35_ACC_RAMPS_CHOICE (53u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_36_COMMANDSOURCE_CHOICE (54u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_37_DZR_SEQUENCER_VALUE_CHOICE (55u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_38_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_39_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3A_M_CMD_RAMP_CHOICE (58u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3B_PID_N_TIM_CHOICE (59u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3C_I_DERATING_N_PERC_CHOICE (60u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3E_N_LIM_MINUS_CHOICE (62u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_3F_N_LIM_PLUS_CHOICE (63u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_40_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_41_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_42_MOTORPOSITION_MECH_CHOICE (66u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_43_MOTORPOSITION_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_44_FEEDBACK_OFFSET_ANGLE_CHOICE (68u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_45_IXT_AND_REGENE_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_46_I_LIM_DIG_PERC_CHOICE (70u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_48_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_49_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4A_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4B_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4C_I_DERATING_TE_CHOICE (76u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4D_MOTOR_I_MAX_EFF_ARMS_CHOICE (77u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4E_MOTOR_I_NOM_EFF_ARMS_CHOICE (78u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_4F_MOTOR_POLE_NUMBER_CHOICE (79u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_50_AIN_IN_1_CUTOFF_CHOICE (80u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_52_STATUS_MASK_CHOICE (82u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_53_AIN_IN_2_CUTOFF_CHOICE (83u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_54_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_55_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_56_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_57_I_LIMIT_INUSE_RAMP_CHOICE (87u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_58_I_DERATING_TD_CHOICE (88u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_59_MOTOR_NOMINAL_SPEED_CHOICE (89u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5A_DEVICE_OPTIONS_CHOICE (90u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5B_SPEEDCONTROL_KACC_CHOICE (91u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5C_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5D_N_CMD_CHOICE (93u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5E_SPEED_FILTER_CHOICE (94u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_5F_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_60_AIN_IN_X_FILTER_CHOICE (96u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_61_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_62_SERIALNUMBER_CHOICE (98u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_63_ECODE_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_64_DEVICE_MAINS_SUPPLY_V_CHOICE (100u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_65_REGEN_RESISTOR_P_AND_R_CHOICE (101u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_66_DC_BUS_VOLTAGE_CHOICE (102u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_67_DEVICE_TYPE_CHOICE (103u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_68_CAN_ID_RX_CHOICE (104u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_69_CAN_ID_TX_CHOICE (105u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6A_POS_PID_KP_CHOICE (106u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6B_POS_PID_TI_CHOICE (107u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6C_POS_PID_TD_CHOICE (108u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6D_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6E_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_6F_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_70_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_71_POS_PID_TIM_CHOICE (113u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_72_POS_OFFSETREFERENCE_CHOICE (114u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_73_CAN_NBT_CHOICE (115u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_74_POS_ZERO_CAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_75_POS_REF_RESO_EDGE_CHOICE (117u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_76_POS_CALIB_SPEED_1_CHOICE (118u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_77_POS_CALIB_SPEED_2_CHOICE (119u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_78_POS_REF_START_CHOICE (120u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_79_POS_TOL_WINDOW_CHOICE (121u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7A_POS_PRESET_VALUE_CHOICE (122u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7B_POS_ZERO_OFFSET_CHOICE (123u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7C_POS_NDRIVE_SCALE_CHOICE (124u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7D_POS_NDRIVE_OFFSET_CHOICE (125u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7E_POS_FB2_SCALE_FAC_EXT_CHOICE (126u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_7F_POS_OFFSET_SLACK_CHOICE (127u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_80_POS_DIFF_SLACK_CHOICE (128u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_83_FUNCTION_PARAMETER_READ_CHOICE (131u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_84_FUNCTION_PARAMETER_WRITE_CHOICE (132u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_85_FUNCTION_SPECIAL_CHOICE (133u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_88_CAN_ID_2_RX_CHOICE (136u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_89_CAN_ID_2_TX_CHOICE (137u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8A_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8B_VOLTAGECONTROL_REF_CHOICE (139u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8C_VOLTAGECONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8D_VOLTAGECONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8E_CLEAR_ERROR_LIST_CHOICE (142u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_8F_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_90_M_SETDIG_CHOICE (144u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_91_POS_CMD_INT_CHOICE (145u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_92_CAN_ERROR_BUSOFF_CNTR_CHOICE (146u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_93_CAN_ERROR_WRITETIME_CNTR_CHOICE (147u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_94_ECODE_1STERROR_CHOICE (148u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_95_CAN_ERROR_NOACK_CNTR_CHOICE (149u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_96_CAN_ERROR_CRC_CHECK_CNTR_CHOICE (150u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_97_CAN_ERROR_BIT_CNTR_CHOICE (151u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_97_LOGICOUTBLOCK_CHOICE (152u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_99_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_9A_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_9B_LOGICINBLOCK_CHOICE (155u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A0_M_OUTDIG_CHOICE (160u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A1_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A2_I_DERATING_TM_CHOICE (162u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A3_MOTOR_TEMP_ERROR_LIM_CHOICE (163u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A4_MOTOR_OPTIONS_CHOICE (164u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A5_DEVICE_DC_BUS_MINMAX_LIM_CHOICE (165u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A6_FB_INCREMENTSPERROT_CHOICE (166u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A7_FB_POLE_NUMBER_CHOICE (167u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A8_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_A9_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AA_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AB_LOGIC_FREQUENCY_CHOICE (171u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AC_PWM_1_56_CHOICE (172u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AD_PWM_2_34_CHOICE (173u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AE_PWM_3_12_CHOICE (174u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_AF_TIMER_DELTA_CHOICE (175u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B1_MOTOR_L_SIGMA_Q_CHOICE (177u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B2_ID_NOMINAL_CHOICE (178u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B3_MOTOR_MAGN_INDUCTANCE_CHOICE (179u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B4_MOTOR_ROTOR_RESISTANCE_CHOICE (180u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B5_ID_MINIMUM_CHOICE (181u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B6_TIME_CONSTANT_ROTOR_CHOICE (182u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_B8_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BA_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BB_MOTOR_L_SIGMA_D_CHOICE (187u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BC_MOTOR_STATOR_RESISTANCE_CHOICE (188u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BD_TIME_CONSTANT_STATOR_CHOICE (189u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BE_LOGICDEFINE_OF_END_1_CHOICE (190u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_BF_LOGICDEFINE_OF_END_2_CHOICE (191u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C0_LOGICDEFINE_OF_DIN_1_CHOICE (192u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C1_LOGICDEFINE_OF_DIN_2_CHOICE (193u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C2_LOGICDEFINE_OF_OUT_1_CHOICE (194u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C3_LOGICDEFINE_OF_OUT_2_CHOICE (195u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C4_I_MAX_PK_PERC_CHOICE (196u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C5_I_CON_EFF_PERC_CHOICE (197u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C6_I_DEVICE_CHOICE (198u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C7_RLIM_MRCP_RAMP_CHOICE (199u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C8_NMAX100PERC_CHOICE (200u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_C9_PID_I_XKP_CHOICE (201u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CA_BAT_OPR_LIMITS_CHOICE (202u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CB_PID_I_KF_CHOICE (203u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CC_CAR_MODE_STATUS_CHOICE (204u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CD_CAR_MODE_CONFIG_CHOICE (205u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_CE_N_RPM_MAXINT_CHOICE (206u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D0_CAN_TIMEOUT_CHOICE (208u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D1_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D2_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D3_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D4_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D5_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D6_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D7_AIN_IN_2_OFFSSCALE_CHOICE (215u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D8_LOGICREADBITSIN_OUT_CHOICE (216u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_D9_I_200PERC_CHOICE (217u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DA_LOGICDEFINE_OF_OUT_3_CHOICE (218u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DB_LOGICDEFINE_OF_OUT_4_CHOICE (219u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DC_DAC_SOURCE_ID_CHOICE (220u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DE_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_DF_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E0_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E1_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E2_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E3_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E4_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E5_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E6_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E7_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E8_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_E9_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EB_DC_BUS_VOLTAGE_FILT_CHOICE (235u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EC_DIGSIGNAL_FB_LOSSOFSIG_CHOICE (236u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_ED_DEC_RAMPS_CHOICE (237u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EE_V_SHUNT_CHOICE (238u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_EF_DIGSIGNAL_NOHWFAULT_CHOICE (239u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F0_TIME_I_PEAK_CHOICE (240u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F1_BRAKE_DELAY_CHOICE (241u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F2_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F3_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F4_DIGSIGNAL_POS_TOLERANCE_CHOICE (244u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F5_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F6_INVERTER_OUTPUT_POWER_CHOICE (246u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F7_INVERTER_OUTPUT_WORK_CHOICE (247u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_F8_AXIS_LABEL_CHOICE (248u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_FB_AIN_IN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_FC_AIN_IN_2_CALC_CHOICE (252u)
#define INVERTERS_INV_R_RCV_RCV_MUX_ID_FE_FW_SUBV_REVIS_NR_CHOICE (254u)

#define INVERTERS_INV_R_RCV_DEVICETYPE_HOMEMADE_CHOICE (0u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS205_2PH_230V_CHOICE (14u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS403_2PH_400V_CHOICE (15u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS205_NEU_230V_CHOICE (16u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS403_NEU_400V_CHOICE (17u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS405_CHOICE (19u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS412_CHOICE (21u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS420_CHOICE (23u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS450_CHOICE (25u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS475_CHOICE (27u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS4100_CHOICE (29u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS4820_CHOICE (48u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS451_CHOICE (49u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS476_CHOICE (51u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DS8020_CHOICE (56u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DPC440_CHOICE (60u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DPC460_CHOICE (65u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_DPC460_DC1Q_3P_CHOICE (67u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMO_160_60_CHOICE (81u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMO_160_120_CHOICE (83u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMO_160_180_CHOICE (85u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMO_360_60_CHOICE (87u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMO_360_120_CHOICE (89u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMO_360_180_CHOICE (91u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMO_360_240_CHOICE (93u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_62_80_CHOICE (112u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_62_80_CHOICE (113u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_62_120_CHOICE (114u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_62_120_CHOICE (115u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_62_250_CHOICE (116u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_62_250_CHOICE (117u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_62_350_CHOICE (118u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_62_350_CHOICE (119u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_62_450_CHOICE (120u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_62_450_CHOICE (121u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_160_50_CHOICE (122u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_160_50_CHOICE (123u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_160_100_CHOICE (124u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_160_100_CHOICE (125u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_3_160_200_CHOICE (126u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOBIL_D3_2_160_200_CHOICE (127u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOCAR_700_160_CHOICE (192u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOCAR_700_100_CHOICE (193u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOCAR_700_900_CHOICE (194u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOCAR_700_200_DC_CHOICE (203u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOCAR_400_400_CHOICE (204u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOCAR_700_400_CHOICE (205u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_BAMOCAR_400_250_CHOICE (206u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_KOEPFER_V1_700_400_CHOICE (240u)
#define INVERTERS_INV_R_RCV_DEVICETYPE_KOEPFER_V2_700_400_CHOICE (241u)

#define INVERTERS_INV_R_RCV_CAN_NBT_1000_KBPS_CHOICE (16386u)
#define INVERTERS_INV_R_RCV_CAN_NBT_625_KBPS_CHOICE (16404u)
#define INVERTERS_INV_R_RCV_CAN_NBT_500_KBPS_CHOICE (16421u)
#define INVERTERS_INV_R_RCV_CAN_NBT_250_KBPS_CHOICE (16476u)
#define INVERTERS_INV_R_RCV_CAN_NBT_100_KBPS_CHOICE (17445u)

#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ROT_ENC_TTL_CHOICE (0u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_RESOLVER_CHOICE (1u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ABS_ENC_SC_CHOICE (2u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ROT_TACHO_CHOICE (3u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ROT_CHOICE (4u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_DC_TACHO_CHOICE (5u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_DC_ARM_CHOICE (6u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_BL_ARM_CHOICE (7u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ENC_TTL_CHOICE (8u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ENC_SC_CHOICE (9u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ABS_SC_CHOICE (10u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_DC_ARM_VIR_CHOICE (11u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_SLS_CHOICE (12u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_SLS_SMO_CHOICE (13u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_SLS_USENS_CHOICE (14u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ANAIN1_CALC_CHOICE (15u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_ANAIN2_CALC_CHOICE (16u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_PANASONIC_CHOICE (17u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_1_DC_BUS_CHOICE (18u)

#define INVERTERS_INV_R_RCV_DEF_END_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_DEF_END_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_RCV_DEF_END_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_RCV_DEF_END_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_RCV_DEF_END_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_RCV_DEF_END_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_RCV_DEF_END_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_RCV_DEF_END_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_RCV_DEF_END_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_RCV_DEF_END_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_RCV_DEF_END_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_RCV_DEF_END_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_RCV_DEF_END_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_RCV_DEF_END_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_RCV_DEF_END_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_RCV_DEF_END_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_RCV_DEF_END_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_RCV_DEF_END_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_RCV_DEF_END_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_RCV_DEF_END_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_RCV_DEF_END_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_RCV_DEF_END_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_RCV_DEF_END_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_RCV_DEF_END_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_RCV_DEF_END_2__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_DEF_END_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_RCV_DEF_END_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_RCV_DEF_END_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_RCV_DEF_END_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_RCV_DEF_END_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_RCV_DEF_END_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_RCV_DEF_END_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_RCV_DEF_END_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_RCV_DEF_END_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_RCV_DEF_END_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_RCV_DEF_END_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_RCV_DEF_END_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_RCV_DEF_END_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_RCV_DEF_END_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_RCV_DEF_END_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_RCV_DEF_END_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_RCV_DEF_END_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_RCV_DEF_END_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_RCV_DEF_END_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_RCV_DEF_END_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_RCV_DEF_END_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_RCV_DEF_END_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_RCV_DEF_END_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_RCV_DEF_END_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_RCV_DEF_END_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_RCV_DEF_END_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_RCV_DEF_END_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_RCV_DEF_END_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_RCV_DEF_DIN_1__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_RCV_DEF_DIN_1_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_RCV_DEF_DIN_2__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_REF_AND_LIMIT_PLUS_CHOICE (1u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_REF_AND_LIMIT_MINUS_CHOICE (2u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_REF_PLUS_CHOICE (3u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_LIMIT_PLUS_CHOICE (4u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_LIMIT_MINUS_CHOICE (5u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_LIMIT_PLUS_AND_MINUS_CHOICE (6u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_CANCEL_ERROR_S__CHOICE (7u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__START_REF_DRIVE_CHOICE (8u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_SPEED_RAMP_0_CHOICE (9u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__START_DEST_EQ_VAR_1_CHOICE (10u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__START_DEST_EQ_VAR_2_CHOICE (11u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_N_CMD_REVERSE_CHOICE (12u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__PRESET_POS_EQ_VAR_3_CHOICE (13u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__CAPTURE_VAR_3_EQ_POS_CHOICE (14u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__CAPTURE_VAR_4_EQ_POS_CHOICE (15u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__SWITCH_SPD_EQ_NOTAIN1_AIN2_CHOICE (16u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__SWITCH_SPD_EQ_NOTVAR1_VAR2_CHOICE (17u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_I_LIMIT_DIG__CHOICE (18u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_N_CLIP_NEG_POS__CHOICE (19u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__SWITCH_CMD_EQ_NOTDIG_ANA_CHOICE (20u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_SPEED_RAMP_0_POS_CHOICE (21u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_HANDWHEEL_CHOICE (22u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_BRAKE_CAR_CHOICE (23u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_RECUP_DISABLED_CHOICE (24u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_RISING_BANK_1_FALLING_BANK_0_CHOICE (25u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__START_DEST_EQ_VAR_1_2_3_4_CHOICE (26u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2__START_CW_EQ_VAR_1_2_3_4_CHOICE (27u)
#define INVERTERS_INV_R_RCV_DEF_DIN_2_BRAKE_CAR_NR2_CHOICE (28u)

#define INVERTERS_INV_R_RCV_CS_AIN_1_MODE__10_10V__CHOICE (0u)
#define INVERTERS_INV_R_RCV_CS_AIN_1_MODE__0_10V__CHOICE (1u)
#define INVERTERS_INV_R_RCV_CS_AIN_1_MODE__4_20MA__CHOICE (2u)
#define INVERTERS_INV_R_RCV_CS_AIN_1_MODE__1_9V__CHOICE (3u)

#define INVERTERS_INV_R_RCV_COMPARE_VAR194__0__CHOICE (0u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR194__1__CHOICE (1u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR194__VAR_1__CHOICE (2u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR194__VAR_2__CHOICE (3u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR194__VAR_3__CHOICE (4u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR194__VAR_4__CHOICE (5u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR194__AIN_1__CHOICE (6u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR194__AIN_2__CHOICE (7u)

#define INVERTERS_INV_R_RCV_COMPARE_VAR195__0__CHOICE (0u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR195__1__CHOICE (1u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR195__VAR_1__CHOICE (2u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR195__VAR_2__CHOICE (3u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR195__VAR_3__CHOICE (4u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR195__VAR_4__CHOICE (5u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR195__AIN_1__CHOICE (6u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR195__AIN_2__CHOICE (7u)

#define INVERTERS_INV_R_RCV_COMPARE_VAR218__0__CHOICE (0u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR218__1__CHOICE (1u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR218__VAR_1__CHOICE (2u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR218__VAR_2__CHOICE (3u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR218__VAR_3__CHOICE (4u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR218__VAR_4__CHOICE (5u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR218__AIN_1__CHOICE (6u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR218__AIN_2__CHOICE (7u)

#define INVERTERS_INV_R_RCV_COMPARE_VAR219__0__CHOICE (0u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR219__1__CHOICE (1u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR219__VAR_1__CHOICE (2u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR219__VAR_2__CHOICE (3u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR219__VAR_3__CHOICE (4u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR219__VAR_4__CHOICE (5u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR219__AIN_1__CHOICE (6u)
#define INVERTERS_INV_R_RCV_COMPARE_VAR219__AIN_2__CHOICE (7u)

#define INVERTERS_INV_R_RCV_MO_FEEDBACK_2___CHOICE (0u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_2_ENC_POSITION_CHOICE (1u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_2_ENC_INFO_CHOICE (2u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_2_ENC_HAND__CHOICE (3u)
#define INVERTERS_INV_R_RCV_MO_FEEDBACK_2_SSI_CHOICE (4u)

#define INVERTERS_INV_R_RCV_CS_AIN_2_MODE__10_10V__CHOICE (0u)
#define INVERTERS_INV_R_RCV_CS_AIN_2_MODE__0_10V__CHOICE (1u)
#define INVERTERS_INV_R_RCV_CS_AIN_2_MODE__4_20MA__CHOICE (2u)
#define INVERTERS_INV_R_RCV_CS_AIN_2_MODE__1_9V__CHOICE (3u)

#define INVERTERS_INV_R_RCV_MO_SC1_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_R_RCV_MO_SC1_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_R_RCV_MO_SC1_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_R_RCV_SOURCE_ID194__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_RCV_SOURCE_ID194__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_R_RCV_SOURCE_ID195__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_RCV_SOURCE_ID195__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_R_RCV_SOURCE_ID218__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_RCV_SOURCE_ID218__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_R_RCV_SOURCE_ID219__OFF__CHOICE (0u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__02H_SC_INFO_CHOICE (2u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__11H_CONTROL_STATUS_CHOICE (17u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__20H_I_ACTUAL_CHOICE (32u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__22H_I_CMD_RAMP__CHOICE (34u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__23H_ID_REF_CHOICE (35u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__24H_I_MAX_INUSE_CHOICE (36u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__26H_I_CMD_CHOICE (38u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__27H_IQ_ACTUAL_CHOICE (39u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__28H_ID_ACTUAL_CHOICE (40u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__29H_VQ_OUTPUT_CHOICE (41u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__2AH_VD_OUTPUT_CHOICE (42u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__30H_N_ACTUAL_CHOICE (48u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__31H_N_SET_DIG__CHOICE (49u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__32H_N_CMD_RAMP__CHOICE (50u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__33H_N_ERROR_CHOICE (51u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__34H_N_LIM_CHOICE (52u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__38H_IQ_ERROR_CHOICE (56u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__39H_ID_ERROR_CHOICE (57u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__40H_STATUS_MAP_CHOICE (64u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__41H_INCR_DELTA_CHOICE (65u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__42H_MOTORPOS_MECH_CHOICE (66u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__43H_MOTORPOS_ELEC_CHOICE (67u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__45H_IT_RG_MONITOR_CHOICE (69u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__48H_I_LIMIT_INUSE_CHOICE (72u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__49H_T_MOTOR_CHOICE (73u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__4AH_T_IGBT_CHOICE (74u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__4BH_T_AIR_INSIDE_CHOICE (75u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__51_KERN_MODE_STATE_CHOICE (81u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__54H_I1_ACTUAL_CHOICE (84u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__55H_I2_ACTUAL_CHOICE (85u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__56H_I3_ACTUAL_CHOICE (86u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__57H_I_LIMIT_INUSE_RAMP__CHOICE (87u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__5CH_ROTOR_SIGNALS_CHOICE (92u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__5DH_N_CMD_INT__CHOICE (93u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__5FH_I_ACTUAL_FILT_CHOICE (95u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__61H_IXT_MONITOR_CHOICE (97u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__63H_FPGA_STATUS_CHOICE (99u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__66H_VDC_BUS_FILT_CHOICE (102u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__6DH_POS_ACTUAL_CHOICE (109u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__6EH_POS_DESTINATION_CHOICE (110u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__6FH_POS_ACTUAL_2_CHOICE (111u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__70H_POS_ERROR_CHOICE (112u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__74H_POS_ZEROCAPTURE_CHOICE (116u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__8AH_V_OUTPUT_CHOICE (138u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__8BH_V_RED_REF__CHOICE (139u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__8CH_V_CONTROL_KP_CHOICE (140u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__8DH_V_CONTROL_TI_CHOICE (141u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__8FH_ERRORWARNING_MAP_CHOICE (143u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__90H_M_SET_DIG__CHOICE (144u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__91H_POS_CMD_CHOICE (145u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__98H_LOGIC_O_BLOCK_CHOICE (152u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__99H_INFO_TIMER_DIFF_CHOICE (153u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__9AH_TEMP_DEBUG_CHOICE (154u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__9BH_LOGIC_I_BLOCK_CHOICE (155u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__A0H_M_OUT_DIG__CHOICE (160u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__A1H_BALLAST_CNTR_CHOICE (161u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__A8H_N_ACTUAL_FILT_CHOICE (168u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__A9H_I3_ADC_VALUE_CHOICE (169u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__AAH_I2_ADC_VALUE_CHOICE (170u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__ABH_LOGIC_FREQ_CHOICE (171u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__ACH_PWM_1_5_6__CHOICE (172u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__ADH_PWM_2_3_4__CHOICE (173u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__AEH_PWM_3_1_2__CHOICE (174u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__B5H_ID_MIN_CHOICE (181u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__B8H_PTR_1_DEBUG_CHOICE (184u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__BAH_PTR_2_DEBUG_CHOICE (186u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__D1H_VAR_1_CHOICE (209u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__D2H_VAR_2_CHOICE (210u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__D3H_VAR_3_CHOICE (211u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__D4H_VAR_4_CHOICE (212u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__D5H_AIN_IN_1_CHOICE (213u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__D6H_AIN_IN_2_CHOICE (214u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__DEH_DIGOUTPUT_DOUT_3_CHOICE (222u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__DFH_DIGOUTPUT_DOUT_4_CHOICE (223u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E0H_DIGOUTPUT_DOUT_1_CHOICE (224u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E1H_DIGOUTPUT_DOUT_2_CHOICE (225u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E2H_DIGOUTPUT_RDY_BTB_CHOICE (226u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E3H_DIGSIGNAL_GO_CHOICE (227u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E4H_DIGINPUT_END_1_CHOICE (228u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E5H_DIGINPUT_END_2_CHOICE (229u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E6H_DIGINPUT_DIN_1_CHOICE (230u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E7H_DIGINPUT_DIN_2_CHOICE (231u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E8H_DIGINPUT_RUN_CHOICE (232u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__E9H_ERROR_I_FAULT_CHOICE (233u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__EAH_I_BALLAST_ACT_CHOICE (234u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__EBH_VDC_BUS_CHOICE (235u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__ECH_FB_LOSSOFSIGNAL_CHOICE (236u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__F2H_DIGSIGNAL_BRAKE_CHOICE (242u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__F3H_DIGSIGNAL_ICNS_CHOICE (243u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__F4H_DIGSIGNAL_POSTOLER_SET_CHOICE (244u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__F5H_DIGSIGNAL_LESSN0_CHOICE (245u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__FBH_AIN_1_CALC_CHOICE (251u)
#define INVERTERS_INV_R_RCV_SOURCE_ID219__FCH_AIN_2_CALC_CHOICE (252u)

#define INVERTERS_INV_R_RCV_CS_CMD_TYPE_DIGITAL_COMMANDS_CHOICE (0u)
#define INVERTERS_INV_R_RCV_CS_CMD_TYPE_DIG_ANA_SPEED_CHOICE (1u)
#define INVERTERS_INV_R_RCV_CS_CMD_TYPE_ANALOG_SPEED_CHOICE (2u)
#define INVERTERS_INV_R_RCV_CS_CMD_TYPE_ANALOG_TORQUE_CHOICE (3u)

#define INVERTERS_INV_R_RCV_MO_SC2_RESO_14_BIT_CHOICE (1u)
#define INVERTERS_INV_R_RCV_MO_SC2_RESO_12_BIT_CHOICE (2u)
#define INVERTERS_INV_R_RCV_MO_SC2_RESO_10_BIT_CHOICE (3u)

#define INVERTERS_INV_R_RCV_ACTIVE190_LOW_CHOICE (0u)
#define INVERTERS_INV_R_RCV_ACTIVE190_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_RCV_ACTIVE191_LOW_CHOICE (0u)
#define INVERTERS_INV_R_RCV_ACTIVE191_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_RCV_ACTIVE192_LOW_CHOICE (0u)
#define INVERTERS_INV_R_RCV_ACTIVE192_HIGH_CHOICE (1u)

#define INVERTERS_INV_R_RCV_ACTIVE193_LOW_CHOICE (0u)
#define INVERTERS_INV_R_RCV_ACTIVE193_HIGH_CHOICE (1u)

/* Indexes */
#define INVERTERS_INV_L_SEND_INDEX 0
#define INVERTERS_INV_L_RCV_INDEX 1
#define INVERTERS_INV_R_SEND_INDEX 2
#define INVERTERS_INV_R_RCV_INDEX 3


#define inverters_MESSAGE_COUNT 4

#ifndef CANLIB_DEVICE_T
#define CANLIB_DEVICE_T
typedef struct {
    void* message;
    void* _converted;
    void* _raw;
    int _size_raw;
    int _size_converted;
} device_t;
void device_init(device_t *device);
void device_preallocate(device_t *device, int bytes);
void device_free(device_t *device);
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size);
#endif // CANLIB_DEVICE_T

#ifdef CANLIB_DEVICE_IMPLEMENTATION
#undef CANLIB_DEVICE_IMPLEMENTATION
void device_init(device_t *device) {
    device->message = NULL;
    device->_converted = NULL;
    device->_raw = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_preallocate(device_t *device, int bytes){
    if(device->_size_raw > 0)
        free(device->_raw);
    if(device->_size_converted > 0)
        free(device->_converted);
    device->_raw = malloc(bytes);
    device->_converted = malloc(bytes);
    device->_size_converted = device->_size_raw = bytes;
}
void device_free(device_t *device) {
    free(device->_raw);
    free(device->_converted);
    device->message = NULL;
    device->_raw = NULL;
    device->_converted = NULL;
    device->_size_raw = 0;
    device->_size_converted = 0;
}
void device_set_address(device_t *device, void* raw, size_t raw_size, void *converted, size_t converted_size) {
    device->_raw = raw;
    device->_converted = converted;
    device->_size_raw = raw_size;
    device->_size_converted = converted_size;
}
#endif // CANLIB_DEVICE_IMPLEMENTATION

void inverters_devices_deserialize_from_id(
    device_t* device,
    uint16_t message_id,
    uint8_t* data
#ifdef CANLIB_TIMESTAMP
    , uint64_t timestamp
#endif // CANLIB_TIMESTAMP
);

int inverters_message_name_from_id(uint16_t id, char* buffer);
int inverters_index_from_id(uint16_t id);
int inverters_id_from_index(int index);

typedef enum {
	inverters_inv_l_send_send_mux_ID_04_USER_Key = 4,
	inverters_inv_l_send_send_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_l_send_send_mux_ID_07_FU_T_dc = 7,
	inverters_inv_l_send_send_mux_ID_08_FU_V_dc = 8,
	inverters_inv_l_send_send_mux_ID_09_FU_Special = 9,
	inverters_inv_l_send_send_mux_ID_0A_FU_U_min = 10,
	inverters_inv_l_send_send_mux_ID_0B_FU_F_min = 11,
	inverters_inv_l_send_send_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_l_send_send_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_l_send_send_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_l_send_send_mux_ID_0F_FU_Extra = 15,
	inverters_inv_l_send_send_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_l_send_send_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_l_send_send_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_l_send_send_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_l_send_send_mux_ID_15_Oszi_Source = 21,
	inverters_inv_l_send_send_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_l_send_send_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_l_send_send_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_l_send_send_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_l_send_send_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_l_send_send_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_l_send_send_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_l_send_send_mux_ID_21_Id_setdig = 33,
	inverters_inv_l_send_send_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_l_send_send_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_l_send_send_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_l_send_send_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_l_send_send_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_l_send_send_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_l_send_send_mux_ID_31_N_setdig = 49,
	inverters_inv_l_send_send_mux_ID_34_N_Lim = 52,
	inverters_inv_l_send_send_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_l_send_send_mux_ID_36_CommandSource = 54,
	inverters_inv_l_send_send_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_l_send_send_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_l_send_send_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_l_send_send_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_l_send_send_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_l_send_send_mux_ID_3D_Read_Cmd = 61,
	inverters_inv_l_send_send_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_l_send_send_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_l_send_send_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_l_send_send_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_l_send_send_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_l_send_send_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_l_send_send_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_l_send_send_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_l_send_send_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_l_send_send_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_l_send_send_mux_ID_5A_Device_Options = 90,
	inverters_inv_l_send_send_mux_ID_5B_PID_n_Kacc = 91,
	inverters_inv_l_send_send_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_l_send_send_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_l_send_send_mux_ID_62_SerialNumber = 98,
	inverters_inv_l_send_send_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_l_send_send_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_l_send_send_mux_ID_67_Device_Type = 103,
	inverters_inv_l_send_send_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_l_send_send_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_l_send_send_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_l_send_send_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_l_send_send_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_l_send_send_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_l_send_send_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_l_send_send_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_l_send_send_mux_ID_73_CAN_NBT = 115,
	inverters_inv_l_send_send_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_l_send_send_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_l_send_send_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_l_send_send_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_l_send_send_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_l_send_send_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_l_send_send_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_l_send_send_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_l_send_send_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_l_send_send_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_l_send_send_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_l_send_send_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_l_send_send_mux_ID_85_Function_Special = 133,
	inverters_inv_l_send_send_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_l_send_send_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_l_send_send_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_l_send_send_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_l_send_send_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_l_send_send_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_l_send_send_mux_ID_90_M_setdig = 144,
	inverters_inv_l_send_send_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_l_send_send_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_l_send_send_mux_ID_A4_Motor_Options = 164,
	inverters_inv_l_send_send_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_l_send_send_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_l_send_send_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_l_send_send_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_l_send_send_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_l_send_send_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_l_send_send_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_l_send_send_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_l_send_send_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_l_send_send_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_l_send_send_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_l_send_send_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_l_send_send_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_l_send_send_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_l_send_send_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_l_send_send_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_l_send_send_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_l_send_send_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_l_send_send_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_l_send_send_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_l_send_send_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_l_send_send_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_l_send_send_mux_ID_C6_I_device = 198,
	inverters_inv_l_send_send_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_l_send_send_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_l_send_send_mux_ID_C9_CurrentControl_xKp = 201,
	inverters_inv_l_send_send_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_l_send_send_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_l_send_send_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_l_send_send_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_l_send_send_mux_ID_D1_Var_1 = 209,
	inverters_inv_l_send_send_mux_ID_D2_Var_2 = 210,
	inverters_inv_l_send_send_mux_ID_D3_Var_3 = 211,
	inverters_inv_l_send_send_mux_ID_D4_Var_4 = 212,
	inverters_inv_l_send_send_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_l_send_send_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_l_send_send_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_l_send_send_mux_ID_EE_V_Shunt = 238,
	inverters_inv_l_send_send_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_l_send_send_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_l_send_send_mux_ID_F8_Axis_Label = 248,
} inverters_inv_l_send_send_mux;

typedef enum {
	inverters_inv_l_send_read_id_05h_Motor_F_nom = 5,
	inverters_inv_l_send_read_id_06h_Motor_V_nom = 6,
	inverters_inv_l_send_read_id_07h_FU_T_dc = 7,
	inverters_inv_l_send_read_id_08h_FU_V_dc = 8,
	inverters_inv_l_send_read_id_09h_FU_Special = 9,
	inverters_inv_l_send_read_id_0Ah_FU_U_min = 10,
	inverters_inv_l_send_read_id_0Bh_FU_F_min = 11,
	inverters_inv_l_send_read_id_0Ch_FU_V_corner = 12,
	inverters_inv_l_send_read_id_0Dh_FU_F_corner = 13,
	inverters_inv_l_send_read_id_0Eh_Motor_Cos_Phi = 14,
	inverters_inv_l_send_read_id_0Fh_FU_Extra = 15,
	inverters_inv_l_send_read_id_10h_Oszi_Channel = 16,
	inverters_inv_l_send_read_id_11h_Control_Status = 17,
	inverters_inv_l_send_read_id_12h_Oszi_Triger_Level = 18,
	inverters_inv_l_send_read_id_13h_Oszi_Triger_Edge = 19,
	inverters_inv_l_send_read_id_14h_Oszi_Triger_Source = 20,
	inverters_inv_l_send_read_id_15h_Oszi_Source = 21,
	inverters_inv_l_send_read_id_16h_Oszi_Skip = 22,
	inverters_inv_l_send_read_id_17h_Oszi_Read_cmd = 23,
	inverters_inv_l_send_read_id_18h_Oszi_Run_cmd = 24,
	inverters_inv_l_send_read_id_19h_PWM_Enum = 25,
	inverters_inv_l_send_read_id_1Ah_Calib_Ref_Value = 26,
	inverters_inv_l_send_read_id_1Bh_FW_Nr = 27,
	inverters_inv_l_send_read_id_1Ch_I_Kp = 28,
	inverters_inv_l_send_read_id_1Dh_I_Ti = 29,
	inverters_inv_l_send_read_id_1Eh_Cutoffdig = 30,
	inverters_inv_l_send_read_id_1Fh_I3_Offset = 31,
	inverters_inv_l_send_read_id_20h_I_Actual = 32,
	inverters_inv_l_send_read_id_21h_Id_setdig = 33,
	inverters_inv_l_send_read_id_22h_I_cmd_ramp = 34,
	inverters_inv_l_send_read_id_23h_Id_Ref = 35,
	inverters_inv_l_send_read_id_24h_I_Max_Inuse = 36,
	inverters_inv_l_send_read_id_25h_I_Delta_Ramp = 37,
	inverters_inv_l_send_read_id_26h_I_cmd = 38,
	inverters_inv_l_send_read_id_27h_Iq_Actual = 39,
	inverters_inv_l_send_read_id_28h_Id_Actual = 40,
	inverters_inv_l_send_read_id_29h_Vq_Output = 41,
	inverters_inv_l_send_read_id_2Ah_Vd_Output = 42,
	inverters_inv_l_send_read_id_2Bh_I_TiM = 43,
	inverters_inv_l_send_read_id_2Ch_n_Kp = 44,
	inverters_inv_l_send_read_id_2Dh_n_Ti = 45,
	inverters_inv_l_send_read_id_2Eh_n_Td = 46,
	inverters_inv_l_send_read_id_2Fh_Ain_in_1_OffsScale = 47,
	inverters_inv_l_send_read_id_30h_N_Actual = 48,
	inverters_inv_l_send_read_id_31h_N_setdig = 49,
	inverters_inv_l_send_read_id_32h_N_cmd_ramp = 50,
	inverters_inv_l_send_read_id_33h_N_Error = 51,
	inverters_inv_l_send_read_id_34h_N_Lim = 52,
	inverters_inv_l_send_read_id_35h_Acc_Ramps = 53,
	inverters_inv_l_send_read_id_36h_CommandSource = 54,
	inverters_inv_l_send_read_id_37h_DZR_Sequencer_Value = 55,
	inverters_inv_l_send_read_id_38h_Iq_Error = 56,
	inverters_inv_l_send_read_id_39h_Id_Error = 57,
	inverters_inv_l_send_read_id_3Bh_n_TiM = 59,
	inverters_inv_l_send_read_id_3Ch_I_Derating_N_perc = 60,
	inverters_inv_l_send_read_id_3Eh_N_Lim_minus = 62,
	inverters_inv_l_send_read_id_3Fh_N_Lim_plus = 63,
	inverters_inv_l_send_read_id_40h_Status_Map = 64,
	inverters_inv_l_send_read_id_41h_Incr_Delta = 65,
	inverters_inv_l_send_read_id_42h_MotorPosition_Mech = 66,
	inverters_inv_l_send_read_id_43h_MotorPosition_Elec = 67,
	inverters_inv_l_send_read_id_44h_FeedBack_Offset_Angle = 68,
	inverters_inv_l_send_read_id_45h_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_l_send_read_id_46h_I_lim_dig_perc = 70,
	inverters_inv_l_send_read_id_48h_I_Limit_Inuse = 72,
	inverters_inv_l_send_read_id_49h_T_Motor = 73,
	inverters_inv_l_send_read_id_4Ah_T_Igbt = 74,
	inverters_inv_l_send_read_id_4Bh_T_Air_Inside = 75,
	inverters_inv_l_send_read_id_4Ch_I_Derating_TE = 76,
	inverters_inv_l_send_read_id_4Dh_Motor_I_max_eff = 77,
	inverters_inv_l_send_read_id_4Eh_Motor_I_nom_eff = 78,
	inverters_inv_l_send_read_id_4Fh_Motor_Pole = 79,
	inverters_inv_l_send_read_id_50h_Ain_in_1_Cutoff = 80,
	inverters_inv_l_send_read_id_51h_Kern_Mode_State = 81,
	inverters_inv_l_send_read_id_52h_Status_Mask = 82,
	inverters_inv_l_send_read_id_53h_Ain_in_2_Cutoff = 83,
	inverters_inv_l_send_read_id_54h_I1_Actual = 84,
	inverters_inv_l_send_read_id_55h_I2_Actual = 85,
	inverters_inv_l_send_read_id_56h_I3_Actual = 86,
	inverters_inv_l_send_read_id_57h_I_Limit_Inuse_ramp = 87,
	inverters_inv_l_send_read_id_58h_I_Derating_TD = 88,
	inverters_inv_l_send_read_id_59h_Motor_Nom = 89,
	inverters_inv_l_send_read_id_5Ah_Device_Options = 90,
	inverters_inv_l_send_read_id_5Bh_SpeedControl_Kacc = 91,
	inverters_inv_l_send_read_id_5Ch_Rotor_Signals = 92,
	inverters_inv_l_send_read_id_5Dh_N_cmd = 93,
	inverters_inv_l_send_read_id_5Eh_Speed_Filter = 94,
	inverters_inv_l_send_read_id_5Fh_I_Actual_Filt = 95,
	inverters_inv_l_send_read_id_60h_Ain_in_X_Filter = 96,
	inverters_inv_l_send_read_id_61h_Ixt_Monitor = 97,
	inverters_inv_l_send_read_id_62h_SerialNumber = 98,
	inverters_inv_l_send_read_id_63h_FPGA_Status = 99,
	inverters_inv_l_send_read_id_64h_Device_Mains = 100,
	inverters_inv_l_send_read_id_65h_Regen_P_R = 101,
	inverters_inv_l_send_read_id_67h_Device_Type = 103,
	inverters_inv_l_send_read_id_68h_CAN_ID_Rx = 104,
	inverters_inv_l_send_read_id_69h_CAN_ID_Tx = 105,
	inverters_inv_l_send_read_id_6Ah_Pos_Kp = 106,
	inverters_inv_l_send_read_id_6Bh_Pos_Ti = 107,
	inverters_inv_l_send_read_id_6Ch_Pos_Td = 108,
	inverters_inv_l_send_read_id_6Dh_Pos_Actual = 109,
	inverters_inv_l_send_read_id_6Eh_Pos_Dest = 110,
	inverters_inv_l_send_read_id_6Fh_Pos_Actual_2 = 111,
	inverters_inv_l_send_read_id_70h_Pos_Err = 112,
	inverters_inv_l_send_read_id_71h_Pos_TiM = 113,
	inverters_inv_l_send_read_id_72h_Pos_OffsetRef = 114,
	inverters_inv_l_send_read_id_73h_CAN_NBT = 115,
	inverters_inv_l_send_read_id_74h_Pos_Zero_Capture = 116,
	inverters_inv_l_send_read_id_75h_Pos_Ref_Reso_Edge = 117,
	inverters_inv_l_send_read_id_76h_Pos_Speed_1 = 118,
	inverters_inv_l_send_read_id_77h_Pos_Speed_2 = 119,
	inverters_inv_l_send_read_id_78h_Pos_Ref_Start = 120,
	inverters_inv_l_send_read_id_79h_Pos_Tol_Win = 121,
	inverters_inv_l_send_read_id_7Ah_Pos_Preset = 122,
	inverters_inv_l_send_read_id_7Bh_Pos_Zero_Offset = 123,
	inverters_inv_l_send_read_id_7Ch_Pos_ND_Scale = 124,
	inverters_inv_l_send_read_id_7Dh_Pos_ND_Offset = 125,
	inverters_inv_l_send_read_id_7Eh_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_l_send_read_id_7Fh_Pos_Offset_Slack = 127,
	inverters_inv_l_send_read_id_80h_Pos_Diff_Slack = 128,
	inverters_inv_l_send_read_id_83h_Func_Para_Read = 131,
	inverters_inv_l_send_read_id_84h_Func_Para_Write = 132,
	inverters_inv_l_send_read_id_85h_Func_Special = 133,
	inverters_inv_l_send_read_id_88h_CAN_ID_2_Rx = 136,
	inverters_inv_l_send_read_id_89h_CAN_ID_2_Tx = 137,
	inverters_inv_l_send_read_id_8Ah_Vout = 138,
	inverters_inv_l_send_read_id_8Bh_V_Ref = 139,
	inverters_inv_l_send_read_id_8Ch_V_Kp = 140,
	inverters_inv_l_send_read_id_8Dh_V_Ti = 141,
	inverters_inv_l_send_read_id_8Eh_Clear_Error_List = 142,
	inverters_inv_l_send_read_id_8Fh_ErrorWarning_Map = 143,
	inverters_inv_l_send_read_id_90h_M_setdig = 144,
	inverters_inv_l_send_read_id_91h_Pos_cmd_int = 145,
	inverters_inv_l_send_read_id_92h_CAN_Error_BusOff_cntr = 146,
	inverters_inv_l_send_read_id_93h_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_l_send_read_id_94h_CAN_Error_RxMsgLost_cntr = 148,
	inverters_inv_l_send_read_id_95h_CAN_Error_NoAck_cntr = 149,
	inverters_inv_l_send_read_id_96h_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_l_send_read_id_97h_CAN_Error_Bit_cntr = 151,
	inverters_inv_l_send_read_id_99h_Info_Timer_Diff = 153,
	inverters_inv_l_send_read_id_9Ah_Temp_DEBUG = 154,
	inverters_inv_l_send_read_id_A0h_Mout = 160,
	inverters_inv_l_send_read_id_A1h_Ballast_cntr = 161,
	inverters_inv_l_send_read_id_A2h_I_Derating_TM = 162,
	inverters_inv_l_send_read_id_A3h_M_Temp = 163,
	inverters_inv_l_send_read_id_A4h_Motor_Options = 164,
	inverters_inv_l_send_read_id_A5h_DC_Bus_MinMax_Lim = 165,
	inverters_inv_l_send_read_id_A6h_FB_IncPerRot = 166,
	inverters_inv_l_send_read_id_A7h_FB_Pole = 167,
	inverters_inv_l_send_read_id_A8h_N_Actual_Filt = 168,
	inverters_inv_l_send_read_id_A9h_I3_ADC = 169,
	inverters_inv_l_send_read_id_AAh_I2_ADC = 170,
	inverters_inv_l_send_read_id_ABh_Logic_Freq = 171,
	inverters_inv_l_send_read_id_ACh_PWM_1_56 = 172,
	inverters_inv_l_send_read_id_ADh_PWM_2_34 = 173,
	inverters_inv_l_send_read_id_AEh_PWM_3_12 = 174,
	inverters_inv_l_send_read_id_AFh_Timer_Delta = 175,
	inverters_inv_l_send_read_id_B1h_Motor_Lsq = 177,
	inverters_inv_l_send_read_id_B2h_Id_Nom = 178,
	inverters_inv_l_send_read_id_B3h_Motor_Lm = 179,
	inverters_inv_l_send_read_id_B4h_Motor_Rr = 180,
	inverters_inv_l_send_read_id_B5h_Id_Min = 181,
	inverters_inv_l_send_read_id_B6h_Motor_Tr = 182,
	inverters_inv_l_send_read_id_B8h_Ptr_1_DEBUG = 184,
	inverters_inv_l_send_read_id_BAh_Ptr_2_DEBUG = 186,
	inverters_inv_l_send_read_id_BBh_Motor_Lsd = 187,
	inverters_inv_l_send_read_id_BCh_Motor_Rs = 188,
	inverters_inv_l_send_read_id_BDh_Motor_Ts = 189,
	inverters_inv_l_send_read_id_BEh_def_END_1 = 190,
	inverters_inv_l_send_read_id_BFh_def_END_2 = 191,
	inverters_inv_l_send_read_id_C0h_def_DIN_1 = 192,
	inverters_inv_l_send_read_id_C1h_def_DIN_2 = 193,
	inverters_inv_l_send_read_id_C2h_def_OUT_1 = 194,
	inverters_inv_l_send_read_id_C3h_def_OUT_2 = 195,
	inverters_inv_l_send_read_id_C4h_I_max_pk = 196,
	inverters_inv_l_send_read_id_C5h_I_con_eff = 197,
	inverters_inv_l_send_read_id_C6h_I_device = 198,
	inverters_inv_l_send_read_id_C7h_RLim_MRcp_Ramp = 199,
	inverters_inv_l_send_read_id_C8h_Nmax100perc = 200,
	inverters_inv_l_send_read_id_C9h_I_xKp = 201,
	inverters_inv_l_send_read_id_CAh_Bat_Opr_Limits = 202,
	inverters_inv_l_send_read_id_CBh_I_Kf = 203,
	inverters_inv_l_send_read_id_CCh_Car_Mode_Status = 204,
	inverters_inv_l_send_read_id_CDh_Car_Mode_Config = 205,
	inverters_inv_l_send_read_id_CEh_N_Rpm_MaxInt = 206,
	inverters_inv_l_send_read_id_D0h_CAN_Timeout = 208,
	inverters_inv_l_send_read_id_D1h_Var_1 = 209,
	inverters_inv_l_send_read_id_D2h_Var_2 = 210,
	inverters_inv_l_send_read_id_D3h_Var_3 = 211,
	inverters_inv_l_send_read_id_D4h_Var_4 = 212,
	inverters_inv_l_send_read_id_D5h_Ain_in_1 = 213,
	inverters_inv_l_send_read_id_D6h_Ain_in_2 = 214,
	inverters_inv_l_send_read_id_D7h_Ain_in_2_OffsScale = 215,
	inverters_inv_l_send_read_id_D8h_LogicReadBitsIN_OUT = 216,
	inverters_inv_l_send_read_id_D9h_I_200perc = 217,
	inverters_inv_l_send_read_id_DAh_def_OUT_3 = 218,
	inverters_inv_l_send_read_id_DBh_def_OUT_4 = 219,
	inverters_inv_l_send_read_id_DCh_DAC_Source_ID = 220,
	inverters_inv_l_send_read_id_DEh_DS_DOUT_3 = 222,
	inverters_inv_l_send_read_id_DFh_DS_DOUT_4 = 223,
	inverters_inv_l_send_read_id_E0h_DS_DOUT_1 = 224,
	inverters_inv_l_send_read_id_E1h_DS_DOUT_2 = 225,
	inverters_inv_l_send_read_id_E2h_DS_Rdy_BTB = 226,
	inverters_inv_l_send_read_id_E3h_DS_GO = 227,
	inverters_inv_l_send_read_id_E4h_DS_END_1 = 228,
	inverters_inv_l_send_read_id_E5h_DS_END_2 = 229,
	inverters_inv_l_send_read_id_E6h_DS_DIN_1 = 230,
	inverters_inv_l_send_read_id_E7h_DS_DIN_2 = 231,
	inverters_inv_l_send_read_id_E8h_DS_RUN = 232,
	inverters_inv_l_send_read_id_E9h_DS_I_Fault = 233,
	inverters_inv_l_send_read_id_EBh_Vdc_Bus = 235,
	inverters_inv_l_send_read_id_ECh_DS_FB_LossOfSignal = 236,
	inverters_inv_l_send_read_id_EDh_Dec_Ramps = 237,
	inverters_inv_l_send_read_id_EEh_V_Shunt = 238,
	inverters_inv_l_send_read_id_EFh_DS_NoHWFault = 239,
	inverters_inv_l_send_read_id_F0h_T_peak = 240,
	inverters_inv_l_send_read_id_F1h_Brake_Delay = 241,
	inverters_inv_l_send_read_id_F2h_DS_Brake = 242,
	inverters_inv_l_send_read_id_F3h_DS_Icns = 243,
	inverters_inv_l_send_read_id_F4h_DS_PosTolerance = 244,
	inverters_inv_l_send_read_id_F5h_DS_LessN0 = 245,
	inverters_inv_l_send_read_id_F6h_Inverter_Power = 246,
	inverters_inv_l_send_read_id_F7h_Inverter_Work = 247,
	inverters_inv_l_send_read_id_F8h_Axis = 248,
	inverters_inv_l_send_read_id_FBh_Ain_in_1_Calc = 251,
	inverters_inv_l_send_read_id_FCh_Ain_in_2_Calc = 252,
	inverters_inv_l_send_read_id_66h_DC_Bus_Voltage = 102,
	inverters_inv_l_send_read_id_3Ah_M_cmd_ramp = 58,
	inverters_inv_l_send_read_id_FEh_Subv_SVNRev_Nr = 254,
} inverters_inv_l_send_read_id;

typedef enum {
	inverters_inv_l_send_devicetype_Homemade = 0,
	inverters_inv_l_send_devicetype_DS205_2ph_230V = 14,
	inverters_inv_l_send_devicetype_DS403_2ph_400V = 15,
	inverters_inv_l_send_devicetype_DS205_neu_230V = 16,
	inverters_inv_l_send_devicetype_DS403_neu_400V = 17,
	inverters_inv_l_send_devicetype_DS405 = 19,
	inverters_inv_l_send_devicetype_DS412 = 21,
	inverters_inv_l_send_devicetype_DS420 = 23,
	inverters_inv_l_send_devicetype_DS450 = 25,
	inverters_inv_l_send_devicetype_DS475 = 27,
	inverters_inv_l_send_devicetype_DS4100 = 29,
	inverters_inv_l_send_devicetype_DS4820 = 48,
	inverters_inv_l_send_devicetype_DS451 = 49,
	inverters_inv_l_send_devicetype_DS476 = 51,
	inverters_inv_l_send_devicetype_DS8020 = 56,
	inverters_inv_l_send_devicetype_DPC440 = 60,
	inverters_inv_l_send_devicetype_DPC460 = 65,
	inverters_inv_l_send_devicetype_DPC460_DC1Q_3P = 67,
	inverters_inv_l_send_devicetype_BAMO_160_60 = 81,
	inverters_inv_l_send_devicetype_BAMO_160_120 = 83,
	inverters_inv_l_send_devicetype_BAMO_160_180 = 85,
	inverters_inv_l_send_devicetype_BAMO_360_60 = 87,
	inverters_inv_l_send_devicetype_BAMO_360_120 = 89,
	inverters_inv_l_send_devicetype_BAMO_360_180 = 91,
	inverters_inv_l_send_devicetype_BAMO_360_240 = 93,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_62_80 = 112,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_62_80 = 113,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_62_120 = 114,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_62_120 = 115,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_62_250 = 116,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_62_250 = 117,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_62_350 = 118,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_62_350 = 119,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_62_450 = 120,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_62_450 = 121,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_160_50 = 122,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_160_50 = 123,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_160_100 = 124,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_160_100 = 125,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_3_160_200 = 126,
	inverters_inv_l_send_devicetype_BAMOBIL_D3_2_160_200 = 127,
	inverters_inv_l_send_devicetype_Bamocar_700_160 = 192,
	inverters_inv_l_send_devicetype_Bamocar_700_100 = 193,
	inverters_inv_l_send_devicetype_Bamocar_700_900 = 194,
	inverters_inv_l_send_devicetype_Bamocar_700_200_DC = 203,
	inverters_inv_l_send_devicetype_Bamocar_400_400 = 204,
	inverters_inv_l_send_devicetype_Bamocar_700_400 = 205,
	inverters_inv_l_send_devicetype_Bamocar_400_250 = 206,
	inverters_inv_l_send_devicetype_Koepfer_V1_700_400 = 240,
	inverters_inv_l_send_devicetype_Koepfer_V2_700_400 = 241,
} inverters_inv_l_send_devicetype;

typedef enum {
	inverters_inv_l_send_can_nbt_1000_kbps = 16386,
	inverters_inv_l_send_can_nbt_500_kbps = 16421,
	inverters_inv_l_send_can_nbt_625_kbps = 16404,
	inverters_inv_l_send_can_nbt_250_kbps = 16476,
	inverters_inv_l_send_can_nbt_100_kbps = 17445,
} inverters_inv_l_send_can_nbt;

typedef enum {
	inverters_inv_l_send_mo_feedback_1_Rot_Enc_TTL = 0,
	inverters_inv_l_send_mo_feedback_1_Resolver = 1,
	inverters_inv_l_send_mo_feedback_1_Abs_Enc_SC = 2,
	inverters_inv_l_send_mo_feedback_1_Rot_Tacho = 3,
	inverters_inv_l_send_mo_feedback_1_Rot = 4,
	inverters_inv_l_send_mo_feedback_1_DC_Tacho = 5,
	inverters_inv_l_send_mo_feedback_1_DC_Arm = 6,
	inverters_inv_l_send_mo_feedback_1_BL_Arm = 7,
	inverters_inv_l_send_mo_feedback_1_Enc_TTL = 8,
	inverters_inv_l_send_mo_feedback_1_Enc_SC = 9,
	inverters_inv_l_send_mo_feedback_1_Abs_SC = 10,
	inverters_inv_l_send_mo_feedback_1_DC_Arm_Vir = 11,
	inverters_inv_l_send_mo_feedback_1_SLS = 12,
	inverters_inv_l_send_mo_feedback_1_SLS_SMO = 13,
	inverters_inv_l_send_mo_feedback_1_SLS_Usens = 14,
	inverters_inv_l_send_mo_feedback_1_AnaIn1_calc = 15,
	inverters_inv_l_send_mo_feedback_1_AnaIn2_calc = 16,
	inverters_inv_l_send_mo_feedback_1_Panasonic = 17,
	inverters_inv_l_send_mo_feedback_1_DC_Bus = 18,
} inverters_inv_l_send_mo_feedback_1;

typedef enum {
	inverters_inv_l_send_def_end_1__Off_ = 0,
	inverters_inv_l_send_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_send_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_send_def_end_1_Ref_Plus = 3,
	inverters_inv_l_send_def_end_1_Limit_Plus = 4,
	inverters_inv_l_send_def_end_1_Limit_Minus = 5,
	inverters_inv_l_send_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_send_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_l_send_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_l_send_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_l_send_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_send_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_send_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_l_send_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_send_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_send_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_send_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_send_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_send_def_end_1_I_limit_dig_ = 18,
	inverters_inv_l_send_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_send_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_send_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_send_def_end_1_Handwheel = 22,
	inverters_inv_l_send_def_end_1_Brake_Car = 23,
	inverters_inv_l_send_def_end_1_Recup_Disabled = 24,
	inverters_inv_l_send_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_send_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_send_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_send_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_send_def_end_1;

typedef enum {
	inverters_inv_l_send_def_end_2__Off_ = 0,
	inverters_inv_l_send_def_end_2_Ref_and_Limit_Plus = 1,
	inverters_inv_l_send_def_end_2_Ref_and_Limit_Minus = 2,
	inverters_inv_l_send_def_end_2_Ref_Plus = 3,
	inverters_inv_l_send_def_end_2_Limit_Plus = 4,
	inverters_inv_l_send_def_end_2_Limit_Minus = 5,
	inverters_inv_l_send_def_end_2_Limit_Plus_and_Minus = 6,
	inverters_inv_l_send_def_end_2_Cancel_Error_s_ = 7,
	inverters_inv_l_send_def_end_2__Start_Ref_Drive = 8,
	inverters_inv_l_send_def_end_2_Speed_Ramp_0 = 9,
	inverters_inv_l_send_def_end_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_send_def_end_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_send_def_end_2_N_cmd_Reverse = 12,
	inverters_inv_l_send_def_end_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_send_def_end_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_send_def_end_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_send_def_end_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_send_def_end_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_send_def_end_2_I_limit_dig_ = 18,
	inverters_inv_l_send_def_end_2_N_clip_neg_pos_ = 19,
	inverters_inv_l_send_def_end_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_send_def_end_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_send_def_end_2_Handwheel = 22,
	inverters_inv_l_send_def_end_2_Brake_Car = 23,
	inverters_inv_l_send_def_end_2_Recup_Disabled = 24,
	inverters_inv_l_send_def_end_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_send_def_end_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_send_def_end_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_send_def_end_2_Brake_Car_Nr2 = 28,
} inverters_inv_l_send_def_end_2;

typedef enum {
	inverters_inv_l_send_def_din_1__Off_ = 0,
	inverters_inv_l_send_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_send_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_send_def_din_1_Ref_Plus = 3,
	inverters_inv_l_send_def_din_1_Limit_Plus = 4,
	inverters_inv_l_send_def_din_1_Limit_Minus = 5,
	inverters_inv_l_send_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_send_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_l_send_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_l_send_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_l_send_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_send_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_send_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_l_send_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_send_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_send_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_send_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_send_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_send_def_din_1_I_limit_dig_ = 18,
	inverters_inv_l_send_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_send_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_send_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_send_def_din_1_Handwheel = 22,
	inverters_inv_l_send_def_din_1_Brake_Car = 23,
	inverters_inv_l_send_def_din_1_Recup_Disabled = 24,
	inverters_inv_l_send_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_send_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_send_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_send_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_send_def_din_1;

typedef enum {
	inverters_inv_l_send_def_din_2__Off_ = 0,
	inverters_inv_l_send_def_din_2_Ref_and_Limit_Plus = 1,
	inverters_inv_l_send_def_din_2_Ref_and_Limit_Minus = 2,
	inverters_inv_l_send_def_din_2_Ref_Plus = 3,
	inverters_inv_l_send_def_din_2_Limit_Plus = 4,
	inverters_inv_l_send_def_din_2_Limit_Minus = 5,
	inverters_inv_l_send_def_din_2_Limit_Plus_and_Minus = 6,
	inverters_inv_l_send_def_din_2_Cancel_Error_s_ = 7,
	inverters_inv_l_send_def_din_2__Start_Ref_Drive = 8,
	inverters_inv_l_send_def_din_2_Speed_Ramp_0 = 9,
	inverters_inv_l_send_def_din_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_send_def_din_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_send_def_din_2_N_cmd_Reverse = 12,
	inverters_inv_l_send_def_din_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_send_def_din_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_send_def_din_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_send_def_din_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_send_def_din_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_send_def_din_2_I_limit_dig_ = 18,
	inverters_inv_l_send_def_din_2_N_clip_neg_pos_ = 19,
	inverters_inv_l_send_def_din_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_send_def_din_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_send_def_din_2_Handwheel = 22,
	inverters_inv_l_send_def_din_2_Brake_Car = 23,
	inverters_inv_l_send_def_din_2_Recup_Disabled = 24,
	inverters_inv_l_send_def_din_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_send_def_din_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_send_def_din_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_send_def_din_2_Brake_Car_Nr2 = 28,
} inverters_inv_l_send_def_din_2;

typedef enum {
	inverters_inv_l_send_mo_feedback_2__ = 0,
	inverters_inv_l_send_mo_feedback_2_Enc_Position = 1,
	inverters_inv_l_send_mo_feedback_2_Enc_Info = 2,
	inverters_inv_l_send_mo_feedback_2_Enc_Hand_ = 3,
	inverters_inv_l_send_mo_feedback_2_SSI = 4,
} inverters_inv_l_send_mo_feedback_2;

typedef enum {
	inverters_inv_l_send_ret_interval_Stop = 255,
	inverters_inv_l_send_ret_interval_Single = 0,
} inverters_inv_l_send_ret_interval;

typedef enum {
	inverters_inv_l_send_mo_sc1_reso_14_bit = 1,
	inverters_inv_l_send_mo_sc1_reso_12_bit = 2,
	inverters_inv_l_send_mo_sc1_reso_10_bit = 3,
} inverters_inv_l_send_mo_sc1_reso;

typedef enum {
	inverters_inv_l_send_mo_sc2_reso_14_bit = 1,
	inverters_inv_l_send_mo_sc2_reso_12_bit = 2,
	inverters_inv_l_send_mo_sc2_reso_10_bit = 3,
} inverters_inv_l_send_mo_sc2_reso;

typedef enum {
	inverters_inv_l_send_active190_Low = 0,
	inverters_inv_l_send_active190_High = 1,
} inverters_inv_l_send_active190;

typedef enum {
	inverters_inv_l_send_active191_Low = 0,
	inverters_inv_l_send_active191_High = 1,
} inverters_inv_l_send_active191;

typedef enum {
	inverters_inv_l_send_active192_Low = 0,
	inverters_inv_l_send_active192_High = 1,
} inverters_inv_l_send_active192;

typedef enum {
	inverters_inv_l_send_active193_Low = 0,
	inverters_inv_l_send_active193_High = 1,
} inverters_inv_l_send_active193;

typedef enum {
	inverters_inv_l_rcv_rcv_mux_ID_30_N_Actual = 48,
	inverters_inv_l_rcv_rcv_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_l_rcv_rcv_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_l_rcv_rcv_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_l_rcv_rcv_mux_ID_A8_N_Actual_Filt = 168,
	inverters_inv_l_rcv_rcv_mux_ID_1B_FW_Nr = 27,
	inverters_inv_l_rcv_rcv_mux_ID_67_Device_Type = 103,
	inverters_inv_l_rcv_rcv_mux_ID_62_SerialNumber = 98,
	inverters_inv_l_rcv_rcv_mux_ID_F8_Axis_Label = 248,
	inverters_inv_l_rcv_rcv_mux_ID_C6_I_device = 198,
	inverters_inv_l_rcv_rcv_mux_ID_EE_V_Shunt = 238,
	inverters_inv_l_rcv_rcv_mux_ID_D9_I_200perc = 217,
	inverters_inv_l_rcv_rcv_mux_ID_5A_Device_Options = 90,
	inverters_inv_l_rcv_rcv_mux_ID_40_Status_Map = 64,
	inverters_inv_l_rcv_rcv_mux_ID_8F_ErrorWarning_Map = 143,
	inverters_inv_l_rcv_rcv_mux_ID_D8_LogicReadBitsIN_OUT = 216,
	inverters_inv_l_rcv_rcv_mux_ID_D5_Ain_in_1 = 213,
	inverters_inv_l_rcv_rcv_mux_ID_D6_Ain_in_2 = 214,
	inverters_inv_l_rcv_rcv_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_l_rcv_rcv_mux_ID_31_N_setdig = 49,
	inverters_inv_l_rcv_rcv_mux_ID_5D_N_cmd = 93,
	inverters_inv_l_rcv_rcv_mux_ID_32_N_cmd_ramp = 50,
	inverters_inv_l_rcv_rcv_mux_ID_34_N_Lim = 52,
	inverters_inv_l_rcv_rcv_mux_ID_33_N_Error = 51,
	inverters_inv_l_rcv_rcv_mux_ID_90_M_setdig = 144,
	inverters_inv_l_rcv_rcv_mux_ID_21_Id_setdig = 33,
	inverters_inv_l_rcv_rcv_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_l_rcv_rcv_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_l_rcv_rcv_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_l_rcv_rcv_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_l_rcv_rcv_mux_ID_48_I_Limit_Inuse = 72,
	inverters_inv_l_rcv_rcv_mux_ID_26_I_cmd = 38,
	inverters_inv_l_rcv_rcv_mux_ID_22_I_cmd_ramp = 34,
	inverters_inv_l_rcv_rcv_mux_ID_20_I_Actual = 32,
	inverters_inv_l_rcv_rcv_mux_ID_5F_I_Actual_Filt = 95,
	inverters_inv_l_rcv_rcv_mux_ID_27_Iq_Actual = 39,
	inverters_inv_l_rcv_rcv_mux_ID_28_Id_Actual = 40,
	inverters_inv_l_rcv_rcv_mux_ID_38_Iq_Error = 56,
	inverters_inv_l_rcv_rcv_mux_ID_39_Id_Error = 57,
	inverters_inv_l_rcv_rcv_mux_ID_54_I1_Actual = 84,
	inverters_inv_l_rcv_rcv_mux_ID_55_I2_Actual = 85,
	inverters_inv_l_rcv_rcv_mux_ID_56_I3_Actual = 86,
	inverters_inv_l_rcv_rcv_mux_ID_A9_I3_ADC_Value = 169,
	inverters_inv_l_rcv_rcv_mux_ID_AA_I2_ADC_Value = 170,
	inverters_inv_l_rcv_rcv_mux_ID_29_Vq_Output = 41,
	inverters_inv_l_rcv_rcv_mux_ID_2A_Vd_Output = 42,
	inverters_inv_l_rcv_rcv_mux_ID_8A_V_Output = 138,
	inverters_inv_l_rcv_rcv_mux_ID_49_T_Motor = 73,
	inverters_inv_l_rcv_rcv_mux_ID_4A_T_Igbt = 74,
	inverters_inv_l_rcv_rcv_mux_ID_4B_T_Air_Inside = 75,
	inverters_inv_l_rcv_rcv_mux_ID_EB_DC_Bus_Voltage_Filt = 235,
	inverters_inv_l_rcv_rcv_mux_ID_E4_DigInput_END_1 = 228,
	inverters_inv_l_rcv_rcv_mux_ID_E6_DigInput_DIN_1 = 230,
	inverters_inv_l_rcv_rcv_mux_ID_E5_DigInput_END_2 = 229,
	inverters_inv_l_rcv_rcv_mux_ID_E7_DigInput_DIN_2 = 231,
	inverters_inv_l_rcv_rcv_mux_ID_E8_DigInput_RUN = 232,
	inverters_inv_l_rcv_rcv_mux_ID_E0_DigOutput_DOUT_1 = 224,
	inverters_inv_l_rcv_rcv_mux_ID_E1_DigOutput_DOUT_2 = 225,
	inverters_inv_l_rcv_rcv_mux_ID_DE_DigOutput_DOUT_3 = 222,
	inverters_inv_l_rcv_rcv_mux_ID_E2_DigOutput_Rdy_BTB = 226,
	inverters_inv_l_rcv_rcv_mux_ID_E9_Error_I_Fault = 233,
	inverters_inv_l_rcv_rcv_mux_ID_DF_DigOutput_DOUT_4 = 223,
	inverters_inv_l_rcv_rcv_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_l_rcv_rcv_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_l_rcv_rcv_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_l_rcv_rcv_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_l_rcv_rcv_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_l_rcv_rcv_mux_ID_36_CommandSource = 54,
	inverters_inv_l_rcv_rcv_mux_ID_23_Id_Ref = 35,
	inverters_inv_l_rcv_rcv_mux_ID_A0_M_outdig = 160,
	inverters_inv_l_rcv_rcv_mux_ID_B8_Ptr_1_DEBUG = 184,
	inverters_inv_l_rcv_rcv_mux_ID_BA_Ptr_2_DEBUG = 186,
	inverters_inv_l_rcv_rcv_mux_ID_9A_Temp_DEBUG = 154,
	inverters_inv_l_rcv_rcv_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_l_rcv_rcv_mux_ID_06_Motor_V_nom = 6,
	inverters_inv_l_rcv_rcv_mux_ID_07_FU_T_dc = 7,
	inverters_inv_l_rcv_rcv_mux_ID_08_FU_V_dc = 8,
	inverters_inv_l_rcv_rcv_mux_ID_0A_FU_U_min = 10,
	inverters_inv_l_rcv_rcv_mux_ID_0B_FU_F_min = 11,
	inverters_inv_l_rcv_rcv_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_l_rcv_rcv_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_l_rcv_rcv_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_l_rcv_rcv_mux_ID_19_PWM_Enum = 25,
	inverters_inv_l_rcv_rcv_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_l_rcv_rcv_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_l_rcv_rcv_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_l_rcv_rcv_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_l_rcv_rcv_mux_ID_1F_I3_Offset = 31,
	inverters_inv_l_rcv_rcv_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_l_rcv_rcv_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_l_rcv_rcv_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_l_rcv_rcv_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_l_rcv_rcv_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_l_rcv_rcv_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_l_rcv_rcv_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_l_rcv_rcv_mux_ID_37_DZR_Sequencer_Value = 55,
	inverters_inv_l_rcv_rcv_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_l_rcv_rcv_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_l_rcv_rcv_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_l_rcv_rcv_mux_ID_41_Incr_Delta = 65,
	inverters_inv_l_rcv_rcv_mux_ID_42_MotorPosition_Mech = 66,
	inverters_inv_l_rcv_rcv_mux_ID_43_MotorPosition_Elec = 67,
	inverters_inv_l_rcv_rcv_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_l_rcv_rcv_mux_ID_45_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_l_rcv_rcv_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_l_rcv_rcv_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_l_rcv_rcv_mux_ID_11_Control_Status = 17,
	inverters_inv_l_rcv_rcv_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_l_rcv_rcv_mux_ID_52_Status_Mask = 82,
	inverters_inv_l_rcv_rcv_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_l_rcv_rcv_mux_ID_57_I_Limit_Inuse_ramp = 87,
	inverters_inv_l_rcv_rcv_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_l_rcv_rcv_mux_ID_5B_SpeedControl_Kacc = 91,
	inverters_inv_l_rcv_rcv_mux_ID_5C_Rotor_Signals = 92,
	inverters_inv_l_rcv_rcv_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_l_rcv_rcv_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_l_rcv_rcv_mux_ID_61_Ixt_Monitor = 97,
	inverters_inv_l_rcv_rcv_mux_ID_63_ECODE_Status = 99,
	inverters_inv_l_rcv_rcv_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_l_rcv_rcv_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_l_rcv_rcv_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_l_rcv_rcv_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_l_rcv_rcv_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_l_rcv_rcv_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_l_rcv_rcv_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_l_rcv_rcv_mux_ID_6D_Pos_Actual = 109,
	inverters_inv_l_rcv_rcv_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_l_rcv_rcv_mux_ID_6F_Pos_Actual_2 = 111,
	inverters_inv_l_rcv_rcv_mux_ID_70_Pos_Error = 112,
	inverters_inv_l_rcv_rcv_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_l_rcv_rcv_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_l_rcv_rcv_mux_ID_73_CAN_NBT = 115,
	inverters_inv_l_rcv_rcv_mux_ID_74_Pos_Zero_Capture = 116,
	inverters_inv_l_rcv_rcv_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_l_rcv_rcv_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_l_rcv_rcv_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_l_rcv_rcv_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_l_rcv_rcv_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_l_rcv_rcv_mux_ID_7B_Pos_Zero_Offset = 123,
	inverters_inv_l_rcv_rcv_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_l_rcv_rcv_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_l_rcv_rcv_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_l_rcv_rcv_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_l_rcv_rcv_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_l_rcv_rcv_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_l_rcv_rcv_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_l_rcv_rcv_mux_ID_85_Function_Special = 133,
	inverters_inv_l_rcv_rcv_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_l_rcv_rcv_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_l_rcv_rcv_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_l_rcv_rcv_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_l_rcv_rcv_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_l_rcv_rcv_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_l_rcv_rcv_mux_ID_91_Pos_cmd_int = 145,
	inverters_inv_l_rcv_rcv_mux_ID_92_CAN_Error_BusOff_cntr = 146,
	inverters_inv_l_rcv_rcv_mux_ID_93_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_l_rcv_rcv_mux_ID_94_ECODE_1stError = 148,
	inverters_inv_l_rcv_rcv_mux_ID_95_CAN_Error_NoAck_cntr = 149,
	inverters_inv_l_rcv_rcv_mux_ID_96_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_l_rcv_rcv_mux_ID_97_CAN_Error_Bit_cntr = 151,
	inverters_inv_l_rcv_rcv_mux_ID_99_Info_Timer_Diff = 153,
	inverters_inv_l_rcv_rcv_mux_ID_A1_Ballast_cntr = 161,
	inverters_inv_l_rcv_rcv_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_l_rcv_rcv_mux_ID_A4_Motor_Options = 164,
	inverters_inv_l_rcv_rcv_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_l_rcv_rcv_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_l_rcv_rcv_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_l_rcv_rcv_mux_ID_AB_Logic_Frequency = 171,
	inverters_inv_l_rcv_rcv_mux_ID_AC_PWM_1_56 = 172,
	inverters_inv_l_rcv_rcv_mux_ID_AD_PWM_2_34 = 173,
	inverters_inv_l_rcv_rcv_mux_ID_AE_PWM_3_12 = 174,
	inverters_inv_l_rcv_rcv_mux_ID_AF_Timer_Delta = 175,
	inverters_inv_l_rcv_rcv_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_l_rcv_rcv_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_l_rcv_rcv_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_l_rcv_rcv_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_l_rcv_rcv_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_l_rcv_rcv_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_l_rcv_rcv_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_l_rcv_rcv_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_l_rcv_rcv_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_l_rcv_rcv_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_l_rcv_rcv_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_l_rcv_rcv_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_l_rcv_rcv_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_l_rcv_rcv_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_l_rcv_rcv_mux_ID_24_I_Max_Inuse = 36,
	inverters_inv_l_rcv_rcv_mux_ID_E3_DigSignal_GO = 227,
	inverters_inv_l_rcv_rcv_mux_ID_F2_DigSignal_Brake = 242,
	inverters_inv_l_rcv_rcv_mux_ID_F3_DigSignal_Icns = 243,
	inverters_inv_l_rcv_rcv_mux_ID_F5_DigSignal_LessN0 = 245,
	inverters_inv_l_rcv_rcv_mux_ID_F4_DigSignal_Pos_Tolerance = 244,
	inverters_inv_l_rcv_rcv_mux_ID_FB_Ain_in_1_Calc = 251,
	inverters_inv_l_rcv_rcv_mux_ID_FC_Ain_in_2_Calc = 252,
	inverters_inv_l_rcv_rcv_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_l_rcv_rcv_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_l_rcv_rcv_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_l_rcv_rcv_mux_ID_C9_PID_I_xKp = 201,
	inverters_inv_l_rcv_rcv_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_l_rcv_rcv_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_l_rcv_rcv_mux_ID_CC_Car_Mode_Status = 204,
	inverters_inv_l_rcv_rcv_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_l_rcv_rcv_mux_ID_CE_N_Rpm_MaxInt = 206,
	inverters_inv_l_rcv_rcv_mux_ID_D1_Var_1 = 209,
	inverters_inv_l_rcv_rcv_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_l_rcv_rcv_mux_ID_D2_Var_2 = 210,
	inverters_inv_l_rcv_rcv_mux_ID_D3_Var_3 = 211,
	inverters_inv_l_rcv_rcv_mux_ID_D4_Var_4 = 212,
	inverters_inv_l_rcv_rcv_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_l_rcv_rcv_mux_ID_EC_DigSignal_FB_LossOfSig = 236,
	inverters_inv_l_rcv_rcv_mux_ID_EF_DigSignal_NoHWFault = 239,
	inverters_inv_l_rcv_rcv_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_l_rcv_rcv_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_l_rcv_rcv_mux_ID_F6_Inverter_Output_Power = 246,
	inverters_inv_l_rcv_rcv_mux_ID_F7_Inverter_Output_Work = 247,
	inverters_inv_l_rcv_rcv_mux_ID_0F_FU_Extra = 9,
	inverters_inv_l_rcv_rcv_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_l_rcv_rcv_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_l_rcv_rcv_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_l_rcv_rcv_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_l_rcv_rcv_mux_ID_15_Oszi_Source = 21,
	inverters_inv_l_rcv_rcv_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_l_rcv_rcv_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_l_rcv_rcv_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_l_rcv_rcv_mux_ID_78_Pos_Ref_Start = 120,
	inverters_inv_l_rcv_rcv_mux_ID_66_DC_Bus_Voltage = 102,
	inverters_inv_l_rcv_rcv_mux_ID_3A_M_cmd_ramp = 58,
	inverters_inv_l_rcv_rcv_mux_ID_97_LogicOutBlock = 152,
	inverters_inv_l_rcv_rcv_mux_ID_9B_LogicInBlock = 155,
	inverters_inv_l_rcv_rcv_mux_ID_FE_FW_Subv_Revis_Nr = 254,
} inverters_inv_l_rcv_rcv_mux;

typedef enum {
	inverters_inv_l_rcv_devicetype_Homemade = 0,
	inverters_inv_l_rcv_devicetype_DS205_2ph_230V = 14,
	inverters_inv_l_rcv_devicetype_DS403_2ph_400V = 15,
	inverters_inv_l_rcv_devicetype_DS205_neu_230V = 16,
	inverters_inv_l_rcv_devicetype_DS403_neu_400V = 17,
	inverters_inv_l_rcv_devicetype_DS405 = 19,
	inverters_inv_l_rcv_devicetype_DS412 = 21,
	inverters_inv_l_rcv_devicetype_DS420 = 23,
	inverters_inv_l_rcv_devicetype_DS450 = 25,
	inverters_inv_l_rcv_devicetype_DS475 = 27,
	inverters_inv_l_rcv_devicetype_DS4100 = 29,
	inverters_inv_l_rcv_devicetype_DS4820 = 48,
	inverters_inv_l_rcv_devicetype_DS451 = 49,
	inverters_inv_l_rcv_devicetype_DS476 = 51,
	inverters_inv_l_rcv_devicetype_DS8020 = 56,
	inverters_inv_l_rcv_devicetype_DPC440 = 60,
	inverters_inv_l_rcv_devicetype_DPC460 = 65,
	inverters_inv_l_rcv_devicetype_DPC460_DC1Q_3P = 67,
	inverters_inv_l_rcv_devicetype_BAMO_160_60 = 81,
	inverters_inv_l_rcv_devicetype_BAMO_160_120 = 83,
	inverters_inv_l_rcv_devicetype_BAMO_160_180 = 85,
	inverters_inv_l_rcv_devicetype_BAMO_360_60 = 87,
	inverters_inv_l_rcv_devicetype_BAMO_360_120 = 89,
	inverters_inv_l_rcv_devicetype_BAMO_360_180 = 91,
	inverters_inv_l_rcv_devicetype_BAMO_360_240 = 93,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_62_80 = 112,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_62_80 = 113,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_62_120 = 114,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_62_120 = 115,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_62_250 = 116,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_62_250 = 117,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_62_350 = 118,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_62_350 = 119,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_62_450 = 120,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_62_450 = 121,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_160_50 = 122,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_160_50 = 123,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_160_100 = 124,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_160_100 = 125,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_3_160_200 = 126,
	inverters_inv_l_rcv_devicetype_BAMOBIL_D3_2_160_200 = 127,
	inverters_inv_l_rcv_devicetype_Bamocar_700_160 = 192,
	inverters_inv_l_rcv_devicetype_Bamocar_700_100 = 193,
	inverters_inv_l_rcv_devicetype_Bamocar_700_900 = 194,
	inverters_inv_l_rcv_devicetype_Bamocar_700_200_DC = 203,
	inverters_inv_l_rcv_devicetype_Bamocar_400_400 = 204,
	inverters_inv_l_rcv_devicetype_Bamocar_700_400 = 205,
	inverters_inv_l_rcv_devicetype_Bamocar_400_250 = 206,
	inverters_inv_l_rcv_devicetype_Koepfer_V1_700_400 = 240,
	inverters_inv_l_rcv_devicetype_Koepfer_V2_700_400 = 241,
} inverters_inv_l_rcv_devicetype;

typedef enum {
	inverters_inv_l_rcv_can_nbt_1000_kbps = 16386,
	inverters_inv_l_rcv_can_nbt_500_kbps = 16421,
	inverters_inv_l_rcv_can_nbt_625_kbps = 16404,
	inverters_inv_l_rcv_can_nbt_250_kbps = 16476,
	inverters_inv_l_rcv_can_nbt_100_kbps = 17445,
} inverters_inv_l_rcv_can_nbt;

typedef enum {
	inverters_inv_l_rcv_mo_feedback_1_Rot_Enc_TTL = 0,
	inverters_inv_l_rcv_mo_feedback_1_Resolver = 1,
	inverters_inv_l_rcv_mo_feedback_1_Abs_Enc_SC = 2,
	inverters_inv_l_rcv_mo_feedback_1_Rot_Tacho = 3,
	inverters_inv_l_rcv_mo_feedback_1_Rot = 4,
	inverters_inv_l_rcv_mo_feedback_1_DC_Tacho = 5,
	inverters_inv_l_rcv_mo_feedback_1_DC_Arm = 6,
	inverters_inv_l_rcv_mo_feedback_1_BL_Arm = 7,
	inverters_inv_l_rcv_mo_feedback_1_Enc_TTL = 8,
	inverters_inv_l_rcv_mo_feedback_1_Enc_SC = 9,
	inverters_inv_l_rcv_mo_feedback_1_Abs_SC = 10,
	inverters_inv_l_rcv_mo_feedback_1_DC_Arm_Vir = 11,
	inverters_inv_l_rcv_mo_feedback_1_SLS = 12,
	inverters_inv_l_rcv_mo_feedback_1_SLS_SMO = 13,
	inverters_inv_l_rcv_mo_feedback_1_SLS_Usens = 14,
	inverters_inv_l_rcv_mo_feedback_1_AnaIn1_calc = 15,
	inverters_inv_l_rcv_mo_feedback_1_AnaIn2_calc = 16,
	inverters_inv_l_rcv_mo_feedback_1_Panasonic = 17,
	inverters_inv_l_rcv_mo_feedback_1_DC_Bus = 18,
} inverters_inv_l_rcv_mo_feedback_1;

typedef enum {
	inverters_inv_l_rcv_def_end_1__Off_ = 0,
	inverters_inv_l_rcv_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_rcv_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_rcv_def_end_1_Ref_Plus = 3,
	inverters_inv_l_rcv_def_end_1_Limit_Plus = 4,
	inverters_inv_l_rcv_def_end_1_Limit_Minus = 5,
	inverters_inv_l_rcv_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_rcv_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_l_rcv_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_l_rcv_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_l_rcv_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_rcv_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_rcv_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_l_rcv_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_rcv_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_rcv_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_rcv_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_rcv_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_rcv_def_end_1_I_limit_dig_ = 18,
	inverters_inv_l_rcv_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_rcv_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_rcv_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_rcv_def_end_1_Handwheel = 22,
	inverters_inv_l_rcv_def_end_1_Brake_Car = 23,
	inverters_inv_l_rcv_def_end_1_Recup_Disabled = 24,
	inverters_inv_l_rcv_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_rcv_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_rcv_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_rcv_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_rcv_def_end_1;

typedef enum {
	inverters_inv_l_rcv_def_end_2__Off_ = 0,
	inverters_inv_l_rcv_def_end_2_Ref_and_Limit_Plus = 1,
	inverters_inv_l_rcv_def_end_2_Ref_and_Limit_Minus = 2,
	inverters_inv_l_rcv_def_end_2_Ref_Plus = 3,
	inverters_inv_l_rcv_def_end_2_Limit_Plus = 4,
	inverters_inv_l_rcv_def_end_2_Limit_Minus = 5,
	inverters_inv_l_rcv_def_end_2_Limit_Plus_and_Minus = 6,
	inverters_inv_l_rcv_def_end_2_Cancel_Error_s_ = 7,
	inverters_inv_l_rcv_def_end_2__Start_Ref_Drive = 8,
	inverters_inv_l_rcv_def_end_2_Speed_Ramp_0 = 9,
	inverters_inv_l_rcv_def_end_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_rcv_def_end_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_rcv_def_end_2_N_cmd_Reverse = 12,
	inverters_inv_l_rcv_def_end_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_rcv_def_end_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_rcv_def_end_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_rcv_def_end_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_rcv_def_end_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_rcv_def_end_2_I_limit_dig_ = 18,
	inverters_inv_l_rcv_def_end_2_N_clip_neg_pos_ = 19,
	inverters_inv_l_rcv_def_end_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_rcv_def_end_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_rcv_def_end_2_Handwheel = 22,
	inverters_inv_l_rcv_def_end_2_Brake_Car = 23,
	inverters_inv_l_rcv_def_end_2_Recup_Disabled = 24,
	inverters_inv_l_rcv_def_end_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_rcv_def_end_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_rcv_def_end_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_rcv_def_end_2_Brake_Car_Nr2 = 28,
} inverters_inv_l_rcv_def_end_2;

typedef enum {
	inverters_inv_l_rcv_def_din_1__Off_ = 0,
	inverters_inv_l_rcv_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_l_rcv_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_l_rcv_def_din_1_Ref_Plus = 3,
	inverters_inv_l_rcv_def_din_1_Limit_Plus = 4,
	inverters_inv_l_rcv_def_din_1_Limit_Minus = 5,
	inverters_inv_l_rcv_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_l_rcv_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_l_rcv_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_l_rcv_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_l_rcv_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_rcv_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_rcv_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_l_rcv_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_rcv_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_rcv_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_rcv_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_rcv_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_rcv_def_din_1_I_limit_dig_ = 18,
	inverters_inv_l_rcv_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_l_rcv_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_rcv_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_rcv_def_din_1_Handwheel = 22,
	inverters_inv_l_rcv_def_din_1_Brake_Car = 23,
	inverters_inv_l_rcv_def_din_1_Recup_Disabled = 24,
	inverters_inv_l_rcv_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_rcv_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_rcv_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_rcv_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_l_rcv_def_din_1;

typedef enum {
	inverters_inv_l_rcv_def_din_2__Off_ = 0,
	inverters_inv_l_rcv_def_din_2_Ref_and_Limit_Plus = 1,
	inverters_inv_l_rcv_def_din_2_Ref_and_Limit_Minus = 2,
	inverters_inv_l_rcv_def_din_2_Ref_Plus = 3,
	inverters_inv_l_rcv_def_din_2_Limit_Plus = 4,
	inverters_inv_l_rcv_def_din_2_Limit_Minus = 5,
	inverters_inv_l_rcv_def_din_2_Limit_Plus_and_Minus = 6,
	inverters_inv_l_rcv_def_din_2_Cancel_Error_s_ = 7,
	inverters_inv_l_rcv_def_din_2__Start_Ref_Drive = 8,
	inverters_inv_l_rcv_def_din_2_Speed_Ramp_0 = 9,
	inverters_inv_l_rcv_def_din_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_l_rcv_def_din_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_l_rcv_def_din_2_N_cmd_Reverse = 12,
	inverters_inv_l_rcv_def_din_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_l_rcv_def_din_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_l_rcv_def_din_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_l_rcv_def_din_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_l_rcv_def_din_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_l_rcv_def_din_2_I_limit_dig_ = 18,
	inverters_inv_l_rcv_def_din_2_N_clip_neg_pos_ = 19,
	inverters_inv_l_rcv_def_din_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_l_rcv_def_din_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_l_rcv_def_din_2_Handwheel = 22,
	inverters_inv_l_rcv_def_din_2_Brake_Car = 23,
	inverters_inv_l_rcv_def_din_2_Recup_Disabled = 24,
	inverters_inv_l_rcv_def_din_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_l_rcv_def_din_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_l_rcv_def_din_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_l_rcv_def_din_2_Brake_Car_Nr2 = 28,
} inverters_inv_l_rcv_def_din_2;

typedef enum {
	inverters_inv_l_rcv_cs_ain_1_mode__10_10V_ = 0,
	inverters_inv_l_rcv_cs_ain_1_mode__0_10V_ = 1,
	inverters_inv_l_rcv_cs_ain_1_mode__4_20mA_ = 2,
	inverters_inv_l_rcv_cs_ain_1_mode__1_9V_ = 3,
} inverters_inv_l_rcv_cs_ain_1_mode;

typedef enum {
	inverters_inv_l_rcv_compare_var194__0_ = 0,
	inverters_inv_l_rcv_compare_var194__1_ = 1,
	inverters_inv_l_rcv_compare_var194__Var_1_ = 2,
	inverters_inv_l_rcv_compare_var194__Var_2_ = 3,
	inverters_inv_l_rcv_compare_var194__Var_3_ = 4,
	inverters_inv_l_rcv_compare_var194__Var_4_ = 5,
	inverters_inv_l_rcv_compare_var194__Ain_1_ = 6,
	inverters_inv_l_rcv_compare_var194__Ain_2_ = 7,
} inverters_inv_l_rcv_compare_var194;

typedef enum {
	inverters_inv_l_rcv_compare_var195__0_ = 0,
	inverters_inv_l_rcv_compare_var195__1_ = 1,
	inverters_inv_l_rcv_compare_var195__Var_1_ = 2,
	inverters_inv_l_rcv_compare_var195__Var_2_ = 3,
	inverters_inv_l_rcv_compare_var195__Var_3_ = 4,
	inverters_inv_l_rcv_compare_var195__Var_4_ = 5,
	inverters_inv_l_rcv_compare_var195__Ain_1_ = 6,
	inverters_inv_l_rcv_compare_var195__Ain_2_ = 7,
} inverters_inv_l_rcv_compare_var195;

typedef enum {
	inverters_inv_l_rcv_compare_var218__0_ = 0,
	inverters_inv_l_rcv_compare_var218__1_ = 1,
	inverters_inv_l_rcv_compare_var218__Var_1_ = 2,
	inverters_inv_l_rcv_compare_var218__Var_2_ = 3,
	inverters_inv_l_rcv_compare_var218__Var_3_ = 4,
	inverters_inv_l_rcv_compare_var218__Var_4_ = 5,
	inverters_inv_l_rcv_compare_var218__Ain_1_ = 6,
	inverters_inv_l_rcv_compare_var218__Ain_2_ = 7,
} inverters_inv_l_rcv_compare_var218;

typedef enum {
	inverters_inv_l_rcv_compare_var219__0_ = 0,
	inverters_inv_l_rcv_compare_var219__1_ = 1,
	inverters_inv_l_rcv_compare_var219__Var_1_ = 2,
	inverters_inv_l_rcv_compare_var219__Var_2_ = 3,
	inverters_inv_l_rcv_compare_var219__Var_3_ = 4,
	inverters_inv_l_rcv_compare_var219__Var_4_ = 5,
	inverters_inv_l_rcv_compare_var219__Ain_1_ = 6,
	inverters_inv_l_rcv_compare_var219__Ain_2_ = 7,
} inverters_inv_l_rcv_compare_var219;

typedef enum {
	inverters_inv_l_rcv_mo_feedback_2__ = 0,
	inverters_inv_l_rcv_mo_feedback_2_Enc_Position = 1,
	inverters_inv_l_rcv_mo_feedback_2_Enc_Info = 2,
	inverters_inv_l_rcv_mo_feedback_2_Enc_Hand_ = 3,
	inverters_inv_l_rcv_mo_feedback_2_SSI = 4,
} inverters_inv_l_rcv_mo_feedback_2;

typedef enum {
	inverters_inv_l_rcv_cs_ain_2_mode__10_10V_ = 0,
	inverters_inv_l_rcv_cs_ain_2_mode__0_10V_ = 1,
	inverters_inv_l_rcv_cs_ain_2_mode__4_20mA_ = 2,
	inverters_inv_l_rcv_cs_ain_2_mode__1_9V_ = 3,
} inverters_inv_l_rcv_cs_ain_2_mode;

typedef enum {
	inverters_inv_l_rcv_mo_sc1_reso_14_bit = 1,
	inverters_inv_l_rcv_mo_sc1_reso_12_bit = 2,
	inverters_inv_l_rcv_mo_sc1_reso_10_bit = 3,
} inverters_inv_l_rcv_mo_sc1_reso;

typedef enum {
	inverters_inv_l_rcv_source_id194__5Dh_N_cmd_int_ = 93,
	inverters_inv_l_rcv_source_id194__32h_N_cmd_ramp_ = 50,
	inverters_inv_l_rcv_source_id194__30h_N_Actual = 48,
	inverters_inv_l_rcv_source_id194__A8h_N_Actual_Filt = 168,
	inverters_inv_l_rcv_source_id194__33h_N_Error = 51,
	inverters_inv_l_rcv_source_id194__26h_I_cmd = 38,
	inverters_inv_l_rcv_source_id194__22h_I_cmd_ramp_ = 34,
	inverters_inv_l_rcv_source_id194__20h_I_Actual = 32,
	inverters_inv_l_rcv_source_id194__5Fh_I_Actual_Filt = 95,
	inverters_inv_l_rcv_source_id194__6Eh_Pos_Destination = 110,
	inverters_inv_l_rcv_source_id194__91h_Pos_cmd = 145,
	inverters_inv_l_rcv_source_id194__6Dh_Pos_Actual = 109,
	inverters_inv_l_rcv_source_id194__70h_Pos_Error = 112,
	inverters_inv_l_rcv_source_id194__74h_Pos_ZeroCapture = 116,
	inverters_inv_l_rcv_source_id194__E4h_DigInput_END_1 = 228,
	inverters_inv_l_rcv_source_id194__E5h_DigInput_END_2 = 229,
	inverters_inv_l_rcv_source_id194__E6h_DigInput_DIN_1 = 230,
	inverters_inv_l_rcv_source_id194__E7h_DigInput_DIN_2 = 231,
	inverters_inv_l_rcv_source_id194__E8h_DigInput_RUN = 232,
	inverters_inv_l_rcv_source_id194__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_l_rcv_source_id194__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_l_rcv_source_id194__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_l_rcv_source_id194__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_l_rcv_source_id194__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_l_rcv_source_id194__E9h_Error_I_Fault = 233,
	inverters_inv_l_rcv_source_id194__EAh_I_Ballast_Act = 234,
	inverters_inv_l_rcv_source_id194__24h_I_Max_Inuse = 36,
	inverters_inv_l_rcv_source_id194__ECh_FB_LossOfSignal = 236,
	inverters_inv_l_rcv_source_id194__Off_ = 0,
	inverters_inv_l_rcv_source_id194__E3h_DigSignal_GO = 227,
	inverters_inv_l_rcv_source_id194__F2h_DigSignal_Brake = 242,
	inverters_inv_l_rcv_source_id194__F3h_DigSignal_Icns = 243,
	inverters_inv_l_rcv_source_id194__F5h_DigSignal_LessN0 = 245,
	inverters_inv_l_rcv_source_id194__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_l_rcv_source_id194__5Ch_Rotor_Signals = 92,
	inverters_inv_l_rcv_source_id194__D1h_Var_1 = 209,
	inverters_inv_l_rcv_source_id194__D2h_Var_2 = 210,
	inverters_inv_l_rcv_source_id194__D3h_Var_3 = 211,
	inverters_inv_l_rcv_source_id194__D4h_Var_4 = 212,
	inverters_inv_l_rcv_source_id194__D5h_Ain_In_1 = 213,
	inverters_inv_l_rcv_source_id194__D6h_Ain_In_2 = 214,
	inverters_inv_l_rcv_source_id194__42h_MotorPos_Mech = 66,
	inverters_inv_l_rcv_source_id194__43h_MotorPos_Elec = 67,
	inverters_inv_l_rcv_source_id194__A9h_I3_Adc_Value = 169,
	inverters_inv_l_rcv_source_id194__AAh_I2_Adc_Value = 170,
	inverters_inv_l_rcv_source_id194__54h_I1_Actual = 84,
	inverters_inv_l_rcv_source_id194__55h_I2_Actual = 85,
	inverters_inv_l_rcv_source_id194__56h_I3_Actual = 86,
	inverters_inv_l_rcv_source_id194__27h_Iq_Actual = 39,
	inverters_inv_l_rcv_source_id194__28h_Id_Actual = 40,
	inverters_inv_l_rcv_source_id194__38h_Iq_Error = 56,
	inverters_inv_l_rcv_source_id194__39h_Id_Error = 57,
	inverters_inv_l_rcv_source_id194__23h_Id_Ref = 35,
	inverters_inv_l_rcv_source_id194__B5h_Id_Min = 181,
	inverters_inv_l_rcv_source_id194__61h_Ixt_Monitor = 97,
	inverters_inv_l_rcv_source_id194__48h_I_Limit_Inuse = 72,
	inverters_inv_l_rcv_source_id194__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_l_rcv_source_id194__FBh_Ain_1_Calc = 251,
	inverters_inv_l_rcv_source_id194__FCh_Ain_2_Calc = 252,
	inverters_inv_l_rcv_source_id194__29h_Vq_Output = 41,
	inverters_inv_l_rcv_source_id194__2Ah_Vd_Output = 42,
	inverters_inv_l_rcv_source_id194__8Ah_V_Output = 138,
	inverters_inv_l_rcv_source_id194__8Bh_V_Red_Ref_ = 139,
	inverters_inv_l_rcv_source_id194__8Ch_V_Control_Kp = 140,
	inverters_inv_l_rcv_source_id194__8Dh_V_Control_Ti = 141,
	inverters_inv_l_rcv_source_id194__ACh_PWM_1_5_6_ = 172,
	inverters_inv_l_rcv_source_id194__ADh_PWM_2_3_4_ = 173,
	inverters_inv_l_rcv_source_id194__AEh_PWM_3_1_2_ = 174,
	inverters_inv_l_rcv_source_id194__49h_T_Motor = 73,
	inverters_inv_l_rcv_source_id194__4Ah_T_Igbt = 74,
	inverters_inv_l_rcv_source_id194__4Bh_T_Air_Inside = 75,
	inverters_inv_l_rcv_source_id194__45h_It_Rg_Monitor = 69,
	inverters_inv_l_rcv_source_id194__9Ah_Temp_DEBUG = 154,
	inverters_inv_l_rcv_source_id194__ABh_Logic_Freq = 171,
	inverters_inv_l_rcv_source_id194__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_l_rcv_source_id194__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_l_rcv_source_id194__8Fh_ErrorWarning_Map = 143,
	inverters_inv_l_rcv_source_id194__40h_Status_Map = 64,
	inverters_inv_l_rcv_source_id194__41h_Incr_Delta = 65,
	inverters_inv_l_rcv_source_id194__34h_N_Lim = 52,
	inverters_inv_l_rcv_source_id194__63h_FPGA_Status = 99,
	inverters_inv_l_rcv_source_id194__31h_N_set_dig_ = 49,
	inverters_inv_l_rcv_source_id194__90h_M_set_dig_ = 144,
	inverters_inv_l_rcv_source_id194__A0h_M_out_dig_ = 160,
	inverters_inv_l_rcv_source_id194__6Fh_Pos_Actual_2 = 111,
	inverters_inv_l_rcv_source_id194__98h_Logic_O_Block = 152,
	inverters_inv_l_rcv_source_id194__9Bh_Logic_I_Block = 155,
	inverters_inv_l_rcv_source_id194__02h_SC_Info = 2,
	inverters_inv_l_rcv_source_id194__EBh_Vdc_Bus = 235,
	inverters_inv_l_rcv_source_id194__66h_Vdc_Bus_Filt = 102,
	inverters_inv_l_rcv_source_id194__99h_Info_Timer_Diff = 153,
	inverters_inv_l_rcv_source_id194__A1h_Ballast_cntr = 161,
	inverters_inv_l_rcv_source_id194__51_Kern_Mode_State = 81,
	inverters_inv_l_rcv_source_id194__11h_Control_Status = 17,
} inverters_inv_l_rcv_source_id194;

typedef enum {
	inverters_inv_l_rcv_source_id195__5Dh_N_cmd_int_ = 93,
	inverters_inv_l_rcv_source_id195__32h_N_cmd_ramp_ = 50,
	inverters_inv_l_rcv_source_id195__30h_N_Actual = 48,
	inverters_inv_l_rcv_source_id195__A8h_N_Actual_Filt = 168,
	inverters_inv_l_rcv_source_id195__33h_N_Error = 51,
	inverters_inv_l_rcv_source_id195__26h_I_cmd = 38,
	inverters_inv_l_rcv_source_id195__22h_I_cmd_ramp_ = 34,
	inverters_inv_l_rcv_source_id195__20h_I_Actual = 32,
	inverters_inv_l_rcv_source_id195__5Fh_I_Actual_Filt = 95,
	inverters_inv_l_rcv_source_id195__6Eh_Pos_Destination = 110,
	inverters_inv_l_rcv_source_id195__91h_Pos_cmd = 145,
	inverters_inv_l_rcv_source_id195__6Dh_Pos_Actual = 109,
	inverters_inv_l_rcv_source_id195__70h_Pos_Error = 112,
	inverters_inv_l_rcv_source_id195__74h_Pos_ZeroCapture = 116,
	inverters_inv_l_rcv_source_id195__E4h_DigInput_END_1 = 228,
	inverters_inv_l_rcv_source_id195__E5h_DigInput_END_2 = 229,
	inverters_inv_l_rcv_source_id195__E6h_DigInput_DIN_1 = 230,
	inverters_inv_l_rcv_source_id195__E7h_DigInput_DIN_2 = 231,
	inverters_inv_l_rcv_source_id195__E8h_DigInput_RUN = 232,
	inverters_inv_l_rcv_source_id195__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_l_rcv_source_id195__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_l_rcv_source_id195__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_l_rcv_source_id195__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_l_rcv_source_id195__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_l_rcv_source_id195__E9h_Error_I_Fault = 233,
	inverters_inv_l_rcv_source_id195__EAh_I_Ballast_Act = 234,
	inverters_inv_l_rcv_source_id195__24h_I_Max_Inuse = 36,
	inverters_inv_l_rcv_source_id195__ECh_FB_LossOfSignal = 236,
	inverters_inv_l_rcv_source_id195__Off_ = 0,
	inverters_inv_l_rcv_source_id195__E3h_DigSignal_GO = 227,
	inverters_inv_l_rcv_source_id195__F2h_DigSignal_Brake = 242,
	inverters_inv_l_rcv_source_id195__F3h_DigSignal_Icns = 243,
	inverters_inv_l_rcv_source_id195__F5h_DigSignal_LessN0 = 245,
	inverters_inv_l_rcv_source_id195__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_l_rcv_source_id195__5Ch_Rotor_Signals = 92,
	inverters_inv_l_rcv_source_id195__D1h_Var_1 = 209,
	inverters_inv_l_rcv_source_id195__D2h_Var_2 = 210,
	inverters_inv_l_rcv_source_id195__D3h_Var_3 = 211,
	inverters_inv_l_rcv_source_id195__D4h_Var_4 = 212,
	inverters_inv_l_rcv_source_id195__D5h_Ain_In_1 = 213,
	inverters_inv_l_rcv_source_id195__D6h_Ain_In_2 = 214,
	inverters_inv_l_rcv_source_id195__42h_MotorPos_Mech = 66,
	inverters_inv_l_rcv_source_id195__43h_MotorPos_Elec = 67,
	inverters_inv_l_rcv_source_id195__A9h_I3_Adc_Value = 169,
	inverters_inv_l_rcv_source_id195__AAh_I2_Adc_Value = 170,
	inverters_inv_l_rcv_source_id195__54h_I1_Actual = 84,
	inverters_inv_l_rcv_source_id195__55h_I2_Actual = 85,
	inverters_inv_l_rcv_source_id195__56h_I3_Actual = 86,
	inverters_inv_l_rcv_source_id195__27h_Iq_Actual = 39,
	inverters_inv_l_rcv_source_id195__28h_Id_Actual = 40,
	inverters_inv_l_rcv_source_id195__38h_Iq_Error = 56,
	inverters_inv_l_rcv_source_id195__39h_Id_Error = 57,
	inverters_inv_l_rcv_source_id195__23h_Id_Ref = 35,
	inverters_inv_l_rcv_source_id195__B5h_Id_Min = 181,
	inverters_inv_l_rcv_source_id195__61h_Ixt_Monitor = 97,
	inverters_inv_l_rcv_source_id195__48h_I_Limit_Inuse = 72,
	inverters_inv_l_rcv_source_id195__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_l_rcv_source_id195__FBh_Ain_1_Calc = 251,
	inverters_inv_l_rcv_source_id195__FCh_Ain_2_Calc = 252,
	inverters_inv_l_rcv_source_id195__29h_Vq_Output = 41,
	inverters_inv_l_rcv_source_id195__2Ah_Vd_Output = 42,
	inverters_inv_l_rcv_source_id195__8Ah_V_Output = 138,
	inverters_inv_l_rcv_source_id195__8Bh_V_Red_Ref_ = 139,
	inverters_inv_l_rcv_source_id195__8Ch_V_Control_Kp = 140,
	inverters_inv_l_rcv_source_id195__8Dh_V_Control_Ti = 141,
	inverters_inv_l_rcv_source_id195__ACh_PWM_1_5_6_ = 172,
	inverters_inv_l_rcv_source_id195__ADh_PWM_2_3_4_ = 173,
	inverters_inv_l_rcv_source_id195__AEh_PWM_3_1_2_ = 174,
	inverters_inv_l_rcv_source_id195__49h_T_Motor = 73,
	inverters_inv_l_rcv_source_id195__4Ah_T_Igbt = 74,
	inverters_inv_l_rcv_source_id195__4Bh_T_Air_Inside = 75,
	inverters_inv_l_rcv_source_id195__45h_It_Rg_Monitor = 69,
	inverters_inv_l_rcv_source_id195__9Ah_Temp_DEBUG = 154,
	inverters_inv_l_rcv_source_id195__ABh_Logic_Freq = 171,
	inverters_inv_l_rcv_source_id195__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_l_rcv_source_id195__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_l_rcv_source_id195__8Fh_ErrorWarning_Map = 143,
	inverters_inv_l_rcv_source_id195__40h_Status_Map = 64,
	inverters_inv_l_rcv_source_id195__41h_Incr_Delta = 65,
	inverters_inv_l_rcv_source_id195__34h_N_Lim = 52,
	inverters_inv_l_rcv_source_id195__63h_FPGA_Status = 99,
	inverters_inv_l_rcv_source_id195__31h_N_set_dig_ = 49,
	inverters_inv_l_rcv_source_id195__90h_M_set_dig_ = 144,
	inverters_inv_l_rcv_source_id195__A0h_M_out_dig_ = 160,
	inverters_inv_l_rcv_source_id195__6Fh_Pos_Actual_2 = 111,
	inverters_inv_l_rcv_source_id195__98h_Logic_O_Block = 152,
	inverters_inv_l_rcv_source_id195__9Bh_Logic_I_Block = 155,
	inverters_inv_l_rcv_source_id195__02h_SC_Info = 2,
	inverters_inv_l_rcv_source_id195__EBh_Vdc_Bus = 235,
	inverters_inv_l_rcv_source_id195__66h_Vdc_Bus_Filt = 102,
	inverters_inv_l_rcv_source_id195__99h_Info_Timer_Diff = 153,
	inverters_inv_l_rcv_source_id195__A1h_Ballast_cntr = 161,
	inverters_inv_l_rcv_source_id195__51_Kern_Mode_State = 81,
	inverters_inv_l_rcv_source_id195__11h_Control_Status = 17,
} inverters_inv_l_rcv_source_id195;

typedef enum {
	inverters_inv_l_rcv_source_id218__5Dh_N_cmd_int_ = 93,
	inverters_inv_l_rcv_source_id218__32h_N_cmd_ramp_ = 50,
	inverters_inv_l_rcv_source_id218__30h_N_Actual = 48,
	inverters_inv_l_rcv_source_id218__A8h_N_Actual_Filt = 168,
	inverters_inv_l_rcv_source_id218__33h_N_Error = 51,
	inverters_inv_l_rcv_source_id218__26h_I_cmd = 38,
	inverters_inv_l_rcv_source_id218__22h_I_cmd_ramp_ = 34,
	inverters_inv_l_rcv_source_id218__20h_I_Actual = 32,
	inverters_inv_l_rcv_source_id218__5Fh_I_Actual_Filt = 95,
	inverters_inv_l_rcv_source_id218__6Eh_Pos_Destination = 110,
	inverters_inv_l_rcv_source_id218__91h_Pos_cmd = 145,
	inverters_inv_l_rcv_source_id218__6Dh_Pos_Actual = 109,
	inverters_inv_l_rcv_source_id218__70h_Pos_Error = 112,
	inverters_inv_l_rcv_source_id218__74h_Pos_ZeroCapture = 116,
	inverters_inv_l_rcv_source_id218__E4h_DigInput_END_1 = 228,
	inverters_inv_l_rcv_source_id218__E5h_DigInput_END_2 = 229,
	inverters_inv_l_rcv_source_id218__E6h_DigInput_DIN_1 = 230,
	inverters_inv_l_rcv_source_id218__E7h_DigInput_DIN_2 = 231,
	inverters_inv_l_rcv_source_id218__E8h_DigInput_RUN = 232,
	inverters_inv_l_rcv_source_id218__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_l_rcv_source_id218__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_l_rcv_source_id218__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_l_rcv_source_id218__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_l_rcv_source_id218__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_l_rcv_source_id218__E9h_Error_I_Fault = 233,
	inverters_inv_l_rcv_source_id218__EAh_I_Ballast_Act = 234,
	inverters_inv_l_rcv_source_id218__24h_I_Max_Inuse = 36,
	inverters_inv_l_rcv_source_id218__ECh_FB_LossOfSignal = 236,
	inverters_inv_l_rcv_source_id218__Off_ = 0,
	inverters_inv_l_rcv_source_id218__E3h_DigSignal_GO = 227,
	inverters_inv_l_rcv_source_id218__F2h_DigSignal_Brake = 242,
	inverters_inv_l_rcv_source_id218__F3h_DigSignal_Icns = 243,
	inverters_inv_l_rcv_source_id218__F5h_DigSignal_LessN0 = 245,
	inverters_inv_l_rcv_source_id218__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_l_rcv_source_id218__5Ch_Rotor_Signals = 92,
	inverters_inv_l_rcv_source_id218__D1h_Var_1 = 209,
	inverters_inv_l_rcv_source_id218__D2h_Var_2 = 210,
	inverters_inv_l_rcv_source_id218__D3h_Var_3 = 211,
	inverters_inv_l_rcv_source_id218__D4h_Var_4 = 212,
	inverters_inv_l_rcv_source_id218__D5h_Ain_In_1 = 213,
	inverters_inv_l_rcv_source_id218__D6h_Ain_In_2 = 214,
	inverters_inv_l_rcv_source_id218__42h_MotorPos_Mech = 66,
	inverters_inv_l_rcv_source_id218__43h_MotorPos_Elec = 67,
	inverters_inv_l_rcv_source_id218__A9h_I3_Adc_Value = 169,
	inverters_inv_l_rcv_source_id218__AAh_I2_Adc_Value = 170,
	inverters_inv_l_rcv_source_id218__54h_I1_Actual = 84,
	inverters_inv_l_rcv_source_id218__55h_I2_Actual = 85,
	inverters_inv_l_rcv_source_id218__56h_I3_Actual = 86,
	inverters_inv_l_rcv_source_id218__27h_Iq_Actual = 39,
	inverters_inv_l_rcv_source_id218__28h_Id_Actual = 40,
	inverters_inv_l_rcv_source_id218__38h_Iq_Error = 56,
	inverters_inv_l_rcv_source_id218__39h_Id_Error = 57,
	inverters_inv_l_rcv_source_id218__23h_Id_Ref = 35,
	inverters_inv_l_rcv_source_id218__B5h_Id_Min = 181,
	inverters_inv_l_rcv_source_id218__61h_Ixt_Monitor = 97,
	inverters_inv_l_rcv_source_id218__48h_I_Limit_Inuse = 72,
	inverters_inv_l_rcv_source_id218__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_l_rcv_source_id218__FBh_Ain_1_Calc = 251,
	inverters_inv_l_rcv_source_id218__FCh_Ain_2_Calc = 252,
	inverters_inv_l_rcv_source_id218__29h_Vq_Output = 41,
	inverters_inv_l_rcv_source_id218__2Ah_Vd_Output = 42,
	inverters_inv_l_rcv_source_id218__8Ah_V_Output = 138,
	inverters_inv_l_rcv_source_id218__8Bh_V_Red_Ref_ = 139,
	inverters_inv_l_rcv_source_id218__8Ch_V_Control_Kp = 140,
	inverters_inv_l_rcv_source_id218__8Dh_V_Control_Ti = 141,
	inverters_inv_l_rcv_source_id218__ACh_PWM_1_5_6_ = 172,
	inverters_inv_l_rcv_source_id218__ADh_PWM_2_3_4_ = 173,
	inverters_inv_l_rcv_source_id218__AEh_PWM_3_1_2_ = 174,
	inverters_inv_l_rcv_source_id218__49h_T_Motor = 73,
	inverters_inv_l_rcv_source_id218__4Ah_T_Igbt = 74,
	inverters_inv_l_rcv_source_id218__4Bh_T_Air_Inside = 75,
	inverters_inv_l_rcv_source_id218__45h_It_Rg_Monitor = 69,
	inverters_inv_l_rcv_source_id218__9Ah_Temp_DEBUG = 154,
	inverters_inv_l_rcv_source_id218__ABh_Logic_Freq = 171,
	inverters_inv_l_rcv_source_id218__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_l_rcv_source_id218__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_l_rcv_source_id218__8Fh_ErrorWarning_Map = 143,
	inverters_inv_l_rcv_source_id218__40h_Status_Map = 64,
	inverters_inv_l_rcv_source_id218__41h_Incr_Delta = 65,
	inverters_inv_l_rcv_source_id218__34h_N_Lim = 52,
	inverters_inv_l_rcv_source_id218__63h_FPGA_Status = 99,
	inverters_inv_l_rcv_source_id218__31h_N_set_dig_ = 49,
	inverters_inv_l_rcv_source_id218__90h_M_set_dig_ = 144,
	inverters_inv_l_rcv_source_id218__A0h_M_out_dig_ = 160,
	inverters_inv_l_rcv_source_id218__6Fh_Pos_Actual_2 = 111,
	inverters_inv_l_rcv_source_id218__98h_Logic_O_Block = 152,
	inverters_inv_l_rcv_source_id218__9Bh_Logic_I_Block = 155,
	inverters_inv_l_rcv_source_id218__02h_SC_Info = 2,
	inverters_inv_l_rcv_source_id218__EBh_Vdc_Bus = 235,
	inverters_inv_l_rcv_source_id218__66h_Vdc_Bus_Filt = 102,
	inverters_inv_l_rcv_source_id218__99h_Info_Timer_Diff = 153,
	inverters_inv_l_rcv_source_id218__A1h_Ballast_cntr = 161,
	inverters_inv_l_rcv_source_id218__51_Kern_Mode_State = 81,
	inverters_inv_l_rcv_source_id218__11h_Control_Status = 17,
} inverters_inv_l_rcv_source_id218;

typedef enum {
	inverters_inv_l_rcv_source_id219__5Dh_N_cmd_int_ = 93,
	inverters_inv_l_rcv_source_id219__32h_N_cmd_ramp_ = 50,
	inverters_inv_l_rcv_source_id219__30h_N_Actual = 48,
	inverters_inv_l_rcv_source_id219__A8h_N_Actual_Filt = 168,
	inverters_inv_l_rcv_source_id219__33h_N_Error = 51,
	inverters_inv_l_rcv_source_id219__26h_I_cmd = 38,
	inverters_inv_l_rcv_source_id219__22h_I_cmd_ramp_ = 34,
	inverters_inv_l_rcv_source_id219__20h_I_Actual = 32,
	inverters_inv_l_rcv_source_id219__5Fh_I_Actual_Filt = 95,
	inverters_inv_l_rcv_source_id219__6Eh_Pos_Destination = 110,
	inverters_inv_l_rcv_source_id219__91h_Pos_cmd = 145,
	inverters_inv_l_rcv_source_id219__6Dh_Pos_Actual = 109,
	inverters_inv_l_rcv_source_id219__70h_Pos_Error = 112,
	inverters_inv_l_rcv_source_id219__74h_Pos_ZeroCapture = 116,
	inverters_inv_l_rcv_source_id219__E4h_DigInput_END_1 = 228,
	inverters_inv_l_rcv_source_id219__E5h_DigInput_END_2 = 229,
	inverters_inv_l_rcv_source_id219__E6h_DigInput_DIN_1 = 230,
	inverters_inv_l_rcv_source_id219__E7h_DigInput_DIN_2 = 231,
	inverters_inv_l_rcv_source_id219__E8h_DigInput_RUN = 232,
	inverters_inv_l_rcv_source_id219__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_l_rcv_source_id219__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_l_rcv_source_id219__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_l_rcv_source_id219__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_l_rcv_source_id219__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_l_rcv_source_id219__E9h_Error_I_Fault = 233,
	inverters_inv_l_rcv_source_id219__EAh_I_Ballast_Act = 234,
	inverters_inv_l_rcv_source_id219__24h_I_Max_Inuse = 36,
	inverters_inv_l_rcv_source_id219__ECh_FB_LossOfSignal = 236,
	inverters_inv_l_rcv_source_id219__Off_ = 0,
	inverters_inv_l_rcv_source_id219__E3h_DigSignal_GO = 227,
	inverters_inv_l_rcv_source_id219__F2h_DigSignal_Brake = 242,
	inverters_inv_l_rcv_source_id219__F3h_DigSignal_Icns = 243,
	inverters_inv_l_rcv_source_id219__F5h_DigSignal_LessN0 = 245,
	inverters_inv_l_rcv_source_id219__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_l_rcv_source_id219__5Ch_Rotor_Signals = 92,
	inverters_inv_l_rcv_source_id219__D1h_Var_1 = 209,
	inverters_inv_l_rcv_source_id219__D2h_Var_2 = 210,
	inverters_inv_l_rcv_source_id219__D3h_Var_3 = 211,
	inverters_inv_l_rcv_source_id219__D4h_Var_4 = 212,
	inverters_inv_l_rcv_source_id219__D5h_Ain_In_1 = 213,
	inverters_inv_l_rcv_source_id219__D6h_Ain_In_2 = 214,
	inverters_inv_l_rcv_source_id219__42h_MotorPos_Mech = 66,
	inverters_inv_l_rcv_source_id219__43h_MotorPos_Elec = 67,
	inverters_inv_l_rcv_source_id219__A9h_I3_Adc_Value = 169,
	inverters_inv_l_rcv_source_id219__AAh_I2_Adc_Value = 170,
	inverters_inv_l_rcv_source_id219__54h_I1_Actual = 84,
	inverters_inv_l_rcv_source_id219__55h_I2_Actual = 85,
	inverters_inv_l_rcv_source_id219__56h_I3_Actual = 86,
	inverters_inv_l_rcv_source_id219__27h_Iq_Actual = 39,
	inverters_inv_l_rcv_source_id219__28h_Id_Actual = 40,
	inverters_inv_l_rcv_source_id219__38h_Iq_Error = 56,
	inverters_inv_l_rcv_source_id219__39h_Id_Error = 57,
	inverters_inv_l_rcv_source_id219__23h_Id_Ref = 35,
	inverters_inv_l_rcv_source_id219__B5h_Id_Min = 181,
	inverters_inv_l_rcv_source_id219__61h_Ixt_Monitor = 97,
	inverters_inv_l_rcv_source_id219__48h_I_Limit_Inuse = 72,
	inverters_inv_l_rcv_source_id219__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_l_rcv_source_id219__FBh_Ain_1_Calc = 251,
	inverters_inv_l_rcv_source_id219__FCh_Ain_2_Calc = 252,
	inverters_inv_l_rcv_source_id219__29h_Vq_Output = 41,
	inverters_inv_l_rcv_source_id219__2Ah_Vd_Output = 42,
	inverters_inv_l_rcv_source_id219__8Ah_V_Output = 138,
	inverters_inv_l_rcv_source_id219__8Bh_V_Red_Ref_ = 139,
	inverters_inv_l_rcv_source_id219__8Ch_V_Control_Kp = 140,
	inverters_inv_l_rcv_source_id219__8Dh_V_Control_Ti = 141,
	inverters_inv_l_rcv_source_id219__ACh_PWM_1_5_6_ = 172,
	inverters_inv_l_rcv_source_id219__ADh_PWM_2_3_4_ = 173,
	inverters_inv_l_rcv_source_id219__AEh_PWM_3_1_2_ = 174,
	inverters_inv_l_rcv_source_id219__49h_T_Motor = 73,
	inverters_inv_l_rcv_source_id219__4Ah_T_Igbt = 74,
	inverters_inv_l_rcv_source_id219__4Bh_T_Air_Inside = 75,
	inverters_inv_l_rcv_source_id219__45h_It_Rg_Monitor = 69,
	inverters_inv_l_rcv_source_id219__9Ah_Temp_DEBUG = 154,
	inverters_inv_l_rcv_source_id219__ABh_Logic_Freq = 171,
	inverters_inv_l_rcv_source_id219__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_l_rcv_source_id219__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_l_rcv_source_id219__8Fh_ErrorWarning_Map = 143,
	inverters_inv_l_rcv_source_id219__40h_Status_Map = 64,
	inverters_inv_l_rcv_source_id219__41h_Incr_Delta = 65,
	inverters_inv_l_rcv_source_id219__34h_N_Lim = 52,
	inverters_inv_l_rcv_source_id219__63h_FPGA_Status = 99,
	inverters_inv_l_rcv_source_id219__31h_N_set_dig_ = 49,
	inverters_inv_l_rcv_source_id219__90h_M_set_dig_ = 144,
	inverters_inv_l_rcv_source_id219__A0h_M_out_dig_ = 160,
	inverters_inv_l_rcv_source_id219__6Fh_Pos_Actual_2 = 111,
	inverters_inv_l_rcv_source_id219__98h_Logic_O_Block = 152,
	inverters_inv_l_rcv_source_id219__9Bh_Logic_I_Block = 155,
	inverters_inv_l_rcv_source_id219__02h_SC_Info = 2,
	inverters_inv_l_rcv_source_id219__EBh_Vdc_Bus = 235,
	inverters_inv_l_rcv_source_id219__66h_Vdc_Bus_Filt = 102,
	inverters_inv_l_rcv_source_id219__99h_Info_Timer_Diff = 153,
	inverters_inv_l_rcv_source_id219__A1h_Ballast_cntr = 161,
	inverters_inv_l_rcv_source_id219__51_Kern_Mode_State = 81,
	inverters_inv_l_rcv_source_id219__11h_Control_Status = 17,
} inverters_inv_l_rcv_source_id219;

typedef enum {
	inverters_inv_l_rcv_cs_cmd_type_Digital_Commands = 0,
	inverters_inv_l_rcv_cs_cmd_type_Dig_Ana_Speed = 1,
	inverters_inv_l_rcv_cs_cmd_type_Analog_Speed = 2,
	inverters_inv_l_rcv_cs_cmd_type_Analog_Torque = 3,
} inverters_inv_l_rcv_cs_cmd_type;

typedef enum {
	inverters_inv_l_rcv_mo_sc2_reso_14_bit = 1,
	inverters_inv_l_rcv_mo_sc2_reso_12_bit = 2,
	inverters_inv_l_rcv_mo_sc2_reso_10_bit = 3,
} inverters_inv_l_rcv_mo_sc2_reso;

typedef enum {
	inverters_inv_l_rcv_active190_Low = 0,
	inverters_inv_l_rcv_active190_High = 1,
} inverters_inv_l_rcv_active190;

typedef enum {
	inverters_inv_l_rcv_active191_Low = 0,
	inverters_inv_l_rcv_active191_High = 1,
} inverters_inv_l_rcv_active191;

typedef enum {
	inverters_inv_l_rcv_active192_Low = 0,
	inverters_inv_l_rcv_active192_High = 1,
} inverters_inv_l_rcv_active192;

typedef enum {
	inverters_inv_l_rcv_active193_Low = 0,
	inverters_inv_l_rcv_active193_High = 1,
} inverters_inv_l_rcv_active193;

typedef enum {
	inverters_inv_r_send_send_mux_ID_04_USER_Key = 4,
	inverters_inv_r_send_send_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_r_send_send_mux_ID_07_FU_T_dc = 7,
	inverters_inv_r_send_send_mux_ID_08_FU_V_dc = 8,
	inverters_inv_r_send_send_mux_ID_09_FU_Special = 9,
	inverters_inv_r_send_send_mux_ID_0A_FU_U_min = 10,
	inverters_inv_r_send_send_mux_ID_0B_FU_F_min = 11,
	inverters_inv_r_send_send_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_r_send_send_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_r_send_send_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_r_send_send_mux_ID_0F_FU_Extra = 15,
	inverters_inv_r_send_send_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_r_send_send_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_r_send_send_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_r_send_send_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_r_send_send_mux_ID_15_Oszi_Source = 21,
	inverters_inv_r_send_send_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_r_send_send_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_r_send_send_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_r_send_send_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_r_send_send_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_r_send_send_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_r_send_send_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_r_send_send_mux_ID_21_Id_setdig = 33,
	inverters_inv_r_send_send_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_r_send_send_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_r_send_send_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_r_send_send_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_r_send_send_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_r_send_send_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_r_send_send_mux_ID_31_N_setdig = 49,
	inverters_inv_r_send_send_mux_ID_34_N_Lim = 52,
	inverters_inv_r_send_send_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_r_send_send_mux_ID_36_CommandSource = 54,
	inverters_inv_r_send_send_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_r_send_send_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_r_send_send_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_r_send_send_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_r_send_send_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_r_send_send_mux_ID_3D_Read_Cmd = 61,
	inverters_inv_r_send_send_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_r_send_send_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_r_send_send_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_r_send_send_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_r_send_send_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_r_send_send_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_r_send_send_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_r_send_send_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_r_send_send_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_r_send_send_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_r_send_send_mux_ID_5A_Device_Options = 90,
	inverters_inv_r_send_send_mux_ID_5B_PID_n_Kacc = 91,
	inverters_inv_r_send_send_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_r_send_send_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_r_send_send_mux_ID_62_SerialNumber = 98,
	inverters_inv_r_send_send_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_r_send_send_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_r_send_send_mux_ID_67_Device_Type = 103,
	inverters_inv_r_send_send_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_r_send_send_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_r_send_send_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_r_send_send_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_r_send_send_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_r_send_send_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_r_send_send_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_r_send_send_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_r_send_send_mux_ID_73_CAN_NBT = 115,
	inverters_inv_r_send_send_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_r_send_send_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_r_send_send_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_r_send_send_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_r_send_send_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_r_send_send_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_r_send_send_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_r_send_send_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_r_send_send_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_r_send_send_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_r_send_send_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_r_send_send_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_r_send_send_mux_ID_85_Function_Special = 133,
	inverters_inv_r_send_send_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_r_send_send_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_r_send_send_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_r_send_send_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_r_send_send_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_r_send_send_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_r_send_send_mux_ID_90_M_setdig = 144,
	inverters_inv_r_send_send_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_r_send_send_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_r_send_send_mux_ID_A4_Motor_Options = 164,
	inverters_inv_r_send_send_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_r_send_send_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_r_send_send_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_r_send_send_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_r_send_send_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_r_send_send_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_r_send_send_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_r_send_send_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_r_send_send_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_r_send_send_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_r_send_send_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_r_send_send_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_r_send_send_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_r_send_send_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_r_send_send_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_r_send_send_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_r_send_send_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_r_send_send_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_r_send_send_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_r_send_send_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_r_send_send_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_r_send_send_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_r_send_send_mux_ID_C6_I_device = 198,
	inverters_inv_r_send_send_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_r_send_send_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_r_send_send_mux_ID_C9_CurrentControl_xKp = 201,
	inverters_inv_r_send_send_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_r_send_send_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_r_send_send_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_r_send_send_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_r_send_send_mux_ID_D1_Var_1 = 209,
	inverters_inv_r_send_send_mux_ID_D2_Var_2 = 210,
	inverters_inv_r_send_send_mux_ID_D3_Var_3 = 211,
	inverters_inv_r_send_send_mux_ID_D4_Var_4 = 212,
	inverters_inv_r_send_send_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_r_send_send_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_r_send_send_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_r_send_send_mux_ID_EE_V_Shunt = 238,
	inverters_inv_r_send_send_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_r_send_send_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_r_send_send_mux_ID_F8_Axis_Label = 248,
} inverters_inv_r_send_send_mux;

typedef enum {
	inverters_inv_r_send_read_id_05h_Motor_F_nom = 5,
	inverters_inv_r_send_read_id_06h_Motor_V_nom = 6,
	inverters_inv_r_send_read_id_07h_FU_T_dc = 7,
	inverters_inv_r_send_read_id_08h_FU_V_dc = 8,
	inverters_inv_r_send_read_id_09h_FU_Special = 9,
	inverters_inv_r_send_read_id_0Ah_FU_U_min = 10,
	inverters_inv_r_send_read_id_0Bh_FU_F_min = 11,
	inverters_inv_r_send_read_id_0Ch_FU_V_corner = 12,
	inverters_inv_r_send_read_id_0Dh_FU_F_corner = 13,
	inverters_inv_r_send_read_id_0Eh_Motor_Cos_Phi = 14,
	inverters_inv_r_send_read_id_0Fh_FU_Extra = 15,
	inverters_inv_r_send_read_id_10h_Oszi_Channel = 16,
	inverters_inv_r_send_read_id_11h_Control_Status = 17,
	inverters_inv_r_send_read_id_12h_Oszi_Triger_Level = 18,
	inverters_inv_r_send_read_id_13h_Oszi_Triger_Edge = 19,
	inverters_inv_r_send_read_id_14h_Oszi_Triger_Source = 20,
	inverters_inv_r_send_read_id_15h_Oszi_Source = 21,
	inverters_inv_r_send_read_id_16h_Oszi_Skip = 22,
	inverters_inv_r_send_read_id_17h_Oszi_Read_cmd = 23,
	inverters_inv_r_send_read_id_18h_Oszi_Run_cmd = 24,
	inverters_inv_r_send_read_id_19h_PWM_Enum = 25,
	inverters_inv_r_send_read_id_1Ah_Calib_Ref_Value = 26,
	inverters_inv_r_send_read_id_1Bh_FW_Nr = 27,
	inverters_inv_r_send_read_id_1Ch_I_Kp = 28,
	inverters_inv_r_send_read_id_1Dh_I_Ti = 29,
	inverters_inv_r_send_read_id_1Eh_Cutoffdig = 30,
	inverters_inv_r_send_read_id_1Fh_I3_Offset = 31,
	inverters_inv_r_send_read_id_20h_I_Actual = 32,
	inverters_inv_r_send_read_id_21h_Id_setdig = 33,
	inverters_inv_r_send_read_id_22h_I_cmd_ramp = 34,
	inverters_inv_r_send_read_id_23h_Id_Ref = 35,
	inverters_inv_r_send_read_id_24h_I_Max_Inuse = 36,
	inverters_inv_r_send_read_id_25h_I_Delta_Ramp = 37,
	inverters_inv_r_send_read_id_26h_I_cmd = 38,
	inverters_inv_r_send_read_id_27h_Iq_Actual = 39,
	inverters_inv_r_send_read_id_28h_Id_Actual = 40,
	inverters_inv_r_send_read_id_29h_Vq_Output = 41,
	inverters_inv_r_send_read_id_2Ah_Vd_Output = 42,
	inverters_inv_r_send_read_id_2Bh_I_TiM = 43,
	inverters_inv_r_send_read_id_2Ch_n_Kp = 44,
	inverters_inv_r_send_read_id_2Dh_n_Ti = 45,
	inverters_inv_r_send_read_id_2Eh_n_Td = 46,
	inverters_inv_r_send_read_id_2Fh_Ain_in_1_OffsScale = 47,
	inverters_inv_r_send_read_id_30h_N_Actual = 48,
	inverters_inv_r_send_read_id_31h_N_setdig = 49,
	inverters_inv_r_send_read_id_32h_N_cmd_ramp = 50,
	inverters_inv_r_send_read_id_33h_N_Error = 51,
	inverters_inv_r_send_read_id_34h_N_Lim = 52,
	inverters_inv_r_send_read_id_35h_Acc_Ramps = 53,
	inverters_inv_r_send_read_id_36h_CommandSource = 54,
	inverters_inv_r_send_read_id_37h_DZR_Sequencer_Value = 55,
	inverters_inv_r_send_read_id_38h_Iq_Error = 56,
	inverters_inv_r_send_read_id_39h_Id_Error = 57,
	inverters_inv_r_send_read_id_3Bh_n_TiM = 59,
	inverters_inv_r_send_read_id_3Ch_I_Derating_N_perc = 60,
	inverters_inv_r_send_read_id_3Eh_N_Lim_minus = 62,
	inverters_inv_r_send_read_id_3Fh_N_Lim_plus = 63,
	inverters_inv_r_send_read_id_40h_Status_Map = 64,
	inverters_inv_r_send_read_id_41h_Incr_Delta = 65,
	inverters_inv_r_send_read_id_42h_MotorPosition_Mech = 66,
	inverters_inv_r_send_read_id_43h_MotorPosition_Elec = 67,
	inverters_inv_r_send_read_id_44h_FeedBack_Offset_Angle = 68,
	inverters_inv_r_send_read_id_45h_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_r_send_read_id_46h_I_lim_dig_perc = 70,
	inverters_inv_r_send_read_id_48h_I_Limit_Inuse = 72,
	inverters_inv_r_send_read_id_49h_T_Motor = 73,
	inverters_inv_r_send_read_id_4Ah_T_Igbt = 74,
	inverters_inv_r_send_read_id_4Bh_T_Air_Inside = 75,
	inverters_inv_r_send_read_id_4Ch_I_Derating_TE = 76,
	inverters_inv_r_send_read_id_4Dh_Motor_I_max_eff = 77,
	inverters_inv_r_send_read_id_4Eh_Motor_I_nom_eff = 78,
	inverters_inv_r_send_read_id_4Fh_Motor_Pole = 79,
	inverters_inv_r_send_read_id_50h_Ain_in_1_Cutoff = 80,
	inverters_inv_r_send_read_id_51h_Kern_Mode_State = 81,
	inverters_inv_r_send_read_id_52h_Status_Mask = 82,
	inverters_inv_r_send_read_id_53h_Ain_in_2_Cutoff = 83,
	inverters_inv_r_send_read_id_54h_I1_Actual = 84,
	inverters_inv_r_send_read_id_55h_I2_Actual = 85,
	inverters_inv_r_send_read_id_56h_I3_Actual = 86,
	inverters_inv_r_send_read_id_57h_I_Limit_Inuse_ramp = 87,
	inverters_inv_r_send_read_id_58h_I_Derating_TD = 88,
	inverters_inv_r_send_read_id_59h_Motor_Nom = 89,
	inverters_inv_r_send_read_id_5Ah_Device_Options = 90,
	inverters_inv_r_send_read_id_5Bh_SpeedControl_Kacc = 91,
	inverters_inv_r_send_read_id_5Ch_Rotor_Signals = 92,
	inverters_inv_r_send_read_id_5Dh_N_cmd = 93,
	inverters_inv_r_send_read_id_5Eh_Speed_Filter = 94,
	inverters_inv_r_send_read_id_5Fh_I_Actual_Filt = 95,
	inverters_inv_r_send_read_id_60h_Ain_in_X_Filter = 96,
	inverters_inv_r_send_read_id_61h_Ixt_Monitor = 97,
	inverters_inv_r_send_read_id_62h_SerialNumber = 98,
	inverters_inv_r_send_read_id_63h_FPGA_Status = 99,
	inverters_inv_r_send_read_id_64h_Device_Mains = 100,
	inverters_inv_r_send_read_id_65h_Regen_P_R = 101,
	inverters_inv_r_send_read_id_67h_Device_Type = 103,
	inverters_inv_r_send_read_id_68h_CAN_ID_Rx = 104,
	inverters_inv_r_send_read_id_69h_CAN_ID_Tx = 105,
	inverters_inv_r_send_read_id_6Ah_Pos_Kp = 106,
	inverters_inv_r_send_read_id_6Bh_Pos_Ti = 107,
	inverters_inv_r_send_read_id_6Ch_Pos_Td = 108,
	inverters_inv_r_send_read_id_6Dh_Pos_Actual = 109,
	inverters_inv_r_send_read_id_6Eh_Pos_Dest = 110,
	inverters_inv_r_send_read_id_6Fh_Pos_Actual_2 = 111,
	inverters_inv_r_send_read_id_70h_Pos_Err = 112,
	inverters_inv_r_send_read_id_71h_Pos_TiM = 113,
	inverters_inv_r_send_read_id_72h_Pos_OffsetRef = 114,
	inverters_inv_r_send_read_id_73h_CAN_NBT = 115,
	inverters_inv_r_send_read_id_74h_Pos_Zero_Capture = 116,
	inverters_inv_r_send_read_id_75h_Pos_Ref_Reso_Edge = 117,
	inverters_inv_r_send_read_id_76h_Pos_Speed_1 = 118,
	inverters_inv_r_send_read_id_77h_Pos_Speed_2 = 119,
	inverters_inv_r_send_read_id_78h_Pos_Ref_Start = 120,
	inverters_inv_r_send_read_id_79h_Pos_Tol_Win = 121,
	inverters_inv_r_send_read_id_7Ah_Pos_Preset = 122,
	inverters_inv_r_send_read_id_7Bh_Pos_Zero_Offset = 123,
	inverters_inv_r_send_read_id_7Ch_Pos_ND_Scale = 124,
	inverters_inv_r_send_read_id_7Dh_Pos_ND_Offset = 125,
	inverters_inv_r_send_read_id_7Eh_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_r_send_read_id_7Fh_Pos_Offset_Slack = 127,
	inverters_inv_r_send_read_id_80h_Pos_Diff_Slack = 128,
	inverters_inv_r_send_read_id_83h_Func_Para_Read = 131,
	inverters_inv_r_send_read_id_84h_Func_Para_Write = 132,
	inverters_inv_r_send_read_id_85h_Func_Special = 133,
	inverters_inv_r_send_read_id_88h_CAN_ID_2_Rx = 136,
	inverters_inv_r_send_read_id_89h_CAN_ID_2_Tx = 137,
	inverters_inv_r_send_read_id_8Ah_Vout = 138,
	inverters_inv_r_send_read_id_8Bh_V_Ref = 139,
	inverters_inv_r_send_read_id_8Ch_V_Kp = 140,
	inverters_inv_r_send_read_id_8Dh_V_Ti = 141,
	inverters_inv_r_send_read_id_8Eh_Clear_Error_List = 142,
	inverters_inv_r_send_read_id_8Fh_ErrorWarning_Map = 143,
	inverters_inv_r_send_read_id_90h_M_setdig = 144,
	inverters_inv_r_send_read_id_91h_Pos_cmd_int = 145,
	inverters_inv_r_send_read_id_92h_CAN_Error_BusOff_cntr = 146,
	inverters_inv_r_send_read_id_93h_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_r_send_read_id_94h_CAN_Error_RxMsgLost_cntr = 148,
	inverters_inv_r_send_read_id_95h_CAN_Error_NoAck_cntr = 149,
	inverters_inv_r_send_read_id_96h_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_r_send_read_id_97h_CAN_Error_Bit_cntr = 151,
	inverters_inv_r_send_read_id_99h_Info_Timer_Diff = 153,
	inverters_inv_r_send_read_id_9Ah_Temp_DEBUG = 154,
	inverters_inv_r_send_read_id_A0h_Mout = 160,
	inverters_inv_r_send_read_id_A1h_Ballast_cntr = 161,
	inverters_inv_r_send_read_id_A2h_I_Derating_TM = 162,
	inverters_inv_r_send_read_id_A3h_M_Temp = 163,
	inverters_inv_r_send_read_id_A4h_Motor_Options = 164,
	inverters_inv_r_send_read_id_A5h_DC_Bus_MinMax_Lim = 165,
	inverters_inv_r_send_read_id_A6h_FB_IncPerRot = 166,
	inverters_inv_r_send_read_id_A7h_FB_Pole = 167,
	inverters_inv_r_send_read_id_A8h_N_Actual_Filt = 168,
	inverters_inv_r_send_read_id_A9h_I3_ADC = 169,
	inverters_inv_r_send_read_id_AAh_I2_ADC = 170,
	inverters_inv_r_send_read_id_ABh_Logic_Freq = 171,
	inverters_inv_r_send_read_id_ACh_PWM_1_56 = 172,
	inverters_inv_r_send_read_id_ADh_PWM_2_34 = 173,
	inverters_inv_r_send_read_id_AEh_PWM_3_12 = 174,
	inverters_inv_r_send_read_id_AFh_Timer_Delta = 175,
	inverters_inv_r_send_read_id_B1h_Motor_Lsq = 177,
	inverters_inv_r_send_read_id_B2h_Id_Nom = 178,
	inverters_inv_r_send_read_id_B3h_Motor_Lm = 179,
	inverters_inv_r_send_read_id_B4h_Motor_Rr = 180,
	inverters_inv_r_send_read_id_B5h_Id_Min = 181,
	inverters_inv_r_send_read_id_B6h_Motor_Tr = 182,
	inverters_inv_r_send_read_id_B8h_Ptr_1_DEBUG = 184,
	inverters_inv_r_send_read_id_BAh_Ptr_2_DEBUG = 186,
	inverters_inv_r_send_read_id_BBh_Motor_Lsd = 187,
	inverters_inv_r_send_read_id_BCh_Motor_Rs = 188,
	inverters_inv_r_send_read_id_BDh_Motor_Ts = 189,
	inverters_inv_r_send_read_id_BEh_def_END_1 = 190,
	inverters_inv_r_send_read_id_BFh_def_END_2 = 191,
	inverters_inv_r_send_read_id_C0h_def_DIN_1 = 192,
	inverters_inv_r_send_read_id_C1h_def_DIN_2 = 193,
	inverters_inv_r_send_read_id_C2h_def_OUT_1 = 194,
	inverters_inv_r_send_read_id_C3h_def_OUT_2 = 195,
	inverters_inv_r_send_read_id_C4h_I_max_pk = 196,
	inverters_inv_r_send_read_id_C5h_I_con_eff = 197,
	inverters_inv_r_send_read_id_C6h_I_device = 198,
	inverters_inv_r_send_read_id_C7h_RLim_MRcp_Ramp = 199,
	inverters_inv_r_send_read_id_C8h_Nmax100perc = 200,
	inverters_inv_r_send_read_id_C9h_I_xKp = 201,
	inverters_inv_r_send_read_id_CAh_Bat_Opr_Limits = 202,
	inverters_inv_r_send_read_id_CBh_I_Kf = 203,
	inverters_inv_r_send_read_id_CCh_Car_Mode_Status = 204,
	inverters_inv_r_send_read_id_CDh_Car_Mode_Config = 205,
	inverters_inv_r_send_read_id_CEh_N_Rpm_MaxInt = 206,
	inverters_inv_r_send_read_id_D0h_CAN_Timeout = 208,
	inverters_inv_r_send_read_id_D1h_Var_1 = 209,
	inverters_inv_r_send_read_id_D2h_Var_2 = 210,
	inverters_inv_r_send_read_id_D3h_Var_3 = 211,
	inverters_inv_r_send_read_id_D4h_Var_4 = 212,
	inverters_inv_r_send_read_id_D5h_Ain_in_1 = 213,
	inverters_inv_r_send_read_id_D6h_Ain_in_2 = 214,
	inverters_inv_r_send_read_id_D7h_Ain_in_2_OffsScale = 215,
	inverters_inv_r_send_read_id_D8h_LogicReadBitsIN_OUT = 216,
	inverters_inv_r_send_read_id_D9h_I_200perc = 217,
	inverters_inv_r_send_read_id_DAh_def_OUT_3 = 218,
	inverters_inv_r_send_read_id_DBh_def_OUT_4 = 219,
	inverters_inv_r_send_read_id_DCh_DAC_Source_ID = 220,
	inverters_inv_r_send_read_id_DEh_DS_DOUT_3 = 222,
	inverters_inv_r_send_read_id_DFh_DS_DOUT_4 = 223,
	inverters_inv_r_send_read_id_E0h_DS_DOUT_1 = 224,
	inverters_inv_r_send_read_id_E1h_DS_DOUT_2 = 225,
	inverters_inv_r_send_read_id_E2h_DS_Rdy_BTB = 226,
	inverters_inv_r_send_read_id_E3h_DS_GO = 227,
	inverters_inv_r_send_read_id_E4h_DS_END_1 = 228,
	inverters_inv_r_send_read_id_E5h_DS_END_2 = 229,
	inverters_inv_r_send_read_id_E6h_DS_DIN_1 = 230,
	inverters_inv_r_send_read_id_E7h_DS_DIN_2 = 231,
	inverters_inv_r_send_read_id_E8h_DS_RUN = 232,
	inverters_inv_r_send_read_id_E9h_DS_I_Fault = 233,
	inverters_inv_r_send_read_id_EBh_Vdc_Bus = 235,
	inverters_inv_r_send_read_id_ECh_DS_FB_LossOfSignal = 236,
	inverters_inv_r_send_read_id_EDh_Dec_Ramps = 237,
	inverters_inv_r_send_read_id_EEh_V_Shunt = 238,
	inverters_inv_r_send_read_id_EFh_DS_NoHWFault = 239,
	inverters_inv_r_send_read_id_F0h_T_peak = 240,
	inverters_inv_r_send_read_id_F1h_Brake_Delay = 241,
	inverters_inv_r_send_read_id_F2h_DS_Brake = 242,
	inverters_inv_r_send_read_id_F3h_DS_Icns = 243,
	inverters_inv_r_send_read_id_F4h_DS_PosTolerance = 244,
	inverters_inv_r_send_read_id_F5h_DS_LessN0 = 245,
	inverters_inv_r_send_read_id_F6h_Inverter_Power = 246,
	inverters_inv_r_send_read_id_F7h_Inverter_Work = 247,
	inverters_inv_r_send_read_id_F8h_Axis = 248,
	inverters_inv_r_send_read_id_FBh_Ain_in_1_Calc = 251,
	inverters_inv_r_send_read_id_FCh_Ain_in_2_Calc = 252,
	inverters_inv_r_send_read_id_66h_DC_Bus_Voltage = 102,
	inverters_inv_r_send_read_id_3Ah_M_cmd_ramp = 58,
	inverters_inv_r_send_read_id_FEh_Subv_SVNRev_Nr = 254,
} inverters_inv_r_send_read_id;

typedef enum {
	inverters_inv_r_send_devicetype_Homemade = 0,
	inverters_inv_r_send_devicetype_DS205_2ph_230V = 14,
	inverters_inv_r_send_devicetype_DS403_2ph_400V = 15,
	inverters_inv_r_send_devicetype_DS205_neu_230V = 16,
	inverters_inv_r_send_devicetype_DS403_neu_400V = 17,
	inverters_inv_r_send_devicetype_DS405 = 19,
	inverters_inv_r_send_devicetype_DS412 = 21,
	inverters_inv_r_send_devicetype_DS420 = 23,
	inverters_inv_r_send_devicetype_DS450 = 25,
	inverters_inv_r_send_devicetype_DS475 = 27,
	inverters_inv_r_send_devicetype_DS4100 = 29,
	inverters_inv_r_send_devicetype_DS4820 = 48,
	inverters_inv_r_send_devicetype_DS451 = 49,
	inverters_inv_r_send_devicetype_DS476 = 51,
	inverters_inv_r_send_devicetype_DS8020 = 56,
	inverters_inv_r_send_devicetype_DPC440 = 60,
	inverters_inv_r_send_devicetype_DPC460 = 65,
	inverters_inv_r_send_devicetype_DPC460_DC1Q_3P = 67,
	inverters_inv_r_send_devicetype_BAMO_160_60 = 81,
	inverters_inv_r_send_devicetype_BAMO_160_120 = 83,
	inverters_inv_r_send_devicetype_BAMO_160_180 = 85,
	inverters_inv_r_send_devicetype_BAMO_360_60 = 87,
	inverters_inv_r_send_devicetype_BAMO_360_120 = 89,
	inverters_inv_r_send_devicetype_BAMO_360_180 = 91,
	inverters_inv_r_send_devicetype_BAMO_360_240 = 93,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_62_80 = 112,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_62_80 = 113,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_62_120 = 114,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_62_120 = 115,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_62_250 = 116,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_62_250 = 117,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_62_350 = 118,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_62_350 = 119,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_62_450 = 120,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_62_450 = 121,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_160_50 = 122,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_160_50 = 123,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_160_100 = 124,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_160_100 = 125,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_3_160_200 = 126,
	inverters_inv_r_send_devicetype_BAMOBIL_D3_2_160_200 = 127,
	inverters_inv_r_send_devicetype_Bamocar_700_160 = 192,
	inverters_inv_r_send_devicetype_Bamocar_700_100 = 193,
	inverters_inv_r_send_devicetype_Bamocar_700_900 = 194,
	inverters_inv_r_send_devicetype_Bamocar_700_200_DC = 203,
	inverters_inv_r_send_devicetype_Bamocar_400_400 = 204,
	inverters_inv_r_send_devicetype_Bamocar_700_400 = 205,
	inverters_inv_r_send_devicetype_Bamocar_400_250 = 206,
	inverters_inv_r_send_devicetype_Koepfer_V1_700_400 = 240,
	inverters_inv_r_send_devicetype_Koepfer_V2_700_400 = 241,
} inverters_inv_r_send_devicetype;

typedef enum {
	inverters_inv_r_send_can_nbt_1000_kbps = 16386,
	inverters_inv_r_send_can_nbt_500_kbps = 16421,
	inverters_inv_r_send_can_nbt_625_kbps = 16404,
	inverters_inv_r_send_can_nbt_250_kbps = 16476,
	inverters_inv_r_send_can_nbt_100_kbps = 17445,
} inverters_inv_r_send_can_nbt;

typedef enum {
	inverters_inv_r_send_mo_feedback_1_Rot_Enc_TTL = 0,
	inverters_inv_r_send_mo_feedback_1_Resolver = 1,
	inverters_inv_r_send_mo_feedback_1_Abs_Enc_SC = 2,
	inverters_inv_r_send_mo_feedback_1_Rot_Tacho = 3,
	inverters_inv_r_send_mo_feedback_1_Rot = 4,
	inverters_inv_r_send_mo_feedback_1_DC_Tacho = 5,
	inverters_inv_r_send_mo_feedback_1_DC_Arm = 6,
	inverters_inv_r_send_mo_feedback_1_BL_Arm = 7,
	inverters_inv_r_send_mo_feedback_1_Enc_TTL = 8,
	inverters_inv_r_send_mo_feedback_1_Enc_SC = 9,
	inverters_inv_r_send_mo_feedback_1_Abs_SC = 10,
	inverters_inv_r_send_mo_feedback_1_DC_Arm_Vir = 11,
	inverters_inv_r_send_mo_feedback_1_SLS = 12,
	inverters_inv_r_send_mo_feedback_1_SLS_SMO = 13,
	inverters_inv_r_send_mo_feedback_1_SLS_Usens = 14,
	inverters_inv_r_send_mo_feedback_1_AnaIn1_calc = 15,
	inverters_inv_r_send_mo_feedback_1_AnaIn2_calc = 16,
	inverters_inv_r_send_mo_feedback_1_Panasonic = 17,
	inverters_inv_r_send_mo_feedback_1_DC_Bus = 18,
} inverters_inv_r_send_mo_feedback_1;

typedef enum {
	inverters_inv_r_send_def_end_1__Off_ = 0,
	inverters_inv_r_send_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_send_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_send_def_end_1_Ref_Plus = 3,
	inverters_inv_r_send_def_end_1_Limit_Plus = 4,
	inverters_inv_r_send_def_end_1_Limit_Minus = 5,
	inverters_inv_r_send_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_send_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_r_send_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_r_send_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_r_send_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_send_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_send_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_r_send_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_send_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_send_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_send_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_send_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_send_def_end_1_I_limit_dig_ = 18,
	inverters_inv_r_send_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_send_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_send_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_send_def_end_1_Handwheel = 22,
	inverters_inv_r_send_def_end_1_Brake_Car = 23,
	inverters_inv_r_send_def_end_1_Recup_Disabled = 24,
	inverters_inv_r_send_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_send_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_send_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_send_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_send_def_end_1;

typedef enum {
	inverters_inv_r_send_def_end_2__Off_ = 0,
	inverters_inv_r_send_def_end_2_Ref_and_Limit_Plus = 1,
	inverters_inv_r_send_def_end_2_Ref_and_Limit_Minus = 2,
	inverters_inv_r_send_def_end_2_Ref_Plus = 3,
	inverters_inv_r_send_def_end_2_Limit_Plus = 4,
	inverters_inv_r_send_def_end_2_Limit_Minus = 5,
	inverters_inv_r_send_def_end_2_Limit_Plus_and_Minus = 6,
	inverters_inv_r_send_def_end_2_Cancel_Error_s_ = 7,
	inverters_inv_r_send_def_end_2__Start_Ref_Drive = 8,
	inverters_inv_r_send_def_end_2_Speed_Ramp_0 = 9,
	inverters_inv_r_send_def_end_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_send_def_end_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_send_def_end_2_N_cmd_Reverse = 12,
	inverters_inv_r_send_def_end_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_send_def_end_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_send_def_end_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_send_def_end_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_send_def_end_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_send_def_end_2_I_limit_dig_ = 18,
	inverters_inv_r_send_def_end_2_N_clip_neg_pos_ = 19,
	inverters_inv_r_send_def_end_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_send_def_end_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_send_def_end_2_Handwheel = 22,
	inverters_inv_r_send_def_end_2_Brake_Car = 23,
	inverters_inv_r_send_def_end_2_Recup_Disabled = 24,
	inverters_inv_r_send_def_end_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_send_def_end_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_send_def_end_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_send_def_end_2_Brake_Car_Nr2 = 28,
} inverters_inv_r_send_def_end_2;

typedef enum {
	inverters_inv_r_send_def_din_1__Off_ = 0,
	inverters_inv_r_send_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_send_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_send_def_din_1_Ref_Plus = 3,
	inverters_inv_r_send_def_din_1_Limit_Plus = 4,
	inverters_inv_r_send_def_din_1_Limit_Minus = 5,
	inverters_inv_r_send_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_send_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_r_send_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_r_send_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_r_send_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_send_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_send_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_r_send_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_send_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_send_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_send_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_send_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_send_def_din_1_I_limit_dig_ = 18,
	inverters_inv_r_send_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_send_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_send_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_send_def_din_1_Handwheel = 22,
	inverters_inv_r_send_def_din_1_Brake_Car = 23,
	inverters_inv_r_send_def_din_1_Recup_Disabled = 24,
	inverters_inv_r_send_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_send_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_send_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_send_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_send_def_din_1;

typedef enum {
	inverters_inv_r_send_def_din_2__Off_ = 0,
	inverters_inv_r_send_def_din_2_Ref_and_Limit_Plus = 1,
	inverters_inv_r_send_def_din_2_Ref_and_Limit_Minus = 2,
	inverters_inv_r_send_def_din_2_Ref_Plus = 3,
	inverters_inv_r_send_def_din_2_Limit_Plus = 4,
	inverters_inv_r_send_def_din_2_Limit_Minus = 5,
	inverters_inv_r_send_def_din_2_Limit_Plus_and_Minus = 6,
	inverters_inv_r_send_def_din_2_Cancel_Error_s_ = 7,
	inverters_inv_r_send_def_din_2__Start_Ref_Drive = 8,
	inverters_inv_r_send_def_din_2_Speed_Ramp_0 = 9,
	inverters_inv_r_send_def_din_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_send_def_din_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_send_def_din_2_N_cmd_Reverse = 12,
	inverters_inv_r_send_def_din_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_send_def_din_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_send_def_din_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_send_def_din_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_send_def_din_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_send_def_din_2_I_limit_dig_ = 18,
	inverters_inv_r_send_def_din_2_N_clip_neg_pos_ = 19,
	inverters_inv_r_send_def_din_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_send_def_din_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_send_def_din_2_Handwheel = 22,
	inverters_inv_r_send_def_din_2_Brake_Car = 23,
	inverters_inv_r_send_def_din_2_Recup_Disabled = 24,
	inverters_inv_r_send_def_din_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_send_def_din_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_send_def_din_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_send_def_din_2_Brake_Car_Nr2 = 28,
} inverters_inv_r_send_def_din_2;

typedef enum {
	inverters_inv_r_send_mo_feedback_2__ = 0,
	inverters_inv_r_send_mo_feedback_2_Enc_Position = 1,
	inverters_inv_r_send_mo_feedback_2_Enc_Info = 2,
	inverters_inv_r_send_mo_feedback_2_Enc_Hand_ = 3,
	inverters_inv_r_send_mo_feedback_2_SSI = 4,
} inverters_inv_r_send_mo_feedback_2;

typedef enum {
	inverters_inv_r_send_ret_interval_Stop = 255,
	inverters_inv_r_send_ret_interval_Single = 0,
} inverters_inv_r_send_ret_interval;

typedef enum {
	inverters_inv_r_send_mo_sc1_reso_14_bit = 1,
	inverters_inv_r_send_mo_sc1_reso_12_bit = 2,
	inverters_inv_r_send_mo_sc1_reso_10_bit = 3,
} inverters_inv_r_send_mo_sc1_reso;

typedef enum {
	inverters_inv_r_send_mo_sc2_reso_14_bit = 1,
	inverters_inv_r_send_mo_sc2_reso_12_bit = 2,
	inverters_inv_r_send_mo_sc2_reso_10_bit = 3,
} inverters_inv_r_send_mo_sc2_reso;

typedef enum {
	inverters_inv_r_send_active190_Low = 0,
	inverters_inv_r_send_active190_High = 1,
} inverters_inv_r_send_active190;

typedef enum {
	inverters_inv_r_send_active191_Low = 0,
	inverters_inv_r_send_active191_High = 1,
} inverters_inv_r_send_active191;

typedef enum {
	inverters_inv_r_send_active192_Low = 0,
	inverters_inv_r_send_active192_High = 1,
} inverters_inv_r_send_active192;

typedef enum {
	inverters_inv_r_send_active193_Low = 0,
	inverters_inv_r_send_active193_High = 1,
} inverters_inv_r_send_active193;

typedef enum {
	inverters_inv_r_rcv_rcv_mux_ID_30_N_Actual = 48,
	inverters_inv_r_rcv_rcv_mux_ID_35_Acc_Ramps = 53,
	inverters_inv_r_rcv_rcv_mux_ID_ED_Dec_Ramps = 237,
	inverters_inv_r_rcv_rcv_mux_ID_C7_RLim_MRcp_Ramp = 199,
	inverters_inv_r_rcv_rcv_mux_ID_A8_N_Actual_Filt = 168,
	inverters_inv_r_rcv_rcv_mux_ID_1B_FW_Nr = 27,
	inverters_inv_r_rcv_rcv_mux_ID_67_Device_Type = 103,
	inverters_inv_r_rcv_rcv_mux_ID_62_SerialNumber = 98,
	inverters_inv_r_rcv_rcv_mux_ID_F8_Axis_Label = 248,
	inverters_inv_r_rcv_rcv_mux_ID_C6_I_device = 198,
	inverters_inv_r_rcv_rcv_mux_ID_EE_V_Shunt = 238,
	inverters_inv_r_rcv_rcv_mux_ID_D9_I_200perc = 217,
	inverters_inv_r_rcv_rcv_mux_ID_5A_Device_Options = 90,
	inverters_inv_r_rcv_rcv_mux_ID_40_Status_Map = 64,
	inverters_inv_r_rcv_rcv_mux_ID_8F_ErrorWarning_Map = 143,
	inverters_inv_r_rcv_rcv_mux_ID_D8_LogicReadBitsIN_OUT = 216,
	inverters_inv_r_rcv_rcv_mux_ID_D5_Ain_in_1 = 213,
	inverters_inv_r_rcv_rcv_mux_ID_D6_Ain_in_2 = 214,
	inverters_inv_r_rcv_rcv_mux_ID_C8_Nmax100perc = 200,
	inverters_inv_r_rcv_rcv_mux_ID_31_N_setdig = 49,
	inverters_inv_r_rcv_rcv_mux_ID_5D_N_cmd = 93,
	inverters_inv_r_rcv_rcv_mux_ID_32_N_cmd_ramp = 50,
	inverters_inv_r_rcv_rcv_mux_ID_34_N_Lim = 52,
	inverters_inv_r_rcv_rcv_mux_ID_33_N_Error = 51,
	inverters_inv_r_rcv_rcv_mux_ID_90_M_setdig = 144,
	inverters_inv_r_rcv_rcv_mux_ID_21_Id_setdig = 33,
	inverters_inv_r_rcv_rcv_mux_ID_C4_I_max_pk_perc = 196,
	inverters_inv_r_rcv_rcv_mux_ID_C5_I_con_eff_perc = 197,
	inverters_inv_r_rcv_rcv_mux_ID_4D_Motor_I_max_eff_Arms = 77,
	inverters_inv_r_rcv_rcv_mux_ID_4E_Motor_I_nom_eff_Arms = 78,
	inverters_inv_r_rcv_rcv_mux_ID_48_I_Limit_Inuse = 72,
	inverters_inv_r_rcv_rcv_mux_ID_26_I_cmd = 38,
	inverters_inv_r_rcv_rcv_mux_ID_22_I_cmd_ramp = 34,
	inverters_inv_r_rcv_rcv_mux_ID_20_I_Actual = 32,
	inverters_inv_r_rcv_rcv_mux_ID_5F_I_Actual_Filt = 95,
	inverters_inv_r_rcv_rcv_mux_ID_27_Iq_Actual = 39,
	inverters_inv_r_rcv_rcv_mux_ID_28_Id_Actual = 40,
	inverters_inv_r_rcv_rcv_mux_ID_38_Iq_Error = 56,
	inverters_inv_r_rcv_rcv_mux_ID_39_Id_Error = 57,
	inverters_inv_r_rcv_rcv_mux_ID_54_I1_Actual = 84,
	inverters_inv_r_rcv_rcv_mux_ID_55_I2_Actual = 85,
	inverters_inv_r_rcv_rcv_mux_ID_56_I3_Actual = 86,
	inverters_inv_r_rcv_rcv_mux_ID_A9_I3_ADC_Value = 169,
	inverters_inv_r_rcv_rcv_mux_ID_AA_I2_ADC_Value = 170,
	inverters_inv_r_rcv_rcv_mux_ID_29_Vq_Output = 41,
	inverters_inv_r_rcv_rcv_mux_ID_2A_Vd_Output = 42,
	inverters_inv_r_rcv_rcv_mux_ID_8A_V_Output = 138,
	inverters_inv_r_rcv_rcv_mux_ID_49_T_Motor = 73,
	inverters_inv_r_rcv_rcv_mux_ID_4A_T_Igbt = 74,
	inverters_inv_r_rcv_rcv_mux_ID_4B_T_Air_Inside = 75,
	inverters_inv_r_rcv_rcv_mux_ID_EB_DC_Bus_Voltage_Filt = 235,
	inverters_inv_r_rcv_rcv_mux_ID_E4_DigInput_END_1 = 228,
	inverters_inv_r_rcv_rcv_mux_ID_E6_DigInput_DIN_1 = 230,
	inverters_inv_r_rcv_rcv_mux_ID_E5_DigInput_END_2 = 229,
	inverters_inv_r_rcv_rcv_mux_ID_E7_DigInput_DIN_2 = 231,
	inverters_inv_r_rcv_rcv_mux_ID_E8_DigInput_RUN = 232,
	inverters_inv_r_rcv_rcv_mux_ID_E0_DigOutput_DOUT_1 = 224,
	inverters_inv_r_rcv_rcv_mux_ID_E1_DigOutput_DOUT_2 = 225,
	inverters_inv_r_rcv_rcv_mux_ID_DE_DigOutput_DOUT_3 = 222,
	inverters_inv_r_rcv_rcv_mux_ID_E2_DigOutput_Rdy_BTB = 226,
	inverters_inv_r_rcv_rcv_mux_ID_E9_Error_I_Fault = 233,
	inverters_inv_r_rcv_rcv_mux_ID_DF_DigOutput_DOUT_4 = 223,
	inverters_inv_r_rcv_rcv_mux_ID_46_I_lim_dig_perc = 70,
	inverters_inv_r_rcv_rcv_mux_ID_3C_I_Derating_N_perc = 60,
	inverters_inv_r_rcv_rcv_mux_ID_58_I_Derating_TD = 88,
	inverters_inv_r_rcv_rcv_mux_ID_4C_I_Derating_TE = 76,
	inverters_inv_r_rcv_rcv_mux_ID_A2_I_Derating_TM = 162,
	inverters_inv_r_rcv_rcv_mux_ID_36_CommandSource = 54,
	inverters_inv_r_rcv_rcv_mux_ID_23_Id_Ref = 35,
	inverters_inv_r_rcv_rcv_mux_ID_A0_M_outdig = 160,
	inverters_inv_r_rcv_rcv_mux_ID_B8_Ptr_1_DEBUG = 184,
	inverters_inv_r_rcv_rcv_mux_ID_BA_Ptr_2_DEBUG = 186,
	inverters_inv_r_rcv_rcv_mux_ID_9A_Temp_DEBUG = 154,
	inverters_inv_r_rcv_rcv_mux_ID_05_Motor_F_nom = 5,
	inverters_inv_r_rcv_rcv_mux_ID_06_Motor_V_nom = 6,
	inverters_inv_r_rcv_rcv_mux_ID_07_FU_T_dc = 7,
	inverters_inv_r_rcv_rcv_mux_ID_08_FU_V_dc = 8,
	inverters_inv_r_rcv_rcv_mux_ID_0A_FU_U_min = 10,
	inverters_inv_r_rcv_rcv_mux_ID_0B_FU_F_min = 11,
	inverters_inv_r_rcv_rcv_mux_ID_0C_FU_V_corner = 12,
	inverters_inv_r_rcv_rcv_mux_ID_0D_FU_F_corner = 13,
	inverters_inv_r_rcv_rcv_mux_ID_0E_Motor_Cos_Phi = 14,
	inverters_inv_r_rcv_rcv_mux_ID_19_PWM_Enum = 25,
	inverters_inv_r_rcv_rcv_mux_ID_1A_Calib_Ref_Value = 26,
	inverters_inv_r_rcv_rcv_mux_ID_1C_PID_I_Kp = 28,
	inverters_inv_r_rcv_rcv_mux_ID_1D_PID_I_Ti = 29,
	inverters_inv_r_rcv_rcv_mux_ID_1E_Cutoffdig = 30,
	inverters_inv_r_rcv_rcv_mux_ID_1F_I3_Offset = 31,
	inverters_inv_r_rcv_rcv_mux_ID_25_I_Delta_Ramp = 37,
	inverters_inv_r_rcv_rcv_mux_ID_2B_PID_I_TiM = 43,
	inverters_inv_r_rcv_rcv_mux_ID_2C_PID_n_Kp = 44,
	inverters_inv_r_rcv_rcv_mux_ID_8D_VoltageControl_Ti = 141,
	inverters_inv_r_rcv_rcv_mux_ID_2E_PID_n_Td = 46,
	inverters_inv_r_rcv_rcv_mux_ID_2F_Ain_in_1_OffsScale = 47,
	inverters_inv_r_rcv_rcv_mux_ID_D7_Ain_in_2_OffsScale = 215,
	inverters_inv_r_rcv_rcv_mux_ID_37_DZR_Sequencer_Value = 55,
	inverters_inv_r_rcv_rcv_mux_ID_3B_PID_n_TiM = 59,
	inverters_inv_r_rcv_rcv_mux_ID_3F_N_Lim_plus = 63,
	inverters_inv_r_rcv_rcv_mux_ID_3E_N_Lim_minus = 62,
	inverters_inv_r_rcv_rcv_mux_ID_41_Incr_Delta = 65,
	inverters_inv_r_rcv_rcv_mux_ID_42_MotorPosition_Mech = 66,
	inverters_inv_r_rcv_rcv_mux_ID_43_MotorPosition_Elec = 67,
	inverters_inv_r_rcv_rcv_mux_ID_44_FeedBack_Offset_Angle = 68,
	inverters_inv_r_rcv_rcv_mux_ID_45_Ixt_and_RegenE_Monitor = 69,
	inverters_inv_r_rcv_rcv_mux_ID_4F_Motor_Pole_Number = 79,
	inverters_inv_r_rcv_rcv_mux_ID_50_Ain_in_1_Cutoff = 80,
	inverters_inv_r_rcv_rcv_mux_ID_11_Control_Status = 17,
	inverters_inv_r_rcv_rcv_mux_ID_51_Kern_Mode_State = 81,
	inverters_inv_r_rcv_rcv_mux_ID_52_Status_Mask = 82,
	inverters_inv_r_rcv_rcv_mux_ID_53_Ain_in_2_Cutoff = 83,
	inverters_inv_r_rcv_rcv_mux_ID_57_I_Limit_Inuse_ramp = 87,
	inverters_inv_r_rcv_rcv_mux_ID_59_Motor_Nominal_Speed = 89,
	inverters_inv_r_rcv_rcv_mux_ID_5B_SpeedControl_Kacc = 91,
	inverters_inv_r_rcv_rcv_mux_ID_5C_Rotor_Signals = 92,
	inverters_inv_r_rcv_rcv_mux_ID_5E_Speed_Filter = 94,
	inverters_inv_r_rcv_rcv_mux_ID_60_Ain_in_X_Filter = 96,
	inverters_inv_r_rcv_rcv_mux_ID_61_Ixt_Monitor = 97,
	inverters_inv_r_rcv_rcv_mux_ID_63_ECODE_Status = 99,
	inverters_inv_r_rcv_rcv_mux_ID_64_Device_Mains_Supply_V = 100,
	inverters_inv_r_rcv_rcv_mux_ID_65_Regen_Resistor_P_and_R = 101,
	inverters_inv_r_rcv_rcv_mux_ID_68_CAN_ID_Rx = 104,
	inverters_inv_r_rcv_rcv_mux_ID_69_CAN_ID_Tx = 105,
	inverters_inv_r_rcv_rcv_mux_ID_6A_Pos_PID_Kp = 106,
	inverters_inv_r_rcv_rcv_mux_ID_6B_Pos_PID_Ti = 107,
	inverters_inv_r_rcv_rcv_mux_ID_6C_Pos_PID_Td = 108,
	inverters_inv_r_rcv_rcv_mux_ID_6D_Pos_Actual = 109,
	inverters_inv_r_rcv_rcv_mux_ID_6E_Pos_Destination = 110,
	inverters_inv_r_rcv_rcv_mux_ID_6F_Pos_Actual_2 = 111,
	inverters_inv_r_rcv_rcv_mux_ID_70_Pos_Error = 112,
	inverters_inv_r_rcv_rcv_mux_ID_71_Pos_PID_TiM = 113,
	inverters_inv_r_rcv_rcv_mux_ID_72_Pos_OffsetReference = 114,
	inverters_inv_r_rcv_rcv_mux_ID_73_CAN_NBT = 115,
	inverters_inv_r_rcv_rcv_mux_ID_74_Pos_Zero_Capture = 116,
	inverters_inv_r_rcv_rcv_mux_ID_75_Pos_Ref_Reso_Edge = 117,
	inverters_inv_r_rcv_rcv_mux_ID_76_Pos_Calib_Speed_1 = 118,
	inverters_inv_r_rcv_rcv_mux_ID_77_Pos_Calib_Speed_2 = 119,
	inverters_inv_r_rcv_rcv_mux_ID_79_Pos_Tol_Window = 121,
	inverters_inv_r_rcv_rcv_mux_ID_7A_Pos_Preset_Value = 122,
	inverters_inv_r_rcv_rcv_mux_ID_7B_Pos_Zero_Offset = 123,
	inverters_inv_r_rcv_rcv_mux_ID_7C_Pos_NDrive_Scale = 124,
	inverters_inv_r_rcv_rcv_mux_ID_7D_Pos_NDrive_Offset = 125,
	inverters_inv_r_rcv_rcv_mux_ID_7E_Pos_FB2_Scale_Fac_Ext = 126,
	inverters_inv_r_rcv_rcv_mux_ID_7F_Pos_Offset_Slack = 127,
	inverters_inv_r_rcv_rcv_mux_ID_80_Pos_Diff_Slack = 128,
	inverters_inv_r_rcv_rcv_mux_ID_83_Function_Parameter_Read = 131,
	inverters_inv_r_rcv_rcv_mux_ID_84_Function_Parameter_Write = 132,
	inverters_inv_r_rcv_rcv_mux_ID_85_Function_Special = 133,
	inverters_inv_r_rcv_rcv_mux_ID_88_CAN_ID_2_Rx = 136,
	inverters_inv_r_rcv_rcv_mux_ID_89_CAN_ID_2_Tx = 137,
	inverters_inv_r_rcv_rcv_mux_ID_8B_VoltageControl_Ref = 139,
	inverters_inv_r_rcv_rcv_mux_ID_8C_VoltageControl_Kp = 140,
	inverters_inv_r_rcv_rcv_mux_ID_2D_PID_n_Ti = 45,
	inverters_inv_r_rcv_rcv_mux_ID_8E_Clear_Error_List = 142,
	inverters_inv_r_rcv_rcv_mux_ID_91_Pos_cmd_int = 145,
	inverters_inv_r_rcv_rcv_mux_ID_92_CAN_Error_BusOff_cntr = 146,
	inverters_inv_r_rcv_rcv_mux_ID_93_CAN_Error_WriteTime_cntr = 147,
	inverters_inv_r_rcv_rcv_mux_ID_94_ECODE_1stError = 148,
	inverters_inv_r_rcv_rcv_mux_ID_95_CAN_Error_NoAck_cntr = 149,
	inverters_inv_r_rcv_rcv_mux_ID_96_CAN_Error_CRC_Check_cntr = 150,
	inverters_inv_r_rcv_rcv_mux_ID_97_CAN_Error_Bit_cntr = 151,
	inverters_inv_r_rcv_rcv_mux_ID_99_Info_Timer_Diff = 153,
	inverters_inv_r_rcv_rcv_mux_ID_A1_Ballast_cntr = 161,
	inverters_inv_r_rcv_rcv_mux_ID_A3_Motor_Temp_Error_Lim = 163,
	inverters_inv_r_rcv_rcv_mux_ID_A4_Motor_Options = 164,
	inverters_inv_r_rcv_rcv_mux_ID_A5_Device_DC_Bus_MinMax_Lim = 165,
	inverters_inv_r_rcv_rcv_mux_ID_A6_FB_IncrementsPerRot = 166,
	inverters_inv_r_rcv_rcv_mux_ID_A7_FB_Pole_Number = 167,
	inverters_inv_r_rcv_rcv_mux_ID_AB_Logic_Frequency = 171,
	inverters_inv_r_rcv_rcv_mux_ID_AC_PWM_1_56 = 172,
	inverters_inv_r_rcv_rcv_mux_ID_AD_PWM_2_34 = 173,
	inverters_inv_r_rcv_rcv_mux_ID_AE_PWM_3_12 = 174,
	inverters_inv_r_rcv_rcv_mux_ID_AF_Timer_Delta = 175,
	inverters_inv_r_rcv_rcv_mux_ID_B1_Motor_L_Sigma_Q = 177,
	inverters_inv_r_rcv_rcv_mux_ID_BB_Motor_L_Sigma_D = 187,
	inverters_inv_r_rcv_rcv_mux_ID_B2_Id_Nominal = 178,
	inverters_inv_r_rcv_rcv_mux_ID_B3_Motor_Magn_Inductance = 179,
	inverters_inv_r_rcv_rcv_mux_ID_B4_Motor_Rotor_Resistance = 180,
	inverters_inv_r_rcv_rcv_mux_ID_B5_Id_Minimum = 181,
	inverters_inv_r_rcv_rcv_mux_ID_B6_Time_Constant_Rotor = 182,
	inverters_inv_r_rcv_rcv_mux_ID_BC_Motor_Stator_Resistance = 188,
	inverters_inv_r_rcv_rcv_mux_ID_BD_Time_Constant_Stator = 189,
	inverters_inv_r_rcv_rcv_mux_ID_BE_LogicDefine_of_END_1 = 190,
	inverters_inv_r_rcv_rcv_mux_ID_BF_LogicDefine_of_END_2 = 191,
	inverters_inv_r_rcv_rcv_mux_ID_C0_LogicDefine_of_DIN_1 = 192,
	inverters_inv_r_rcv_rcv_mux_ID_C1_LogicDefine_of_DIN_2 = 193,
	inverters_inv_r_rcv_rcv_mux_ID_C2_LogicDefine_of_OUT_1 = 194,
	inverters_inv_r_rcv_rcv_mux_ID_24_I_Max_Inuse = 36,
	inverters_inv_r_rcv_rcv_mux_ID_E3_DigSignal_GO = 227,
	inverters_inv_r_rcv_rcv_mux_ID_F2_DigSignal_Brake = 242,
	inverters_inv_r_rcv_rcv_mux_ID_F3_DigSignal_Icns = 243,
	inverters_inv_r_rcv_rcv_mux_ID_F5_DigSignal_LessN0 = 245,
	inverters_inv_r_rcv_rcv_mux_ID_F4_DigSignal_Pos_Tolerance = 244,
	inverters_inv_r_rcv_rcv_mux_ID_FB_Ain_in_1_Calc = 251,
	inverters_inv_r_rcv_rcv_mux_ID_FC_Ain_in_2_Calc = 252,
	inverters_inv_r_rcv_rcv_mux_ID_C3_LogicDefine_of_OUT_2 = 195,
	inverters_inv_r_rcv_rcv_mux_ID_DA_LogicDefine_of_OUT_3 = 218,
	inverters_inv_r_rcv_rcv_mux_ID_DB_LogicDefine_of_OUT_4 = 219,
	inverters_inv_r_rcv_rcv_mux_ID_C9_PID_I_xKp = 201,
	inverters_inv_r_rcv_rcv_mux_ID_CA_Bat_Opr_Limits = 202,
	inverters_inv_r_rcv_rcv_mux_ID_CB_PID_I_Kf = 203,
	inverters_inv_r_rcv_rcv_mux_ID_CC_Car_Mode_Status = 204,
	inverters_inv_r_rcv_rcv_mux_ID_CD_Car_Mode_Config = 205,
	inverters_inv_r_rcv_rcv_mux_ID_CE_N_Rpm_MaxInt = 206,
	inverters_inv_r_rcv_rcv_mux_ID_D1_Var_1 = 209,
	inverters_inv_r_rcv_rcv_mux_ID_D0_CAN_Timeout = 208,
	inverters_inv_r_rcv_rcv_mux_ID_D2_Var_2 = 210,
	inverters_inv_r_rcv_rcv_mux_ID_D3_Var_3 = 211,
	inverters_inv_r_rcv_rcv_mux_ID_D4_Var_4 = 212,
	inverters_inv_r_rcv_rcv_mux_ID_DC_DAC_Source_ID = 220,
	inverters_inv_r_rcv_rcv_mux_ID_EC_DigSignal_FB_LossOfSig = 236,
	inverters_inv_r_rcv_rcv_mux_ID_EF_DigSignal_NoHWFault = 239,
	inverters_inv_r_rcv_rcv_mux_ID_F0_Time_I_Peak = 240,
	inverters_inv_r_rcv_rcv_mux_ID_F1_Brake_Delay = 241,
	inverters_inv_r_rcv_rcv_mux_ID_F6_Inverter_Output_Power = 246,
	inverters_inv_r_rcv_rcv_mux_ID_F7_Inverter_Output_Work = 247,
	inverters_inv_r_rcv_rcv_mux_ID_0F_FU_Extra = 9,
	inverters_inv_r_rcv_rcv_mux_ID_10_Oszi_Channel = 16,
	inverters_inv_r_rcv_rcv_mux_ID_12_Oszi_Triger_Level = 18,
	inverters_inv_r_rcv_rcv_mux_ID_13_Oszi_Triger_Edge = 19,
	inverters_inv_r_rcv_rcv_mux_ID_14_Oszi_Triger_Source = 20,
	inverters_inv_r_rcv_rcv_mux_ID_15_Oszi_Source = 21,
	inverters_inv_r_rcv_rcv_mux_ID_16_Oszi_Skip = 22,
	inverters_inv_r_rcv_rcv_mux_ID_18_Oszi_Run_cmd = 24,
	inverters_inv_r_rcv_rcv_mux_ID_17_Oszi_Read_cmd = 23,
	inverters_inv_r_rcv_rcv_mux_ID_78_Pos_Ref_Start = 120,
	inverters_inv_r_rcv_rcv_mux_ID_66_DC_Bus_Voltage = 102,
	inverters_inv_r_rcv_rcv_mux_ID_3A_M_cmd_ramp = 58,
	inverters_inv_r_rcv_rcv_mux_ID_97_LogicOutBlock = 152,
	inverters_inv_r_rcv_rcv_mux_ID_9B_LogicInBlock = 155,
	inverters_inv_r_rcv_rcv_mux_ID_FE_FW_Subv_Revis_Nr = 254,
} inverters_inv_r_rcv_rcv_mux;

typedef enum {
	inverters_inv_r_rcv_devicetype_Homemade = 0,
	inverters_inv_r_rcv_devicetype_DS205_2ph_230V = 14,
	inverters_inv_r_rcv_devicetype_DS403_2ph_400V = 15,
	inverters_inv_r_rcv_devicetype_DS205_neu_230V = 16,
	inverters_inv_r_rcv_devicetype_DS403_neu_400V = 17,
	inverters_inv_r_rcv_devicetype_DS405 = 19,
	inverters_inv_r_rcv_devicetype_DS412 = 21,
	inverters_inv_r_rcv_devicetype_DS420 = 23,
	inverters_inv_r_rcv_devicetype_DS450 = 25,
	inverters_inv_r_rcv_devicetype_DS475 = 27,
	inverters_inv_r_rcv_devicetype_DS4100 = 29,
	inverters_inv_r_rcv_devicetype_DS4820 = 48,
	inverters_inv_r_rcv_devicetype_DS451 = 49,
	inverters_inv_r_rcv_devicetype_DS476 = 51,
	inverters_inv_r_rcv_devicetype_DS8020 = 56,
	inverters_inv_r_rcv_devicetype_DPC440 = 60,
	inverters_inv_r_rcv_devicetype_DPC460 = 65,
	inverters_inv_r_rcv_devicetype_DPC460_DC1Q_3P = 67,
	inverters_inv_r_rcv_devicetype_BAMO_160_60 = 81,
	inverters_inv_r_rcv_devicetype_BAMO_160_120 = 83,
	inverters_inv_r_rcv_devicetype_BAMO_160_180 = 85,
	inverters_inv_r_rcv_devicetype_BAMO_360_60 = 87,
	inverters_inv_r_rcv_devicetype_BAMO_360_120 = 89,
	inverters_inv_r_rcv_devicetype_BAMO_360_180 = 91,
	inverters_inv_r_rcv_devicetype_BAMO_360_240 = 93,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_62_80 = 112,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_62_80 = 113,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_62_120 = 114,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_62_120 = 115,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_62_250 = 116,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_62_250 = 117,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_62_350 = 118,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_62_350 = 119,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_62_450 = 120,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_62_450 = 121,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_160_50 = 122,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_160_50 = 123,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_160_100 = 124,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_160_100 = 125,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_3_160_200 = 126,
	inverters_inv_r_rcv_devicetype_BAMOBIL_D3_2_160_200 = 127,
	inverters_inv_r_rcv_devicetype_Bamocar_700_160 = 192,
	inverters_inv_r_rcv_devicetype_Bamocar_700_100 = 193,
	inverters_inv_r_rcv_devicetype_Bamocar_700_900 = 194,
	inverters_inv_r_rcv_devicetype_Bamocar_700_200_DC = 203,
	inverters_inv_r_rcv_devicetype_Bamocar_400_400 = 204,
	inverters_inv_r_rcv_devicetype_Bamocar_700_400 = 205,
	inverters_inv_r_rcv_devicetype_Bamocar_400_250 = 206,
	inverters_inv_r_rcv_devicetype_Koepfer_V1_700_400 = 240,
	inverters_inv_r_rcv_devicetype_Koepfer_V2_700_400 = 241,
} inverters_inv_r_rcv_devicetype;

typedef enum {
	inverters_inv_r_rcv_can_nbt_1000_kbps = 16386,
	inverters_inv_r_rcv_can_nbt_500_kbps = 16421,
	inverters_inv_r_rcv_can_nbt_625_kbps = 16404,
	inverters_inv_r_rcv_can_nbt_250_kbps = 16476,
	inverters_inv_r_rcv_can_nbt_100_kbps = 17445,
} inverters_inv_r_rcv_can_nbt;

typedef enum {
	inverters_inv_r_rcv_mo_feedback_1_Rot_Enc_TTL = 0,
	inverters_inv_r_rcv_mo_feedback_1_Resolver = 1,
	inverters_inv_r_rcv_mo_feedback_1_Abs_Enc_SC = 2,
	inverters_inv_r_rcv_mo_feedback_1_Rot_Tacho = 3,
	inverters_inv_r_rcv_mo_feedback_1_Rot = 4,
	inverters_inv_r_rcv_mo_feedback_1_DC_Tacho = 5,
	inverters_inv_r_rcv_mo_feedback_1_DC_Arm = 6,
	inverters_inv_r_rcv_mo_feedback_1_BL_Arm = 7,
	inverters_inv_r_rcv_mo_feedback_1_Enc_TTL = 8,
	inverters_inv_r_rcv_mo_feedback_1_Enc_SC = 9,
	inverters_inv_r_rcv_mo_feedback_1_Abs_SC = 10,
	inverters_inv_r_rcv_mo_feedback_1_DC_Arm_Vir = 11,
	inverters_inv_r_rcv_mo_feedback_1_SLS = 12,
	inverters_inv_r_rcv_mo_feedback_1_SLS_SMO = 13,
	inverters_inv_r_rcv_mo_feedback_1_SLS_Usens = 14,
	inverters_inv_r_rcv_mo_feedback_1_AnaIn1_calc = 15,
	inverters_inv_r_rcv_mo_feedback_1_AnaIn2_calc = 16,
	inverters_inv_r_rcv_mo_feedback_1_Panasonic = 17,
	inverters_inv_r_rcv_mo_feedback_1_DC_Bus = 18,
} inverters_inv_r_rcv_mo_feedback_1;

typedef enum {
	inverters_inv_r_rcv_def_end_1__Off_ = 0,
	inverters_inv_r_rcv_def_end_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_rcv_def_end_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_rcv_def_end_1_Ref_Plus = 3,
	inverters_inv_r_rcv_def_end_1_Limit_Plus = 4,
	inverters_inv_r_rcv_def_end_1_Limit_Minus = 5,
	inverters_inv_r_rcv_def_end_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_rcv_def_end_1_Cancel_Error_s_ = 7,
	inverters_inv_r_rcv_def_end_1__Start_Ref_Drive = 8,
	inverters_inv_r_rcv_def_end_1_Speed_Ramp_0 = 9,
	inverters_inv_r_rcv_def_end_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_rcv_def_end_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_rcv_def_end_1_N_cmd_Reverse = 12,
	inverters_inv_r_rcv_def_end_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_rcv_def_end_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_rcv_def_end_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_rcv_def_end_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_rcv_def_end_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_rcv_def_end_1_I_limit_dig_ = 18,
	inverters_inv_r_rcv_def_end_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_rcv_def_end_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_rcv_def_end_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_rcv_def_end_1_Handwheel = 22,
	inverters_inv_r_rcv_def_end_1_Brake_Car = 23,
	inverters_inv_r_rcv_def_end_1_Recup_Disabled = 24,
	inverters_inv_r_rcv_def_end_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_rcv_def_end_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_rcv_def_end_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_rcv_def_end_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_rcv_def_end_1;

typedef enum {
	inverters_inv_r_rcv_def_end_2__Off_ = 0,
	inverters_inv_r_rcv_def_end_2_Ref_and_Limit_Plus = 1,
	inverters_inv_r_rcv_def_end_2_Ref_and_Limit_Minus = 2,
	inverters_inv_r_rcv_def_end_2_Ref_Plus = 3,
	inverters_inv_r_rcv_def_end_2_Limit_Plus = 4,
	inverters_inv_r_rcv_def_end_2_Limit_Minus = 5,
	inverters_inv_r_rcv_def_end_2_Limit_Plus_and_Minus = 6,
	inverters_inv_r_rcv_def_end_2_Cancel_Error_s_ = 7,
	inverters_inv_r_rcv_def_end_2__Start_Ref_Drive = 8,
	inverters_inv_r_rcv_def_end_2_Speed_Ramp_0 = 9,
	inverters_inv_r_rcv_def_end_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_rcv_def_end_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_rcv_def_end_2_N_cmd_Reverse = 12,
	inverters_inv_r_rcv_def_end_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_rcv_def_end_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_rcv_def_end_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_rcv_def_end_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_rcv_def_end_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_rcv_def_end_2_I_limit_dig_ = 18,
	inverters_inv_r_rcv_def_end_2_N_clip_neg_pos_ = 19,
	inverters_inv_r_rcv_def_end_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_rcv_def_end_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_rcv_def_end_2_Handwheel = 22,
	inverters_inv_r_rcv_def_end_2_Brake_Car = 23,
	inverters_inv_r_rcv_def_end_2_Recup_Disabled = 24,
	inverters_inv_r_rcv_def_end_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_rcv_def_end_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_rcv_def_end_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_rcv_def_end_2_Brake_Car_Nr2 = 28,
} inverters_inv_r_rcv_def_end_2;

typedef enum {
	inverters_inv_r_rcv_def_din_1__Off_ = 0,
	inverters_inv_r_rcv_def_din_1_Ref_and_Limit_Plus = 1,
	inverters_inv_r_rcv_def_din_1_Ref_and_Limit_Minus = 2,
	inverters_inv_r_rcv_def_din_1_Ref_Plus = 3,
	inverters_inv_r_rcv_def_din_1_Limit_Plus = 4,
	inverters_inv_r_rcv_def_din_1_Limit_Minus = 5,
	inverters_inv_r_rcv_def_din_1_Limit_Plus_and_Minus = 6,
	inverters_inv_r_rcv_def_din_1_Cancel_Error_s_ = 7,
	inverters_inv_r_rcv_def_din_1__Start_Ref_Drive = 8,
	inverters_inv_r_rcv_def_din_1_Speed_Ramp_0 = 9,
	inverters_inv_r_rcv_def_din_1__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_rcv_def_din_1__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_rcv_def_din_1_N_cmd_Reverse = 12,
	inverters_inv_r_rcv_def_din_1__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_rcv_def_din_1__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_rcv_def_din_1__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_rcv_def_din_1__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_rcv_def_din_1__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_rcv_def_din_1_I_limit_dig_ = 18,
	inverters_inv_r_rcv_def_din_1_N_clip_neg_pos_ = 19,
	inverters_inv_r_rcv_def_din_1__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_rcv_def_din_1_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_rcv_def_din_1_Handwheel = 22,
	inverters_inv_r_rcv_def_din_1_Brake_Car = 23,
	inverters_inv_r_rcv_def_din_1_Recup_Disabled = 24,
	inverters_inv_r_rcv_def_din_1_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_rcv_def_din_1__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_rcv_def_din_1__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_rcv_def_din_1_Brake_Car_Nr2 = 28,
} inverters_inv_r_rcv_def_din_1;

typedef enum {
	inverters_inv_r_rcv_def_din_2__Off_ = 0,
	inverters_inv_r_rcv_def_din_2_Ref_and_Limit_Plus = 1,
	inverters_inv_r_rcv_def_din_2_Ref_and_Limit_Minus = 2,
	inverters_inv_r_rcv_def_din_2_Ref_Plus = 3,
	inverters_inv_r_rcv_def_din_2_Limit_Plus = 4,
	inverters_inv_r_rcv_def_din_2_Limit_Minus = 5,
	inverters_inv_r_rcv_def_din_2_Limit_Plus_and_Minus = 6,
	inverters_inv_r_rcv_def_din_2_Cancel_Error_s_ = 7,
	inverters_inv_r_rcv_def_din_2__Start_Ref_Drive = 8,
	inverters_inv_r_rcv_def_din_2_Speed_Ramp_0 = 9,
	inverters_inv_r_rcv_def_din_2__Start_Dest_eq_Var_1 = 10,
	inverters_inv_r_rcv_def_din_2__Start_Dest_eq_Var_2 = 11,
	inverters_inv_r_rcv_def_din_2_N_cmd_Reverse = 12,
	inverters_inv_r_rcv_def_din_2__Preset_Pos_eq_Var_3 = 13,
	inverters_inv_r_rcv_def_din_2__Capture_Var_3_eq_Pos = 14,
	inverters_inv_r_rcv_def_din_2__Capture_Var_4_eq_Pos = 15,
	inverters_inv_r_rcv_def_din_2__Switch_Spd_eq_notAin1_Ain2 = 16,
	inverters_inv_r_rcv_def_din_2__Switch_Spd_eq_notVar1_Var2 = 17,
	inverters_inv_r_rcv_def_din_2_I_limit_dig_ = 18,
	inverters_inv_r_rcv_def_din_2_N_clip_neg_pos_ = 19,
	inverters_inv_r_rcv_def_din_2__Switch_Cmd_eq_notDig_Ana = 20,
	inverters_inv_r_rcv_def_din_2_Speed_Ramp_0_Pos = 21,
	inverters_inv_r_rcv_def_din_2_Handwheel = 22,
	inverters_inv_r_rcv_def_din_2_Brake_Car = 23,
	inverters_inv_r_rcv_def_din_2_Recup_Disabled = 24,
	inverters_inv_r_rcv_def_din_2_Rising_Bank_1_Falling_Bank_0 = 25,
	inverters_inv_r_rcv_def_din_2__Start_Dest_eq_Var_1_2_3_4 = 26,
	inverters_inv_r_rcv_def_din_2__Start_CW_eq_Var_1_2_3_4 = 27,
	inverters_inv_r_rcv_def_din_2_Brake_Car_Nr2 = 28,
} inverters_inv_r_rcv_def_din_2;

typedef enum {
	inverters_inv_r_rcv_cs_ain_1_mode__10_10V_ = 0,
	inverters_inv_r_rcv_cs_ain_1_mode__0_10V_ = 1,
	inverters_inv_r_rcv_cs_ain_1_mode__4_20mA_ = 2,
	inverters_inv_r_rcv_cs_ain_1_mode__1_9V_ = 3,
} inverters_inv_r_rcv_cs_ain_1_mode;

typedef enum {
	inverters_inv_r_rcv_compare_var194__0_ = 0,
	inverters_inv_r_rcv_compare_var194__1_ = 1,
	inverters_inv_r_rcv_compare_var194__Var_1_ = 2,
	inverters_inv_r_rcv_compare_var194__Var_2_ = 3,
	inverters_inv_r_rcv_compare_var194__Var_3_ = 4,
	inverters_inv_r_rcv_compare_var194__Var_4_ = 5,
	inverters_inv_r_rcv_compare_var194__Ain_1_ = 6,
	inverters_inv_r_rcv_compare_var194__Ain_2_ = 7,
} inverters_inv_r_rcv_compare_var194;

typedef enum {
	inverters_inv_r_rcv_compare_var195__0_ = 0,
	inverters_inv_r_rcv_compare_var195__1_ = 1,
	inverters_inv_r_rcv_compare_var195__Var_1_ = 2,
	inverters_inv_r_rcv_compare_var195__Var_2_ = 3,
	inverters_inv_r_rcv_compare_var195__Var_3_ = 4,
	inverters_inv_r_rcv_compare_var195__Var_4_ = 5,
	inverters_inv_r_rcv_compare_var195__Ain_1_ = 6,
	inverters_inv_r_rcv_compare_var195__Ain_2_ = 7,
} inverters_inv_r_rcv_compare_var195;

typedef enum {
	inverters_inv_r_rcv_compare_var218__0_ = 0,
	inverters_inv_r_rcv_compare_var218__1_ = 1,
	inverters_inv_r_rcv_compare_var218__Var_1_ = 2,
	inverters_inv_r_rcv_compare_var218__Var_2_ = 3,
	inverters_inv_r_rcv_compare_var218__Var_3_ = 4,
	inverters_inv_r_rcv_compare_var218__Var_4_ = 5,
	inverters_inv_r_rcv_compare_var218__Ain_1_ = 6,
	inverters_inv_r_rcv_compare_var218__Ain_2_ = 7,
} inverters_inv_r_rcv_compare_var218;

typedef enum {
	inverters_inv_r_rcv_compare_var219__0_ = 0,
	inverters_inv_r_rcv_compare_var219__1_ = 1,
	inverters_inv_r_rcv_compare_var219__Var_1_ = 2,
	inverters_inv_r_rcv_compare_var219__Var_2_ = 3,
	inverters_inv_r_rcv_compare_var219__Var_3_ = 4,
	inverters_inv_r_rcv_compare_var219__Var_4_ = 5,
	inverters_inv_r_rcv_compare_var219__Ain_1_ = 6,
	inverters_inv_r_rcv_compare_var219__Ain_2_ = 7,
} inverters_inv_r_rcv_compare_var219;

typedef enum {
	inverters_inv_r_rcv_mo_feedback_2__ = 0,
	inverters_inv_r_rcv_mo_feedback_2_Enc_Position = 1,
	inverters_inv_r_rcv_mo_feedback_2_Enc_Info = 2,
	inverters_inv_r_rcv_mo_feedback_2_Enc_Hand_ = 3,
	inverters_inv_r_rcv_mo_feedback_2_SSI = 4,
} inverters_inv_r_rcv_mo_feedback_2;

typedef enum {
	inverters_inv_r_rcv_cs_ain_2_mode__10_10V_ = 0,
	inverters_inv_r_rcv_cs_ain_2_mode__0_10V_ = 1,
	inverters_inv_r_rcv_cs_ain_2_mode__4_20mA_ = 2,
	inverters_inv_r_rcv_cs_ain_2_mode__1_9V_ = 3,
} inverters_inv_r_rcv_cs_ain_2_mode;

typedef enum {
	inverters_inv_r_rcv_mo_sc1_reso_14_bit = 1,
	inverters_inv_r_rcv_mo_sc1_reso_12_bit = 2,
	inverters_inv_r_rcv_mo_sc1_reso_10_bit = 3,
} inverters_inv_r_rcv_mo_sc1_reso;

typedef enum {
	inverters_inv_r_rcv_source_id194__5Dh_N_cmd_int_ = 93,
	inverters_inv_r_rcv_source_id194__32h_N_cmd_ramp_ = 50,
	inverters_inv_r_rcv_source_id194__30h_N_Actual = 48,
	inverters_inv_r_rcv_source_id194__A8h_N_Actual_Filt = 168,
	inverters_inv_r_rcv_source_id194__33h_N_Error = 51,
	inverters_inv_r_rcv_source_id194__26h_I_cmd = 38,
	inverters_inv_r_rcv_source_id194__22h_I_cmd_ramp_ = 34,
	inverters_inv_r_rcv_source_id194__20h_I_Actual = 32,
	inverters_inv_r_rcv_source_id194__5Fh_I_Actual_Filt = 95,
	inverters_inv_r_rcv_source_id194__6Eh_Pos_Destination = 110,
	inverters_inv_r_rcv_source_id194__91h_Pos_cmd = 145,
	inverters_inv_r_rcv_source_id194__6Dh_Pos_Actual = 109,
	inverters_inv_r_rcv_source_id194__70h_Pos_Error = 112,
	inverters_inv_r_rcv_source_id194__74h_Pos_ZeroCapture = 116,
	inverters_inv_r_rcv_source_id194__E4h_DigInput_END_1 = 228,
	inverters_inv_r_rcv_source_id194__E5h_DigInput_END_2 = 229,
	inverters_inv_r_rcv_source_id194__E6h_DigInput_DIN_1 = 230,
	inverters_inv_r_rcv_source_id194__E7h_DigInput_DIN_2 = 231,
	inverters_inv_r_rcv_source_id194__E8h_DigInput_RUN = 232,
	inverters_inv_r_rcv_source_id194__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_r_rcv_source_id194__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_r_rcv_source_id194__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_r_rcv_source_id194__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_r_rcv_source_id194__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_r_rcv_source_id194__E9h_Error_I_Fault = 233,
	inverters_inv_r_rcv_source_id194__EAh_I_Ballast_Act = 234,
	inverters_inv_r_rcv_source_id194__24h_I_Max_Inuse = 36,
	inverters_inv_r_rcv_source_id194__ECh_FB_LossOfSignal = 236,
	inverters_inv_r_rcv_source_id194__Off_ = 0,
	inverters_inv_r_rcv_source_id194__E3h_DigSignal_GO = 227,
	inverters_inv_r_rcv_source_id194__F2h_DigSignal_Brake = 242,
	inverters_inv_r_rcv_source_id194__F3h_DigSignal_Icns = 243,
	inverters_inv_r_rcv_source_id194__F5h_DigSignal_LessN0 = 245,
	inverters_inv_r_rcv_source_id194__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_r_rcv_source_id194__5Ch_Rotor_Signals = 92,
	inverters_inv_r_rcv_source_id194__D1h_Var_1 = 209,
	inverters_inv_r_rcv_source_id194__D2h_Var_2 = 210,
	inverters_inv_r_rcv_source_id194__D3h_Var_3 = 211,
	inverters_inv_r_rcv_source_id194__D4h_Var_4 = 212,
	inverters_inv_r_rcv_source_id194__D5h_Ain_In_1 = 213,
	inverters_inv_r_rcv_source_id194__D6h_Ain_In_2 = 214,
	inverters_inv_r_rcv_source_id194__42h_MotorPos_Mech = 66,
	inverters_inv_r_rcv_source_id194__43h_MotorPos_Elec = 67,
	inverters_inv_r_rcv_source_id194__A9h_I3_Adc_Value = 169,
	inverters_inv_r_rcv_source_id194__AAh_I2_Adc_Value = 170,
	inverters_inv_r_rcv_source_id194__54h_I1_Actual = 84,
	inverters_inv_r_rcv_source_id194__55h_I2_Actual = 85,
	inverters_inv_r_rcv_source_id194__56h_I3_Actual = 86,
	inverters_inv_r_rcv_source_id194__27h_Iq_Actual = 39,
	inverters_inv_r_rcv_source_id194__28h_Id_Actual = 40,
	inverters_inv_r_rcv_source_id194__38h_Iq_Error = 56,
	inverters_inv_r_rcv_source_id194__39h_Id_Error = 57,
	inverters_inv_r_rcv_source_id194__23h_Id_Ref = 35,
	inverters_inv_r_rcv_source_id194__B5h_Id_Min = 181,
	inverters_inv_r_rcv_source_id194__61h_Ixt_Monitor = 97,
	inverters_inv_r_rcv_source_id194__48h_I_Limit_Inuse = 72,
	inverters_inv_r_rcv_source_id194__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_r_rcv_source_id194__FBh_Ain_1_Calc = 251,
	inverters_inv_r_rcv_source_id194__FCh_Ain_2_Calc = 252,
	inverters_inv_r_rcv_source_id194__29h_Vq_Output = 41,
	inverters_inv_r_rcv_source_id194__2Ah_Vd_Output = 42,
	inverters_inv_r_rcv_source_id194__8Ah_V_Output = 138,
	inverters_inv_r_rcv_source_id194__8Bh_V_Red_Ref_ = 139,
	inverters_inv_r_rcv_source_id194__8Ch_V_Control_Kp = 140,
	inverters_inv_r_rcv_source_id194__8Dh_V_Control_Ti = 141,
	inverters_inv_r_rcv_source_id194__ACh_PWM_1_5_6_ = 172,
	inverters_inv_r_rcv_source_id194__ADh_PWM_2_3_4_ = 173,
	inverters_inv_r_rcv_source_id194__AEh_PWM_3_1_2_ = 174,
	inverters_inv_r_rcv_source_id194__49h_T_Motor = 73,
	inverters_inv_r_rcv_source_id194__4Ah_T_Igbt = 74,
	inverters_inv_r_rcv_source_id194__4Bh_T_Air_Inside = 75,
	inverters_inv_r_rcv_source_id194__45h_It_Rg_Monitor = 69,
	inverters_inv_r_rcv_source_id194__9Ah_Temp_DEBUG = 154,
	inverters_inv_r_rcv_source_id194__ABh_Logic_Freq = 171,
	inverters_inv_r_rcv_source_id194__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_r_rcv_source_id194__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_r_rcv_source_id194__8Fh_ErrorWarning_Map = 143,
	inverters_inv_r_rcv_source_id194__40h_Status_Map = 64,
	inverters_inv_r_rcv_source_id194__41h_Incr_Delta = 65,
	inverters_inv_r_rcv_source_id194__34h_N_Lim = 52,
	inverters_inv_r_rcv_source_id194__63h_FPGA_Status = 99,
	inverters_inv_r_rcv_source_id194__31h_N_set_dig_ = 49,
	inverters_inv_r_rcv_source_id194__90h_M_set_dig_ = 144,
	inverters_inv_r_rcv_source_id194__A0h_M_out_dig_ = 160,
	inverters_inv_r_rcv_source_id194__6Fh_Pos_Actual_2 = 111,
	inverters_inv_r_rcv_source_id194__98h_Logic_O_Block = 152,
	inverters_inv_r_rcv_source_id194__9Bh_Logic_I_Block = 155,
	inverters_inv_r_rcv_source_id194__02h_SC_Info = 2,
	inverters_inv_r_rcv_source_id194__EBh_Vdc_Bus = 235,
	inverters_inv_r_rcv_source_id194__66h_Vdc_Bus_Filt = 102,
	inverters_inv_r_rcv_source_id194__99h_Info_Timer_Diff = 153,
	inverters_inv_r_rcv_source_id194__A1h_Ballast_cntr = 161,
	inverters_inv_r_rcv_source_id194__51_Kern_Mode_State = 81,
	inverters_inv_r_rcv_source_id194__11h_Control_Status = 17,
} inverters_inv_r_rcv_source_id194;

typedef enum {
	inverters_inv_r_rcv_source_id195__5Dh_N_cmd_int_ = 93,
	inverters_inv_r_rcv_source_id195__32h_N_cmd_ramp_ = 50,
	inverters_inv_r_rcv_source_id195__30h_N_Actual = 48,
	inverters_inv_r_rcv_source_id195__A8h_N_Actual_Filt = 168,
	inverters_inv_r_rcv_source_id195__33h_N_Error = 51,
	inverters_inv_r_rcv_source_id195__26h_I_cmd = 38,
	inverters_inv_r_rcv_source_id195__22h_I_cmd_ramp_ = 34,
	inverters_inv_r_rcv_source_id195__20h_I_Actual = 32,
	inverters_inv_r_rcv_source_id195__5Fh_I_Actual_Filt = 95,
	inverters_inv_r_rcv_source_id195__6Eh_Pos_Destination = 110,
	inverters_inv_r_rcv_source_id195__91h_Pos_cmd = 145,
	inverters_inv_r_rcv_source_id195__6Dh_Pos_Actual = 109,
	inverters_inv_r_rcv_source_id195__70h_Pos_Error = 112,
	inverters_inv_r_rcv_source_id195__74h_Pos_ZeroCapture = 116,
	inverters_inv_r_rcv_source_id195__E4h_DigInput_END_1 = 228,
	inverters_inv_r_rcv_source_id195__E5h_DigInput_END_2 = 229,
	inverters_inv_r_rcv_source_id195__E6h_DigInput_DIN_1 = 230,
	inverters_inv_r_rcv_source_id195__E7h_DigInput_DIN_2 = 231,
	inverters_inv_r_rcv_source_id195__E8h_DigInput_RUN = 232,
	inverters_inv_r_rcv_source_id195__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_r_rcv_source_id195__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_r_rcv_source_id195__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_r_rcv_source_id195__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_r_rcv_source_id195__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_r_rcv_source_id195__E9h_Error_I_Fault = 233,
	inverters_inv_r_rcv_source_id195__EAh_I_Ballast_Act = 234,
	inverters_inv_r_rcv_source_id195__24h_I_Max_Inuse = 36,
	inverters_inv_r_rcv_source_id195__ECh_FB_LossOfSignal = 236,
	inverters_inv_r_rcv_source_id195__Off_ = 0,
	inverters_inv_r_rcv_source_id195__E3h_DigSignal_GO = 227,
	inverters_inv_r_rcv_source_id195__F2h_DigSignal_Brake = 242,
	inverters_inv_r_rcv_source_id195__F3h_DigSignal_Icns = 243,
	inverters_inv_r_rcv_source_id195__F5h_DigSignal_LessN0 = 245,
	inverters_inv_r_rcv_source_id195__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_r_rcv_source_id195__5Ch_Rotor_Signals = 92,
	inverters_inv_r_rcv_source_id195__D1h_Var_1 = 209,
	inverters_inv_r_rcv_source_id195__D2h_Var_2 = 210,
	inverters_inv_r_rcv_source_id195__D3h_Var_3 = 211,
	inverters_inv_r_rcv_source_id195__D4h_Var_4 = 212,
	inverters_inv_r_rcv_source_id195__D5h_Ain_In_1 = 213,
	inverters_inv_r_rcv_source_id195__D6h_Ain_In_2 = 214,
	inverters_inv_r_rcv_source_id195__42h_MotorPos_Mech = 66,
	inverters_inv_r_rcv_source_id195__43h_MotorPos_Elec = 67,
	inverters_inv_r_rcv_source_id195__A9h_I3_Adc_Value = 169,
	inverters_inv_r_rcv_source_id195__AAh_I2_Adc_Value = 170,
	inverters_inv_r_rcv_source_id195__54h_I1_Actual = 84,
	inverters_inv_r_rcv_source_id195__55h_I2_Actual = 85,
	inverters_inv_r_rcv_source_id195__56h_I3_Actual = 86,
	inverters_inv_r_rcv_source_id195__27h_Iq_Actual = 39,
	inverters_inv_r_rcv_source_id195__28h_Id_Actual = 40,
	inverters_inv_r_rcv_source_id195__38h_Iq_Error = 56,
	inverters_inv_r_rcv_source_id195__39h_Id_Error = 57,
	inverters_inv_r_rcv_source_id195__23h_Id_Ref = 35,
	inverters_inv_r_rcv_source_id195__B5h_Id_Min = 181,
	inverters_inv_r_rcv_source_id195__61h_Ixt_Monitor = 97,
	inverters_inv_r_rcv_source_id195__48h_I_Limit_Inuse = 72,
	inverters_inv_r_rcv_source_id195__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_r_rcv_source_id195__FBh_Ain_1_Calc = 251,
	inverters_inv_r_rcv_source_id195__FCh_Ain_2_Calc = 252,
	inverters_inv_r_rcv_source_id195__29h_Vq_Output = 41,
	inverters_inv_r_rcv_source_id195__2Ah_Vd_Output = 42,
	inverters_inv_r_rcv_source_id195__8Ah_V_Output = 138,
	inverters_inv_r_rcv_source_id195__8Bh_V_Red_Ref_ = 139,
	inverters_inv_r_rcv_source_id195__8Ch_V_Control_Kp = 140,
	inverters_inv_r_rcv_source_id195__8Dh_V_Control_Ti = 141,
	inverters_inv_r_rcv_source_id195__ACh_PWM_1_5_6_ = 172,
	inverters_inv_r_rcv_source_id195__ADh_PWM_2_3_4_ = 173,
	inverters_inv_r_rcv_source_id195__AEh_PWM_3_1_2_ = 174,
	inverters_inv_r_rcv_source_id195__49h_T_Motor = 73,
	inverters_inv_r_rcv_source_id195__4Ah_T_Igbt = 74,
	inverters_inv_r_rcv_source_id195__4Bh_T_Air_Inside = 75,
	inverters_inv_r_rcv_source_id195__45h_It_Rg_Monitor = 69,
	inverters_inv_r_rcv_source_id195__9Ah_Temp_DEBUG = 154,
	inverters_inv_r_rcv_source_id195__ABh_Logic_Freq = 171,
	inverters_inv_r_rcv_source_id195__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_r_rcv_source_id195__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_r_rcv_source_id195__8Fh_ErrorWarning_Map = 143,
	inverters_inv_r_rcv_source_id195__40h_Status_Map = 64,
	inverters_inv_r_rcv_source_id195__41h_Incr_Delta = 65,
	inverters_inv_r_rcv_source_id195__34h_N_Lim = 52,
	inverters_inv_r_rcv_source_id195__63h_FPGA_Status = 99,
	inverters_inv_r_rcv_source_id195__31h_N_set_dig_ = 49,
	inverters_inv_r_rcv_source_id195__90h_M_set_dig_ = 144,
	inverters_inv_r_rcv_source_id195__A0h_M_out_dig_ = 160,
	inverters_inv_r_rcv_source_id195__6Fh_Pos_Actual_2 = 111,
	inverters_inv_r_rcv_source_id195__98h_Logic_O_Block = 152,
	inverters_inv_r_rcv_source_id195__9Bh_Logic_I_Block = 155,
	inverters_inv_r_rcv_source_id195__02h_SC_Info = 2,
	inverters_inv_r_rcv_source_id195__EBh_Vdc_Bus = 235,
	inverters_inv_r_rcv_source_id195__66h_Vdc_Bus_Filt = 102,
	inverters_inv_r_rcv_source_id195__99h_Info_Timer_Diff = 153,
	inverters_inv_r_rcv_source_id195__A1h_Ballast_cntr = 161,
	inverters_inv_r_rcv_source_id195__51_Kern_Mode_State = 81,
	inverters_inv_r_rcv_source_id195__11h_Control_Status = 17,
} inverters_inv_r_rcv_source_id195;

typedef enum {
	inverters_inv_r_rcv_source_id218__5Dh_N_cmd_int_ = 93,
	inverters_inv_r_rcv_source_id218__32h_N_cmd_ramp_ = 50,
	inverters_inv_r_rcv_source_id218__30h_N_Actual = 48,
	inverters_inv_r_rcv_source_id218__A8h_N_Actual_Filt = 168,
	inverters_inv_r_rcv_source_id218__33h_N_Error = 51,
	inverters_inv_r_rcv_source_id218__26h_I_cmd = 38,
	inverters_inv_r_rcv_source_id218__22h_I_cmd_ramp_ = 34,
	inverters_inv_r_rcv_source_id218__20h_I_Actual = 32,
	inverters_inv_r_rcv_source_id218__5Fh_I_Actual_Filt = 95,
	inverters_inv_r_rcv_source_id218__6Eh_Pos_Destination = 110,
	inverters_inv_r_rcv_source_id218__91h_Pos_cmd = 145,
	inverters_inv_r_rcv_source_id218__6Dh_Pos_Actual = 109,
	inverters_inv_r_rcv_source_id218__70h_Pos_Error = 112,
	inverters_inv_r_rcv_source_id218__74h_Pos_ZeroCapture = 116,
	inverters_inv_r_rcv_source_id218__E4h_DigInput_END_1 = 228,
	inverters_inv_r_rcv_source_id218__E5h_DigInput_END_2 = 229,
	inverters_inv_r_rcv_source_id218__E6h_DigInput_DIN_1 = 230,
	inverters_inv_r_rcv_source_id218__E7h_DigInput_DIN_2 = 231,
	inverters_inv_r_rcv_source_id218__E8h_DigInput_RUN = 232,
	inverters_inv_r_rcv_source_id218__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_r_rcv_source_id218__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_r_rcv_source_id218__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_r_rcv_source_id218__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_r_rcv_source_id218__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_r_rcv_source_id218__E9h_Error_I_Fault = 233,
	inverters_inv_r_rcv_source_id218__EAh_I_Ballast_Act = 234,
	inverters_inv_r_rcv_source_id218__24h_I_Max_Inuse = 36,
	inverters_inv_r_rcv_source_id218__ECh_FB_LossOfSignal = 236,
	inverters_inv_r_rcv_source_id218__Off_ = 0,
	inverters_inv_r_rcv_source_id218__E3h_DigSignal_GO = 227,
	inverters_inv_r_rcv_source_id218__F2h_DigSignal_Brake = 242,
	inverters_inv_r_rcv_source_id218__F3h_DigSignal_Icns = 243,
	inverters_inv_r_rcv_source_id218__F5h_DigSignal_LessN0 = 245,
	inverters_inv_r_rcv_source_id218__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_r_rcv_source_id218__5Ch_Rotor_Signals = 92,
	inverters_inv_r_rcv_source_id218__D1h_Var_1 = 209,
	inverters_inv_r_rcv_source_id218__D2h_Var_2 = 210,
	inverters_inv_r_rcv_source_id218__D3h_Var_3 = 211,
	inverters_inv_r_rcv_source_id218__D4h_Var_4 = 212,
	inverters_inv_r_rcv_source_id218__D5h_Ain_In_1 = 213,
	inverters_inv_r_rcv_source_id218__D6h_Ain_In_2 = 214,
	inverters_inv_r_rcv_source_id218__42h_MotorPos_Mech = 66,
	inverters_inv_r_rcv_source_id218__43h_MotorPos_Elec = 67,
	inverters_inv_r_rcv_source_id218__A9h_I3_Adc_Value = 169,
	inverters_inv_r_rcv_source_id218__AAh_I2_Adc_Value = 170,
	inverters_inv_r_rcv_source_id218__54h_I1_Actual = 84,
	inverters_inv_r_rcv_source_id218__55h_I2_Actual = 85,
	inverters_inv_r_rcv_source_id218__56h_I3_Actual = 86,
	inverters_inv_r_rcv_source_id218__27h_Iq_Actual = 39,
	inverters_inv_r_rcv_source_id218__28h_Id_Actual = 40,
	inverters_inv_r_rcv_source_id218__38h_Iq_Error = 56,
	inverters_inv_r_rcv_source_id218__39h_Id_Error = 57,
	inverters_inv_r_rcv_source_id218__23h_Id_Ref = 35,
	inverters_inv_r_rcv_source_id218__B5h_Id_Min = 181,
	inverters_inv_r_rcv_source_id218__61h_Ixt_Monitor = 97,
	inverters_inv_r_rcv_source_id218__48h_I_Limit_Inuse = 72,
	inverters_inv_r_rcv_source_id218__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_r_rcv_source_id218__FBh_Ain_1_Calc = 251,
	inverters_inv_r_rcv_source_id218__FCh_Ain_2_Calc = 252,
	inverters_inv_r_rcv_source_id218__29h_Vq_Output = 41,
	inverters_inv_r_rcv_source_id218__2Ah_Vd_Output = 42,
	inverters_inv_r_rcv_source_id218__8Ah_V_Output = 138,
	inverters_inv_r_rcv_source_id218__8Bh_V_Red_Ref_ = 139,
	inverters_inv_r_rcv_source_id218__8Ch_V_Control_Kp = 140,
	inverters_inv_r_rcv_source_id218__8Dh_V_Control_Ti = 141,
	inverters_inv_r_rcv_source_id218__ACh_PWM_1_5_6_ = 172,
	inverters_inv_r_rcv_source_id218__ADh_PWM_2_3_4_ = 173,
	inverters_inv_r_rcv_source_id218__AEh_PWM_3_1_2_ = 174,
	inverters_inv_r_rcv_source_id218__49h_T_Motor = 73,
	inverters_inv_r_rcv_source_id218__4Ah_T_Igbt = 74,
	inverters_inv_r_rcv_source_id218__4Bh_T_Air_Inside = 75,
	inverters_inv_r_rcv_source_id218__45h_It_Rg_Monitor = 69,
	inverters_inv_r_rcv_source_id218__9Ah_Temp_DEBUG = 154,
	inverters_inv_r_rcv_source_id218__ABh_Logic_Freq = 171,
	inverters_inv_r_rcv_source_id218__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_r_rcv_source_id218__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_r_rcv_source_id218__8Fh_ErrorWarning_Map = 143,
	inverters_inv_r_rcv_source_id218__40h_Status_Map = 64,
	inverters_inv_r_rcv_source_id218__41h_Incr_Delta = 65,
	inverters_inv_r_rcv_source_id218__34h_N_Lim = 52,
	inverters_inv_r_rcv_source_id218__63h_FPGA_Status = 99,
	inverters_inv_r_rcv_source_id218__31h_N_set_dig_ = 49,
	inverters_inv_r_rcv_source_id218__90h_M_set_dig_ = 144,
	inverters_inv_r_rcv_source_id218__A0h_M_out_dig_ = 160,
	inverters_inv_r_rcv_source_id218__6Fh_Pos_Actual_2 = 111,
	inverters_inv_r_rcv_source_id218__98h_Logic_O_Block = 152,
	inverters_inv_r_rcv_source_id218__9Bh_Logic_I_Block = 155,
	inverters_inv_r_rcv_source_id218__02h_SC_Info = 2,
	inverters_inv_r_rcv_source_id218__EBh_Vdc_Bus = 235,
	inverters_inv_r_rcv_source_id218__66h_Vdc_Bus_Filt = 102,
	inverters_inv_r_rcv_source_id218__99h_Info_Timer_Diff = 153,
	inverters_inv_r_rcv_source_id218__A1h_Ballast_cntr = 161,
	inverters_inv_r_rcv_source_id218__51_Kern_Mode_State = 81,
	inverters_inv_r_rcv_source_id218__11h_Control_Status = 17,
} inverters_inv_r_rcv_source_id218;

typedef enum {
	inverters_inv_r_rcv_source_id219__5Dh_N_cmd_int_ = 93,
	inverters_inv_r_rcv_source_id219__32h_N_cmd_ramp_ = 50,
	inverters_inv_r_rcv_source_id219__30h_N_Actual = 48,
	inverters_inv_r_rcv_source_id219__A8h_N_Actual_Filt = 168,
	inverters_inv_r_rcv_source_id219__33h_N_Error = 51,
	inverters_inv_r_rcv_source_id219__26h_I_cmd = 38,
	inverters_inv_r_rcv_source_id219__22h_I_cmd_ramp_ = 34,
	inverters_inv_r_rcv_source_id219__20h_I_Actual = 32,
	inverters_inv_r_rcv_source_id219__5Fh_I_Actual_Filt = 95,
	inverters_inv_r_rcv_source_id219__6Eh_Pos_Destination = 110,
	inverters_inv_r_rcv_source_id219__91h_Pos_cmd = 145,
	inverters_inv_r_rcv_source_id219__6Dh_Pos_Actual = 109,
	inverters_inv_r_rcv_source_id219__70h_Pos_Error = 112,
	inverters_inv_r_rcv_source_id219__74h_Pos_ZeroCapture = 116,
	inverters_inv_r_rcv_source_id219__E4h_DigInput_END_1 = 228,
	inverters_inv_r_rcv_source_id219__E5h_DigInput_END_2 = 229,
	inverters_inv_r_rcv_source_id219__E6h_DigInput_DIN_1 = 230,
	inverters_inv_r_rcv_source_id219__E7h_DigInput_DIN_2 = 231,
	inverters_inv_r_rcv_source_id219__E8h_DigInput_RUN = 232,
	inverters_inv_r_rcv_source_id219__E0h_DigOutput_DOUT_1 = 224,
	inverters_inv_r_rcv_source_id219__E1h_DigOutput_DOUT_2 = 225,
	inverters_inv_r_rcv_source_id219__DEh_DigOutput_DOUT_3 = 222,
	inverters_inv_r_rcv_source_id219__DFh_DigOutput_DOUT_4 = 223,
	inverters_inv_r_rcv_source_id219__E2h_DigOutput_Rdy_BTB = 226,
	inverters_inv_r_rcv_source_id219__E9h_Error_I_Fault = 233,
	inverters_inv_r_rcv_source_id219__EAh_I_Ballast_Act = 234,
	inverters_inv_r_rcv_source_id219__24h_I_Max_Inuse = 36,
	inverters_inv_r_rcv_source_id219__ECh_FB_LossOfSignal = 236,
	inverters_inv_r_rcv_source_id219__Off_ = 0,
	inverters_inv_r_rcv_source_id219__E3h_DigSignal_GO = 227,
	inverters_inv_r_rcv_source_id219__F2h_DigSignal_Brake = 242,
	inverters_inv_r_rcv_source_id219__F3h_DigSignal_Icns = 243,
	inverters_inv_r_rcv_source_id219__F5h_DigSignal_LessN0 = 245,
	inverters_inv_r_rcv_source_id219__F4h_DigSignal_PosToler_Set = 244,
	inverters_inv_r_rcv_source_id219__5Ch_Rotor_Signals = 92,
	inverters_inv_r_rcv_source_id219__D1h_Var_1 = 209,
	inverters_inv_r_rcv_source_id219__D2h_Var_2 = 210,
	inverters_inv_r_rcv_source_id219__D3h_Var_3 = 211,
	inverters_inv_r_rcv_source_id219__D4h_Var_4 = 212,
	inverters_inv_r_rcv_source_id219__D5h_Ain_In_1 = 213,
	inverters_inv_r_rcv_source_id219__D6h_Ain_In_2 = 214,
	inverters_inv_r_rcv_source_id219__42h_MotorPos_Mech = 66,
	inverters_inv_r_rcv_source_id219__43h_MotorPos_Elec = 67,
	inverters_inv_r_rcv_source_id219__A9h_I3_Adc_Value = 169,
	inverters_inv_r_rcv_source_id219__AAh_I2_Adc_Value = 170,
	inverters_inv_r_rcv_source_id219__54h_I1_Actual = 84,
	inverters_inv_r_rcv_source_id219__55h_I2_Actual = 85,
	inverters_inv_r_rcv_source_id219__56h_I3_Actual = 86,
	inverters_inv_r_rcv_source_id219__27h_Iq_Actual = 39,
	inverters_inv_r_rcv_source_id219__28h_Id_Actual = 40,
	inverters_inv_r_rcv_source_id219__38h_Iq_Error = 56,
	inverters_inv_r_rcv_source_id219__39h_Id_Error = 57,
	inverters_inv_r_rcv_source_id219__23h_Id_Ref = 35,
	inverters_inv_r_rcv_source_id219__B5h_Id_Min = 181,
	inverters_inv_r_rcv_source_id219__61h_Ixt_Monitor = 97,
	inverters_inv_r_rcv_source_id219__48h_I_Limit_Inuse = 72,
	inverters_inv_r_rcv_source_id219__57h_I_Limit_Inuse_ramp_ = 87,
	inverters_inv_r_rcv_source_id219__FBh_Ain_1_Calc = 251,
	inverters_inv_r_rcv_source_id219__FCh_Ain_2_Calc = 252,
	inverters_inv_r_rcv_source_id219__29h_Vq_Output = 41,
	inverters_inv_r_rcv_source_id219__2Ah_Vd_Output = 42,
	inverters_inv_r_rcv_source_id219__8Ah_V_Output = 138,
	inverters_inv_r_rcv_source_id219__8Bh_V_Red_Ref_ = 139,
	inverters_inv_r_rcv_source_id219__8Ch_V_Control_Kp = 140,
	inverters_inv_r_rcv_source_id219__8Dh_V_Control_Ti = 141,
	inverters_inv_r_rcv_source_id219__ACh_PWM_1_5_6_ = 172,
	inverters_inv_r_rcv_source_id219__ADh_PWM_2_3_4_ = 173,
	inverters_inv_r_rcv_source_id219__AEh_PWM_3_1_2_ = 174,
	inverters_inv_r_rcv_source_id219__49h_T_Motor = 73,
	inverters_inv_r_rcv_source_id219__4Ah_T_Igbt = 74,
	inverters_inv_r_rcv_source_id219__4Bh_T_Air_Inside = 75,
	inverters_inv_r_rcv_source_id219__45h_It_Rg_Monitor = 69,
	inverters_inv_r_rcv_source_id219__9Ah_Temp_DEBUG = 154,
	inverters_inv_r_rcv_source_id219__ABh_Logic_Freq = 171,
	inverters_inv_r_rcv_source_id219__B8h_Ptr_1_DEBUG = 184,
	inverters_inv_r_rcv_source_id219__BAh_Ptr_2_DEBUG = 186,
	inverters_inv_r_rcv_source_id219__8Fh_ErrorWarning_Map = 143,
	inverters_inv_r_rcv_source_id219__40h_Status_Map = 64,
	inverters_inv_r_rcv_source_id219__41h_Incr_Delta = 65,
	inverters_inv_r_rcv_source_id219__34h_N_Lim = 52,
	inverters_inv_r_rcv_source_id219__63h_FPGA_Status = 99,
	inverters_inv_r_rcv_source_id219__31h_N_set_dig_ = 49,
	inverters_inv_r_rcv_source_id219__90h_M_set_dig_ = 144,
	inverters_inv_r_rcv_source_id219__A0h_M_out_dig_ = 160,
	inverters_inv_r_rcv_source_id219__6Fh_Pos_Actual_2 = 111,
	inverters_inv_r_rcv_source_id219__98h_Logic_O_Block = 152,
	inverters_inv_r_rcv_source_id219__9Bh_Logic_I_Block = 155,
	inverters_inv_r_rcv_source_id219__02h_SC_Info = 2,
	inverters_inv_r_rcv_source_id219__EBh_Vdc_Bus = 235,
	inverters_inv_r_rcv_source_id219__66h_Vdc_Bus_Filt = 102,
	inverters_inv_r_rcv_source_id219__99h_Info_Timer_Diff = 153,
	inverters_inv_r_rcv_source_id219__A1h_Ballast_cntr = 161,
	inverters_inv_r_rcv_source_id219__51_Kern_Mode_State = 81,
	inverters_inv_r_rcv_source_id219__11h_Control_Status = 17,
} inverters_inv_r_rcv_source_id219;

typedef enum {
	inverters_inv_r_rcv_cs_cmd_type_Digital_Commands = 0,
	inverters_inv_r_rcv_cs_cmd_type_Dig_Ana_Speed = 1,
	inverters_inv_r_rcv_cs_cmd_type_Analog_Speed = 2,
	inverters_inv_r_rcv_cs_cmd_type_Analog_Torque = 3,
} inverters_inv_r_rcv_cs_cmd_type;

typedef enum {
	inverters_inv_r_rcv_mo_sc2_reso_14_bit = 1,
	inverters_inv_r_rcv_mo_sc2_reso_12_bit = 2,
	inverters_inv_r_rcv_mo_sc2_reso_10_bit = 3,
} inverters_inv_r_rcv_mo_sc2_reso;

typedef enum {
	inverters_inv_r_rcv_active190_Low = 0,
	inverters_inv_r_rcv_active190_High = 1,
} inverters_inv_r_rcv_active190;

typedef enum {
	inverters_inv_r_rcv_active191_Low = 0,
	inverters_inv_r_rcv_active191_High = 1,
} inverters_inv_r_rcv_active191;

typedef enum {
	inverters_inv_r_rcv_active192_Low = 0,
	inverters_inv_r_rcv_active192_High = 1,
} inverters_inv_r_rcv_active192;

typedef enum {
	inverters_inv_r_rcv_active193_Low = 0,
	inverters_inv_r_rcv_active193_High = 1,
} inverters_inv_r_rcv_active193;

/**
 * Signals in message INV_L_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_send_mux send_mux;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_f_n;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    int16_t id_setdig__id;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_setdig;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim;

    /**
     * Speed Ramp Acc Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_acc;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    uint16_t i_red_n;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_minus;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_plus;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_read_id read_id;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t i_lim_dig;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_nom_eff;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_1_filter;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_devicetype devicetype;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_can_nbt can_nbt;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Clear Errors. Just send a value of 0 to this ID Address
     *
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsq;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsd;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_din_2 def_din_2;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit0__dc_current_sens_ena;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit1__idc_limit_ena;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit2__pdc_limit_usage;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit3__torqueval_init_ena;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit4__dig_m_rcpramp_ena;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_feedback_2 mo_feedback_2;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit5__reset_nramp_atnzero;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit6__torquetimeout_100ms_e;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_2_filter;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_sc1_reso mo_sc1_reso;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc1_comp;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_sc2_reso mo_sc2_reso;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit14__idc_limit_ena_v2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc2_inv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active193 active193;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit15__dig_e_brake_act;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    int16_t ain_in_2_scaleval;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit18__tractioncontrol_ena;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit23__tc_ncmdrestoption;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_send_t;

/**
 * Signals in message INV_L_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_send_mux send_mux;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float motor_f_n;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    float id_setdig__id;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_setdig;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim;

    /**
     * Speed Ramp Acc Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_acc;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_red_n;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_minus;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_plus;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_read_id read_id;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_lim_dig;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    float i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    float i_nom_eff;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_1_filter;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_devicetype devicetype;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_can_nbt can_nbt;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Clear Errors. Just send a value of 0 to this ID Address
     *
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsq;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    float motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsd;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_def_din_2 def_din_2;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit0__dc_current_sens_ena : 1;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit1__idc_limit_ena : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit2__pdc_limit_usage : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit3__torqueval_init_ena : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit4__dig_m_rcpramp_ena : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_feedback_2 mo_feedback_2;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit5__reset_nramp_atnzero : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit6__torquetimeout_100ms_e : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_2_filter;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_sc1_reso mo_sc1_reso;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc1_comp : 1;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_mo_sc2_reso mo_sc2_reso;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit14__idc_limit_ena_v2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc2_inv : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_send_active193 active193;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit15__dig_e_brake_act : 1;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    float ain_in_2_scaleval;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit18__tractioncontrol_ena : 1;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit23__tc_ncmdrestoption : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_send_converted_t;

/**
 * Signals in message INV_L_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed
     *
     * Range: -32767.00000405309586161245655..32767 (-3600..3599.9999995547 Num)
     * Scale: 0.1098666341
     * Offset: 0
     */
    int16_t n_actual;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: -32768..32767 (-3600.1098661888..3599.9999995547 rpm)
     * Scale: 0.1098666341
     * Offset: 0
     */
    int16_t n_actual_filt;

    /**
     * Firmware Number
     *
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t firmware;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_devicetype devicetype;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Internal Current value at 200% nominal device current
     *
     * Range: 0..65535 (0..65535 adc)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_200perc;

    /**
     * Status Bit Map
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t status_bitmap;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_badparas;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_1;

    /**
     * Analog Input Signal 1 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_raw;

    /**
     * Analog Input Signal 2 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_raw;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_setdig;

    /**
     * Digital numerical Speed Command - internal
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_cmd;

    /**
     * Digital numerical Speed Command - internal ramped
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_cmd_ramp;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim;

    /**
     * Speed n Error difference
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_error;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    int16_t id_setdig__id;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_nom_eff;

    /**
     * Actual Reduced Current Limit
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_limit_inuse;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd_ramp;

    /**
     * Measured numerical Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_actual;

    /**
     * Measured numerical Current Filtered - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_actual_filt;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t iq_actual;

    /**
     * Measured numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t id_actual;

    /**
     * Error of the numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t iq_error;

    /**
     * Error of the numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t id_error;

    /**
     * Measured numerical I1-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    int16_t i1_actual;

    /**
     * Measured numerical I2-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    int16_t i2_actual;

    /**
     * Measured numerical I3-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    int16_t i3_actual;

    /**
     * Measured ADC Value of the I3-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_adc;

    /**
     * Measured ADC Value of the I2-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i2_adc;

    /**
     * Q - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vq;

    /**
     * D - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vd;

    /**
     * Voltage Output Vq and Vd total
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vout;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * Temperature Air (inside) as ADC value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t t_air;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    uint16_t vdc_bus_filt;

    /**
     * Digital Input - END 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t end_1;

    /**
     * Digital Input - DIN 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t din_1;

    /**
     * Digital Input - END 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t end_2;

    /**
     * Digital Input - DIN 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t din_2;

    /**
     * Digital Input - RUN
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t run232;

    /**
     * Digital Output - DOUT 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_1;

    /**
     * Digital Output - DOUT 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_2;

    /**
     * Digital Output - DOUT 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_3;

    /**
     * Digital Output - Rdy_BTB
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy_btb;

    /**
     * Hardware Error Signal I_Fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t i_fault;

    /**
     * Digital Output - DOUT 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_4;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t i_lim_dig;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    uint16_t i_red_n;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Command Source Mask - Analog 1 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_1_format;

    /**
     * Set (Reference) numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t id_ref;

    /**
     * Digital numerical Iq-Current Output - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_outdig__iq;

    /**
     * Debugger Pointer 1
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_1_debug;

    /**
     * Debugger Pointer 2
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_2_debug;

    /**
     * Debugger Pointer Temp
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t temp_debug;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_f_n;

    /**
     * Nominal Motor Voltage
     *
     * Range: 0..65535 (0..65535 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_v_n;

    /**
     * Time For DC Pre-Charge-Magnitising - Start
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__start;

    /**
     * DC Voltage for Pre-Magnitization - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_dc__start;

    /**
     * Minimum Voltage (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_min__start;

    /**
     * Minimum Frequency (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_min__start;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_corner__start;

    /**
     * Frequency at max output voltage - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_corner__start;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Value for PWM Frequency configuration (Internal)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pwm_enum;

    /**
     * Entry for the Reference Value used for various Calibrations
     *
     * Range: 0..65535 (0..6553.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t calib_ref_value;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital Cutoff area of incomming digital commands
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cutoffdig;

    /**
     * I3 Offset value measured at Enable
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_offset;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Analog Input Signal 1 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_offsetval;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * SpeedControl Loop (DZR) Sequencer Configuration (PWM Freq dependent)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dzr_seq;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_plus;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_minus;

    /**
     * Delta diff of the feedback Signal per measuring point
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t incr_delta;

    /**
     * Actual Mechanical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_mech;

    /**
     * Actual Electrical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_elec;

    /**
     * FeedBack Offset Angle Value
     *
     * Range: -3600..3600 (-360..360 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fb_offset;

    /**
     * Bleeder Resistor Ixt  Monitor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t it_rg_monitor;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ena82;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Actual Reduced Current Limit ramped
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    int16_t i_limit_inuse_ramp;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Digital Hall Sensor Position Rotor Signals Value
     *
     * Range: 0..65535 (0..65535 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rotor_signals;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_1_filter;

    /**
     * Monitor Value for Regen I x t calculation
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ixt_monitor;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit0_firsterrordtcd99;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Actual Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Numeric Actual Position 2 (Alternative) Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual_2;

    /**
     * Numeric Error Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_error;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_can_nbt can_nbt;

    /**
     * Position Zero Capture
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_zero_capture;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * User Zero Offset Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_zero_offset;

    /**
     * NDrive Position Display Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_scale;

    /**
     * NDrive Position Display Offset Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_offset;

    /**
     * Feedback 2 - External Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t fb2_scale_ext;

    /**
     * Position Offset Slack Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offset_slack;

    /**
     * Position Difference Slack Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_diff_slack;

    /**
     * Special Function For Parameter Read command from Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_read;

    /**
     * Special Function For Parameter Write command to Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_write;

    /**
     * Special Functions for automatic logics or calculations
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_special;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Clear Error and Warning List
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Numeric Position Command Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_cmd;

    /**
     * CAN Bus Error counter - Bus Off
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_busoff;

    /**
     * CAN Bus Error counter - Write Time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_writetime;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit0_firsterrordtcd148;

    /**
     * CAN Bus Error counter - No Ack
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_no_ack;

    /**
     * CAN Bus Error counter - CRC_Check
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check150;

    /**
     * CAN Bus Error counter - Error Status Bit from CAN Module
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check151;

    /**
     * Info Interrupt time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t info_timer_diff;

    /**
     * Internal Ballast Count Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ballastcount;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Foreground Cycle Frequency
     *
     * Range: 0..65535 (0..65535 Hz)
     * Scale: 1
     * Offset: 0
     */
    uint16_t logic_freq;

    /**
     * PWM 1 (5/6) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_1;

    /**
     * PWM 2 (3/4) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_2;

    /**
     * PWM 3 (1/2) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_3;

    /**
     * PWM Configuration value of timer delta
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t timer_delta;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsq;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsd;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_din_2 def_din_2;

    /**
     * Selection List Operant for digital Output OUT 1
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand194;

    /**
     * Maximum possible allowed current
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_max_inuse;

    /**
     * Digital Output Signal - internal GO is set (no errors)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_go;

    /**
     * Digital Output Signal - mechanical Brake Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_brake;

    /**
     * Digital Output Signal - The current limit is reduced to continuous current
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_icns;

    /**
     * Digital Output Signal - Actual speed less than 0.1 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_lessn0;

    /**
     * Digital Output Signal - Actual Position is within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_postolerance;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled251;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled252;

    /**
     * Selection List Operant for digital Output OUT 2
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand195;

    /**
     * Selection List Operant for digital Output OUT 3
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand218;

    /**
     * Selection List Operant for digital Output OUT 4
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand219;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * DC Current Sesnor is set to enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_current_sens_ena_set;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit0__dc_current_sens_ena;

    /**
     * Max possible Rotation Speed internal
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_rpm_maxint;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * DAC Configuration of the RegID Source Channel as Output
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit7_0__dac_source_channel;

    /**
     * Feedback Loss of Signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fb_lossofsignal;

    /**
     * No HW_Fault detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t no_hw_fault;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter Output AC Power (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 W)
     * Scale: 1
     * Offset: 0
     */
    int16_t power;

    /**
     * Inverter Output AC Work (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 Joul)
     * Scale: 1
     * Offset: 0
     */
    int16_t work;

    /**
     * FU Extra - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t extra__start;

    /**
     * NDrive Oszillloscop - Capture Channel
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t capture_channel;

    /**
     * NDrive Oszillloscop - Capture Trigger Edge
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_level;

    /**
     * NDrive Oszillloscop - Capture Trigger Level
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_edge;

    /**
     * NDrive Oszillloscop - Capture Trigger Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t trig_source;

    /**
     * NDrive Oszillloscop - Capture Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_source;

    /**
     * NDrive Oszillloscop - Capture Skip
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_skip;

    /**
     * NDrive Oszillloscop - Run Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_run_cmd;

    /**
     * NDrive Oszillloscop - Read Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_read_cmd;

    /**
     * Start Park Cycle
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_ref_start;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    uint16_t vdc_bus;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_1;

    /**
     * Output Signal - Out 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_1;

    /**
     * Firmware Subversion Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t subversion_nr;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powerfault;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ncr082;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit1__hw1_state99;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit1__hw1_state148;

    /**
     * DC current Sensor (if present) Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_i_sensena_set;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit1__idc_limit_ena;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_2;

    /**
     * Output Signal - Out 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_2;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_rfe_fault;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_2;

    /**
     * Command Source Mask - Analog 2 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_2_format;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_plus82;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit2__hw0_state99;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit2__hw0_state148;

    /**
     * Present Operation Quadrant Mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t op_mode_quadrant;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit2__pdc_limit_usage;

    /**
     * Input Signal - Input 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_2;

    /**
     * Output Signal - Rdy
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy155;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_bustimeout;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_minus82;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit3__free99;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit3__free148;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit3__torqueval_init_ena;

    /**
     * Input Signal - Input 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_1;

    /**
     * Output Signal - Go
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t go155;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_feedbacksignal;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frgrun;

    /**
     * Command Source Mask - Analog 1 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_cs_ain_1_mode cs_ain_1_mode;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ok82;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit4__rdy399;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit4__rdy3148;

    /**
     * Arrangement Variable Selection List for digital Output 1
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var194 compare_var194;

    /**
     * Arrangement Variable Selection List for digital Output 2
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var195 compare_var195;

    /**
     * Arrangement Variable Selection List for digital Output 3
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var218 compare_var218;

    /**
     * Arrangement Variable Selection List for digital Output 4
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var219 compare_var219;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit4__dig_m_rcpramp_ena;

    /**
     * Input Signal - Run (FRG)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t run152;

    /**
     * Output Signal - Out 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_3;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powervoltage_low;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfe216;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icns82;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit5__n_fail99;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit5__n_fail148;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_feedback_2 mo_feedback_2;

    /**
     * Recuperation is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t recup_is_acv;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit5__reset_nramp_atnzero;

    /**
     * Input Signal - RFE
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfe152;

    /**
     * Output Signal - Out 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_4;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_motortemp;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tnlim82;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit6__flths99;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit6__flths148;

    /**
     * Motor Current Limiting Activated because of DC Current lmiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t i_dc_limit_is_acv;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit6__torquetimeout_100ms_e;

    /**
     * reserved
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsvd;

    /**
     * reserved 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsvd1;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_devicetemp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_oora1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pn82;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit7__fltls99;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit7__fltls148;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Output Signal - break 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk1155;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_overvoltage;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_1_on;

    /**
     * Command Source Mask - Analog 2 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_cs_ain_2_mode cs_ain_2_mode;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ni82;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_2_filter;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit8__fail_idc99;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit8__fail_idc148;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_sc1_reso mo_sc1_reso;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id194 source_id194;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id195 source_id195;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id218 source_id218;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id219 source_id219;

    /**
     * CAN PDOs extension
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit8__can_extended_0;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ipeak;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_2_on;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _n082;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit9__fail_i99;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit9__fail_i148;

    /**
     * Special DC Bus generator operation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit9__generator;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_raceaway;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t btbrdy;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsw82;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit10__vccm99;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit10__vccm148;

    /**
     * Set factor 1divsqrt(2) in park currents
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit10__park_rms;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_user;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t go216;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_oora2;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal082;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit11__15m_minus99;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit11__15m_minus148;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc1_comp;

    /**
     * DCBus Value as V for output Communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit11__dcbus_volts;

    /**
     * Firmware Test Number
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t test;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_3_on;

    /**
     * Command Source Mask - Bitmask Coding of Command Type
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_cs_cmd_type cs_cmd_type;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal82;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit12__15m_plus99;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit12__15m_plus148;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_sc2_reso mo_sc2_reso;

    /**
     * Command (Acc Pedal) must be at 0 to enable inverter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit12__boat_pedal;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_4_on;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tol82;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit13__18m_plus99;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit13__18m_plus148;

    /**
     * Special Generator Mode with automatic Iac limit reduction
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit13__gen_autoiaclimit;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_hwerr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t goff;

    /**
     * Command Source Mask - Analog 2 I Limit Status Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_2__i_limit;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy82;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit14__ubmam99;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit14__ubmam148;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit14__idc_limit_ena_v2;

    /**
     * Enable MTPA calculation and automatic command of Id_ref
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit14__mtpa_reluct_enab;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ballast;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk1216;

    /**
     * Command Source Mask - Analog 1 N Limit Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_1__n_limit;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk082;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit15__t_igbt99;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit15__t_igbt148;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc2_inv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active193 active193;

    /**
     * Automatic Iac Lmiting in generator mode is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gen_autoiaclimit_is_acv;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit15__dig_e_brake_act;

    /**
     * (Write Protected) Use CANopen instead of normal CAN protocol for the CAN communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit15__canopen_acv;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_warning_0;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled213;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled214;

    /**
     * DC Current Time
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__stop;

    /**
     * DC-Voltage Value for DC-Braking
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_dc__stop;

    /**
     * Minimum Voltage (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_min__stop;

    /**
     * Minimum Frequency (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_min__stop;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_corner__stop;

    /**
     * Frequency at max output voltage - Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_corner__stop;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Analog Input Signal 1 - Scale Value Setting
     *
     * Range: -32763.904..32763.904 (-7.999..7.999 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    int16_t ain_in_1_scaleval;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    int16_t ain_in_2_scaleval;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signmag82;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * (Write Protected) Activation for the Offset Correction for older Bamobil 3.2 hardware setup
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit16__bamobil3_2_offcrct;

    /**
     * FU Special - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t special__stop;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Firmware SVN Revision Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t svnrevision_nr;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_illegal_status;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip82;

    /**
     * (Write Protected) External ECODE processing matrix reconfiguration
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit19_17__ecode_redefine;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_safe_in;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_minus82;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit18__tractioncontrol_ena;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_plus82;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irddig82;

    /**
     * HAL Sensor Estimator Logic Activation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit20__hal_extmr_acv;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iuserchd82;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Initialize inverter with a set Software Lock
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit21__initwith_frg_off;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_motortemp;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdn82;

    /**
     * Bit 31_22 - free (NOT INUSE)
     *
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dup__bit31_22__free;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_devicetemp;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdti82;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit23__tc_ncmdrestoption;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_vout_sat;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtir82;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ipeak;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _10hz82;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_raceaway;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtm82;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdana82;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iwcns82;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfepulse82;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t md82;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ballast;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hndwhl82;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_rcv_t;

/**
 * Signals in message INV_L_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed
     *
     * Range: -32767.00000405309586161245655..32767 (-3600..3599.9999995547 Num)
     * Scale: 0.1098666341
     * Offset: 0
     */
    float n_actual;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: -32768..32767 (-3600.1098661888..3599.9999995547 rpm)
     * Scale: 0.1098666341
     * Offset: 0
     */
    float n_actual_filt;

    /**
     * Firmware Number
     *
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t firmware;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_devicetype devicetype;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Internal Current value at 200% nominal device current
     *
     * Range: 0..65535 (0..65535 adc)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_200perc;

    /**
     * Status Bit Map
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t status_bitmap;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_badparas : 1;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_1 : 1;

    /**
     * Analog Input Signal 1 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_raw;

    /**
     * Analog Input Signal 2 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_raw;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_setdig;

    /**
     * Digital numerical Speed Command - internal
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_cmd;

    /**
     * Digital numerical Speed Command - internal ramped
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_cmd_ramp;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim;

    /**
     * Speed n Error difference
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_error;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    float id_setdig__id;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    float i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    float i_nom_eff;

    /**
     * Actual Reduced Current Limit
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_limit_inuse;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd_ramp;

    /**
     * Measured numerical Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_actual;

    /**
     * Measured numerical Current Filtered - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_actual_filt;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float iq_actual;

    /**
     * Measured numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float id_actual;

    /**
     * Error of the numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float iq_error;

    /**
     * Error of the numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float id_error;

    /**
     * Measured numerical I1-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    float i1_actual;

    /**
     * Measured numerical I2-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    float i2_actual;

    /**
     * Measured numerical I3-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    float i3_actual;

    /**
     * Measured ADC Value of the I3-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_adc;

    /**
     * Measured ADC Value of the I2-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i2_adc;

    /**
     * Q - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vq;

    /**
     * D - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vd;

    /**
     * Voltage Output Vq and Vd total
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vout;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * Temperature Air (inside) as ADC value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t t_air;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    float vdc_bus_filt;

    /**
     * Digital Input - END 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int end_1 : 1;

    /**
     * Digital Input - DIN 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int din_1 : 1;

    /**
     * Digital Input - END 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int end_2 : 1;

    /**
     * Digital Input - DIN 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int din_2 : 1;

    /**
     * Digital Input - RUN
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int run232 : 1;

    /**
     * Digital Output - DOUT 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_1 : 1;

    /**
     * Digital Output - DOUT 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_2 : 1;

    /**
     * Digital Output - DOUT 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_3 : 1;

    /**
     * Digital Output - Rdy_BTB
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy_btb : 1;

    /**
     * Hardware Error Signal I_Fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int i_fault : 1;

    /**
     * Digital Output - DOUT 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_4 : 1;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_lim_dig;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_red_n;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Command Source Mask - Analog 1 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_1_format;

    /**
     * Set (Reference) numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float id_ref;

    /**
     * Digital numerical Iq-Current Output - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_outdig__iq;

    /**
     * Debugger Pointer 1
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_1_debug;

    /**
     * Debugger Pointer 2
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_2_debug;

    /**
     * Debugger Pointer Temp
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t temp_debug;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float motor_f_n;

    /**
     * Nominal Motor Voltage
     *
     * Range: 0..65535 (0..65535 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_v_n;

    /**
     * Time For DC Pre-Charge-Magnitising - Start
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__start;

    /**
     * DC Voltage for Pre-Magnitization - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_dc__start;

    /**
     * Minimum Voltage (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_min__start;

    /**
     * Minimum Frequency (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_min__start;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_corner__start;

    /**
     * Frequency at max output voltage - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_corner__start;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Value for PWM Frequency configuration (Internal)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pwm_enum;

    /**
     * Entry for the Reference Value used for various Calibrations
     *
     * Range: 0..65535 (0..6553.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    float calib_ref_value;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital Cutoff area of incomming digital commands
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cutoffdig;

    /**
     * I3 Offset value measured at Enable
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_offset;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Analog Input Signal 1 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_offsetval;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * SpeedControl Loop (DZR) Sequencer Configuration (PWM Freq dependent)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dzr_seq;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_plus;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_minus;

    /**
     * Delta diff of the feedback Signal per measuring point
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t incr_delta;

    /**
     * Actual Mechanical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_mech;

    /**
     * Actual Electrical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_elec;

    /**
     * FeedBack Offset Angle Value
     *
     * Range: -3600..3600 (-360..360 -)
     * Scale: 0.1
     * Offset: 0
     */
    float fb_offset;

    /**
     * Bleeder Resistor Ixt  Monitor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t it_rg_monitor;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ena82 : 1;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Actual Reduced Current Limit ramped
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    float i_limit_inuse_ramp;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Digital Hall Sensor Position Rotor Signals Value
     *
     * Range: 0..65535 (0..65535 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rotor_signals;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_1_filter;

    /**
     * Monitor Value for Regen I x t calculation
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ixt_monitor;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit0_firsterrordtcd99 : 1;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Actual Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Numeric Actual Position 2 (Alternative) Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual_2;

    /**
     * Numeric Error Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_error;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_can_nbt can_nbt;

    /**
     * Position Zero Capture
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_zero_capture;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * User Zero Offset Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_zero_offset;

    /**
     * NDrive Position Display Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_scale;

    /**
     * NDrive Position Display Offset Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_offset;

    /**
     * Feedback 2 - External Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t fb2_scale_ext;

    /**
     * Position Offset Slack Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offset_slack;

    /**
     * Position Difference Slack Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_diff_slack;

    /**
     * Special Function For Parameter Read command from Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_read;

    /**
     * Special Function For Parameter Write command to Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_write;

    /**
     * Special Functions for automatic logics or calculations
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_special;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Clear Error and Warning List
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Numeric Position Command Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_cmd;

    /**
     * CAN Bus Error counter - Bus Off
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_busoff;

    /**
     * CAN Bus Error counter - Write Time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_writetime;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit0_firsterrordtcd148 : 1;

    /**
     * CAN Bus Error counter - No Ack
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_no_ack;

    /**
     * CAN Bus Error counter - CRC_Check
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check150;

    /**
     * CAN Bus Error counter - Error Status Bit from CAN Module
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check151;

    /**
     * Info Interrupt time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t info_timer_diff;

    /**
     * Internal Ballast Count Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ballastcount;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Foreground Cycle Frequency
     *
     * Range: 0..65535 (0..65535 Hz)
     * Scale: 1
     * Offset: 0
     */
    uint16_t logic_freq;

    /**
     * PWM 1 (5/6) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_1;

    /**
     * PWM 2 (3/4) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_2;

    /**
     * PWM 3 (1/2) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_3;

    /**
     * PWM Configuration value of timer delta
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t timer_delta;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsq;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsd;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    float motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_def_din_2 def_din_2;

    /**
     * Selection List Operant for digital Output OUT 1
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand194;

    /**
     * Maximum possible allowed current
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_max_inuse;

    /**
     * Digital Output Signal - internal GO is set (no errors)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_go : 1;

    /**
     * Digital Output Signal - mechanical Brake Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_brake : 1;

    /**
     * Digital Output Signal - The current limit is reduced to continuous current
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_icns : 1;

    /**
     * Digital Output Signal - Actual speed less than 0.1 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_lessn0 : 1;

    /**
     * Digital Output Signal - Actual Position is within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_postolerance : 1;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled251;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled252;

    /**
     * Selection List Operant for digital Output OUT 2
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand195;

    /**
     * Selection List Operant for digital Output OUT 3
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand218;

    /**
     * Selection List Operant for digital Output OUT 4
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand219;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * DC Current Sesnor is set to enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dc_current_sens_ena_set : 1;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit0__dc_current_sens_ena : 1;

    /**
     * Max possible Rotation Speed internal
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_rpm_maxint;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * DAC Configuration of the RegID Source Channel as Output
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit7_0__dac_source_channel;

    /**
     * Feedback Loss of Signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int fb_lossofsignal : 1;

    /**
     * No HW_Fault detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int no_hw_fault : 1;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter Output AC Power (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 W)
     * Scale: 1
     * Offset: 0
     */
    int16_t power;

    /**
     * Inverter Output AC Work (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 Joul)
     * Scale: 1
     * Offset: 0
     */
    int16_t work;

    /**
     * FU Extra - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t extra__start;

    /**
     * NDrive Oszillloscop - Capture Channel
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t capture_channel;

    /**
     * NDrive Oszillloscop - Capture Trigger Edge
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_level;

    /**
     * NDrive Oszillloscop - Capture Trigger Level
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_edge;

    /**
     * NDrive Oszillloscop - Capture Trigger Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t trig_source;

    /**
     * NDrive Oszillloscop - Capture Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_source;

    /**
     * NDrive Oszillloscop - Capture Skip
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_skip;

    /**
     * NDrive Oszillloscop - Run Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_run_cmd;

    /**
     * NDrive Oszillloscop - Read Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_read_cmd;

    /**
     * Start Park Cycle
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_ref_start;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    float vdc_bus;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_1 : 1;

    /**
     * Output Signal - Out 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_1 : 1;

    /**
     * Firmware Subversion Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t subversion_nr;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powerfault : 1;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ncr082 : 1;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit1__hw1_state99 : 1;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit1__hw1_state148 : 1;

    /**
     * DC current Sensor (if present) Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dc_i_sensena_set : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit1__idc_limit_ena : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_2 : 1;

    /**
     * Output Signal - Out 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_2 : 1;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_rfe_fault : 1;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_2 : 1;

    /**
     * Command Source Mask - Analog 2 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_2_format;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_plus82 : 1;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit2__hw0_state99 : 1;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit2__hw0_state148 : 1;

    /**
     * Present Operation Quadrant Mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t op_mode_quadrant;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit2__pdc_limit_usage : 1;

    /**
     * Input Signal - Input 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_2 : 1;

    /**
     * Output Signal - Rdy
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy155 : 1;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_bustimeout : 1;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_1 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_minus82 : 1;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit3__free99 : 1;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit3__free148 : 1;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit3__torqueval_init_ena : 1;

    /**
     * Input Signal - Input 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_1 : 1;

    /**
     * Output Signal - Go
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int go155 : 1;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_feedbacksignal : 1;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int frgrun : 1;

    /**
     * Command Source Mask - Analog 1 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_cs_ain_1_mode cs_ain_1_mode;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ok82 : 1;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit4__rdy399 : 1;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit4__rdy3148 : 1;

    /**
     * Arrangement Variable Selection List for digital Output 1
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var194 compare_var194;

    /**
     * Arrangement Variable Selection List for digital Output 2
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var195 compare_var195;

    /**
     * Arrangement Variable Selection List for digital Output 3
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var218 compare_var218;

    /**
     * Arrangement Variable Selection List for digital Output 4
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_compare_var219 compare_var219;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit4__dig_m_rcpramp_ena : 1;

    /**
     * Input Signal - Run (FRG)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int run152 : 1;

    /**
     * Output Signal - Out 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_3 : 1;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powervoltage_low : 1;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfe216 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int icns82 : 1;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit5__n_fail99 : 1;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit5__n_fail148 : 1;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_feedback_2 mo_feedback_2;

    /**
     * Recuperation is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int recup_is_acv : 1;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit5__reset_nramp_atnzero : 1;

    /**
     * Input Signal - RFE
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfe152 : 1;

    /**
     * Output Signal - Out 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_4 : 1;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_motortemp : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tnlim82 : 1;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit6__flths99 : 1;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit6__flths148 : 1;

    /**
     * Motor Current Limiting Activated because of DC Current lmiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int i_dc_limit_is_acv : 1;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit6__torquetimeout_100ms_e : 1;

    /**
     * reserved
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsvd;

    /**
     * reserved 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsvd1 : 1;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_devicetemp : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_oora1 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int pn82 : 1;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit7__fltls99 : 1;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit7__fltls148 : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Output Signal - break 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk1155 : 1;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_overvoltage : 1;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_1_on : 1;

    /**
     * Command Source Mask - Analog 2 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_cs_ain_2_mode cs_ain_2_mode;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ni82 : 1;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_2_filter;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit8__fail_idc99 : 1;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit8__fail_idc148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_sc1_reso mo_sc1_reso;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id194 source_id194;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id195 source_id195;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id218 source_id218;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_source_id219 source_id219;

    /**
     * CAN PDOs extension
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit8__can_extended_0 : 1;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ipeak : 1;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_2_on : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _n082 : 1;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit9__fail_i99 : 1;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit9__fail_i148 : 1;

    /**
     * Special DC Bus generator operation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit9__generator : 1;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_raceaway : 1;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int btbrdy : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsw82 : 1;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit10__vccm99 : 1;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit10__vccm148 : 1;

    /**
     * Set factor 1divsqrt(2) in park currents
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit10__park_rms : 1;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_user : 1;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int go216 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_oora2 : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal082 : 1;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit11__15m_minus99 : 1;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit11__15m_minus148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc1_comp : 1;

    /**
     * DCBus Value as V for output Communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit11__dcbus_volts : 1;

    /**
     * Firmware Test Number
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t test;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_3_on : 1;

    /**
     * Command Source Mask - Bitmask Coding of Command Type
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_cs_cmd_type cs_cmd_type;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal82 : 1;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit12__15m_plus99 : 1;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit12__15m_plus148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_mo_sc2_reso mo_sc2_reso;

    /**
     * Command (Acc Pedal) must be at 0 to enable inverter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit12__boat_pedal : 1;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_4_on : 1;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tol82 : 1;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit13__18m_plus99 : 1;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit13__18m_plus148 : 1;

    /**
     * Special Generator Mode with automatic Iac limit reduction
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit13__gen_autoiaclimit : 1;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_hwerr : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int goff : 1;

    /**
     * Command Source Mask - Analog 2 I Limit Status Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_ain_2__i_limit : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy82 : 1;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit14__ubmam99 : 1;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit14__ubmam148 : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit14__idc_limit_ena_v2 : 1;

    /**
     * Enable MTPA calculation and automatic command of Id_ref
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit14__mtpa_reluct_enab : 1;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ballast : 1;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk1216 : 1;

    /**
     * Command Source Mask - Analog 1 N Limit Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_ain_1__n_limit : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk082 : 1;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit15__t_igbt99 : 1;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit15__t_igbt148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc2_inv : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_l_rcv_active193 active193;

    /**
     * Automatic Iac Lmiting in generator mode is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int gen_autoiaclimit_is_acv : 1;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit15__dig_e_brake_act : 1;

    /**
     * (Write Protected) Use CANopen instead of normal CAN protocol for the CAN communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit15__canopen_acv : 1;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_warning_0 : 1;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled213;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled214;

    /**
     * DC Current Time
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__stop;

    /**
     * DC-Voltage Value for DC-Braking
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_dc__stop;

    /**
     * Minimum Voltage (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_min__stop;

    /**
     * Minimum Frequency (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_min__stop;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_corner__stop;

    /**
     * Frequency at max output voltage - Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_corner__stop;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Analog Input Signal 1 - Scale Value Setting
     *
     * Range: -32763.904..32763.904 (-7.999..7.999 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    float ain_in_1_scaleval;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    float ain_in_2_scaleval;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signmag82 : 1;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * (Write Protected) Activation for the Offset Correction for older Bamobil 3.2 hardware setup
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit16__bamobil3_2_offcrct : 1;

    /**
     * FU Special - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t special__stop;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Firmware SVN Revision Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t svnrevision_nr;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_illegal_status : 1;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip82 : 1;

    /**
     * (Write Protected) External ECODE processing matrix reconfiguration
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit19_17__ecode_redefine;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_safe_in : 1;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_minus82 : 1;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit18__tractioncontrol_ena : 1;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_plus82 : 1;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irddig82 : 1;

    /**
     * HAL Sensor Estimator Logic Activation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit20__hal_extmr_acv : 1;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iuserchd82 : 1;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Initialize inverter with a set Software Lock
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit21__initwith_frg_off : 1;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_motortemp : 1;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdn82 : 1;

    /**
     * Bit 31_22 - free (NOT INUSE)
     *
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dup__bit31_22__free;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_devicetemp : 1;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdti82 : 1;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit23__tc_ncmdrestoption : 1;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_vout_sat : 1;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtir82 : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ipeak : 1;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _10hz82 : 1;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_raceaway : 1;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtm82 : 1;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdana82 : 1;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iwcns82 : 1;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfepulse82 : 1;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int md82 : 1;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ballast : 1;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int hndwhl82 : 1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_l_rcv_converted_t;

/**
 * Signals in message INV_R_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_send_mux send_mux;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_f_n;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    int16_t id_setdig__id;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_setdig;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim;

    /**
     * Speed Ramp Acc Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_acc;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    uint16_t i_red_n;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_minus;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_plus;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_read_id read_id;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t i_lim_dig;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_nom_eff;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_1_filter;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_devicetype devicetype;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_can_nbt can_nbt;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Clear Errors. Just send a value of 0 to this ID Address
     *
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsq;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsd;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_din_2 def_din_2;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit0__dc_current_sens_ena;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit1__idc_limit_ena;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit2__pdc_limit_usage;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit3__torqueval_init_ena;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit4__dig_m_rcpramp_ena;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_feedback_2 mo_feedback_2;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit5__reset_nramp_atnzero;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit6__torquetimeout_100ms_e;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_2_filter;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_sc1_reso mo_sc1_reso;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc1_comp;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_sc2_reso mo_sc2_reso;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit14__idc_limit_ena_v2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc2_inv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active193 active193;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit15__dig_e_brake_act;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    int16_t ain_in_2_scaleval;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit18__tractioncontrol_ena;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit23__tc_ncmdrestoption;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_send_t;

/**
 * Signals in message INV_R_SEND.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_send_mux send_mux;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float motor_f_n;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    float id_setdig__id;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_setdig;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim;

    /**
     * Speed Ramp Acc Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_acc;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_red_n;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_minus;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_plus;

    /**
     * Global ID for Read Command 0x3D in Get_Value
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_read_id read_id;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_lim_dig;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    float i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    float i_nom_eff;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_1_filter;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_devicetype devicetype;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_can_nbt can_nbt;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Clear Errors. Just send a value of 0 to this ID Address
     *
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsq;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    float motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsd;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_def_din_2 def_din_2;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit0__dc_current_sens_ena : 1;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit1__idc_limit_ena : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit2__pdc_limit_usage : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit3__torqueval_init_ena : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit4__dig_m_rcpramp_ena : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_feedback_2 mo_feedback_2;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit5__reset_nramp_atnzero : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit6__torquetimeout_100ms_e : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Range: 0..255 (0..255 ms)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_ret_interval ret_interval;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_2_filter;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_sc1_reso mo_sc1_reso;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc1_comp : 1;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_mo_sc2_reso mo_sc2_reso;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit14__idc_limit_ena_v2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc2_inv : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_send_active193 active193;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit15__dig_e_brake_act : 1;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    float ain_in_2_scaleval;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit18__tractioncontrol_ena : 1;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit23__tc_ncmdrestoption : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_send_converted_t;

/**
 * Signals in message INV_R_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed
     *
     * Range: -32767.00000405309586161245655..32767 (-3600..3599.9999995547 Num)
     * Scale: 0.1098666341
     * Offset: 0
     */
    int16_t n_actual;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: -32768..32767 (-3600.1098661888..3599.9999995547 rpm)
     * Scale: 0.1098666341
     * Offset: 0
     */
    int16_t n_actual_filt;

    /**
     * Firmware Number
     *
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t firmware;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_devicetype devicetype;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_device;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Internal Current value at 200% nominal device current
     *
     * Range: 0..65535 (0..65535 adc)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_200perc;

    /**
     * Status Bit Map
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t status_bitmap;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_badparas;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_1;

    /**
     * Analog Input Signal 1 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_raw;

    /**
     * Analog Input Signal 2 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_raw;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_setdig;

    /**
     * Digital numerical Speed Command - internal
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_cmd;

    /**
     * Digital numerical Speed Command - internal ramped
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_cmd_ramp;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim;

    /**
     * Speed n Error difference
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    int16_t n_error;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    int16_t id_setdig__id;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    uint16_t i_con_eff;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t i_nom_eff;

    /**
     * Actual Reduced Current Limit
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_limit_inuse;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_cmd_ramp;

    /**
     * Measured numerical Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_actual;

    /**
     * Measured numerical Current Filtered - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_actual_filt;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t iq_actual;

    /**
     * Measured numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t id_actual;

    /**
     * Error of the numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t iq_error;

    /**
     * Error of the numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t id_error;

    /**
     * Measured numerical I1-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    int16_t i1_actual;

    /**
     * Measured numerical I2-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    int16_t i2_actual;

    /**
     * Measured numerical I3-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    int16_t i3_actual;

    /**
     * Measured ADC Value of the I3-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_adc;

    /**
     * Measured ADC Value of the I2-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i2_adc;

    /**
     * Q - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vq;

    /**
     * D - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vd;

    /**
     * Voltage Output Vq and Vd total
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vout;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * Temperature Air (inside) as ADC value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t t_air;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    uint16_t vdc_bus_filt;

    /**
     * Digital Input - END 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t end_1;

    /**
     * Digital Input - DIN 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t din_1;

    /**
     * Digital Input - END 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t end_2;

    /**
     * Digital Input - DIN 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t din_2;

    /**
     * Digital Input - RUN
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t run232;

    /**
     * Digital Output - DOUT 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_1;

    /**
     * Digital Output - DOUT 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_2;

    /**
     * Digital Output - DOUT 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_3;

    /**
     * Digital Output - Rdy_BTB
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy_btb;

    /**
     * Hardware Error Signal I_Fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t i_fault;

    /**
     * Digital Output - DOUT 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_4;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t i_lim_dig;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    uint16_t i_red_n;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Command Source Mask - Analog 1 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_1_format;

    /**
     * Set (Reference) numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t id_ref;

    /**
     * Digital numerical Iq-Current Output - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_outdig__iq;

    /**
     * Debugger Pointer 1
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_1_debug;

    /**
     * Debugger Pointer 2
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_2_debug;

    /**
     * Debugger Pointer Temp
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t temp_debug;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_f_n;

    /**
     * Nominal Motor Voltage
     *
     * Range: 0..65535 (0..65535 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_v_n;

    /**
     * Time For DC Pre-Charge-Magnitising - Start
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__start;

    /**
     * DC Voltage for Pre-Magnitization - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_dc__start;

    /**
     * Minimum Voltage (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_min__start;

    /**
     * Minimum Frequency (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_min__start;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_corner__start;

    /**
     * Frequency at max output voltage - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_corner__start;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Value for PWM Frequency configuration (Internal)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pwm_enum;

    /**
     * Entry for the Reference Value used for various Calibrations
     *
     * Range: 0..65535 (0..6553.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t calib_ref_value;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital Cutoff area of incomming digital commands
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cutoffdig;

    /**
     * I3 Offset value measured at Enable
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_offset;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Analog Input Signal 1 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_offsetval;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * SpeedControl Loop (DZR) Sequencer Configuration (PWM Freq dependent)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dzr_seq;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_plus;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    int16_t n_lim_minus;

    /**
     * Delta diff of the feedback Signal per measuring point
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t incr_delta;

    /**
     * Actual Mechanical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_mech;

    /**
     * Actual Electrical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_elec;

    /**
     * FeedBack Offset Angle Value
     *
     * Range: -3600..3600 (-360..360 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fb_offset;

    /**
     * Bleeder Resistor Ixt  Monitor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t it_rg_monitor;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_0;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ena82;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Actual Reduced Current Limit ramped
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    int16_t i_limit_inuse_ramp;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Digital Hall Sensor Position Rotor Signals Value
     *
     * Range: 0..65535 (0..65535 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rotor_signals;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_1_filter;

    /**
     * Monitor Value for Regen I x t calculation
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ixt_monitor;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit0_firsterrordtcd99;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Actual Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Numeric Actual Position 2 (Alternative) Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual_2;

    /**
     * Numeric Error Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_error;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_can_nbt can_nbt;

    /**
     * Position Zero Capture
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_zero_capture;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * User Zero Offset Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_zero_offset;

    /**
     * NDrive Position Display Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_scale;

    /**
     * NDrive Position Display Offset Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_offset;

    /**
     * Feedback 2 - External Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t fb2_scale_ext;

    /**
     * Position Offset Slack Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offset_slack;

    /**
     * Position Difference Slack Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_diff_slack;

    /**
     * Special Function For Parameter Read command from Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_read;

    /**
     * Special Function For Parameter Write command to Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_write;

    /**
     * Special Functions for automatic logics or calculations
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_special;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Clear Error and Warning List
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Numeric Position Command Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_cmd;

    /**
     * CAN Bus Error counter - Bus Off
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_busoff;

    /**
     * CAN Bus Error counter - Write Time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_writetime;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit0_firsterrordtcd148;

    /**
     * CAN Bus Error counter - No Ack
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_no_ack;

    /**
     * CAN Bus Error counter - CRC_Check
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check150;

    /**
     * CAN Bus Error counter - Error Status Bit from CAN Module
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check151;

    /**
     * Info Interrupt time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t info_timer_diff;

    /**
     * Internal Ballast Count Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ballastcount;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Foreground Cycle Frequency
     *
     * Range: 0..65535 (0..65535 Hz)
     * Scale: 1
     * Offset: 0
     */
    uint16_t logic_freq;

    /**
     * PWM 1 (5/6) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_1;

    /**
     * PWM 2 (3/4) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_2;

    /**
     * PWM 3 (1/2) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_3;

    /**
     * PWM Configuration value of timer delta
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t timer_delta;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsq;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t motor_lsd;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_din_2 def_din_2;

    /**
     * Selection List Operant for digital Output OUT 1
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand194;

    /**
     * Maximum possible allowed current
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    int16_t i_max_inuse;

    /**
     * Digital Output Signal - internal GO is set (no errors)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_go;

    /**
     * Digital Output Signal - mechanical Brake Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_brake;

    /**
     * Digital Output Signal - The current limit is reduced to continuous current
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_icns;

    /**
     * Digital Output Signal - Actual speed less than 0.1 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_lessn0;

    /**
     * Digital Output Signal - Actual Position is within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_postolerance;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled251;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled252;

    /**
     * Selection List Operant for digital Output OUT 2
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand195;

    /**
     * Selection List Operant for digital Output OUT 3
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand218;

    /**
     * Selection List Operant for digital Output OUT 4
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand219;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * DC Current Sesnor is set to enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_current_sens_ena_set;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit0__dc_current_sens_ena;

    /**
     * Max possible Rotation Speed internal
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_rpm_maxint;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * DAC Configuration of the RegID Source Channel as Output
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit7_0__dac_source_channel;

    /**
     * Feedback Loss of Signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fb_lossofsignal;

    /**
     * No HW_Fault detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t no_hw_fault;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter Output AC Power (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 W)
     * Scale: 1
     * Offset: 0
     */
    int16_t power;

    /**
     * Inverter Output AC Work (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 Joul)
     * Scale: 1
     * Offset: 0
     */
    int16_t work;

    /**
     * FU Extra - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t extra__start;

    /**
     * NDrive Oszillloscop - Capture Channel
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t capture_channel;

    /**
     * NDrive Oszillloscop - Capture Trigger Edge
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_level;

    /**
     * NDrive Oszillloscop - Capture Trigger Level
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_edge;

    /**
     * NDrive Oszillloscop - Capture Trigger Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t trig_source;

    /**
     * NDrive Oszillloscop - Capture Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_source;

    /**
     * NDrive Oszillloscop - Capture Skip
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_skip;

    /**
     * NDrive Oszillloscop - Run Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_run_cmd;

    /**
     * NDrive Oszillloscop - Read Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_read_cmd;

    /**
     * Start Park Cycle
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_ref_start;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    uint16_t vdc_bus;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Input Signal - Limit 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_1;

    /**
     * Output Signal - Out 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_1;

    /**
     * Firmware Subversion Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t subversion_nr;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powerfault;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_active_2;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_speed_0;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ncr082;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit1__hw1_state99;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit1__hw1_state148;

    /**
     * DC current Sensor (if present) Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_i_sensena_set;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit1__idc_limit_ena;

    /**
     * Input Signal - Limit 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lmt_2;

    /**
     * Output Signal - Out 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_2;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_rfe_fault;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_2;

    /**
     * Command Source Mask - Analog 2 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_2_format;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_frg_off;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_plus82;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit2__hw0_state99;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit2__hw0_state148;

    /**
     * Present Operation Quadrant Mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t op_mode_quadrant;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit2__pdc_limit_usage;

    /**
     * Input Signal - Input 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_2;

    /**
     * Output Signal - Rdy
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy155;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_bustimeout;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_active_1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_cal_off;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lim_minus82;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit3__free99;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit3__free148;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit3__torqueval_init_ena;

    /**
     * Input Signal - Input 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t in_1;

    /**
     * Output Signal - Go
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t go155;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_feedbacksignal;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frgrun;

    /**
     * Command Source Mask - Analog 1 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_cs_ain_1_mode cs_ain_1_mode;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_tx_tog_stat;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ok82;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit4__rdy399;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit4__rdy3148;

    /**
     * Arrangement Variable Selection List for digital Output 1
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var194 compare_var194;

    /**
     * Arrangement Variable Selection List for digital Output 2
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var195 compare_var195;

    /**
     * Arrangement Variable Selection List for digital Output 3
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var218 compare_var218;

    /**
     * Arrangement Variable Selection List for digital Output 4
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var219 compare_var219;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit4__dig_m_rcpramp_ena;

    /**
     * Input Signal - Run (FRG)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t run152;

    /**
     * Output Signal - Out 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_3;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_powervoltage_low;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfe216;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_i_limit;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icns82;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit5__n_fail99;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit5__n_fail148;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_feedback_2 mo_feedback_2;

    /**
     * Recuperation is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t recup_is_acv;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit5__reset_nramp_atnzero;

    /**
     * Input Signal - RFE
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfe152;

    /**
     * Output Signal - Out 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_4;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_motortemp;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_n_clip;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tnlim82;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit6__flths99;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit6__flths148;

    /**
     * Motor Current Limiting Activated because of DC Current lmiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t i_dc_limit_is_acv;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit6__torquetimeout_100ms_e;

    /**
     * reserved
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsvd;

    /**
     * reserved 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsvd1;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_devicetemp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_oora1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_mix_ana_on;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pn82;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit7__fltls99;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit7__fltls148;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Output Signal - break 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk1155;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_overvoltage;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_1_on;

    /**
     * Command Source Mask - Analog 2 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_cs_ain_2_mode cs_ain_2_mode;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_allow_sync;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ni82;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ain_in_2_filter;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit8__fail_idc99;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit8__fail_idc148;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_sc1_reso mo_sc1_reso;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id194 source_id194;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id195 source_id195;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id218 source_id218;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id219 source_id219;

    /**
     * CAN PDOs extension
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit8__can_extended_0;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ipeak;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_2_on;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_handwheel;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _n082;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit9__fail_i99;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit9__fail_i148;

    /**
     * Special DC Bus generator operation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit9__generator;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_raceaway;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t btbrdy;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_phasing_extend;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsw82;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit10__vccm99;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit10__vccm148;

    /**
     * Set factor 1divsqrt(2) in park currents
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit10__park_rms;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_user;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t go216;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_oora2;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_11;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal082;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit11__15m_minus99;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit11__15m_minus148;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc1_comp;

    /**
     * DCBus Value as V for output Communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit11__dcbus_volts;

    /**
     * Firmware Test Number
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t test;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_3_on;

    /**
     * Command Source Mask - Bitmask Coding of Command Type
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_cs_cmd_type cs_cmd_type;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_12;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cal82;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit12__15m_plus99;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit12__15m_plus148;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_sc2_reso mo_sc2_reso;

    /**
     * Command (Acc Pedal) must be at 0 to enable inverter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit12__boat_pedal;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t d_out_4_on;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_rsvd_13;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tol82;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit13__18m_plus99;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit13__18m_plus148;

    /**
     * Special Generator Mode with automatic Iac limit reduction
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit13__gen_autoiaclimit;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_hwerr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t goff;

    /**
     * Command Source Mask - Analog 2 I Limit Status Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_2__i_limit;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_pseudo_enable;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rdy82;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit14__ubmam99;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit14__ubmam148;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit14__idc_limit_ena_v2;

    /**
     * Enable MTPA calculation and automatic command of Id_ref
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit14__mtpa_reluct_enab;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t err_ballast;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk1216;

    /**
     * Command Source Mask - Analog 1 N Limit Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_1__n_limit;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t km_debug_test;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk082;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit15__t_igbt99;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecode_bit15__t_igbt148;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mo_sc2_inv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active193 active193;

    /**
     * Automatic Iac Lmiting in generator mode is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gen_autoiaclimit_is_acv;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit15__dig_e_brake_act;

    /**
     * (Write Protected) Use CANopen instead of normal CAN protocol for the CAN communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit15__canopen_acv;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_warning_0;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled213;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled214;

    /**
     * DC Current Time
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__stop;

    /**
     * DC-Voltage Value for DC-Braking
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_dc__stop;

    /**
     * Minimum Voltage (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_min__stop;

    /**
     * Minimum Frequency (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_min__stop;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t v_corner__stop;

    /**
     * Frequency at max output voltage - Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t f_corner__stop;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Analog Input Signal 1 - Scale Value Setting
     *
     * Range: -32763.904..32763.904 (-7.999..7.999 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    int16_t ain_in_1_scaleval;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    int16_t ain_in_2_scaleval;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signmag82;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * (Write Protected) Activation for the Offset Correction for older Bamobil 3.2 hardware setup
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit16__bamobil3_2_offcrct;

    /**
     * FU Special - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t special__stop;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Firmware SVN Revision Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t svnrevision_nr;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_illegal_status;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip82;

    /**
     * (Write Protected) External ECODE processing matrix reconfiguration
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit19_17__ecode_redefine;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_safe_in;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_minus82;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit18__tractioncontrol_ena;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nclip_plus82;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irddig82;

    /**
     * HAL Sensor Estimator Logic Activation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit20__hal_extmr_acv;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iuserchd82;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Initialize inverter with a set Software Lock
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit21__initwith_frg_off;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_motortemp;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdn82;

    /**
     * Bit 31_22 - free (NOT INUSE)
     *
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dup__bit31_22__free;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_devicetemp;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdti82;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit23__tc_ncmdrestoption;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_vout_sat;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtir82;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ipeak;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _10hz82;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_raceaway;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdtm82;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t irdana82;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t iwcns82;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rfepulse82;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t md82;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warn_ballast;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hndwhl82;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_rcv_t;

/**
 * Signals in message INV_R_RCV.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct CANLIB_PARKING {
    /**
     * Actual Motor Roations Speed
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_rcv_mux rcv_mux;

    /**
     * Actual Motor Roations Speed
     *
     * Range: -32767.00000405309586161245655..32767 (-3600..3599.9999995547 Num)
     * Scale: 0.1098666341
     * Offset: 0
     */
    float n_actual;

    /**
     * Speed Ramp Dec Time [0..30000 ms]
     *
     * Range: 0..30000 (0..30000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_dec;

    /**
     * Emergency Stopping Ramp Time [0..1000 ms]
     *
     * Range: 0..1000 (0..1000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_r_lim;

    /**
     * Actual Motor Roations Speed Filtered
     *
     * Range: -32768..32767 (-3600.1098661888..3599.9999995547 rpm)
     * Scale: 0.1098666341
     * Offset: 0
     */
    float n_actual_filt;

    /**
     * Firmware Number
     *
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t firmware;

    /**
     * Coding Signal defining various device types
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_devicetype devicetype;

    /**
     * Device Serial Number
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t snr;

    /**
     * Inverter 4 Letter Name define
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t axis;

    /**
     * Set device define for continuous current
     *
     * Range: 0..65535 (0..6553.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    float i_device;

    /**
     * Current Sensor rated voltage
     *
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_shunt;

    /**
     * Internal Current value at 200% nominal device current
     *
     * Range: 0..65535 (0..65535 adc)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_200perc;

    /**
     * Status Bit Map
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t status_bitmap;

    /**
     * Damaged parameter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_badparas : 1;

    /**
     * Digital input limit 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_1 : 1;

    /**
     * Analog Input Signal 1 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_raw;

    /**
     * Analog Input Signal 2 - Raw
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_raw;

    /**
     * Maximum Speed Value for Resolution of 16Bit
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nmax100perc;

    /**
     * Digital numerical Speed Command - input
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_setdig;

    /**
     * Digital numerical Speed Command - internal
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_cmd;

    /**
     * Digital numerical Speed Command - internal ramped
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_cmd_ramp;

    /**
     * Speed n Limit - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: -32766.99943739061966000306044..32766.99943739061966000306044 (-100..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim;

    /**
     * Speed n Error difference
     *
     * Range: -32766.99999691205638057269621..32766.99999691205638057269621 (-7100..7100 Num)
     * Scale: 0.2166814173
     * Offset: 0
     */
    float n_error;

    /**
     * Digital numerical Iq-Current Command - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_setdig__iq;

    /**
     * Digital numerical Id-Current Command - input
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    float id_setdig__id;

    /**
     * Max. Device Current (A) settings via percentage entry - Percentage as 13 Bit entry format (16383 equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_max_pk;

    /**
     * Continuous Device Current (Arms) settings via percentage entry - Percentage as 13 Bit entry format (16383 is equal 100perc)
     *
     * Range: 0..16382.99999132683980459157101 (0..100 %)
     * Scale: 0.00610388818
     * Offset: 0
     */
    float i_con_eff;

    /**
     * Motor Maximum Effective Peak Current
     *
     * Range: 0..32767 (0..3276.7 Arms)
     * Scale: 0.1
     * Offset: 0
     */
    float i_max_eff;

    /**
     * Motor Nominal Effective Current
     *
     * Range: 0..65535 (0..6553.5 0,1)
     * Scale: 0.1
     * Offset: 0
     */
    float i_nom_eff;

    /**
     * Actual Reduced Current Limit
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_limit_inuse;

    /**
     * Digital numerical Current Command - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd;

    /**
     * Digital numerical Current Command - internal ramped
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_cmd_ramp;

    /**
     * Measured numerical Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_actual;

    /**
     * Measured numerical Current Filtered - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_actual_filt;

    /**
     * Measured numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float iq_actual;

    /**
     * Measured numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float id_actual;

    /**
     * Error of the numerical Iq-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float iq_error;

    /**
     * Error of the numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float id_error;

    /**
     * Measured numerical I1-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    float i1_actual;

    /**
     * Measured numerical I2-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    float i2_actual;

    /**
     * Measured numerical I3-Current - internal
     *
     * Range: -32768..32767 (-6430.660886528..6430.464638332 A)
     * Scale: 0.196248196
     * Offset: 0
     */
    float i3_actual;

    /**
     * Measured ADC Value of the I3-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_adc;

    /**
     * Measured ADC Value of the I2-current Shunt
     *
     * Range: 0..65535 (0..65535 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i2_adc;

    /**
     * Q - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vq;

    /**
     * D - Value Voltage Output
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vd;

    /**
     * Voltage Output Vq and Vd total
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t vout;

    /**
     * Temperature Motor as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_motor;

    /**
     * Temperature Igbt as ADC value
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_igbt;

    /**
     * Temperature Air (inside) as ADC value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t t_air;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    float vdc_bus_filt;

    /**
     * Digital Input - END 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int end_1 : 1;

    /**
     * Digital Input - DIN 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int din_1 : 1;

    /**
     * Digital Input - END 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int end_2 : 1;

    /**
     * Digital Input - DIN 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int din_2 : 1;

    /**
     * Digital Input - RUN
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int run232 : 1;

    /**
     * Digital Output - DOUT 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_1 : 1;

    /**
     * Digital Output - DOUT 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_2 : 1;

    /**
     * Digital Output - DOUT 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_3 : 1;

    /**
     * Digital Output - Rdy_BTB
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy_btb : 1;

    /**
     * Hardware Error Signal I_Fault
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int i_fault : 1;

    /**
     * Digital Output - DOUT 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dout_4 : 1;

    /**
     * Derating Reduction to percentage Value - Trigger is Dig Input - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_lim_dig;

    /**
     * Current reduction by rotation speed - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float i_red_n;

    /**
     * Start of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_td;

    /**
     * Stop of current reduction by power stage temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_te;

    /**
     * Current reduction by motor temperature
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i_red_tm;

    /**
     * Command Source Mask - Analog 1 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_1_format;

    /**
     * Set (Reference) numerical Id-Current - internal
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float id_ref;

    /**
     * Digital numerical Iq-Current Output - input
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_outdig__iq;

    /**
     * Debugger Pointer 1
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_1_debug;

    /**
     * Debugger Pointer 2
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ptr_2_debug;

    /**
     * Debugger Pointer Temp
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t temp_debug;

    /**
     * Nominal Motor Frequency
     *
     * Range: 0..65535 (0..6553.5 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float motor_f_n;

    /**
     * Nominal Motor Voltage
     *
     * Range: 0..65535 (0..65535 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_v_n;

    /**
     * Time For DC Pre-Charge-Magnitising - Start
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__start;

    /**
     * DC Voltage for Pre-Magnitization - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_dc__start;

    /**
     * Minimum Voltage (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_min__start;

    /**
     * Minimum Frequency (FU operation) at Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_min__start;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_corner__start;

    /**
     * Frequency at max output voltage - Start
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_corner__start;

    /**
     * Motor Power Factor
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cos_phi;

    /**
     * Value for PWM Frequency configuration (Internal)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pwm_enum;

    /**
     * Entry for the Reference Value used for various Calibrations
     *
     * Range: 0..65535 (0..6553.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    float calib_ref_value;

    /**
     * Proportional Gain Iq-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__iq;

    /**
     * Integral Action Time (Integral Part) Iq-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__iq;

    /**
     * Digital Cutoff area of incomming digital commands
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cutoffdig;

    /**
     * I3 Offset value measured at Enable
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t i3_offset;

    /**
     * Final Current Ramp Step setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t i_delta_ramp;

    /**
     * Iq-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__iq;

    /**
     * Proportional Gain Speed Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__kp;

    /**
     * Integral Action Time (Integral Part) Voltage Controller (0.0001 x Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_ti;

    /**
     * Derative Action Time (Derative Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__td;

    /**
     * Analog Input Signal 1 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_offsetval;

    /**
     * Analog Input Signal 2 - Offset Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_offsetval;

    /**
     * SpeedControl Loop (DZR) Sequencer Configuration (PWM Freq dependent)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dzr_seq;

    /**
     * Speed Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__tim;

    /**
     * Speed n Limit plus - Percentage as 15 Bit entry format (32767 equal 100perc)
     *
     * Range: 0..32766.99943739061966000306044 (0..100 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_plus;

    /**
     * Speed n Limit minus - Percentage as 15 Bit entry format (-32767 equal -100perc)
     *
     * Range: -32766.99943739061966000306044..0 (-100..0 %)
     * Scale: 0.003051851
     * Offset: 0
     */
    float n_lim_minus;

    /**
     * Delta diff of the feedback Signal per measuring point
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t incr_delta;

    /**
     * Actual Mechanical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_mech;

    /**
     * Actual Electrical Angle Position of the Motor
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t motorpos_elec;

    /**
     * FeedBack Offset Angle Value
     *
     * Range: -3600..3600 (-360..360 -)
     * Scale: 0.1
     * Offset: 0
     */
    float fb_offset;

    /**
     * Bleeder Resistor Ixt  Monitor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t it_rg_monitor;

    /**
     * Motor Pole Number
     *
     * Range: 2..96 (2..96 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pole;

    /**
     * Analog Input Signal 1 - Cutoff Value Setting
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_cutoff;

    /**
     * Kern Mode State Bit - rsvd_0
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_0 : 1;

    /**
     * Enable drive
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ena82 : 1;

    /**
     * Analog Input Signal 2 - Cutoff Value Setting
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_cutoff;

    /**
     * Actual Reduced Current Limit ramped
     *
     * Range: -32768..32767 (-12249.91571968..12249.54188192 Arms)
     * Scale: 0.37383776
     * Offset: 0
     */
    float i_limit_inuse_ramp;

    /**
     * Motor Nominal Rotation Speed
     *
     * Range: 60..65000 (60..65000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t n_nom;

    /**
     * Speed Control Acceleration Feed Foreward Gain
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t pid_n__kacc;

    /**
     * Digital Hall Sensor Position Rotor Signals Value
     *
     * Range: 0..65535 (0..65535 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rotor_signals;

    /**
     * Additional Filter Adjustment of the Rotation Speed Measurement
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_filter;

    /**
     * Analog Input Signal 1 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_1_filter;

    /**
     * Monitor Value for Regen I x t calculation
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ixt_monitor;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit0_firsterrordtcd99 : 1;

    /**
     * Device Mains Supply Voltage Value
     *
     * Range: 0..1000 (0..1000 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t device_mains;

    /**
     * Regenerative Resistor Power Value
     *
     * Range: 25..10000 (25..10000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_p;

    /**
     * CAN Identiciation ID for Receive - Rx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_rx;

    /**
     * CAN Identiciation ID for Transmit - Tx
     *
     * Range: 0..65530 (0..65530 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_id_tx;

    /**
     * Proportional Gain Position Controller
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_kp;

    /**
     * Integral Action Time (Integral Part) Position Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_ti;

    /**
     * Derative Action Time (Derative Part) Position Controller
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_td;

    /**
     * Numeric Actual Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual;

    /**
     * Numeric Destination Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_dest;

    /**
     * Numeric Actual Position 2 (Alternative) Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_actual_2;

    /**
     * Numeric Error Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_error;

    /**
     * Position Control Integral Maximum Output Range
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_tim;

    /**
     * Numeric Position Zero Offset Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offsref;

    /**
     * CAN BaudRate Configuration Setting
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_can_nbt can_nbt;

    /**
     * Position Zero Capture
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pos_zero_capture;

    /**
     * Resolver Position at Reference Switch (Rsw)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ref_reso_edge;

    /**
     * Position Reference Speed 1 (Fast)
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_1;

    /**
     * Position Reference Speed 1 (Slow) + Phasing electrical Rotation Speed
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t speed_2;

    /**
     * Tolerance Window for Destination Position
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_tol_win;

    /**
     * Numeric Preset Position Value (Set actual Position to Preset Position)
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_preset_val;

    /**
     * User Zero Offset Position Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_zero_offset;

    /**
     * NDrive Position Display Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_scale;

    /**
     * NDrive Position Display Offset Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_nd_offset;

    /**
     * Feedback 2 - External Scale Factor
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t fb2_scale_ext;

    /**
     * Position Offset Slack Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_offset_slack;

    /**
     * Position Difference Slack Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_diff_slack;

    /**
     * Special Function For Parameter Read command from Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_read;

    /**
     * Special Function For Parameter Write command to Eeprom sector
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_para_write;

    /**
     * Special Functions for automatic logics or calculations
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fun_special;

    /**
     * CAN Identiciation ID - 2 - for Receive - Rx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_rx;

    /**
     * CAN Identiciation ID - 2 - for Transmit - Tx
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_id_2_tx;

    /**
     * Voltage Controller Reference value in perc of Vout (V_Red - Start of Field Reduction)
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t v_ref;

    /**
     * Proportional Gain Voltage Controller (0.0001 * Ti equals 1.0)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t v_kp;

    /**
     * Integral Action Time (Integral Part) Speed Controller
     *
     * Range: 0..10000 (0..10000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_n__ti;

    /**
     * Clear Error and Warning List
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t clear_errors;

    /**
     * Numeric Position Command Value
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t pos_cmd;

    /**
     * CAN Bus Error counter - Bus Off
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_busoff;

    /**
     * CAN Bus Error counter - Write Time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_writetime;

    /**
     * Ecode - Bit 0 - First Error Detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit0_firsterrordtcd148 : 1;

    /**
     * CAN Bus Error counter - No Ack
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_no_ack;

    /**
     * CAN Bus Error counter - CRC_Check
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check150;

    /**
     * CAN Bus Error counter - Error Status Bit from CAN Module
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t can_error_crc_check151;

    /**
     * Info Interrupt time
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t info_timer_diff;

    /**
     * Internal Ballast Count Value
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ballastcount;

    /**
     * Motor Temperature Limit for Inverter Error shutdown
     *
     * Range: 0..32767 (0..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_temp;

    /**
     * Motor Options - Feedback 1 Type
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_feedback_1 mo_feedback_1;

    /**
     * DC Bus Min Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_min_lim;

    /**
     * Feedback System Increments per rotation
     *
     * Range: 0..65535 (0..65535 Inc/Rev)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_incr_mot;

    /**
     * Feedback Pole number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fb_pole;

    /**
     * Foreground Cycle Frequency
     *
     * Range: 0..65535 (0..65535 Hz)
     * Scale: 1
     * Offset: 0
     */
    uint16_t logic_freq;

    /**
     * PWM 1 (5/6) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_1;

    /**
     * PWM 2 (3/4) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_2;

    /**
     * PWM 3 (1/2) clock open time
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pwm_3;

    /**
     * PWM Configuration value of timer delta
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t timer_delta;

    /**
     * Motor - Stator Leakage Inductance - Lsq
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsq;

    /**
     * Motor Leakage Inductance ph-ph - Lsd
     *
     * Range: 0..65535 (0..65.535 mH)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_lsd;

    /**
     * Nominal Magnetising d-Current value as perc of nominal current
     *
     * Range: -32768..32767 (-32768..32767 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_nom;

    /**
     * Motor - Magnetizing Inductance - L
     *
     * Range: 0..65535 (0..655.35 mH)
     * Scale: 0.01
     * Offset: 0
     */
    float motor_lm;

    /**
     * Motor - Rotor Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rr;

    /**
     * Minimum Magnetising d-Current value as perc of nominal current
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    int16_t id_min;

    /**
     * Rotor Time Contant of the Motor
     *
     * Range: -32768..32767 (-32768..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t motor_tr;

    /**
     * Motor - Stator Resistance Value
     *
     * Range: 0..65535 (0..65535 mOhm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_rs;

    /**
     * Stator Time Contant of the Motor
     *
     * Range: -32768..32767 (-32.768..32.767 ms)
     * Scale: 0.001
     * Offset: 0
     */
    float motor_ts;

    /**
     * Definition - Function attribution of the Digital Input - END 1 (Limit 1)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_end_1 def_end_1;

    /**
     * Definition - Function attribution of the Digital Input - END 2 (Limit 2)
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_end_2 def_end_2;

    /**
     * Definition - Function attribution of the Digital Input - DIN 1
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_din_1 def_din_1;

    /**
     * Definition - Function attribution of the Digital Input - DIN 2
     *
     * Range: 0..32767 (0..32767 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_def_din_2 def_din_2;

    /**
     * Selection List Operant for digital Output OUT 1
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand194;

    /**
     * Maximum possible allowed current
     *
     * Range: -32768..32767 (-4547.16391424..4547.02514581 Arms)
     * Scale: 0.13876843
     * Offset: 0
     */
    float i_max_inuse;

    /**
     * Digital Output Signal - internal GO is set (no errors)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_go : 1;

    /**
     * Digital Output Signal - mechanical Brake Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_brake : 1;

    /**
     * Digital Output Signal - The current limit is reduced to continuous current
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_icns : 1;

    /**
     * Digital Output Signal - Actual speed less than 0.1 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_lessn0 : 1;

    /**
     * Digital Output Signal - Actual Position is within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signal_postolerance : 1;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled251;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled252;

    /**
     * Selection List Operant for digital Output OUT 2
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand195;

    /**
     * Selection List Operant for digital Output OUT 3
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand218;

    /**
     * Selection List Operant for digital Output OUT 4
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operand219;

    /**
     * Proportional Gain Iq-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__iq;

    /**
     * Idc or Pdc Limit during Motor operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__mot;

    /**
     * Feedforward - Proportional Gain Iq-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__iq;

    /**
     * DC Current Sesnor is set to enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dc_current_sens_ena_set : 1;

    /**
     * Enable the use of the DC current Sensor (if present)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit0__dc_current_sens_ena : 1;

    /**
     * Max possible Rotation Speed internal
     *
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t n_rpm_maxint;

    /**
     * Comparison Variable 1
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_1;

    /**
     * CAN Timeout time settings
     *
     * Range: 0..32767 (0..32767 ms)
     * Scale: 1
     * Offset: 0
     */
    int16_t can_rxtimeout;

    /**
     * Comparison Variable 2
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_2;

    /**
     * Comparison Variable 3
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_3;

    /**
     * Comparison Variable 4
     *
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t var_4;

    /**
     * DAC Configuration of the RegID Source Channel as Output
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit7_0__dac_source_channel;

    /**
     * Feedback Loss of Signal
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int fb_lossofsignal : 1;

    /**
     * No HW_Fault detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int no_hw_fault : 1;

    /**
     * Allowed Timing for Peak Current
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_peak;

    /**
     * Mechanical Brake Delay Time (e.g. Relay)
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brake_delay;

    /**
     * Inverter Output AC Power (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 W)
     * Scale: 1
     * Offset: 0
     */
    int16_t power;

    /**
     * Inverter Output AC Work (DO NOT USE!!)
     *
     * Range: -32768..32767 (-32768..32767 Joul)
     * Scale: 1
     * Offset: 0
     */
    int16_t work;

    /**
     * FU Extra - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t extra__start;

    /**
     * NDrive Oszillloscop - Capture Channel
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t capture_channel;

    /**
     * NDrive Oszillloscop - Capture Trigger Edge
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_level;

    /**
     * NDrive Oszillloscop - Capture Trigger Level
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t trig_edge;

    /**
     * NDrive Oszillloscop - Capture Trigger Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t trig_source;

    /**
     * NDrive Oszillloscop - Capture Source
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_source;

    /**
     * NDrive Oszillloscop - Capture Skip
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_skip;

    /**
     * NDrive Oszillloscop - Run Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_run_cmd;

    /**
     * NDrive Oszillloscop - Read Command
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t oszi_read_cmd;

    /**
     * Start Park Cycle
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pos_ref_start;

    /**
     * DC-Bus Voltage
     *
     * Range: 0..65532.05229287863361432703605 (0..2075 V)
     * Scale: 0.03166389465
     * Offset: 0
     */
    float vdc_bus;

    /**
     * Digital numerical Iq-Current Command - internal ramped
     *
     * Range: -32767..32767 (-32767..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t m_cmd_ramp;

    /**
     * Input Signal - Limit 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_1 : 1;

    /**
     * Output Signal - Out 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_1 : 1;

    /**
     * Firmware Subversion Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t subversion_nr;

    /**
     * Hardware error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powerfault : 1;

    /**
     * Digital input limit 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_active_2 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_speed_0 : 1;

    /**
     * Speed command value = 0 (drive stopped)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ncr082 : 1;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit1__hw1_state99 : 1;

    /**
     * Ecode - Bit 1 - HW 1 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit1__hw1_state148 : 1;

    /**
     * DC current Sensor (if present) Activated
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dc_i_sensena_set : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit1__idc_limit_ena : 1;

    /**
     * Input Signal - Limit 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lmt_2 : 1;

    /**
     * Output Signal - Out 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_2 : 1;

    /**
     * Safety circuit faulty (only active with RUN)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_rfe_fault : 1;

    /**
     * Digital input Din 2 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_2 : 1;

    /**
     * Command Source Mask - Analog 2 Format Bits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cs_ain_2_format;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_frg_off : 1;

    /**
     * Limit switch plus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_plus82 : 1;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit2__hw0_state99 : 1;

    /**
     * Ecode - Bit 2 - HW 0 Coding State
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit2__hw0_state148 : 1;

    /**
     * Present Operation Quadrant Mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t op_mode_quadrant;

    /**
     * Use the DC current Limitiation Calculation depending on the DC Power limits
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit2__pdc_limit_usage : 1;

    /**
     * Input Signal - Input 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_2 : 1;

    /**
     * Output Signal - Rdy
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy155 : 1;

    /**
     * CAN TimeOut time exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_bustimeout : 1;

    /**
     * Digital input Din 1 active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_active_1 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_cal_off : 1;

    /**
     * Limit switch minus assigned
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int lim_minus82 : 1;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit3__free99 : 1;

    /**
     * Ecode - Bit 3 - Free (NOT INUSE)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit3__free148 : 1;

    /**
     * Enable Init as Torque Mode after Enable (Run)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit3__torqueval_init_ena : 1;

    /**
     * Input Signal - Input 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int in_1 : 1;

    /**
     * Output Signal - Go
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int go155 : 1;

    /**
     * Encoder signal faulty or missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_feedbacksignal : 1;

    /**
     * Hardware enable active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int frgrun : 1;

    /**
     * Command Source Mask - Analog 1 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_cs_ain_1_mode cs_ain_1_mode;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_tx_tog_stat : 1;

    /**
     * Drive ok (no uncontrolled control-voltage reset seen)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ok82 : 1;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit4__rdy399 : 1;

    /**
     * Ecode - Bit 4 - RDY3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit4__rdy3148 : 1;

    /**
     * Arrangement Variable Selection List for digital Output 1
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var194 compare_var194;

    /**
     * Arrangement Variable Selection List for digital Output 2
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var195 compare_var195;

    /**
     * Arrangement Variable Selection List for digital Output 3
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var218 compare_var218;

    /**
     * Arrangement Variable Selection List for digital Output 4
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_compare_var219 compare_var219;

    /**
     * Enable the use of Recuperation Ramps during Torque Mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit4__dig_m_rcpramp_ena : 1;

    /**
     * Input Signal - Run (FRG)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int run152 : 1;

    /**
     * Output Signal - Out 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_3 : 1;

    /**
     * Power voltage missing
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_powervoltage_low : 1;

    /**
     * Rotating Field Enable
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfe216 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_i_limit : 1;

    /**
     * Current is limited to the continuous current level
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int icns82 : 1;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit5__n_fail99 : 1;

    /**
     * Ecode - Bit 5 - N FAIL
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit5__n_fail148 : 1;

    /**
     * Motor Options - Feedback 2 Type
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_feedback_2 mo_feedback_2;

    /**
     * Recuperation is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int recup_is_acv : 1;

    /**
     * Speed Ramp Reset to 0 if actual speed crosses 0 rpm
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit5__reset_nramp_atnzero : 1;

    /**
     * Input Signal - RFE
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfe152 : 1;

    /**
     * Output Signal - Out 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int out_4 : 1;

    /**
     * Motor temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_motortemp : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_n_clip : 1;

    /**
     * Speed-limited torque mode active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tnlim82 : 1;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit6__flths99 : 1;

    /**
     * Ecode - Bit 6 - FLTHS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit6__flths148 : 1;

    /**
     * Motor Current Limiting Activated because of DC Current lmiting
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int i_dc_limit_is_acv : 1;

    /**
     * Set Torque command to 0 if no new external torque command input within 100 ms is registered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit6__torquetimeout_100ms_e : 1;

    /**
     * reserved
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsvd;

    /**
     * reserved 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsvd1 : 1;

    /**
     * Device temperature too high
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_devicetemp : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_oora1 : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_mix_ana_on : 1;

    /**
     * Position control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int pn82 : 1;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit7__fltls99 : 1;

    /**
     * Ecode - Bit 7 - FLTLS
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit7__fltls148 : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit13_7__free;

    /**
     * Output Signal - break 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk1155 : 1;

    /**
     * Overvoltage > 1.8 x UN reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_overvoltage : 1;

    /**
     * Digital output Dout 1 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_1_on : 1;

    /**
     * Command Source Mask - Analog 2 Mode Bits
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_cs_ain_2_mode cs_ain_2_mode;

    /**
     * Kern Mode State Bit - Allow Sync
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_allow_sync : 1;

    /**
     * Speed control possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ni82 : 1;

    /**
     * Analog Input Signal 2 - Filter Value Setting
     *
     * Range: 0..255 (0..127.5 ms)
     * Scale: 0.5
     * Offset: 0
     */
    float ain_in_2_filter;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit8__fail_idc99 : 1;

    /**
     * Ecode - Bit 1 - Idc Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit8__fail_idc148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_sc1_reso mo_sc1_reso;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id194 source_id194;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id195 source_id195;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id218 source_id218;

    /**
     * Signal Source ID for the compare operation according to RegID Address
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_source_id219 source_id219;

    /**
     * CAN PDOs extension
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit8__can_extended_0 : 1;

    /**
     * Overcurrent or strongly oscillating current detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ipeak : 1;

    /**
     * Digital output Dout 2 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_2_on : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_handwheel : 1;

    /**
     * Acutal speed less than 0.1% (standstill)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _n082 : 1;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit9__fail_i99 : 1;

    /**
     * Ecode - Bit 9 - I Error detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit9__fail_i148 : 1;

    /**
     * Special DC Bus generator operation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit9__generator : 1;

    /**
     * Drive races (without command value, wrong direction)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_raceaway : 1;

    /**
     * Hardware relay, output BTB (Rdy) on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int btbrdy : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_phasing_extend : 1;

    /**
     * Reference switch tripped
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rsw82 : 1;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit10__vccm99 : 1;

    /**
     * Ecode - Bit 10 - VCC Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit10__vccm148 : 1;

    /**
     * Set factor 1divsqrt(2) in park currents
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit10__park_rms : 1;

    /**
     * User - choice of Error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_user : 1;

    /**
     * Internal enable GO active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int go216 : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_oora2 : 1;

    /**
     * Kern Mode State Bit - rsvd_11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_11 : 1;

    /**
     * Calibration move active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal082 : 1;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit11__15m_minus99 : 1;

    /**
     * Ecode - Bit 11 - 15V minus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit11__15m_minus148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc1_comp : 1;

    /**
     * DCBus Value as V for output Communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit11__dcbus_volts : 1;

    /**
     * Firmware Test Number
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t test;

    /**
     * Digital output Dout 3 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_3_on : 1;

    /**
     * Command Source Mask - Bitmask Coding of Command Type
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_cs_cmd_type cs_cmd_type;

    /**
     * Kern Mode State Bit - rsvd_12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_12 : 1;

    /**
     * Calibration move completed (position calibrated)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cal82 : 1;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit12__15m_plus99 : 1;

    /**
     * Ecode - Bit 12 - 15V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit12__15m_plus148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_mo_sc2_reso mo_sc2_reso;

    /**
     * Command (Acc Pedal) must be at 0 to enable inverter
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit12__boat_pedal : 1;

    /**
     * Digital output Dout 4 on
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int d_out_4_on : 1;

    /**
     * Kern Mode State Bit - rsvd_13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_rsvd_13 : 1;

    /**
     * Position within tolerance window
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int tol82 : 1;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit13__18m_plus99 : 1;

    /**
     * Ecode - Bit 13 - 18V plus Voltage error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit13__18m_plus148 : 1;

    /**
     * Special Generator Mode with automatic Iac limit reduction
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit13__gen_autoiaclimit : 1;

    /**
     * Current - measurement error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_hwerr : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int goff : 1;

    /**
     * Command Source Mask - Analog 2 I Limit Status Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_ain_2__i_limit : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_pseudo_enable : 1;

    /**
     * Drive is ready (BTB/TDY contact is closed)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rdy82 : 1;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit14__ubmam99 : 1;

    /**
     * Ecode - Bit 14 - UBMA overvoltage error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit14__ubmam148 : 1;

    /**
     * Enable the Limitiation Calculation depending on the DC Current limits V2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit14__idc_limit_ena_v2 : 1;

    /**
     * Enable MTPA calculation and automatic command of Id_ref
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit14__mtpa_reluct_enab : 1;

    /**
     * Ballast circuit overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int err_ballast : 1;

    /**
     * Excited Brake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk1216 : 1;

    /**
     * Command Source Mask - Analog 1 N Limit Bit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cs_ain_1__n_limit : 1;

    /**
     * Kern Mode State Bit -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int km_debug_test : 1;

    /**
     * De-energized brake with motor active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int brk082 : 1;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit15__t_igbt99 : 1;

    /**
     * Ecode - Bit 15 - T Igbt error (digital)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int ecode_bit15__t_igbt148 : 1;

    /**
     * Motor Options -
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int mo_sc2_inv : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active190 active190;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active191 active191;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active192 active192;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    inverters_inv_r_rcv_active193 active193;

    /**
     * Automatic Iac Lmiting in generator mode is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int gen_autoiaclimit_is_acv : 1;

    /**
     * Activate automated digital Recuperation Command
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit15__dig_e_brake_act : 1;

    /**
     * (Write Protected) Use CANopen instead of normal CAN protocol for the CAN communication
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit15__canopen_acv : 1;

    /**
     * Torque Ramp Dec Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_dec;

    /**
     * Torque Ramp Rcp Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_rcp;

    /**
     * No device identification
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_warning_0 : 1;

    /**
     * Analog Input Signal 1 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_1_scaled213;

    /**
     * Analog Input Signal 2 - Scaled
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t ain_in_2_scaled214;

    /**
     * DC Current Time
     *
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_dc__stop;

    /**
     * DC-Voltage Value for DC-Braking
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_dc__stop;

    /**
     * Minimum Voltage (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_min__stop;

    /**
     * Minimum Frequency (FU operation) at Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_min__stop;

    /**
     * Voltage (percentage of DC-Bus) at max. Frequency
     *
     * Range: -32768..32767 (-3276.8..3276.7 %)
     * Scale: 0.1
     * Offset: 0
     */
    float v_corner__stop;

    /**
     * Frequency at max output voltage - Stop
     *
     * Range: -32768..32767 (-3276.8..3276.7 Hz)
     * Scale: 0.1
     * Offset: 0
     */
    float f_corner__stop;

    /**
     * Proportional Gain Id-Current Controller - A entry 33 equals 1.0 normalized
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kp__id;

    /**
     * Integral Action Time (Integral Part) Id-Current Controller
     *
     * Range: 300..20000 (300..20000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__ti__id;

    /**
     * Id-Current Control Integral Maximum Output Range
     *
     * Range: 0..500 (0..500 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__tim__id;

    /**
     * Analog Input Signal 1 - Scale Value Setting
     *
     * Range: -32763.904..32763.904 (-7.999..7.999 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    float ain_in_1_scaleval;

    /**
     * Analog Input Signal 2 - Scale Value Setting
     *
     * Range: -32768..32767 (-8..7.999755859375 -)
     * Scale: 0.000244140625
     * Offset: 0
     */
    float ain_in_2_scaleval;

    /**
     * Speed internally inverted
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int signmag82 : 1;

    /**
     * Regenerative Resistor Value
     *
     * Range: 0..65535 (0..65535 Ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t regen_r;

    /**
     * DC Bus Max Value Superpision Limit
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_bus_max_lim;

    /**
     * Proportional Gain Id-Current Controller if actual current is above I Limit Inuse Current - perc is depending on Kp value
     *
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__xkp__id;

    /**
     * Idc or Pdc Limit during Generator operation
     *
     * Range: 0..65535 (0..6553.5 A or W)
     * Scale: 0.1
     * Offset: 0
     */
    float bat_opr_limit__gen;

    /**
     * Feedforward - Proportional Gain Id-Current Controller
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pid_i__kf__id;

    /**
     * Configuration of the I Peak supervision Limits
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit17_16__checkipeak_config;

    /**
     * (Write Protected) Activation for the Offset Correction for older Bamobil 3.2 hardware setup
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit16__bamobil3_2_offcrct : 1;

    /**
     * FU Special - Start
     *
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t special__stop;

    /**
     * free
     *
     * Range: -32768..32767 (-32768..32767 Num)
     * Scale: 1
     * Offset: 0
     */
    int16_t free;

    /**
     * Firmware SVN Revision Number
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t svnrevision_nr;

    /**
     * RUN signal disturbed, EMI
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_illegal_status : 1;

    /**
     * General speed limiting (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip82 : 1;

    /**
     * (Write Protected) External ECODE processing matrix reconfiguration
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dup__bit19_17__ecode_redefine;

    /**
     * RFE input inactive (active without RUN input)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_safe_in : 1;

    /**
     * Additional switchable negative speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_minus82 : 1;

    /**
     * Enable the special Traction Control Logic
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit18__tractioncontrol_ena : 1;

    /**
     * Additional switchable positive speed limiting possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int nclip_plus82 : 1;

    /**
     * Definition of the Delta Time rpm Speed Change supervision (20ms, 50ms, 100ms, 250ms)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit20_19__tc_deltatime_conf;

    /**
     * Current limiting (switchable) reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irddig82 : 1;

    /**
     * HAL Sensor Estimator Logic Activation
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit20__hal_extmr_acv : 1;

    /**
     * Actual current limit reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iuserchd82 : 1;

    /**
     * Definition of the minumim rpm Speed percentage to activate the TC (0perc, 10perc, 20perc, 30perc)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit22_21__tc_minspeed_conf;

    /**
     * Initialize inverter with a set Software Lock
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int dup__bit21__initwith_frg_off : 1;

    /**
     * Motor temperature > (I-red-TM or 93 % from M-Temp)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_motortemp : 1;

    /**
     * Derating Triggered - Current limited by speed Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdn82 : 1;

    /**
     * Bit 31_22 - free (NOT INUSE)
     *
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dup__bit31_22__free;

    /**
     * Device temperature > 87 % of limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_devicetemp : 1;

    /**
     * Derating Configured - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdti82 : 1;

    /**
     * Defines how the speed command ramp should be reset when TC triggers
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int cmc__bit23__tc_ncmdrestoption : 1;

    /**
     * Torque Ramp Acc Time [0..4000 ms]
     *
     * Range: 0..4000 (0..4000 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t m_r_acc;

    /**
     * Limit of the existing voltage output is reached
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_vout_sat : 1;

    /**
     * Derating Triggered - Current limited by igbt temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtir82 : 1;

    /**
     * Free (NOT INUSE)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cmc__bit31_24__free;

    /**
     * Overcurrent 200 %
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ipeak : 1;

    /**
     * Additional current limit if frequency less than 10 Hz
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int _10hz82 : 1;

    /**
     * Resolution range of the speed measurement exceeded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_raceaway : 1;

    /**
     * Derating Triggered - Current limited by motor temperature Limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdtm82 : 1;

    /**
     * Current derating due to analog input (if = 90 %) possible
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int irdana82 : 1;

    /**
     * Current peak value warning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int iwcns82 : 1;

    /**
     * Pulsed RFE-input monitoring active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int rfepulse82 : 1;

    /**
     * free
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int md82 : 1;

    /**
     * Ballast circuit > 87 % overloaded
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int warn_ballast : 1;

    /**
     * Hand-wheel function selected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    unsigned int hndwhl82 : 1;

#ifdef CANLIB_TIMESTAMP
    uint64_t _timestamp;
#endif // CANLIB_TIMESTAMP
} inverters_inv_r_rcv_converted_t;


void inverters_inv_l_send_raw_to_conversion(
    inverters_inv_l_send_converted_t *conversion,
    inverters_inv_l_send_send_mux send_mux,
    float motor_f_n,
    uint16_t cos_phi,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    float id_setdig__id,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t pid_n__ti,
    uint16_t pid_n__td,
    float n_setdig,
    float n_lim,
    uint16_t n_r_acc,
    uint16_t pid_n__tim,
    float i_red_n,
    float n_lim_minus,
    float n_lim_plus,
    inverters_inv_l_send_read_id read_id,
    float i_lim_dig,
    uint16_t i_red_te,
    float i_max_eff,
    float i_nom_eff,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    int16_t ain_in_2_cutoff,
    uint16_t i_red_td,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint32_t snr,
    uint16_t device_mains,
    uint16_t regen_p,
    inverters_inv_l_send_devicetype devicetype,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_dest,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_l_send_can_nbt can_nbt,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t v_ti,
    uint16_t clear_errors,
    int16_t m_setdig__iq,
    uint16_t i_red_tm,
    uint16_t m_temp,
    inverters_inv_l_send_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    float motor_lsq,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    float motor_lsd,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_l_send_def_end_1 def_end_1,
    inverters_inv_l_send_def_end_2 def_end_2,
    inverters_inv_l_send_def_din_1 def_din_1,
    inverters_inv_l_send_def_din_2 def_din_2,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t can_rxtimeout,
    int32_t var_1,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    int16_t ain_in_2_offsetval,
    uint16_t n_r_dec,
    uint16_t v_shunt,
    uint16_t t_peak,
    uint16_t brake_delay,
    uint32_t axis,
    uint8_t km_speed_0,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t km_frg_off,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t km_cal_off,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t km_tx_tog_stat,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t km_i_limit,
    inverters_inv_l_send_mo_feedback_2 mo_feedback_2,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t km_n_clip,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t km_mix_ana_on,
    uint8_t cmc__bit13_7__free,
    inverters_inv_l_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    float ain_in_2_filter,
    inverters_inv_l_send_mo_sc1_reso mo_sc1_reso,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t mo_sc1_comp,
    uint8_t km_rsvd_12,
    inverters_inv_l_send_mo_sc2_reso mo_sc2_reso,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t km_debug_test,
    uint8_t mo_sc2_inv,
    inverters_inv_l_send_active190 active190,
    inverters_inv_l_send_active191 active191,
    inverters_inv_l_send_active192 active192,
    inverters_inv_l_send_active193 active193,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    uint16_t m_r_acc,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t m_r_rcp,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    float ain_in_2_scaleval,
    uint16_t m_r_dec,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint8_t cmc__bit31_24__free
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_send_conversion_to_raw(
    inverters_inv_l_send_t *raw,
    inverters_inv_l_send_send_mux send_mux,
    float motor_f_n,
    uint16_t cos_phi,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    float id_setdig__id,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t pid_n__ti,
    uint16_t pid_n__td,
    float n_setdig,
    float n_lim,
    uint16_t n_r_acc,
    uint16_t pid_n__tim,
    float i_red_n,
    float n_lim_minus,
    float n_lim_plus,
    inverters_inv_l_send_read_id read_id,
    float i_lim_dig,
    uint16_t i_red_te,
    float i_max_eff,
    float i_nom_eff,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    int16_t ain_in_2_cutoff,
    uint16_t i_red_td,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint32_t snr,
    uint16_t device_mains,
    uint16_t regen_p,
    inverters_inv_l_send_devicetype devicetype,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_dest,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_l_send_can_nbt can_nbt,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t v_ti,
    uint16_t clear_errors,
    int16_t m_setdig__iq,
    uint16_t i_red_tm,
    uint16_t m_temp,
    inverters_inv_l_send_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    float motor_lsq,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    float motor_lsd,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_l_send_def_end_1 def_end_1,
    inverters_inv_l_send_def_end_2 def_end_2,
    inverters_inv_l_send_def_din_1 def_din_1,
    inverters_inv_l_send_def_din_2 def_din_2,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t can_rxtimeout,
    int32_t var_1,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    int16_t ain_in_2_offsetval,
    uint16_t n_r_dec,
    uint16_t v_shunt,
    uint16_t t_peak,
    uint16_t brake_delay,
    uint32_t axis,
    uint8_t km_speed_0,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t km_frg_off,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t km_cal_off,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t km_tx_tog_stat,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t km_i_limit,
    inverters_inv_l_send_mo_feedback_2 mo_feedback_2,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t km_n_clip,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t km_mix_ana_on,
    uint8_t cmc__bit13_7__free,
    inverters_inv_l_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    float ain_in_2_filter,
    inverters_inv_l_send_mo_sc1_reso mo_sc1_reso,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t mo_sc1_comp,
    uint8_t km_rsvd_12,
    inverters_inv_l_send_mo_sc2_reso mo_sc2_reso,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t km_debug_test,
    uint8_t mo_sc2_inv,
    inverters_inv_l_send_active190 active190,
    inverters_inv_l_send_active191 active191,
    inverters_inv_l_send_active192 active192,
    inverters_inv_l_send_active193 active193,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    uint16_t m_r_acc,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t m_r_rcp,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    float ain_in_2_scaleval,
    uint16_t m_r_dec,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint8_t cmc__bit31_24__free
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_send_raw_to_conversion_struct(
    inverters_inv_l_send_converted_t *conversion, 
    const inverters_inv_l_send_t *raw);


void inverters_inv_l_send_conversion_to_raw_struct(
    inverters_inv_l_send_t *raw,
    const inverters_inv_l_send_converted_t *conversion);

int inverters_inv_l_send_send_mux_enum_to_string(inverters_inv_l_send_send_mux value, char *buffer);
int inverters_inv_l_send_read_id_enum_to_string(inverters_inv_l_send_read_id value, char *buffer);
int inverters_inv_l_send_devicetype_enum_to_string(inverters_inv_l_send_devicetype value, char *buffer);
int inverters_inv_l_send_can_nbt_enum_to_string(inverters_inv_l_send_can_nbt value, char *buffer);
int inverters_inv_l_send_mo_feedback_1_enum_to_string(inverters_inv_l_send_mo_feedback_1 value, char *buffer);
int inverters_inv_l_send_def_end_1_enum_to_string(inverters_inv_l_send_def_end_1 value, char *buffer);
int inverters_inv_l_send_def_end_2_enum_to_string(inverters_inv_l_send_def_end_2 value, char *buffer);
int inverters_inv_l_send_def_din_1_enum_to_string(inverters_inv_l_send_def_din_1 value, char *buffer);
int inverters_inv_l_send_def_din_2_enum_to_string(inverters_inv_l_send_def_din_2 value, char *buffer);
int inverters_inv_l_send_mo_feedback_2_enum_to_string(inverters_inv_l_send_mo_feedback_2 value, char *buffer);
int inverters_inv_l_send_ret_interval_enum_to_string(inverters_inv_l_send_ret_interval value, char *buffer);
int inverters_inv_l_send_mo_sc1_reso_enum_to_string(inverters_inv_l_send_mo_sc1_reso value, char *buffer);
int inverters_inv_l_send_mo_sc2_reso_enum_to_string(inverters_inv_l_send_mo_sc2_reso value, char *buffer);
int inverters_inv_l_send_active190_enum_to_string(inverters_inv_l_send_active190 value, char *buffer);
int inverters_inv_l_send_active191_enum_to_string(inverters_inv_l_send_active191 value, char *buffer);
int inverters_inv_l_send_active192_enum_to_string(inverters_inv_l_send_active192 value, char *buffer);
int inverters_inv_l_send_active193_enum_to_string(inverters_inv_l_send_active193 value, char *buffer);

int inverters_inv_l_send_converted_to_string(inverters_inv_l_send_converted_t *message, char *buffer);

int inverters_inv_l_send_converted_to_string_file(inverters_inv_l_send_converted_t *message, FILE *buffer);

int inverters_inv_l_send_fields(char *buffer);

int inverters_inv_l_send_fields_file(FILE *buffer);

/**
 * Pack message INV_L_SEND.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_l_send_pack(
    uint8_t *dst_p,
    const inverters_inv_l_send_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_L_SEND.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_l_send_unpack(
    inverters_inv_l_send_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_send_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_motor_f_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_motor_f_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_f_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cos_phi_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__kp__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__ti__iq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_id_setdig__id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_id_setdig__id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_id_setdig__id_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_delta_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__tim__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_n__kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_n__ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_n__td_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_n_setdig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_n_setdig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_setdig_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_n_lim_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_n_lim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_lim_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_r_acc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_n__tim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_red_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_red_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_red_n_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_n_lim_minus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_n_lim_minus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_lim_minus_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_n_lim_plus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_n_lim_plus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_lim_plus_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_read_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_i_lim_dig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_lim_dig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_lim_dig_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_red_te_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_max_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_max_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_max_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_nom_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_nom_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_nom_eff_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_pole_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ain_in_1_cutoff_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ain_in_2_cutoff_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_red_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_nom_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_n__kacc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_speed_filter_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_l_send_ain_in_1_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_ain_in_1_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ain_in_1_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_snr_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_device_mains_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_regen_p_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_devicetype_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_can_id_rx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_can_id_tx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_dest_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_tim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_offsref_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_can_nbt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ref_reso_edge_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_speed_1_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_speed_2_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_tol_win_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pos_preset_val_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_can_id_2_rx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_can_id_2_tx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_v_ref_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_v_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_v_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_clear_errors_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_m_setdig__iq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_red_tm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_m_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_mo_feedback_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_dc_bus_min_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_fb_incr_mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_fb_pole_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_motor_lsq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_motor_lsq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_lsq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_id_nom_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_motor_lm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_motor_lm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_lm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_rr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_id_min_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_tr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_motor_lsd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_motor_lsd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_lsd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_rs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_motor_ts_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_motor_ts_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_motor_ts_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_def_end_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_def_end_2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_def_din_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_r_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_nmax100perc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__xkp__iq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_bat_opr_limit__mot_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_bat_opr_limit__mot_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_bat_opr_limit__mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__kf__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit0__dc_current_sens_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_can_rxtimeout_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_var_1_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_var_2_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_var_3_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_var_4_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ain_in_2_offsetval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_n_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_v_shunt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_t_peak_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_brake_delay_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_axis_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit1__idc_limit_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit2__pdc_limit_usage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit3__torqueval_init_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit4__dig_m_rcpramp_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_mo_feedback_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit5__reset_nramp_atnzero_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit6__torquetimeout_100ms_e_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit13_7__free_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ret_interval_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_allow_sync_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_l_send_ain_in_2_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_ain_in_2_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ain_in_2_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_mo_sc1_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_mo_sc1_comp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_mo_sc2_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit14__idc_limit_ena_v2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_mo_sc2_inv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_active191_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_active193_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit15__dig_e_brake_act_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__kp__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__ti__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__tim__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_m_r_acc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_regen_r_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_dc_bus_max_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_m_r_rcp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__xkp__id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_send_bat_opr_limit__gen_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_bat_opr_limit__gen_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_bat_opr_limit__gen_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_pid_i__kf__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit17_16__checkipeak_config_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_send_ain_in_2_scaleval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_send_ain_in_2_scaleval_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_ain_in_2_scaleval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_m_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit18__tractioncontrol_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit20_19__tc_deltatime_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit22_21__tc_minspeed_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit23__tc_ncmdrestoption_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_send_cmc__bit31_24__free_is_in_range(uint8_t value);


void inverters_inv_l_rcv_raw_to_conversion(
    inverters_inv_l_rcv_converted_t *conversion,
    inverters_inv_l_rcv_rcv_mux rcv_mux,
    float n_actual,
    uint16_t n_r_dec,
    uint16_t n_r_lim,
    float n_actual_filt,
    uint16_t firmware,
    inverters_inv_l_rcv_devicetype devicetype,
    uint32_t snr,
    uint32_t axis,
    float i_device,
    uint16_t v_shunt,
    uint16_t i_200perc,
    uint32_t status_bitmap,
    uint8_t err_badparas,
    uint8_t lmt_active_1,
    int16_t ain_in_1_raw,
    int16_t ain_in_2_raw,
    int16_t nmax100perc,
    float n_setdig,
    int16_t n_cmd,
    float n_cmd_ramp,
    float n_lim,
    float n_error,
    int16_t m_setdig__iq,
    float id_setdig__id,
    float i_max_pk,
    float i_con_eff,
    float i_max_eff,
    float i_nom_eff,
    float i_limit_inuse,
    float i_cmd,
    float i_cmd_ramp,
    float i_actual,
    float i_actual_filt,
    float iq_actual,
    float id_actual,
    float iq_error,
    float id_error,
    float i1_actual,
    float i2_actual,
    float i3_actual,
    uint16_t i3_adc,
    uint16_t i2_adc,
    int16_t vq,
    int16_t vd,
    int16_t vout,
    uint16_t t_motor,
    uint16_t t_igbt,
    int16_t t_air,
    float vdc_bus_filt,
    uint8_t end_1,
    uint8_t din_1,
    uint8_t end_2,
    uint8_t din_2,
    uint8_t run232,
    uint8_t dout_1,
    uint8_t dout_2,
    uint8_t dout_3,
    uint8_t rdy_btb,
    uint8_t i_fault,
    uint8_t dout_4,
    float i_lim_dig,
    float i_red_n,
    uint16_t i_red_td,
    uint16_t i_red_te,
    uint16_t i_red_tm,
    uint8_t cs_ain_1_format,
    float id_ref,
    int16_t m_outdig__iq,
    int16_t ptr_1_debug,
    int16_t ptr_2_debug,
    int16_t temp_debug,
    float motor_f_n,
    uint16_t motor_v_n,
    uint16_t t_dc__start,
    float v_dc__start,
    float v_min__start,
    float f_min__start,
    float v_corner__start,
    float f_corner__start,
    uint16_t cos_phi,
    uint16_t pwm_enum,
    float calib_ref_value,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    uint16_t cutoffdig,
    uint16_t i3_offset,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t v_ti,
    uint16_t pid_n__td,
    int16_t ain_in_1_offsetval,
    int16_t ain_in_2_offsetval,
    uint16_t dzr_seq,
    uint16_t pid_n__tim,
    float n_lim_plus,
    float n_lim_minus,
    int16_t incr_delta,
    int16_t motorpos_mech,
    int16_t motorpos_elec,
    float fb_offset,
    int32_t it_rg_monitor,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    int16_t ain_in_2_cutoff,
    float i_limit_inuse_ramp,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t rotor_signals,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint16_t ixt_monitor,
    uint8_t ecode_bit0_firsterrordtcd99,
    uint16_t device_mains,
    uint16_t regen_p,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_actual,
    int32_t pos_dest,
    int32_t pos_actual_2,
    int32_t pos_error,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_l_rcv_can_nbt can_nbt,
    uint16_t pos_zero_capture,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    int32_t pos_zero_offset,
    int32_t pos_nd_scale,
    int32_t pos_nd_offset,
    int32_t fb2_scale_ext,
    int32_t pos_offset_slack,
    int16_t pos_diff_slack,
    uint16_t fun_para_read,
    uint16_t fun_para_write,
    uint16_t fun_special,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t pid_n__ti,
    uint16_t clear_errors,
    int32_t pos_cmd,
    uint16_t can_error_busoff,
    uint16_t can_error_writetime,
    uint8_t ecode_bit0_firsterrordtcd148,
    uint16_t can_error_no_ack,
    uint16_t can_error_crc_check150,
    uint16_t can_error_crc_check151,
    uint16_t info_timer_diff,
    int16_t ballastcount,
    uint16_t m_temp,
    inverters_inv_l_rcv_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    uint16_t logic_freq,
    int16_t pwm_1,
    int16_t pwm_2,
    int16_t pwm_3,
    int16_t timer_delta,
    float motor_lsq,
    float motor_lsd,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_l_rcv_def_end_1 def_end_1,
    inverters_inv_l_rcv_def_end_2 def_end_2,
    inverters_inv_l_rcv_def_din_1 def_din_1,
    inverters_inv_l_rcv_def_din_2 def_din_2,
    uint8_t operand194,
    float i_max_inuse,
    uint8_t signal_go,
    uint8_t signal_brake,
    uint8_t signal_icns,
    uint8_t signal_lessn0,
    uint8_t signal_postolerance,
    int16_t ain_in_1_scaled251,
    int16_t ain_in_2_scaled252,
    uint8_t operand195,
    uint8_t operand218,
    uint8_t operand219,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t dc_current_sens_ena_set,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t n_rpm_maxint,
    int32_t var_1,
    int16_t can_rxtimeout,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    uint8_t dup__bit7_0__dac_source_channel,
    uint8_t fb_lossofsignal,
    uint8_t no_hw_fault,
    uint16_t t_peak,
    uint16_t brake_delay,
    int16_t power,
    int16_t work,
    int16_t extra__start,
    int16_t capture_channel,
    int16_t trig_level,
    int16_t trig_edge,
    uint16_t trig_source,
    uint16_t oszi_source,
    uint16_t oszi_skip,
    uint16_t oszi_run_cmd,
    uint16_t oszi_read_cmd,
    int16_t pos_ref_start,
    float vdc_bus,
    int16_t m_cmd_ramp,
    uint8_t lmt_1,
    uint8_t out_1,
    uint16_t subversion_nr,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t ecode_bit1__hw1_state99,
    uint8_t ecode_bit1__hw1_state148,
    uint8_t dc_i_sensena_set,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t lmt_2,
    uint8_t out_2,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t cs_ain_2_format,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t ecode_bit2__hw0_state99,
    uint8_t ecode_bit2__hw0_state148,
    uint8_t op_mode_quadrant,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t in_2,
    uint8_t rdy155,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ecode_bit3__free99,
    uint8_t ecode_bit3__free148,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t in_1,
    uint8_t go155,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    inverters_inv_l_rcv_cs_ain_1_mode cs_ain_1_mode,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t ecode_bit4__rdy399,
    uint8_t ecode_bit4__rdy3148,
    inverters_inv_l_rcv_compare_var194 compare_var194,
    inverters_inv_l_rcv_compare_var195 compare_var195,
    inverters_inv_l_rcv_compare_var218 compare_var218,
    inverters_inv_l_rcv_compare_var219 compare_var219,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t run152,
    uint8_t out_3,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t ecode_bit5__n_fail99,
    uint8_t ecode_bit5__n_fail148,
    inverters_inv_l_rcv_mo_feedback_2 mo_feedback_2,
    uint8_t recup_is_acv,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t rfe152,
    uint8_t out_4,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t ecode_bit6__flths99,
    uint8_t ecode_bit6__flths148,
    uint8_t i_dc_limit_is_acv,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t rsvd,
    uint8_t rsvd1,
    uint8_t err_devicetemp,
    uint8_t cs_oora1,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ecode_bit7__fltls99,
    uint8_t ecode_bit7__fltls148,
    uint8_t cmc__bit13_7__free,
    uint8_t brk1155,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    inverters_inv_l_rcv_cs_ain_2_mode cs_ain_2_mode,
    uint8_t km_allow_sync,
    uint8_t ni82,
    float ain_in_2_filter,
    uint8_t ecode_bit8__fail_idc99,
    uint8_t ecode_bit8__fail_idc148,
    inverters_inv_l_rcv_mo_sc1_reso mo_sc1_reso,
    inverters_inv_l_rcv_source_id194 source_id194,
    inverters_inv_l_rcv_source_id195 source_id195,
    inverters_inv_l_rcv_source_id218 source_id218,
    inverters_inv_l_rcv_source_id219 source_id219,
    uint8_t dup__bit8__can_extended_0,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t ecode_bit9__fail_i99,
    uint8_t ecode_bit9__fail_i148,
    uint8_t dup__bit9__generator,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t ecode_bit10__vccm99,
    uint8_t ecode_bit10__vccm148,
    uint8_t dup__bit10__park_rms,
    uint8_t err_user,
    uint8_t go216,
    uint8_t cs_oora2,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t ecode_bit11__15m_minus99,
    uint8_t ecode_bit11__15m_minus148,
    uint8_t mo_sc1_comp,
    uint8_t dup__bit11__dcbus_volts,
    uint8_t test,
    uint8_t d_out_3_on,
    inverters_inv_l_rcv_cs_cmd_type cs_cmd_type,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t ecode_bit12__15m_plus99,
    uint8_t ecode_bit12__15m_plus148,
    inverters_inv_l_rcv_mo_sc2_reso mo_sc2_reso,
    uint8_t dup__bit12__boat_pedal,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t ecode_bit13__18m_plus99,
    uint8_t ecode_bit13__18m_plus148,
    uint8_t dup__bit13__gen_autoiaclimit,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t cs_ain_2__i_limit,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t ecode_bit14__ubmam99,
    uint8_t ecode_bit14__ubmam148,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t dup__bit14__mtpa_reluct_enab,
    uint8_t err_ballast,
    uint8_t brk1216,
    uint8_t cs_ain_1__n_limit,
    uint8_t km_debug_test,
    uint8_t brk082,
    uint8_t ecode_bit15__t_igbt99,
    uint8_t ecode_bit15__t_igbt148,
    uint8_t mo_sc2_inv,
    inverters_inv_l_rcv_active190 active190,
    inverters_inv_l_rcv_active191 active191,
    inverters_inv_l_rcv_active192 active192,
    inverters_inv_l_rcv_active193 active193,
    uint8_t gen_autoiaclimit_is_acv,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint8_t dup__bit15__canopen_acv,
    uint16_t m_r_dec,
    uint16_t m_r_rcp,
    uint8_t warn_warning_0,
    int16_t ain_in_1_scaled213,
    int16_t ain_in_2_scaled214,
    uint16_t t_dc__stop,
    float v_dc__stop,
    float v_min__stop,
    float f_min__stop,
    float v_corner__stop,
    float f_corner__stop,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    float ain_in_1_scaleval,
    float ain_in_2_scaleval,
    uint8_t signmag82,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    uint8_t dup__bit16__bamobil3_2_offcrct,
    int16_t special__stop,
    int16_t free,
    uint16_t svnrevision_nr,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t dup__bit19_17__ecode_redefine,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t nclip_plus82,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t irddig82,
    uint8_t dup__bit20__hal_extmr_acv,
    uint8_t iuserchd82,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t dup__bit21__initwith_frg_off,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint16_t dup__bit31_22__free,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint16_t m_r_acc,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t cmc__bit31_24__free,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana82,
    uint8_t iwcns82,
    uint8_t rfepulse82,
    uint8_t md82,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_rcv_conversion_to_raw(
    inverters_inv_l_rcv_t *raw,
    inverters_inv_l_rcv_rcv_mux rcv_mux,
    float n_actual,
    uint16_t n_r_dec,
    uint16_t n_r_lim,
    float n_actual_filt,
    uint16_t firmware,
    inverters_inv_l_rcv_devicetype devicetype,
    uint32_t snr,
    uint32_t axis,
    float i_device,
    uint16_t v_shunt,
    uint16_t i_200perc,
    uint32_t status_bitmap,
    uint8_t err_badparas,
    uint8_t lmt_active_1,
    int16_t ain_in_1_raw,
    int16_t ain_in_2_raw,
    int16_t nmax100perc,
    float n_setdig,
    int16_t n_cmd,
    float n_cmd_ramp,
    float n_lim,
    float n_error,
    int16_t m_setdig__iq,
    float id_setdig__id,
    float i_max_pk,
    float i_con_eff,
    float i_max_eff,
    float i_nom_eff,
    float i_limit_inuse,
    float i_cmd,
    float i_cmd_ramp,
    float i_actual,
    float i_actual_filt,
    float iq_actual,
    float id_actual,
    float iq_error,
    float id_error,
    float i1_actual,
    float i2_actual,
    float i3_actual,
    uint16_t i3_adc,
    uint16_t i2_adc,
    int16_t vq,
    int16_t vd,
    int16_t vout,
    uint16_t t_motor,
    uint16_t t_igbt,
    int16_t t_air,
    float vdc_bus_filt,
    uint8_t end_1,
    uint8_t din_1,
    uint8_t end_2,
    uint8_t din_2,
    uint8_t run232,
    uint8_t dout_1,
    uint8_t dout_2,
    uint8_t dout_3,
    uint8_t rdy_btb,
    uint8_t i_fault,
    uint8_t dout_4,
    float i_lim_dig,
    float i_red_n,
    uint16_t i_red_td,
    uint16_t i_red_te,
    uint16_t i_red_tm,
    uint8_t cs_ain_1_format,
    float id_ref,
    int16_t m_outdig__iq,
    int16_t ptr_1_debug,
    int16_t ptr_2_debug,
    int16_t temp_debug,
    float motor_f_n,
    uint16_t motor_v_n,
    uint16_t t_dc__start,
    float v_dc__start,
    float v_min__start,
    float f_min__start,
    float v_corner__start,
    float f_corner__start,
    uint16_t cos_phi,
    uint16_t pwm_enum,
    float calib_ref_value,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    uint16_t cutoffdig,
    uint16_t i3_offset,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t v_ti,
    uint16_t pid_n__td,
    int16_t ain_in_1_offsetval,
    int16_t ain_in_2_offsetval,
    uint16_t dzr_seq,
    uint16_t pid_n__tim,
    float n_lim_plus,
    float n_lim_minus,
    int16_t incr_delta,
    int16_t motorpos_mech,
    int16_t motorpos_elec,
    float fb_offset,
    int32_t it_rg_monitor,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    int16_t ain_in_2_cutoff,
    float i_limit_inuse_ramp,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t rotor_signals,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint16_t ixt_monitor,
    uint8_t ecode_bit0_firsterrordtcd99,
    uint16_t device_mains,
    uint16_t regen_p,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_actual,
    int32_t pos_dest,
    int32_t pos_actual_2,
    int32_t pos_error,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_l_rcv_can_nbt can_nbt,
    uint16_t pos_zero_capture,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    int32_t pos_zero_offset,
    int32_t pos_nd_scale,
    int32_t pos_nd_offset,
    int32_t fb2_scale_ext,
    int32_t pos_offset_slack,
    int16_t pos_diff_slack,
    uint16_t fun_para_read,
    uint16_t fun_para_write,
    uint16_t fun_special,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t pid_n__ti,
    uint16_t clear_errors,
    int32_t pos_cmd,
    uint16_t can_error_busoff,
    uint16_t can_error_writetime,
    uint8_t ecode_bit0_firsterrordtcd148,
    uint16_t can_error_no_ack,
    uint16_t can_error_crc_check150,
    uint16_t can_error_crc_check151,
    uint16_t info_timer_diff,
    int16_t ballastcount,
    uint16_t m_temp,
    inverters_inv_l_rcv_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    uint16_t logic_freq,
    int16_t pwm_1,
    int16_t pwm_2,
    int16_t pwm_3,
    int16_t timer_delta,
    float motor_lsq,
    float motor_lsd,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_l_rcv_def_end_1 def_end_1,
    inverters_inv_l_rcv_def_end_2 def_end_2,
    inverters_inv_l_rcv_def_din_1 def_din_1,
    inverters_inv_l_rcv_def_din_2 def_din_2,
    uint8_t operand194,
    float i_max_inuse,
    uint8_t signal_go,
    uint8_t signal_brake,
    uint8_t signal_icns,
    uint8_t signal_lessn0,
    uint8_t signal_postolerance,
    int16_t ain_in_1_scaled251,
    int16_t ain_in_2_scaled252,
    uint8_t operand195,
    uint8_t operand218,
    uint8_t operand219,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t dc_current_sens_ena_set,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t n_rpm_maxint,
    int32_t var_1,
    int16_t can_rxtimeout,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    uint8_t dup__bit7_0__dac_source_channel,
    uint8_t fb_lossofsignal,
    uint8_t no_hw_fault,
    uint16_t t_peak,
    uint16_t brake_delay,
    int16_t power,
    int16_t work,
    int16_t extra__start,
    int16_t capture_channel,
    int16_t trig_level,
    int16_t trig_edge,
    uint16_t trig_source,
    uint16_t oszi_source,
    uint16_t oszi_skip,
    uint16_t oszi_run_cmd,
    uint16_t oszi_read_cmd,
    int16_t pos_ref_start,
    float vdc_bus,
    int16_t m_cmd_ramp,
    uint8_t lmt_1,
    uint8_t out_1,
    uint16_t subversion_nr,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t ecode_bit1__hw1_state99,
    uint8_t ecode_bit1__hw1_state148,
    uint8_t dc_i_sensena_set,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t lmt_2,
    uint8_t out_2,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t cs_ain_2_format,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t ecode_bit2__hw0_state99,
    uint8_t ecode_bit2__hw0_state148,
    uint8_t op_mode_quadrant,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t in_2,
    uint8_t rdy155,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ecode_bit3__free99,
    uint8_t ecode_bit3__free148,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t in_1,
    uint8_t go155,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    inverters_inv_l_rcv_cs_ain_1_mode cs_ain_1_mode,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t ecode_bit4__rdy399,
    uint8_t ecode_bit4__rdy3148,
    inverters_inv_l_rcv_compare_var194 compare_var194,
    inverters_inv_l_rcv_compare_var195 compare_var195,
    inverters_inv_l_rcv_compare_var218 compare_var218,
    inverters_inv_l_rcv_compare_var219 compare_var219,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t run152,
    uint8_t out_3,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t ecode_bit5__n_fail99,
    uint8_t ecode_bit5__n_fail148,
    inverters_inv_l_rcv_mo_feedback_2 mo_feedback_2,
    uint8_t recup_is_acv,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t rfe152,
    uint8_t out_4,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t ecode_bit6__flths99,
    uint8_t ecode_bit6__flths148,
    uint8_t i_dc_limit_is_acv,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t rsvd,
    uint8_t rsvd1,
    uint8_t err_devicetemp,
    uint8_t cs_oora1,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ecode_bit7__fltls99,
    uint8_t ecode_bit7__fltls148,
    uint8_t cmc__bit13_7__free,
    uint8_t brk1155,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    inverters_inv_l_rcv_cs_ain_2_mode cs_ain_2_mode,
    uint8_t km_allow_sync,
    uint8_t ni82,
    float ain_in_2_filter,
    uint8_t ecode_bit8__fail_idc99,
    uint8_t ecode_bit8__fail_idc148,
    inverters_inv_l_rcv_mo_sc1_reso mo_sc1_reso,
    inverters_inv_l_rcv_source_id194 source_id194,
    inverters_inv_l_rcv_source_id195 source_id195,
    inverters_inv_l_rcv_source_id218 source_id218,
    inverters_inv_l_rcv_source_id219 source_id219,
    uint8_t dup__bit8__can_extended_0,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t ecode_bit9__fail_i99,
    uint8_t ecode_bit9__fail_i148,
    uint8_t dup__bit9__generator,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t ecode_bit10__vccm99,
    uint8_t ecode_bit10__vccm148,
    uint8_t dup__bit10__park_rms,
    uint8_t err_user,
    uint8_t go216,
    uint8_t cs_oora2,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t ecode_bit11__15m_minus99,
    uint8_t ecode_bit11__15m_minus148,
    uint8_t mo_sc1_comp,
    uint8_t dup__bit11__dcbus_volts,
    uint8_t test,
    uint8_t d_out_3_on,
    inverters_inv_l_rcv_cs_cmd_type cs_cmd_type,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t ecode_bit12__15m_plus99,
    uint8_t ecode_bit12__15m_plus148,
    inverters_inv_l_rcv_mo_sc2_reso mo_sc2_reso,
    uint8_t dup__bit12__boat_pedal,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t ecode_bit13__18m_plus99,
    uint8_t ecode_bit13__18m_plus148,
    uint8_t dup__bit13__gen_autoiaclimit,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t cs_ain_2__i_limit,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t ecode_bit14__ubmam99,
    uint8_t ecode_bit14__ubmam148,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t dup__bit14__mtpa_reluct_enab,
    uint8_t err_ballast,
    uint8_t brk1216,
    uint8_t cs_ain_1__n_limit,
    uint8_t km_debug_test,
    uint8_t brk082,
    uint8_t ecode_bit15__t_igbt99,
    uint8_t ecode_bit15__t_igbt148,
    uint8_t mo_sc2_inv,
    inverters_inv_l_rcv_active190 active190,
    inverters_inv_l_rcv_active191 active191,
    inverters_inv_l_rcv_active192 active192,
    inverters_inv_l_rcv_active193 active193,
    uint8_t gen_autoiaclimit_is_acv,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint8_t dup__bit15__canopen_acv,
    uint16_t m_r_dec,
    uint16_t m_r_rcp,
    uint8_t warn_warning_0,
    int16_t ain_in_1_scaled213,
    int16_t ain_in_2_scaled214,
    uint16_t t_dc__stop,
    float v_dc__stop,
    float v_min__stop,
    float f_min__stop,
    float v_corner__stop,
    float f_corner__stop,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    float ain_in_1_scaleval,
    float ain_in_2_scaleval,
    uint8_t signmag82,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    uint8_t dup__bit16__bamobil3_2_offcrct,
    int16_t special__stop,
    int16_t free,
    uint16_t svnrevision_nr,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t dup__bit19_17__ecode_redefine,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t nclip_plus82,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t irddig82,
    uint8_t dup__bit20__hal_extmr_acv,
    uint8_t iuserchd82,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t dup__bit21__initwith_frg_off,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint16_t dup__bit31_22__free,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint16_t m_r_acc,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t cmc__bit31_24__free,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana82,
    uint8_t iwcns82,
    uint8_t rfepulse82,
    uint8_t md82,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_l_rcv_raw_to_conversion_struct(
    inverters_inv_l_rcv_converted_t *conversion, 
    const inverters_inv_l_rcv_t *raw);


void inverters_inv_l_rcv_conversion_to_raw_struct(
    inverters_inv_l_rcv_t *raw,
    const inverters_inv_l_rcv_converted_t *conversion);

int inverters_inv_l_rcv_rcv_mux_enum_to_string(inverters_inv_l_rcv_rcv_mux value, char *buffer);
int inverters_inv_l_rcv_devicetype_enum_to_string(inverters_inv_l_rcv_devicetype value, char *buffer);
int inverters_inv_l_rcv_can_nbt_enum_to_string(inverters_inv_l_rcv_can_nbt value, char *buffer);
int inverters_inv_l_rcv_mo_feedback_1_enum_to_string(inverters_inv_l_rcv_mo_feedback_1 value, char *buffer);
int inverters_inv_l_rcv_def_end_1_enum_to_string(inverters_inv_l_rcv_def_end_1 value, char *buffer);
int inverters_inv_l_rcv_def_end_2_enum_to_string(inverters_inv_l_rcv_def_end_2 value, char *buffer);
int inverters_inv_l_rcv_def_din_1_enum_to_string(inverters_inv_l_rcv_def_din_1 value, char *buffer);
int inverters_inv_l_rcv_def_din_2_enum_to_string(inverters_inv_l_rcv_def_din_2 value, char *buffer);
int inverters_inv_l_rcv_cs_ain_1_mode_enum_to_string(inverters_inv_l_rcv_cs_ain_1_mode value, char *buffer);
int inverters_inv_l_rcv_compare_var194_enum_to_string(inverters_inv_l_rcv_compare_var194 value, char *buffer);
int inverters_inv_l_rcv_compare_var195_enum_to_string(inverters_inv_l_rcv_compare_var195 value, char *buffer);
int inverters_inv_l_rcv_compare_var218_enum_to_string(inverters_inv_l_rcv_compare_var218 value, char *buffer);
int inverters_inv_l_rcv_compare_var219_enum_to_string(inverters_inv_l_rcv_compare_var219 value, char *buffer);
int inverters_inv_l_rcv_mo_feedback_2_enum_to_string(inverters_inv_l_rcv_mo_feedback_2 value, char *buffer);
int inverters_inv_l_rcv_cs_ain_2_mode_enum_to_string(inverters_inv_l_rcv_cs_ain_2_mode value, char *buffer);
int inverters_inv_l_rcv_mo_sc1_reso_enum_to_string(inverters_inv_l_rcv_mo_sc1_reso value, char *buffer);
int inverters_inv_l_rcv_source_id194_enum_to_string(inverters_inv_l_rcv_source_id194 value, char *buffer);
int inverters_inv_l_rcv_source_id195_enum_to_string(inverters_inv_l_rcv_source_id195 value, char *buffer);
int inverters_inv_l_rcv_source_id218_enum_to_string(inverters_inv_l_rcv_source_id218 value, char *buffer);
int inverters_inv_l_rcv_source_id219_enum_to_string(inverters_inv_l_rcv_source_id219 value, char *buffer);
int inverters_inv_l_rcv_cs_cmd_type_enum_to_string(inverters_inv_l_rcv_cs_cmd_type value, char *buffer);
int inverters_inv_l_rcv_mo_sc2_reso_enum_to_string(inverters_inv_l_rcv_mo_sc2_reso value, char *buffer);
int inverters_inv_l_rcv_active190_enum_to_string(inverters_inv_l_rcv_active190 value, char *buffer);
int inverters_inv_l_rcv_active191_enum_to_string(inverters_inv_l_rcv_active191 value, char *buffer);
int inverters_inv_l_rcv_active192_enum_to_string(inverters_inv_l_rcv_active192 value, char *buffer);
int inverters_inv_l_rcv_active193_enum_to_string(inverters_inv_l_rcv_active193 value, char *buffer);

int inverters_inv_l_rcv_converted_to_string(inverters_inv_l_rcv_converted_t *message, char *buffer);

int inverters_inv_l_rcv_converted_to_string_file(inverters_inv_l_rcv_converted_t *message, FILE *buffer);

int inverters_inv_l_rcv_fields(char *buffer);

int inverters_inv_l_rcv_fields_file(FILE *buffer);

/**
 * Pack message INV_L_RCV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_l_rcv_pack(
    uint8_t *dst_p,
    const inverters_inv_l_rcv_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_L_RCV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_l_rcv_unpack(
    inverters_inv_l_rcv_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rcv_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_r_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_actual_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_actual_filt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_actual_filt_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_firmware_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_devicetype_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_snr_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_axis_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_shunt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_200perc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_status_bitmap_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_badparas_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lmt_active_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_1_raw_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_2_raw_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nmax100perc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_setdig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_setdig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_setdig_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_cmd_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_cmd_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_lim_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_lim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_lim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_error_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_setdig__iq_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_id_setdig__id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_id_setdig__id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_id_setdig__id_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_max_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_max_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_max_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_nom_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_nom_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_nom_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_limit_inuse_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_limit_inuse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_limit_inuse_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_cmd_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_cmd_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_actual_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_actual_filt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_actual_filt_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_iq_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_iq_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iq_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_id_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_id_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_id_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_iq_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_iq_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iq_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_id_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_id_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_id_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i1_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i1_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i1_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i2_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i2_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i2_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i3_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i3_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i3_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i3_adc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i2_adc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_vq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_vd_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_vout_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_motor_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_igbt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_air_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_vdc_bus_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_vdc_bus_filt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_vdc_bus_filt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_end_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_din_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_end_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_din_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_run232_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dout_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dout_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dout_3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rdy_btb_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dout_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_lim_dig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_lim_dig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_lim_dig_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_i_red_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_red_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_red_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_red_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_red_te_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_red_tm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_ain_1_format_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_id_ref_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_id_ref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_id_ref_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_outdig__iq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ptr_1_debug_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ptr_2_debug_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_temp_debug_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_motor_f_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_motor_f_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_f_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_v_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_dc__start_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_v_dc__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_v_dc__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_dc__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_v_min__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_v_min__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_min__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_f_min__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_f_min__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_f_min__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_v_corner__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_v_corner__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_corner__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_f_corner__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_f_corner__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_f_corner__start_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cos_phi_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pwm_enum_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_calib_ref_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_calib_ref_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_calib_ref_value_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__kp__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__ti__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cutoffdig_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i3_offset_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_delta_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__tim__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_n__kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_n__td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_1_offsetval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_2_offsetval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dzr_seq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_n__tim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_lim_plus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_lim_plus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_lim_plus_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_n_lim_minus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_n_lim_minus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_lim_minus_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_incr_delta_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motorpos_mech_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motorpos_elec_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_fb_offset_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_fb_offset_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fb_offset_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_it_rg_monitor_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_pole_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_1_cutoff_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ena82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_2_cutoff_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_limit_inuse_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_limit_inuse_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_limit_inuse_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_nom_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_n__kacc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rotor_signals_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_speed_filter_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_l_rcv_ain_in_1_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_ain_in_1_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_1_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ixt_monitor_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit0_firsterrordtcd99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_device_mains_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_regen_p_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_id_rx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_id_tx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_actual_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_dest_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_actual_2_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_error_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_tim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_offsref_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_nbt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_zero_capture_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ref_reso_edge_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_speed_1_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_speed_2_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_tol_win_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_preset_val_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_zero_offset_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_nd_scale_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_nd_offset_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fb2_scale_ext_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_offset_slack_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_diff_slack_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fun_para_read_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fun_para_write_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fun_special_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_id_2_rx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_id_2_tx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_ref_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_n__ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_clear_errors_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_cmd_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_error_busoff_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_error_writetime_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit0_firsterrordtcd148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_error_no_ack_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_error_crc_check150_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_error_crc_check151_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_info_timer_diff_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ballastcount_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_mo_feedback_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dc_bus_min_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fb_incr_mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fb_pole_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_logic_freq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pwm_1_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pwm_2_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pwm_3_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_timer_delta_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_motor_lsq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_motor_lsq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_lsq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_motor_lsd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_motor_lsd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_lsd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_id_nom_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_motor_lm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_motor_lm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_lm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_rr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_id_min_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_tr_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_rs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_motor_ts_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_motor_ts_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_motor_ts_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_def_end_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_def_end_2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_def_din_2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_operand194_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_i_max_inuse_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_i_max_inuse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_max_inuse_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signal_go_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signal_brake_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signal_icns_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signal_lessn0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signal_postolerance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_1_scaled251_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_2_scaled252_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_operand195_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_operand218_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_operand219_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__xkp__iq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_bat_opr_limit__mot_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_bat_opr_limit__mot_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_bat_opr_limit__mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__kf__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dc_current_sens_ena_set_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit0__dc_current_sens_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_n_rpm_maxint_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_var_1_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_can_rxtimeout_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_var_2_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_var_3_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_var_4_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit7_0__dac_source_channel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_fb_lossofsignal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_no_hw_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_peak_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_brake_delay_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_power_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_work_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_extra__start_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_capture_channel_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_trig_level_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_trig_edge_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_trig_source_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_oszi_source_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_oszi_skip_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_oszi_run_cmd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_oszi_read_cmd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pos_ref_start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_vdc_bus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_vdc_bus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_vdc_bus_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_cmd_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lmt_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_out_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_subversion_nr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_powerfault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lmt_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ncr082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit1__hw1_state99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit1__hw1_state148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dc_i_sensena_set_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit1__idc_limit_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lmt_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_out_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_rfe_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_in_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_ain_2_format_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lim_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit2__hw0_state99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit2__hw0_state148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_op_mode_quadrant_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit2__pdc_limit_usage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_in_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rdy155_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_bustimeout_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_in_active_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_lim_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit3__free99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit3__free148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit3__torqueval_init_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_in_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_go155_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_feedbacksignal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_frgrun_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_ain_1_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ok82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit4__rdy399_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit4__rdy3148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_compare_var194_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_compare_var195_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_compare_var218_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_compare_var219_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit4__dig_m_rcpramp_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_run152_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_out_3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_powervoltage_low_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rfe216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_icns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit5__n_fail99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit5__n_fail148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_mo_feedback_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_recup_is_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit5__reset_nramp_atnzero_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rfe152_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_out_4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_tnlim82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit6__flths99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit6__flths148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_i_dc_limit_is_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit6__torquetimeout_100ms_e_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rsvd_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rsvd1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_oora1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit7__fltls99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit7__fltls148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit13_7__free_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_brk1155_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_overvoltage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_1_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_ain_2_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_allow_sync_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ni82_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_l_rcv_ain_in_2_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_ain_in_2_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_2_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit8__fail_idc99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit8__fail_idc148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_mo_sc1_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_source_id194_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_source_id195_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_source_id218_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_source_id219_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit8__can_extended_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_2_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv__n082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit9__fail_i99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit9__fail_i148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit9__generator_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_btbrdy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rsw82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit10__vccm99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit10__vccm148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit10__park_rms_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_user_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_go216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_oora2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cal082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit11__15m_minus99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit11__15m_minus148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_mo_sc1_comp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit11__dcbus_volts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_3_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_cmd_type_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cal82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit12__15m_plus99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit12__15m_plus148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_mo_sc2_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit12__boat_pedal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_d_out_4_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_tol82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit13__18m_plus99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit13__18m_plus148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit13__gen_autoiaclimit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_hwerr_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_goff_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_ain_2__i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rdy82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit14__ubmam99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit14__ubmam148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit14__idc_limit_ena_v2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit14__mtpa_reluct_enab_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_err_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_brk1216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cs_ain_1__n_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_brk082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit15__t_igbt99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ecode_bit15__t_igbt148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_mo_sc2_inv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_active191_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_active193_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_gen_autoiaclimit_is_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit15__dig_e_brake_act_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit15__canopen_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_r_rcp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_warning_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_1_scaled213_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_2_scaled214_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_t_dc__stop_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_v_dc__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_v_dc__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_dc__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_v_min__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_v_min__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_min__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_f_min__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_f_min__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_f_min__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_v_corner__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_v_corner__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_v_corner__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_f_corner__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_f_corner__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_f_corner__stop_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__kp__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__ti__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__tim__id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_ain_in_1_scaleval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_ain_in_1_scaleval_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_1_scaleval_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_l_rcv_ain_in_2_scaleval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_ain_in_2_scaleval_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_ain_in_2_scaleval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_signmag82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_regen_r_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dc_bus_max_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__xkp__id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_l_rcv_bat_opr_limit__gen_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_l_rcv_bat_opr_limit__gen_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_bat_opr_limit__gen_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_pid_i__kf__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit17_16__checkipeak_config_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit16__bamobil3_2_offcrct_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_special__stop_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_free_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_svnrevision_nr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_illegal_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit19_17__ecode_redefine_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_safe_in_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit18__tractioncontrol_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_nclip_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit20_19__tc_deltatime_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irddig82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit20__hal_extmr_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iuserchd82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit22_21__tc_minspeed_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit21__initwith_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_dup__bit31_22__free_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdti82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit23__tc_ncmdrestoption_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_m_r_acc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_vout_sat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdtir82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_cmc__bit31_24__free_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv__10hz82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdtm82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_irdana82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_iwcns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_rfepulse82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_md82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_warn_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_l_rcv_hndwhl82_is_in_range(uint8_t value);


void inverters_inv_r_send_raw_to_conversion(
    inverters_inv_r_send_converted_t *conversion,
    inverters_inv_r_send_send_mux send_mux,
    float motor_f_n,
    uint16_t cos_phi,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    float id_setdig__id,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t pid_n__ti,
    uint16_t pid_n__td,
    float n_setdig,
    float n_lim,
    uint16_t n_r_acc,
    uint16_t pid_n__tim,
    float i_red_n,
    float n_lim_minus,
    float n_lim_plus,
    inverters_inv_r_send_read_id read_id,
    float i_lim_dig,
    uint16_t i_red_te,
    float i_max_eff,
    float i_nom_eff,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    int16_t ain_in_2_cutoff,
    uint16_t i_red_td,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint32_t snr,
    uint16_t device_mains,
    uint16_t regen_p,
    inverters_inv_r_send_devicetype devicetype,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_dest,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_r_send_can_nbt can_nbt,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t v_ti,
    uint16_t clear_errors,
    int16_t m_setdig__iq,
    uint16_t i_red_tm,
    uint16_t m_temp,
    inverters_inv_r_send_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    float motor_lsq,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    float motor_lsd,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_r_send_def_end_1 def_end_1,
    inverters_inv_r_send_def_end_2 def_end_2,
    inverters_inv_r_send_def_din_1 def_din_1,
    inverters_inv_r_send_def_din_2 def_din_2,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t can_rxtimeout,
    int32_t var_1,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    int16_t ain_in_2_offsetval,
    uint16_t n_r_dec,
    uint16_t v_shunt,
    uint16_t t_peak,
    uint16_t brake_delay,
    uint32_t axis,
    uint8_t km_speed_0,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t km_frg_off,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t km_cal_off,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t km_tx_tog_stat,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t km_i_limit,
    inverters_inv_r_send_mo_feedback_2 mo_feedback_2,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t km_n_clip,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t km_mix_ana_on,
    uint8_t cmc__bit13_7__free,
    inverters_inv_r_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    float ain_in_2_filter,
    inverters_inv_r_send_mo_sc1_reso mo_sc1_reso,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t mo_sc1_comp,
    uint8_t km_rsvd_12,
    inverters_inv_r_send_mo_sc2_reso mo_sc2_reso,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t km_debug_test,
    uint8_t mo_sc2_inv,
    inverters_inv_r_send_active190 active190,
    inverters_inv_r_send_active191 active191,
    inverters_inv_r_send_active192 active192,
    inverters_inv_r_send_active193 active193,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    uint16_t m_r_acc,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t m_r_rcp,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    float ain_in_2_scaleval,
    uint16_t m_r_dec,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint8_t cmc__bit31_24__free
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_send_conversion_to_raw(
    inverters_inv_r_send_t *raw,
    inverters_inv_r_send_send_mux send_mux,
    float motor_f_n,
    uint16_t cos_phi,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    float id_setdig__id,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t pid_n__ti,
    uint16_t pid_n__td,
    float n_setdig,
    float n_lim,
    uint16_t n_r_acc,
    uint16_t pid_n__tim,
    float i_red_n,
    float n_lim_minus,
    float n_lim_plus,
    inverters_inv_r_send_read_id read_id,
    float i_lim_dig,
    uint16_t i_red_te,
    float i_max_eff,
    float i_nom_eff,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    int16_t ain_in_2_cutoff,
    uint16_t i_red_td,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint32_t snr,
    uint16_t device_mains,
    uint16_t regen_p,
    inverters_inv_r_send_devicetype devicetype,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_dest,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_r_send_can_nbt can_nbt,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t v_ti,
    uint16_t clear_errors,
    int16_t m_setdig__iq,
    uint16_t i_red_tm,
    uint16_t m_temp,
    inverters_inv_r_send_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    float motor_lsq,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    float motor_lsd,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_r_send_def_end_1 def_end_1,
    inverters_inv_r_send_def_end_2 def_end_2,
    inverters_inv_r_send_def_din_1 def_din_1,
    inverters_inv_r_send_def_din_2 def_din_2,
    float i_max_pk,
    float i_con_eff,
    float i_device,
    uint16_t n_r_lim,
    int16_t nmax100perc,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t can_rxtimeout,
    int32_t var_1,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    int16_t ain_in_2_offsetval,
    uint16_t n_r_dec,
    uint16_t v_shunt,
    uint16_t t_peak,
    uint16_t brake_delay,
    uint32_t axis,
    uint8_t km_speed_0,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t km_frg_off,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t km_cal_off,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t km_tx_tog_stat,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t km_i_limit,
    inverters_inv_r_send_mo_feedback_2 mo_feedback_2,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t km_n_clip,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t km_mix_ana_on,
    uint8_t cmc__bit13_7__free,
    inverters_inv_r_send_ret_interval ret_interval,
    uint8_t km_allow_sync,
    float ain_in_2_filter,
    inverters_inv_r_send_mo_sc1_reso mo_sc1_reso,
    uint8_t km_handwheel,
    uint8_t km_phasing_extend,
    uint8_t km_rsvd_11,
    uint8_t mo_sc1_comp,
    uint8_t km_rsvd_12,
    inverters_inv_r_send_mo_sc2_reso mo_sc2_reso,
    uint8_t km_rsvd_13,
    uint8_t km_pseudo_enable,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t km_debug_test,
    uint8_t mo_sc2_inv,
    inverters_inv_r_send_active190 active190,
    inverters_inv_r_send_active191 active191,
    inverters_inv_r_send_active192 active192,
    inverters_inv_r_send_active193 active193,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    uint16_t m_r_acc,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t m_r_rcp,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    float ain_in_2_scaleval,
    uint16_t m_r_dec,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint8_t cmc__bit31_24__free
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_send_raw_to_conversion_struct(
    inverters_inv_r_send_converted_t *conversion, 
    const inverters_inv_r_send_t *raw);


void inverters_inv_r_send_conversion_to_raw_struct(
    inverters_inv_r_send_t *raw,
    const inverters_inv_r_send_converted_t *conversion);

int inverters_inv_r_send_send_mux_enum_to_string(inverters_inv_r_send_send_mux value, char *buffer);
int inverters_inv_r_send_read_id_enum_to_string(inverters_inv_r_send_read_id value, char *buffer);
int inverters_inv_r_send_devicetype_enum_to_string(inverters_inv_r_send_devicetype value, char *buffer);
int inverters_inv_r_send_can_nbt_enum_to_string(inverters_inv_r_send_can_nbt value, char *buffer);
int inverters_inv_r_send_mo_feedback_1_enum_to_string(inverters_inv_r_send_mo_feedback_1 value, char *buffer);
int inverters_inv_r_send_def_end_1_enum_to_string(inverters_inv_r_send_def_end_1 value, char *buffer);
int inverters_inv_r_send_def_end_2_enum_to_string(inverters_inv_r_send_def_end_2 value, char *buffer);
int inverters_inv_r_send_def_din_1_enum_to_string(inverters_inv_r_send_def_din_1 value, char *buffer);
int inverters_inv_r_send_def_din_2_enum_to_string(inverters_inv_r_send_def_din_2 value, char *buffer);
int inverters_inv_r_send_mo_feedback_2_enum_to_string(inverters_inv_r_send_mo_feedback_2 value, char *buffer);
int inverters_inv_r_send_ret_interval_enum_to_string(inverters_inv_r_send_ret_interval value, char *buffer);
int inverters_inv_r_send_mo_sc1_reso_enum_to_string(inverters_inv_r_send_mo_sc1_reso value, char *buffer);
int inverters_inv_r_send_mo_sc2_reso_enum_to_string(inverters_inv_r_send_mo_sc2_reso value, char *buffer);
int inverters_inv_r_send_active190_enum_to_string(inverters_inv_r_send_active190 value, char *buffer);
int inverters_inv_r_send_active191_enum_to_string(inverters_inv_r_send_active191 value, char *buffer);
int inverters_inv_r_send_active192_enum_to_string(inverters_inv_r_send_active192 value, char *buffer);
int inverters_inv_r_send_active193_enum_to_string(inverters_inv_r_send_active193 value, char *buffer);

int inverters_inv_r_send_converted_to_string(inverters_inv_r_send_converted_t *message, char *buffer);

int inverters_inv_r_send_converted_to_string_file(inverters_inv_r_send_converted_t *message, FILE *buffer);

int inverters_inv_r_send_fields(char *buffer);

int inverters_inv_r_send_fields_file(FILE *buffer);

/**
 * Pack message INV_R_SEND.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_r_send_pack(
    uint8_t *dst_p,
    const inverters_inv_r_send_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_R_SEND.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_r_send_unpack(
    inverters_inv_r_send_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_send_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_motor_f_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_motor_f_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_f_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cos_phi_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__kp__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__ti__iq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_id_setdig__id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_id_setdig__id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_id_setdig__id_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_delta_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__tim__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_n__kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_n__ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_n__td_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_n_setdig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_n_setdig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_setdig_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_n_lim_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_n_lim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_lim_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_r_acc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_n__tim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_red_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_red_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_red_n_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_n_lim_minus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_n_lim_minus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_lim_minus_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_n_lim_plus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_n_lim_plus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_lim_plus_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_read_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_i_lim_dig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_lim_dig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_lim_dig_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_red_te_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_max_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_max_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_max_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_nom_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_nom_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_nom_eff_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_pole_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ain_in_1_cutoff_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ain_in_2_cutoff_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_red_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_nom_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_n__kacc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_speed_filter_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_r_send_ain_in_1_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_ain_in_1_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ain_in_1_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_snr_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_device_mains_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_regen_p_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_devicetype_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_can_id_rx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_can_id_tx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_dest_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_tim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_offsref_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_can_nbt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ref_reso_edge_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_speed_1_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_speed_2_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_tol_win_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pos_preset_val_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_can_id_2_rx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_can_id_2_tx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_v_ref_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_v_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_v_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_clear_errors_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_m_setdig__iq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_red_tm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_m_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_mo_feedback_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_dc_bus_min_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_fb_incr_mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_fb_pole_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_motor_lsq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_motor_lsq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_lsq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_id_nom_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_motor_lm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_motor_lm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_lm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_rr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_id_min_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_tr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_motor_lsd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_motor_lsd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_lsd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_rs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_motor_ts_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_motor_ts_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_motor_ts_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_def_end_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_def_end_2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_def_din_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_r_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_nmax100perc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__xkp__iq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_bat_opr_limit__mot_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_bat_opr_limit__mot_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_bat_opr_limit__mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__kf__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit0__dc_current_sens_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_can_rxtimeout_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_var_1_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_var_2_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_var_3_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_var_4_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ain_in_2_offsetval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_n_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_v_shunt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_t_peak_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_brake_delay_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_axis_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit1__idc_limit_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit2__pdc_limit_usage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit3__torqueval_init_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit4__dig_m_rcpramp_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_mo_feedback_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit5__reset_nramp_atnzero_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit6__torquetimeout_100ms_e_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit13_7__free_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ret_interval_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_allow_sync_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_r_send_ain_in_2_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_ain_in_2_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ain_in_2_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_mo_sc1_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_mo_sc1_comp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_mo_sc2_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit14__idc_limit_ena_v2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_mo_sc2_inv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_active191_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_active193_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit15__dig_e_brake_act_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__kp__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__ti__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__tim__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_m_r_acc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_regen_r_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_dc_bus_max_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_m_r_rcp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__xkp__id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_send_bat_opr_limit__gen_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_bat_opr_limit__gen_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_bat_opr_limit__gen_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_pid_i__kf__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit17_16__checkipeak_config_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_send_ain_in_2_scaleval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_send_ain_in_2_scaleval_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_ain_in_2_scaleval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_m_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit18__tractioncontrol_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit20_19__tc_deltatime_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit22_21__tc_minspeed_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit23__tc_ncmdrestoption_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_send_cmc__bit31_24__free_is_in_range(uint8_t value);


void inverters_inv_r_rcv_raw_to_conversion(
    inverters_inv_r_rcv_converted_t *conversion,
    inverters_inv_r_rcv_rcv_mux rcv_mux,
    float n_actual,
    uint16_t n_r_dec,
    uint16_t n_r_lim,
    float n_actual_filt,
    uint16_t firmware,
    inverters_inv_r_rcv_devicetype devicetype,
    uint32_t snr,
    uint32_t axis,
    float i_device,
    uint16_t v_shunt,
    uint16_t i_200perc,
    uint32_t status_bitmap,
    uint8_t err_badparas,
    uint8_t lmt_active_1,
    int16_t ain_in_1_raw,
    int16_t ain_in_2_raw,
    int16_t nmax100perc,
    float n_setdig,
    int16_t n_cmd,
    float n_cmd_ramp,
    float n_lim,
    float n_error,
    int16_t m_setdig__iq,
    float id_setdig__id,
    float i_max_pk,
    float i_con_eff,
    float i_max_eff,
    float i_nom_eff,
    float i_limit_inuse,
    float i_cmd,
    float i_cmd_ramp,
    float i_actual,
    float i_actual_filt,
    float iq_actual,
    float id_actual,
    float iq_error,
    float id_error,
    float i1_actual,
    float i2_actual,
    float i3_actual,
    uint16_t i3_adc,
    uint16_t i2_adc,
    int16_t vq,
    int16_t vd,
    int16_t vout,
    uint16_t t_motor,
    uint16_t t_igbt,
    int16_t t_air,
    float vdc_bus_filt,
    uint8_t end_1,
    uint8_t din_1,
    uint8_t end_2,
    uint8_t din_2,
    uint8_t run232,
    uint8_t dout_1,
    uint8_t dout_2,
    uint8_t dout_3,
    uint8_t rdy_btb,
    uint8_t i_fault,
    uint8_t dout_4,
    float i_lim_dig,
    float i_red_n,
    uint16_t i_red_td,
    uint16_t i_red_te,
    uint16_t i_red_tm,
    uint8_t cs_ain_1_format,
    float id_ref,
    int16_t m_outdig__iq,
    int16_t ptr_1_debug,
    int16_t ptr_2_debug,
    int16_t temp_debug,
    float motor_f_n,
    uint16_t motor_v_n,
    uint16_t t_dc__start,
    float v_dc__start,
    float v_min__start,
    float f_min__start,
    float v_corner__start,
    float f_corner__start,
    uint16_t cos_phi,
    uint16_t pwm_enum,
    float calib_ref_value,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    uint16_t cutoffdig,
    uint16_t i3_offset,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t v_ti,
    uint16_t pid_n__td,
    int16_t ain_in_1_offsetval,
    int16_t ain_in_2_offsetval,
    uint16_t dzr_seq,
    uint16_t pid_n__tim,
    float n_lim_plus,
    float n_lim_minus,
    int16_t incr_delta,
    int16_t motorpos_mech,
    int16_t motorpos_elec,
    float fb_offset,
    int32_t it_rg_monitor,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    int16_t ain_in_2_cutoff,
    float i_limit_inuse_ramp,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t rotor_signals,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint16_t ixt_monitor,
    uint8_t ecode_bit0_firsterrordtcd99,
    uint16_t device_mains,
    uint16_t regen_p,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_actual,
    int32_t pos_dest,
    int32_t pos_actual_2,
    int32_t pos_error,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_r_rcv_can_nbt can_nbt,
    uint16_t pos_zero_capture,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    int32_t pos_zero_offset,
    int32_t pos_nd_scale,
    int32_t pos_nd_offset,
    int32_t fb2_scale_ext,
    int32_t pos_offset_slack,
    int16_t pos_diff_slack,
    uint16_t fun_para_read,
    uint16_t fun_para_write,
    uint16_t fun_special,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t pid_n__ti,
    uint16_t clear_errors,
    int32_t pos_cmd,
    uint16_t can_error_busoff,
    uint16_t can_error_writetime,
    uint8_t ecode_bit0_firsterrordtcd148,
    uint16_t can_error_no_ack,
    uint16_t can_error_crc_check150,
    uint16_t can_error_crc_check151,
    uint16_t info_timer_diff,
    int16_t ballastcount,
    uint16_t m_temp,
    inverters_inv_r_rcv_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    uint16_t logic_freq,
    int16_t pwm_1,
    int16_t pwm_2,
    int16_t pwm_3,
    int16_t timer_delta,
    float motor_lsq,
    float motor_lsd,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_r_rcv_def_end_1 def_end_1,
    inverters_inv_r_rcv_def_end_2 def_end_2,
    inverters_inv_r_rcv_def_din_1 def_din_1,
    inverters_inv_r_rcv_def_din_2 def_din_2,
    uint8_t operand194,
    float i_max_inuse,
    uint8_t signal_go,
    uint8_t signal_brake,
    uint8_t signal_icns,
    uint8_t signal_lessn0,
    uint8_t signal_postolerance,
    int16_t ain_in_1_scaled251,
    int16_t ain_in_2_scaled252,
    uint8_t operand195,
    uint8_t operand218,
    uint8_t operand219,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t dc_current_sens_ena_set,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t n_rpm_maxint,
    int32_t var_1,
    int16_t can_rxtimeout,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    uint8_t dup__bit7_0__dac_source_channel,
    uint8_t fb_lossofsignal,
    uint8_t no_hw_fault,
    uint16_t t_peak,
    uint16_t brake_delay,
    int16_t power,
    int16_t work,
    int16_t extra__start,
    int16_t capture_channel,
    int16_t trig_level,
    int16_t trig_edge,
    uint16_t trig_source,
    uint16_t oszi_source,
    uint16_t oszi_skip,
    uint16_t oszi_run_cmd,
    uint16_t oszi_read_cmd,
    int16_t pos_ref_start,
    float vdc_bus,
    int16_t m_cmd_ramp,
    uint8_t lmt_1,
    uint8_t out_1,
    uint16_t subversion_nr,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t ecode_bit1__hw1_state99,
    uint8_t ecode_bit1__hw1_state148,
    uint8_t dc_i_sensena_set,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t lmt_2,
    uint8_t out_2,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t cs_ain_2_format,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t ecode_bit2__hw0_state99,
    uint8_t ecode_bit2__hw0_state148,
    uint8_t op_mode_quadrant,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t in_2,
    uint8_t rdy155,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ecode_bit3__free99,
    uint8_t ecode_bit3__free148,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t in_1,
    uint8_t go155,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    inverters_inv_r_rcv_cs_ain_1_mode cs_ain_1_mode,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t ecode_bit4__rdy399,
    uint8_t ecode_bit4__rdy3148,
    inverters_inv_r_rcv_compare_var194 compare_var194,
    inverters_inv_r_rcv_compare_var195 compare_var195,
    inverters_inv_r_rcv_compare_var218 compare_var218,
    inverters_inv_r_rcv_compare_var219 compare_var219,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t run152,
    uint8_t out_3,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t ecode_bit5__n_fail99,
    uint8_t ecode_bit5__n_fail148,
    inverters_inv_r_rcv_mo_feedback_2 mo_feedback_2,
    uint8_t recup_is_acv,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t rfe152,
    uint8_t out_4,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t ecode_bit6__flths99,
    uint8_t ecode_bit6__flths148,
    uint8_t i_dc_limit_is_acv,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t rsvd,
    uint8_t rsvd1,
    uint8_t err_devicetemp,
    uint8_t cs_oora1,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ecode_bit7__fltls99,
    uint8_t ecode_bit7__fltls148,
    uint8_t cmc__bit13_7__free,
    uint8_t brk1155,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    inverters_inv_r_rcv_cs_ain_2_mode cs_ain_2_mode,
    uint8_t km_allow_sync,
    uint8_t ni82,
    float ain_in_2_filter,
    uint8_t ecode_bit8__fail_idc99,
    uint8_t ecode_bit8__fail_idc148,
    inverters_inv_r_rcv_mo_sc1_reso mo_sc1_reso,
    inverters_inv_r_rcv_source_id194 source_id194,
    inverters_inv_r_rcv_source_id195 source_id195,
    inverters_inv_r_rcv_source_id218 source_id218,
    inverters_inv_r_rcv_source_id219 source_id219,
    uint8_t dup__bit8__can_extended_0,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t ecode_bit9__fail_i99,
    uint8_t ecode_bit9__fail_i148,
    uint8_t dup__bit9__generator,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t ecode_bit10__vccm99,
    uint8_t ecode_bit10__vccm148,
    uint8_t dup__bit10__park_rms,
    uint8_t err_user,
    uint8_t go216,
    uint8_t cs_oora2,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t ecode_bit11__15m_minus99,
    uint8_t ecode_bit11__15m_minus148,
    uint8_t mo_sc1_comp,
    uint8_t dup__bit11__dcbus_volts,
    uint8_t test,
    uint8_t d_out_3_on,
    inverters_inv_r_rcv_cs_cmd_type cs_cmd_type,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t ecode_bit12__15m_plus99,
    uint8_t ecode_bit12__15m_plus148,
    inverters_inv_r_rcv_mo_sc2_reso mo_sc2_reso,
    uint8_t dup__bit12__boat_pedal,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t ecode_bit13__18m_plus99,
    uint8_t ecode_bit13__18m_plus148,
    uint8_t dup__bit13__gen_autoiaclimit,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t cs_ain_2__i_limit,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t ecode_bit14__ubmam99,
    uint8_t ecode_bit14__ubmam148,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t dup__bit14__mtpa_reluct_enab,
    uint8_t err_ballast,
    uint8_t brk1216,
    uint8_t cs_ain_1__n_limit,
    uint8_t km_debug_test,
    uint8_t brk082,
    uint8_t ecode_bit15__t_igbt99,
    uint8_t ecode_bit15__t_igbt148,
    uint8_t mo_sc2_inv,
    inverters_inv_r_rcv_active190 active190,
    inverters_inv_r_rcv_active191 active191,
    inverters_inv_r_rcv_active192 active192,
    inverters_inv_r_rcv_active193 active193,
    uint8_t gen_autoiaclimit_is_acv,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint8_t dup__bit15__canopen_acv,
    uint16_t m_r_dec,
    uint16_t m_r_rcp,
    uint8_t warn_warning_0,
    int16_t ain_in_1_scaled213,
    int16_t ain_in_2_scaled214,
    uint16_t t_dc__stop,
    float v_dc__stop,
    float v_min__stop,
    float f_min__stop,
    float v_corner__stop,
    float f_corner__stop,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    float ain_in_1_scaleval,
    float ain_in_2_scaleval,
    uint8_t signmag82,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    uint8_t dup__bit16__bamobil3_2_offcrct,
    int16_t special__stop,
    int16_t free,
    uint16_t svnrevision_nr,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t dup__bit19_17__ecode_redefine,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t nclip_plus82,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t irddig82,
    uint8_t dup__bit20__hal_extmr_acv,
    uint8_t iuserchd82,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t dup__bit21__initwith_frg_off,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint16_t dup__bit31_22__free,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint16_t m_r_acc,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t cmc__bit31_24__free,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana82,
    uint8_t iwcns82,
    uint8_t rfepulse82,
    uint8_t md82,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_rcv_conversion_to_raw(
    inverters_inv_r_rcv_t *raw,
    inverters_inv_r_rcv_rcv_mux rcv_mux,
    float n_actual,
    uint16_t n_r_dec,
    uint16_t n_r_lim,
    float n_actual_filt,
    uint16_t firmware,
    inverters_inv_r_rcv_devicetype devicetype,
    uint32_t snr,
    uint32_t axis,
    float i_device,
    uint16_t v_shunt,
    uint16_t i_200perc,
    uint32_t status_bitmap,
    uint8_t err_badparas,
    uint8_t lmt_active_1,
    int16_t ain_in_1_raw,
    int16_t ain_in_2_raw,
    int16_t nmax100perc,
    float n_setdig,
    int16_t n_cmd,
    float n_cmd_ramp,
    float n_lim,
    float n_error,
    int16_t m_setdig__iq,
    float id_setdig__id,
    float i_max_pk,
    float i_con_eff,
    float i_max_eff,
    float i_nom_eff,
    float i_limit_inuse,
    float i_cmd,
    float i_cmd_ramp,
    float i_actual,
    float i_actual_filt,
    float iq_actual,
    float id_actual,
    float iq_error,
    float id_error,
    float i1_actual,
    float i2_actual,
    float i3_actual,
    uint16_t i3_adc,
    uint16_t i2_adc,
    int16_t vq,
    int16_t vd,
    int16_t vout,
    uint16_t t_motor,
    uint16_t t_igbt,
    int16_t t_air,
    float vdc_bus_filt,
    uint8_t end_1,
    uint8_t din_1,
    uint8_t end_2,
    uint8_t din_2,
    uint8_t run232,
    uint8_t dout_1,
    uint8_t dout_2,
    uint8_t dout_3,
    uint8_t rdy_btb,
    uint8_t i_fault,
    uint8_t dout_4,
    float i_lim_dig,
    float i_red_n,
    uint16_t i_red_td,
    uint16_t i_red_te,
    uint16_t i_red_tm,
    uint8_t cs_ain_1_format,
    float id_ref,
    int16_t m_outdig__iq,
    int16_t ptr_1_debug,
    int16_t ptr_2_debug,
    int16_t temp_debug,
    float motor_f_n,
    uint16_t motor_v_n,
    uint16_t t_dc__start,
    float v_dc__start,
    float v_min__start,
    float f_min__start,
    float v_corner__start,
    float f_corner__start,
    uint16_t cos_phi,
    uint16_t pwm_enum,
    float calib_ref_value,
    uint16_t pid_i__kp__iq,
    uint16_t pid_i__ti__iq,
    uint16_t cutoffdig,
    uint16_t i3_offset,
    int16_t i_delta_ramp,
    uint16_t pid_i__tim__iq,
    uint16_t pid_n__kp,
    uint16_t v_ti,
    uint16_t pid_n__td,
    int16_t ain_in_1_offsetval,
    int16_t ain_in_2_offsetval,
    uint16_t dzr_seq,
    uint16_t pid_n__tim,
    float n_lim_plus,
    float n_lim_minus,
    int16_t incr_delta,
    int16_t motorpos_mech,
    int16_t motorpos_elec,
    float fb_offset,
    int32_t it_rg_monitor,
    uint16_t motor_pole,
    int16_t ain_in_1_cutoff,
    uint8_t km_rsvd_0,
    uint8_t ena82,
    int16_t ain_in_2_cutoff,
    float i_limit_inuse_ramp,
    uint16_t n_nom,
    int16_t pid_n__kacc,
    uint16_t rotor_signals,
    uint16_t speed_filter,
    float ain_in_1_filter,
    uint16_t ixt_monitor,
    uint8_t ecode_bit0_firsterrordtcd99,
    uint16_t device_mains,
    uint16_t regen_p,
    uint16_t can_id_rx,
    uint16_t can_id_tx,
    uint16_t pos_kp,
    uint16_t pos_ti,
    uint16_t pos_td,
    int32_t pos_actual,
    int32_t pos_dest,
    int32_t pos_actual_2,
    int32_t pos_error,
    uint16_t pos_tim,
    int32_t pos_offsref,
    inverters_inv_r_rcv_can_nbt can_nbt,
    uint16_t pos_zero_capture,
    uint16_t ref_reso_edge,
    int16_t speed_1,
    int16_t speed_2,
    int16_t pos_tol_win,
    int32_t pos_preset_val,
    int32_t pos_zero_offset,
    int32_t pos_nd_scale,
    int32_t pos_nd_offset,
    int32_t fb2_scale_ext,
    int32_t pos_offset_slack,
    int16_t pos_diff_slack,
    uint16_t fun_para_read,
    uint16_t fun_para_write,
    uint16_t fun_special,
    uint32_t can_id_2_rx,
    uint32_t can_id_2_tx,
    int16_t v_ref,
    uint16_t v_kp,
    uint16_t pid_n__ti,
    uint16_t clear_errors,
    int32_t pos_cmd,
    uint16_t can_error_busoff,
    uint16_t can_error_writetime,
    uint8_t ecode_bit0_firsterrordtcd148,
    uint16_t can_error_no_ack,
    uint16_t can_error_crc_check150,
    uint16_t can_error_crc_check151,
    uint16_t info_timer_diff,
    int16_t ballastcount,
    uint16_t m_temp,
    inverters_inv_r_rcv_mo_feedback_1 mo_feedback_1,
    uint16_t dc_bus_min_lim,
    uint16_t fb_incr_mot,
    uint16_t fb_pole,
    uint16_t logic_freq,
    int16_t pwm_1,
    int16_t pwm_2,
    int16_t pwm_3,
    int16_t timer_delta,
    float motor_lsq,
    float motor_lsd,
    int16_t id_nom,
    float motor_lm,
    uint16_t motor_rr,
    int16_t id_min,
    int16_t motor_tr,
    uint16_t motor_rs,
    float motor_ts,
    inverters_inv_r_rcv_def_end_1 def_end_1,
    inverters_inv_r_rcv_def_end_2 def_end_2,
    inverters_inv_r_rcv_def_din_1 def_din_1,
    inverters_inv_r_rcv_def_din_2 def_din_2,
    uint8_t operand194,
    float i_max_inuse,
    uint8_t signal_go,
    uint8_t signal_brake,
    uint8_t signal_icns,
    uint8_t signal_lessn0,
    uint8_t signal_postolerance,
    int16_t ain_in_1_scaled251,
    int16_t ain_in_2_scaled252,
    uint8_t operand195,
    uint8_t operand218,
    uint8_t operand219,
    uint16_t pid_i__xkp__iq,
    float bat_opr_limit__mot,
    uint16_t pid_i__kf__iq,
    uint8_t dc_current_sens_ena_set,
    uint8_t cmc__bit0__dc_current_sens_ena,
    int16_t n_rpm_maxint,
    int32_t var_1,
    int16_t can_rxtimeout,
    int32_t var_2,
    int32_t var_3,
    int32_t var_4,
    uint8_t dup__bit7_0__dac_source_channel,
    uint8_t fb_lossofsignal,
    uint8_t no_hw_fault,
    uint16_t t_peak,
    uint16_t brake_delay,
    int16_t power,
    int16_t work,
    int16_t extra__start,
    int16_t capture_channel,
    int16_t trig_level,
    int16_t trig_edge,
    uint16_t trig_source,
    uint16_t oszi_source,
    uint16_t oszi_skip,
    uint16_t oszi_run_cmd,
    uint16_t oszi_read_cmd,
    int16_t pos_ref_start,
    float vdc_bus,
    int16_t m_cmd_ramp,
    uint8_t lmt_1,
    uint8_t out_1,
    uint16_t subversion_nr,
    uint8_t err_powerfault,
    uint8_t lmt_active_2,
    uint8_t km_speed_0,
    uint8_t ncr082,
    uint8_t ecode_bit1__hw1_state99,
    uint8_t ecode_bit1__hw1_state148,
    uint8_t dc_i_sensena_set,
    uint8_t cmc__bit1__idc_limit_ena,
    uint8_t lmt_2,
    uint8_t out_2,
    uint8_t err_rfe_fault,
    uint8_t in_active_2,
    uint8_t cs_ain_2_format,
    uint8_t km_frg_off,
    uint8_t lim_plus82,
    uint8_t ecode_bit2__hw0_state99,
    uint8_t ecode_bit2__hw0_state148,
    uint8_t op_mode_quadrant,
    uint8_t cmc__bit2__pdc_limit_usage,
    uint8_t in_2,
    uint8_t rdy155,
    uint8_t err_bustimeout,
    uint8_t in_active_1,
    uint8_t km_cal_off,
    uint8_t lim_minus82,
    uint8_t ecode_bit3__free99,
    uint8_t ecode_bit3__free148,
    uint8_t cmc__bit3__torqueval_init_ena,
    uint8_t in_1,
    uint8_t go155,
    uint8_t err_feedbacksignal,
    uint8_t frgrun,
    inverters_inv_r_rcv_cs_ain_1_mode cs_ain_1_mode,
    uint8_t km_tx_tog_stat,
    uint8_t ok82,
    uint8_t ecode_bit4__rdy399,
    uint8_t ecode_bit4__rdy3148,
    inverters_inv_r_rcv_compare_var194 compare_var194,
    inverters_inv_r_rcv_compare_var195 compare_var195,
    inverters_inv_r_rcv_compare_var218 compare_var218,
    inverters_inv_r_rcv_compare_var219 compare_var219,
    uint8_t cmc__bit4__dig_m_rcpramp_ena,
    uint8_t run152,
    uint8_t out_3,
    uint8_t err_powervoltage_low,
    uint8_t rfe216,
    uint8_t km_i_limit,
    uint8_t icns82,
    uint8_t ecode_bit5__n_fail99,
    uint8_t ecode_bit5__n_fail148,
    inverters_inv_r_rcv_mo_feedback_2 mo_feedback_2,
    uint8_t recup_is_acv,
    uint8_t cmc__bit5__reset_nramp_atnzero,
    uint8_t rfe152,
    uint8_t out_4,
    uint8_t err_motortemp,
    uint8_t km_n_clip,
    uint8_t tnlim82,
    uint8_t ecode_bit6__flths99,
    uint8_t ecode_bit6__flths148,
    uint8_t i_dc_limit_is_acv,
    uint8_t cmc__bit6__torquetimeout_100ms_e,
    uint8_t rsvd,
    uint8_t rsvd1,
    uint8_t err_devicetemp,
    uint8_t cs_oora1,
    uint8_t km_mix_ana_on,
    uint8_t pn82,
    uint8_t ecode_bit7__fltls99,
    uint8_t ecode_bit7__fltls148,
    uint8_t cmc__bit13_7__free,
    uint8_t brk1155,
    uint8_t err_overvoltage,
    uint8_t d_out_1_on,
    inverters_inv_r_rcv_cs_ain_2_mode cs_ain_2_mode,
    uint8_t km_allow_sync,
    uint8_t ni82,
    float ain_in_2_filter,
    uint8_t ecode_bit8__fail_idc99,
    uint8_t ecode_bit8__fail_idc148,
    inverters_inv_r_rcv_mo_sc1_reso mo_sc1_reso,
    inverters_inv_r_rcv_source_id194 source_id194,
    inverters_inv_r_rcv_source_id195 source_id195,
    inverters_inv_r_rcv_source_id218 source_id218,
    inverters_inv_r_rcv_source_id219 source_id219,
    uint8_t dup__bit8__can_extended_0,
    uint8_t err_ipeak,
    uint8_t d_out_2_on,
    uint8_t km_handwheel,
    uint8_t _n082,
    uint8_t ecode_bit9__fail_i99,
    uint8_t ecode_bit9__fail_i148,
    uint8_t dup__bit9__generator,
    uint8_t err_raceaway,
    uint8_t btbrdy,
    uint8_t km_phasing_extend,
    uint8_t rsw82,
    uint8_t ecode_bit10__vccm99,
    uint8_t ecode_bit10__vccm148,
    uint8_t dup__bit10__park_rms,
    uint8_t err_user,
    uint8_t go216,
    uint8_t cs_oora2,
    uint8_t km_rsvd_11,
    uint8_t cal082,
    uint8_t ecode_bit11__15m_minus99,
    uint8_t ecode_bit11__15m_minus148,
    uint8_t mo_sc1_comp,
    uint8_t dup__bit11__dcbus_volts,
    uint8_t test,
    uint8_t d_out_3_on,
    inverters_inv_r_rcv_cs_cmd_type cs_cmd_type,
    uint8_t km_rsvd_12,
    uint8_t cal82,
    uint8_t ecode_bit12__15m_plus99,
    uint8_t ecode_bit12__15m_plus148,
    inverters_inv_r_rcv_mo_sc2_reso mo_sc2_reso,
    uint8_t dup__bit12__boat_pedal,
    uint8_t d_out_4_on,
    uint8_t km_rsvd_13,
    uint8_t tol82,
    uint8_t ecode_bit13__18m_plus99,
    uint8_t ecode_bit13__18m_plus148,
    uint8_t dup__bit13__gen_autoiaclimit,
    uint8_t err_hwerr,
    uint8_t goff,
    uint8_t cs_ain_2__i_limit,
    uint8_t km_pseudo_enable,
    uint8_t rdy82,
    uint8_t ecode_bit14__ubmam99,
    uint8_t ecode_bit14__ubmam148,
    uint8_t cmc__bit14__idc_limit_ena_v2,
    uint8_t dup__bit14__mtpa_reluct_enab,
    uint8_t err_ballast,
    uint8_t brk1216,
    uint8_t cs_ain_1__n_limit,
    uint8_t km_debug_test,
    uint8_t brk082,
    uint8_t ecode_bit15__t_igbt99,
    uint8_t ecode_bit15__t_igbt148,
    uint8_t mo_sc2_inv,
    inverters_inv_r_rcv_active190 active190,
    inverters_inv_r_rcv_active191 active191,
    inverters_inv_r_rcv_active192 active192,
    inverters_inv_r_rcv_active193 active193,
    uint8_t gen_autoiaclimit_is_acv,
    uint8_t cmc__bit15__dig_e_brake_act,
    uint8_t dup__bit15__canopen_acv,
    uint16_t m_r_dec,
    uint16_t m_r_rcp,
    uint8_t warn_warning_0,
    int16_t ain_in_1_scaled213,
    int16_t ain_in_2_scaled214,
    uint16_t t_dc__stop,
    float v_dc__stop,
    float v_min__stop,
    float f_min__stop,
    float v_corner__stop,
    float f_corner__stop,
    uint16_t pid_i__kp__id,
    uint16_t pid_i__ti__id,
    uint16_t pid_i__tim__id,
    float ain_in_1_scaleval,
    float ain_in_2_scaleval,
    uint8_t signmag82,
    uint16_t regen_r,
    uint16_t dc_bus_max_lim,
    uint16_t pid_i__xkp__id,
    float bat_opr_limit__gen,
    uint16_t pid_i__kf__id,
    uint8_t cmc__bit17_16__checkipeak_config,
    uint8_t dup__bit16__bamobil3_2_offcrct,
    int16_t special__stop,
    int16_t free,
    uint16_t svnrevision_nr,
    uint8_t warn_illegal_status,
    uint8_t nclip82,
    uint8_t dup__bit19_17__ecode_redefine,
    uint8_t warn_safe_in,
    uint8_t nclip_minus82,
    uint8_t cmc__bit18__tractioncontrol_ena,
    uint8_t nclip_plus82,
    uint8_t cmc__bit20_19__tc_deltatime_conf,
    uint8_t irddig82,
    uint8_t dup__bit20__hal_extmr_acv,
    uint8_t iuserchd82,
    uint8_t cmc__bit22_21__tc_minspeed_conf,
    uint8_t dup__bit21__initwith_frg_off,
    uint8_t warn_motortemp,
    uint8_t irdn82,
    uint16_t dup__bit31_22__free,
    uint8_t warn_devicetemp,
    uint8_t irdti82,
    uint8_t cmc__bit23__tc_ncmdrestoption,
    uint16_t m_r_acc,
    uint8_t warn_vout_sat,
    uint8_t irdtir82,
    uint8_t cmc__bit31_24__free,
    uint8_t warn_ipeak,
    uint8_t _10hz82,
    uint8_t warn_raceaway,
    uint8_t irdtm82,
    uint8_t irdana82,
    uint8_t iwcns82,
    uint8_t rfepulse82,
    uint8_t md82,
    uint8_t warn_ballast,
    uint8_t hndwhl82
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAM
);


void inverters_inv_r_rcv_raw_to_conversion_struct(
    inverters_inv_r_rcv_converted_t *conversion, 
    const inverters_inv_r_rcv_t *raw);


void inverters_inv_r_rcv_conversion_to_raw_struct(
    inverters_inv_r_rcv_t *raw,
    const inverters_inv_r_rcv_converted_t *conversion);

int inverters_inv_r_rcv_rcv_mux_enum_to_string(inverters_inv_r_rcv_rcv_mux value, char *buffer);
int inverters_inv_r_rcv_devicetype_enum_to_string(inverters_inv_r_rcv_devicetype value, char *buffer);
int inverters_inv_r_rcv_can_nbt_enum_to_string(inverters_inv_r_rcv_can_nbt value, char *buffer);
int inverters_inv_r_rcv_mo_feedback_1_enum_to_string(inverters_inv_r_rcv_mo_feedback_1 value, char *buffer);
int inverters_inv_r_rcv_def_end_1_enum_to_string(inverters_inv_r_rcv_def_end_1 value, char *buffer);
int inverters_inv_r_rcv_def_end_2_enum_to_string(inverters_inv_r_rcv_def_end_2 value, char *buffer);
int inverters_inv_r_rcv_def_din_1_enum_to_string(inverters_inv_r_rcv_def_din_1 value, char *buffer);
int inverters_inv_r_rcv_def_din_2_enum_to_string(inverters_inv_r_rcv_def_din_2 value, char *buffer);
int inverters_inv_r_rcv_cs_ain_1_mode_enum_to_string(inverters_inv_r_rcv_cs_ain_1_mode value, char *buffer);
int inverters_inv_r_rcv_compare_var194_enum_to_string(inverters_inv_r_rcv_compare_var194 value, char *buffer);
int inverters_inv_r_rcv_compare_var195_enum_to_string(inverters_inv_r_rcv_compare_var195 value, char *buffer);
int inverters_inv_r_rcv_compare_var218_enum_to_string(inverters_inv_r_rcv_compare_var218 value, char *buffer);
int inverters_inv_r_rcv_compare_var219_enum_to_string(inverters_inv_r_rcv_compare_var219 value, char *buffer);
int inverters_inv_r_rcv_mo_feedback_2_enum_to_string(inverters_inv_r_rcv_mo_feedback_2 value, char *buffer);
int inverters_inv_r_rcv_cs_ain_2_mode_enum_to_string(inverters_inv_r_rcv_cs_ain_2_mode value, char *buffer);
int inverters_inv_r_rcv_mo_sc1_reso_enum_to_string(inverters_inv_r_rcv_mo_sc1_reso value, char *buffer);
int inverters_inv_r_rcv_source_id194_enum_to_string(inverters_inv_r_rcv_source_id194 value, char *buffer);
int inverters_inv_r_rcv_source_id195_enum_to_string(inverters_inv_r_rcv_source_id195 value, char *buffer);
int inverters_inv_r_rcv_source_id218_enum_to_string(inverters_inv_r_rcv_source_id218 value, char *buffer);
int inverters_inv_r_rcv_source_id219_enum_to_string(inverters_inv_r_rcv_source_id219 value, char *buffer);
int inverters_inv_r_rcv_cs_cmd_type_enum_to_string(inverters_inv_r_rcv_cs_cmd_type value, char *buffer);
int inverters_inv_r_rcv_mo_sc2_reso_enum_to_string(inverters_inv_r_rcv_mo_sc2_reso value, char *buffer);
int inverters_inv_r_rcv_active190_enum_to_string(inverters_inv_r_rcv_active190 value, char *buffer);
int inverters_inv_r_rcv_active191_enum_to_string(inverters_inv_r_rcv_active191 value, char *buffer);
int inverters_inv_r_rcv_active192_enum_to_string(inverters_inv_r_rcv_active192 value, char *buffer);
int inverters_inv_r_rcv_active193_enum_to_string(inverters_inv_r_rcv_active193 value, char *buffer);

int inverters_inv_r_rcv_converted_to_string(inverters_inv_r_rcv_converted_t *message, char *buffer);

int inverters_inv_r_rcv_converted_to_string_file(inverters_inv_r_rcv_converted_t *message, FILE *buffer);

int inverters_inv_r_rcv_fields(char *buffer);

int inverters_inv_r_rcv_fields_file(FILE *buffer);

/**
 * Pack message INV_R_RCV.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int inverters_inv_r_rcv_pack(
    uint8_t *dst_p,
    const inverters_inv_r_rcv_t *src_p,
    size_t byte_size);

/**
 * Unpack message INV_R_RCV.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int inverters_inv_r_rcv_unpack(
    inverters_inv_r_rcv_t *dst_p,
    const uint8_t *src_p,
    size_t byte_size
    #ifdef CANLIB_TIMESTAMP
        , uint64_t _timestamp
    #endif // CANLIB_TIMESTAMP
    );

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rcv_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_r_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_actual_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_actual_filt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_actual_filt_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_firmware_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_devicetype_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_snr_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_axis_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_device_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_device_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_shunt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_200perc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_status_bitmap_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_badparas_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lmt_active_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_1_raw_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_2_raw_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nmax100perc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_setdig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_setdig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_setdig_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_cmd_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_cmd_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_lim_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_lim_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_lim_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_error_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_setdig__iq_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_id_setdig__id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_id_setdig__id_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_id_setdig__id_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_max_pk_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_max_pk_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_max_pk_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_con_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_con_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_con_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_max_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_max_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_max_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_nom_eff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_nom_eff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_nom_eff_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_limit_inuse_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_limit_inuse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_limit_inuse_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_cmd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_cmd_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_cmd_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_cmd_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_cmd_ramp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_actual_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_actual_filt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_actual_filt_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_iq_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_iq_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iq_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_id_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_id_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_id_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_iq_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_iq_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iq_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_id_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_id_error_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_id_error_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i1_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i1_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i1_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i2_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i2_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i2_actual_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i3_actual_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i3_actual_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i3_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i3_adc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i2_adc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_vq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_vd_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_vout_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_motor_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_igbt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_air_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_vdc_bus_filt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_vdc_bus_filt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_vdc_bus_filt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_end_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_din_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_end_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_din_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_run232_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dout_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dout_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dout_3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rdy_btb_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dout_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_lim_dig_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_lim_dig_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_lim_dig_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_i_red_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_red_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_red_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_red_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_red_te_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_red_tm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_ain_1_format_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_id_ref_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_id_ref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_id_ref_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_outdig__iq_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ptr_1_debug_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ptr_2_debug_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_temp_debug_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_motor_f_n_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_motor_f_n_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_f_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_v_n_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_dc__start_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_v_dc__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_v_dc__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_dc__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_v_min__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_v_min__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_min__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_f_min__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_f_min__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_f_min__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_v_corner__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_v_corner__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_corner__start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_f_corner__start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_f_corner__start_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_f_corner__start_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cos_phi_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pwm_enum_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_calib_ref_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_calib_ref_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_calib_ref_value_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__kp__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__ti__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cutoffdig_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i3_offset_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_delta_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__tim__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_n__kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_n__td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_1_offsetval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_2_offsetval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dzr_seq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_n__tim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_lim_plus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_lim_plus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_lim_plus_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_n_lim_minus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_n_lim_minus_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_lim_minus_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_incr_delta_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motorpos_mech_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motorpos_elec_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_fb_offset_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_fb_offset_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fb_offset_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_it_rg_monitor_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_pole_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_1_cutoff_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ena82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_2_cutoff_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_limit_inuse_ramp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_limit_inuse_ramp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_limit_inuse_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_nom_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_n__kacc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rotor_signals_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_speed_filter_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_r_rcv_ain_in_1_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_ain_in_1_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_1_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ixt_monitor_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit0_firsterrordtcd99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_device_mains_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_regen_p_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_id_rx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_id_tx_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_td_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_actual_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_dest_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_actual_2_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_error_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_tim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_offsref_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_nbt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_zero_capture_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ref_reso_edge_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_speed_1_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_speed_2_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_tol_win_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_preset_val_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_zero_offset_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_nd_scale_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_nd_offset_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fb2_scale_ext_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_offset_slack_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_diff_slack_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fun_para_read_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fun_para_write_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fun_special_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_id_2_rx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_id_2_tx_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_ref_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_kp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_n__ti_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_clear_errors_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_cmd_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_error_busoff_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_error_writetime_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit0_firsterrordtcd148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_error_no_ack_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_error_crc_check150_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_error_crc_check151_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_info_timer_diff_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ballastcount_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_mo_feedback_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dc_bus_min_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fb_incr_mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fb_pole_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_logic_freq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pwm_1_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pwm_2_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pwm_3_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_timer_delta_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_motor_lsq_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_motor_lsq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_lsq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_motor_lsd_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_motor_lsd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_lsd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_id_nom_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_motor_lm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_motor_lm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_lm_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_rr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_id_min_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_tr_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_rs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_motor_ts_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_motor_ts_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_motor_ts_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_def_end_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_def_end_2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_def_din_1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_def_din_2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_operand194_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_i_max_inuse_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_i_max_inuse_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_max_inuse_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signal_go_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signal_brake_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signal_icns_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signal_lessn0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signal_postolerance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_1_scaled251_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_2_scaled252_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_operand195_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_operand218_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_operand219_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__xkp__iq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_bat_opr_limit__mot_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_bat_opr_limit__mot_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_bat_opr_limit__mot_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__kf__iq_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dc_current_sens_ena_set_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit0__dc_current_sens_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_n_rpm_maxint_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_var_1_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_can_rxtimeout_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_var_2_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_var_3_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_var_4_is_in_range(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit7_0__dac_source_channel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_fb_lossofsignal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_no_hw_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_peak_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_brake_delay_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_power_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_work_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_extra__start_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_capture_channel_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_trig_level_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_trig_edge_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_trig_source_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_oszi_source_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_oszi_skip_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_oszi_run_cmd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_oszi_read_cmd_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pos_ref_start_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_vdc_bus_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_vdc_bus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_vdc_bus_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_cmd_ramp_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lmt_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_out_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_subversion_nr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_powerfault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lmt_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_speed_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ncr082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit1__hw1_state99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit1__hw1_state148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dc_i_sensena_set_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit1__idc_limit_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lmt_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_out_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_rfe_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_in_active_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_ain_2_format_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lim_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit2__hw0_state99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit2__hw0_state148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_op_mode_quadrant_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit2__pdc_limit_usage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_in_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rdy155_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_bustimeout_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_in_active_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_cal_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_lim_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit3__free99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit3__free148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit3__torqueval_init_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_in_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_go155_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_feedbacksignal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_frgrun_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_ain_1_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_tx_tog_stat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ok82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit4__rdy399_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit4__rdy3148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_compare_var194_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_compare_var195_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_compare_var218_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_compare_var219_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit4__dig_m_rcpramp_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_run152_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_out_3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_powervoltage_low_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rfe216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_icns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit5__n_fail99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit5__n_fail148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_mo_feedback_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_recup_is_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit5__reset_nramp_atnzero_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rfe152_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_out_4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_n_clip_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_tnlim82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit6__flths99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit6__flths148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_i_dc_limit_is_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit6__torquetimeout_100ms_e_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rsvd_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rsvd1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_oora1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_mix_ana_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit7__fltls99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit7__fltls148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit13_7__free_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_brk1155_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_overvoltage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_1_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_ain_2_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_allow_sync_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ni82_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t inverters_inv_r_rcv_ain_in_2_filter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_ain_in_2_filter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_2_filter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit8__fail_idc99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit8__fail_idc148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_mo_sc1_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_source_id194_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_source_id195_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_source_id218_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_source_id219_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit8__can_extended_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_2_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_handwheel_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv__n082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit9__fail_i99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit9__fail_i148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit9__generator_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_btbrdy_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_phasing_extend_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rsw82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit10__vccm99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit10__vccm148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit10__park_rms_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_user_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_go216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_oora2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_11_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cal082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit11__15m_minus99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit11__15m_minus148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_mo_sc1_comp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit11__dcbus_volts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_3_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_cmd_type_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_12_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cal82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit12__15m_plus99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit12__15m_plus148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_mo_sc2_reso_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit12__boat_pedal_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_d_out_4_on_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_rsvd_13_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_tol82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit13__18m_plus99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit13__18m_plus148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit13__gen_autoiaclimit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_hwerr_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_goff_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_ain_2__i_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_pseudo_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rdy82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit14__ubmam99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit14__ubmam148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit14__idc_limit_ena_v2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit14__mtpa_reluct_enab_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_err_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_brk1216_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cs_ain_1__n_limit_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_km_debug_test_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_brk082_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit15__t_igbt99_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ecode_bit15__t_igbt148_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_mo_sc2_inv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_active190_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_active191_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_active192_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_active193_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_gen_autoiaclimit_is_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit15__dig_e_brake_act_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit15__canopen_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_r_dec_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_r_rcp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_warning_0_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_1_scaled213_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_2_scaled214_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_t_dc__stop_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_v_dc__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_v_dc__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_dc__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_v_min__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_v_min__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_min__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_f_min__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_f_min__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_f_min__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_v_corner__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_v_corner__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_v_corner__stop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_f_corner__stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_f_corner__stop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_f_corner__stop_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__kp__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__ti__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__tim__id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_ain_in_1_scaleval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_ain_in_1_scaleval_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_1_scaleval_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t inverters_inv_r_rcv_ain_in_2_scaleval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_ain_in_2_scaleval_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_ain_in_2_scaleval_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_signmag82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_regen_r_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dc_bus_max_lim_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__xkp__id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t inverters_inv_r_rcv_bat_opr_limit__gen_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float inverters_inv_r_rcv_bat_opr_limit__gen_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_bat_opr_limit__gen_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_pid_i__kf__id_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit17_16__checkipeak_config_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit16__bamobil3_2_offcrct_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_special__stop_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_free_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_svnrevision_nr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_illegal_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit19_17__ecode_redefine_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_safe_in_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip_minus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit18__tractioncontrol_ena_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_nclip_plus82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit20_19__tc_deltatime_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irddig82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit20__hal_extmr_acv_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iuserchd82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit22_21__tc_minspeed_conf_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit21__initwith_frg_off_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_motortemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdn82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_dup__bit31_22__free_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_devicetemp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdti82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit23__tc_ncmdrestoption_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_m_r_acc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_vout_sat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdtir82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_cmc__bit31_24__free_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_ipeak_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv__10hz82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_raceaway_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdtm82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_irdana82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_iwcns82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_rfepulse82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_md82_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_warn_ballast_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool inverters_inv_r_rcv_hndwhl82_is_in_range(uint8_t value);

bool inverters_id_is_message(uint16_t id);

int inverters_to_string_from_id(uint16_t message_id, void* message, char* buffer);
int inverters_fields_from_id(uint16_t message_id, char* buffer);
int inverters_to_string_file_from_id(uint16_t message_id, void* message, FILE* buffer);
int inverters_fields_file_from_id(uint16_t message_id, FILE* buffer);


typedef union CANLIB_PARKING {
    inverters_inv_l_send_t _inv_l_send;
    inverters_inv_l_rcv_t _inv_l_rcv;
    inverters_inv_r_send_t _inv_r_send;
    inverters_inv_r_rcv_t _inv_r_rcv;

} _inverters_all_struct_raw;

typedef union CANLIB_PARKING {
    inverters_inv_l_send_converted_t _inv_l_send;
    inverters_inv_l_rcv_converted_t _inv_l_rcv;
    inverters_inv_r_send_converted_t _inv_r_send;
    inverters_inv_r_rcv_converted_t _inv_r_rcv;

} _inverters_all_struct_converted;



#define inverters_MAX_STRUCT_SIZE_RAW sizeof(_inverters_all_struct_raw)
#define inverters_MAX_STRUCT_SIZE_CONVERSION sizeof(_inverters_all_struct_converted)

#ifdef __cplusplus
}
#endif

#endif
