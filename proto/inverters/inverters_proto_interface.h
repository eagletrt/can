
#ifndef inverters_PROTO_INTERFACE_H
#define inverters_PROTO_INTERFACE_H

#include <string>
#include <unordered_map>
#include <functional>

#include "inverters.pb.h"

#ifdef inverters_IMPLEMENTATION
#undef inverters_IMPLEMENTATION
#define __inverters_IMPLEMENTATION
#endif

#include "../../lib/inverters/inverters_network.h"

#ifdef __inverters_IMPLEMENTATION
#undef __inverters_IMPLEMENTATION
#define inverters_IMPLEMENTATION
#endif

#ifndef CANLIB_MESSAGE_ID_TYPE
#define CANLIB_MESSAGE_ID_TYPE
typedef uint16_t canlib_message_id;
#endif // CANLIB_MESSAGE_ID_TYPE

#ifndef CANLIB_CIRCULAR_BUFFER
#define CANLIB_CIRCULAR_BUFFER
namespace Helper {
template <bool FITS8, bool FITS16>
struct Index {
  using Type = uint32_t;
};

template <>
struct Index<false, true> {
  using Type = uint16_t;
};

template <>
struct Index<true, true> {
  using Type = uint8_t;
};
}  // namespace Helper

template <typename T, size_t S,
          typename IT =
              typename Helper::Index<(S <= UINT8_MAX), (S <= UINT16_MAX)>::Type>
class canlib_circular_buffer {
 public:
  static constexpr IT capacity = static_cast<IT>(S);

  using index_t = IT;

  constexpr canlib_circular_buffer();
  canlib_circular_buffer(const canlib_circular_buffer &) = delete;
  canlib_circular_buffer(canlib_circular_buffer &&) = delete;
  canlib_circular_buffer &operator=(const canlib_circular_buffer &) = delete;
  canlib_circular_buffer &operator=(canlib_circular_buffer &&) = delete;

  bool unshift(T value);
  bool push(T value);
  T shift();
  T pop();
  const T& start() const;
  T inline first() const;
  T inline last() const;
  const T& operator[](IT index) const;
  IT inline size() const;
  IT inline available() const;
  bool inline empty() const;
  bool inline full() const;
  void inline clear();
  size_t inline offset() const;


 private:
  T buffer[S];
  T *head;
  T *tail;
  size_t _offset;
#ifndef CIRCULAR_BUFFER_INT_SAFE
  IT count;
#else
  volatile IT count;
#endif
};

template <typename T, size_t S, typename IT>
constexpr canlib_circular_buffer<T, S, IT>::canlib_circular_buffer()
    : head(buffer), tail(buffer), count(0), _offset(0) {}

template <typename T, size_t S, typename IT>
bool canlib_circular_buffer<T, S, IT>::unshift(T value) {
  if (head == buffer) {
    head = buffer + capacity;
  }
  *--head = value;
  if (count == capacity) {
    if (tail-- == buffer) {
      tail = buffer + capacity - 1;
    }
    return false;
  } else {
    if (count++ == 0) {
      tail = head;
    }
    return true;
  }
}

template <typename T, size_t S, typename IT>
bool canlib_circular_buffer<T, S, IT>::push(T value) {
  if (++tail == buffer + capacity) {
    tail = buffer;
  }
  *tail = value;
  if (count == capacity) {
    if (++head == buffer + capacity) {
      head = buffer;
    }
    _offset = (_offset + 1) % capacity;
    return false;
  } else {
    if (count++ == 0) {
      head = tail;
    }
    return true;
  }
}

template <typename T, size_t S, typename IT>
T canlib_circular_buffer<T, S, IT>::shift() {
  if (count == 0) return *head;
  T result = *head++;
  if (head >= buffer + capacity) {
    head = buffer;
  }
  count--;
  return result;
}

template <typename T, size_t S, typename IT>
T canlib_circular_buffer<T, S, IT>::pop() {
  if (count == 0) return *tail;
  T result = *tail--;
  if (tail < buffer) {
    tail = buffer + capacity - 1;
  }
  count--;
  return result;
}

template <typename T, size_t S, typename IT>
T inline canlib_circular_buffer<T, S, IT>::first() const {
  return *head;
}

template <typename T, size_t S, typename IT>
T inline canlib_circular_buffer<T, S, IT>::last() const {
  return *tail;
}

template <typename T, size_t S, typename IT>
const T& canlib_circular_buffer<T, S, IT>::start() const {
  return buffer[1];
}

template <typename T, size_t S, typename IT>
const T& canlib_circular_buffer<T, S, IT>::operator[](IT index) const {
  if (index >= count) return *tail;
  return *(buffer + ((head - buffer + index) % capacity));
}

template <typename T, size_t S, typename IT>
IT inline canlib_circular_buffer<T, S, IT>::size() const {
  return count;
}

template <typename T, size_t S, typename IT>
IT inline canlib_circular_buffer<T, S, IT>::available() const {
  return capacity - count;
}

template <typename T, size_t S, typename IT>
bool inline canlib_circular_buffer<T, S, IT>::empty() const {
  return count == 0;
}

template <typename T, size_t S, typename IT>
bool inline canlib_circular_buffer<T, S, IT>::full() const {
  return count == capacity;
}

template <typename T, size_t S, typename IT>
void inline canlib_circular_buffer<T, S, IT>::clear() {
  head = tail = buffer;
  count = 0;
}

template <typename T, size_t S, typename IT>
size_t inline canlib_circular_buffer<T, S, IT>::offset() const {
  return _offset;
}

#endif // CANLIB_CIRCULAR_BUFFER

#ifndef CANLIB_CIRCULAR_BUFFER_SIZE
#define CANLIB_CIRCULAR_BUFFER_SIZE 2000
#endif // CANLIB_CIRCULAR_BUFFER_SIZE


#ifndef CANLIB_PROTO_INTERFACE_TYPES
#define CANLIB_PROTO_INTERFACE_TYPES

/**
*  Use network_<> to get all the values from the protobuffer.
*  Every network can be consensed into one network_<> as all the
*  messages names are unique.
**/

typedef std::string field_name;
typedef std::string messages_name;
typedef canlib_circular_buffer<double,      CANLIB_CIRCULAR_BUFFER_SIZE> double_buffer;
typedef canlib_circular_buffer<uint64_t,    CANLIB_CIRCULAR_BUFFER_SIZE> uint64_buffer;
typedef canlib_circular_buffer<std::string, CANLIB_CIRCULAR_BUFFER_SIZE> string_buffer;

// structure contains all the messages with a enum value associated
// the type is unified to uint64_t
typedef std::unordered_map<field_name,    uint64_buffer> message_enums;
typedef std::unordered_map<messages_name, message_enums> network_enums;

// structure contains all the messages with a signal associated
// the type is unified to double
typedef std::unordered_map<field_name,    double_buffer>   message_signals;
typedef std::unordered_map<messages_name, message_signals> network_signals;

// structure contains all the messages with a string associated
// the type is unified to string
typedef std::unordered_map<field_name,    string_buffer>   message_strings;
typedef std::unordered_map<messages_name, message_strings> network_strings;

#endif // CANLIB_PROTO_INTERFACE_TYPES

void inverters_proto_interface_serialize_from_id(canlib_message_id id, inverters::Pack* pack, device_t* device);
void inverters_proto_interface_deserialize(inverters::Pack* pack, network_enums* net_enums, network_signals* net_signals, network_strings* net_strings, uint64_t resample_us);

#ifdef inverters_PROTO_INTERAFCE_IMPLEMENTATION

void inverters_proto_interface_deserialize(inverters::Pack* pack, network_enums* net_enums, network_signals* net_signals, network_strings* net_strings, uint64_t resample_us) {
    char buffer[1024];
    
    for(int i = 0; i < pack->inv_l_send_size(); i++){
#ifdef CANLIB_TIMESTAMP
        static uint64_t last_timestamp = 0;
        if(pack->inv_l_send(i)._inner_timestamp() - last_timestamp < resample_us) continue;
        else last_timestamp = pack->inv_l_send(i)._inner_timestamp();
        (*net_signals)["INV_L_SEND"]["_timestamp"].push(pack->inv_l_send(i)._inner_timestamp());
#endif // CANLIB_TIMESTAMP

		(*net_enums)["INV_L_SEND"]["send_mux"].push(pack->inv_l_send(i).send_mux());
		inverters_inv_l_send_send_mux_enum_to_string((inverters_inv_l_send_send_mux)pack->inv_l_send(i).send_mux(), buffer);
		(*net_strings)["INV_L_SEND"]["send_mux"].push(buffer);
		(*net_signals)["INV_L_SEND"]["motor_f_n"].push(pack->inv_l_send(i).motor_f_n());
		(*net_signals)["INV_L_SEND"]["cos_phi"].push(pack->inv_l_send(i).cos_phi());
		(*net_signals)["INV_L_SEND"]["pid_i__kp__iq"].push(pack->inv_l_send(i).pid_i__kp__iq());
		(*net_signals)["INV_L_SEND"]["pid_i__ti__iq"].push(pack->inv_l_send(i).pid_i__ti__iq());
		(*net_signals)["INV_L_SEND"]["id_setdig__id"].push(pack->inv_l_send(i).id_setdig__id());
		(*net_signals)["INV_L_SEND"]["i_delta_ramp"].push(pack->inv_l_send(i).i_delta_ramp());
		(*net_signals)["INV_L_SEND"]["pid_i__tim__iq"].push(pack->inv_l_send(i).pid_i__tim__iq());
		(*net_signals)["INV_L_SEND"]["pid_n__kp"].push(pack->inv_l_send(i).pid_n__kp());
		(*net_signals)["INV_L_SEND"]["pid_n__ti"].push(pack->inv_l_send(i).pid_n__ti());
		(*net_signals)["INV_L_SEND"]["pid_n__td"].push(pack->inv_l_send(i).pid_n__td());
		(*net_signals)["INV_L_SEND"]["n_setdig"].push(pack->inv_l_send(i).n_setdig());
		(*net_signals)["INV_L_SEND"]["n_lim"].push(pack->inv_l_send(i).n_lim());
		(*net_signals)["INV_L_SEND"]["n_r_acc"].push(pack->inv_l_send(i).n_r_acc());
		(*net_signals)["INV_L_SEND"]["pid_n__tim"].push(pack->inv_l_send(i).pid_n__tim());
		(*net_signals)["INV_L_SEND"]["i_red_n"].push(pack->inv_l_send(i).i_red_n());
		(*net_signals)["INV_L_SEND"]["n_lim_minus"].push(pack->inv_l_send(i).n_lim_minus());
		(*net_signals)["INV_L_SEND"]["n_lim_plus"].push(pack->inv_l_send(i).n_lim_plus());
		(*net_enums)["INV_L_SEND"]["read_id"].push(pack->inv_l_send(i).read_id());
		inverters_inv_l_send_read_id_enum_to_string((inverters_inv_l_send_read_id)pack->inv_l_send(i).read_id(), buffer);
		(*net_strings)["INV_L_SEND"]["read_id"].push(buffer);
		(*net_signals)["INV_L_SEND"]["i_lim_dig"].push(pack->inv_l_send(i).i_lim_dig());
		(*net_signals)["INV_L_SEND"]["i_red_te"].push(pack->inv_l_send(i).i_red_te());
		(*net_signals)["INV_L_SEND"]["i_max_eff"].push(pack->inv_l_send(i).i_max_eff());
		(*net_signals)["INV_L_SEND"]["i_nom_eff"].push(pack->inv_l_send(i).i_nom_eff());
		(*net_signals)["INV_L_SEND"]["motor_pole"].push(pack->inv_l_send(i).motor_pole());
		(*net_signals)["INV_L_SEND"]["ain_in_1_cutoff"].push(pack->inv_l_send(i).ain_in_1_cutoff());
		(*net_enums)["INV_L_SEND"]["km_rsvd_0"].push(pack->inv_l_send(i).km_rsvd_0());
		(*net_signals)["INV_L_SEND"]["ain_in_2_cutoff"].push(pack->inv_l_send(i).ain_in_2_cutoff());
		(*net_signals)["INV_L_SEND"]["i_red_td"].push(pack->inv_l_send(i).i_red_td());
		(*net_signals)["INV_L_SEND"]["n_nom"].push(pack->inv_l_send(i).n_nom());
		(*net_signals)["INV_L_SEND"]["pid_n__kacc"].push(pack->inv_l_send(i).pid_n__kacc());
		(*net_signals)["INV_L_SEND"]["speed_filter"].push(pack->inv_l_send(i).speed_filter());
		(*net_signals)["INV_L_SEND"]["ain_in_1_filter"].push(pack->inv_l_send(i).ain_in_1_filter());
		(*net_signals)["INV_L_SEND"]["snr"].push(pack->inv_l_send(i).snr());
		(*net_signals)["INV_L_SEND"]["device_mains"].push(pack->inv_l_send(i).device_mains());
		(*net_signals)["INV_L_SEND"]["regen_p"].push(pack->inv_l_send(i).regen_p());
		(*net_enums)["INV_L_SEND"]["devicetype"].push(pack->inv_l_send(i).devicetype());
		inverters_inv_l_send_devicetype_enum_to_string((inverters_inv_l_send_devicetype)pack->inv_l_send(i).devicetype(), buffer);
		(*net_strings)["INV_L_SEND"]["devicetype"].push(buffer);
		(*net_signals)["INV_L_SEND"]["can_id_rx"].push(pack->inv_l_send(i).can_id_rx());
		(*net_signals)["INV_L_SEND"]["can_id_tx"].push(pack->inv_l_send(i).can_id_tx());
		(*net_signals)["INV_L_SEND"]["pos_kp"].push(pack->inv_l_send(i).pos_kp());
		(*net_signals)["INV_L_SEND"]["pos_ti"].push(pack->inv_l_send(i).pos_ti());
		(*net_signals)["INV_L_SEND"]["pos_td"].push(pack->inv_l_send(i).pos_td());
		(*net_signals)["INV_L_SEND"]["pos_dest"].push(pack->inv_l_send(i).pos_dest());
		(*net_signals)["INV_L_SEND"]["pos_tim"].push(pack->inv_l_send(i).pos_tim());
		(*net_signals)["INV_L_SEND"]["pos_offsref"].push(pack->inv_l_send(i).pos_offsref());
		(*net_enums)["INV_L_SEND"]["can_nbt"].push(pack->inv_l_send(i).can_nbt());
		inverters_inv_l_send_can_nbt_enum_to_string((inverters_inv_l_send_can_nbt)pack->inv_l_send(i).can_nbt(), buffer);
		(*net_strings)["INV_L_SEND"]["can_nbt"].push(buffer);
		(*net_signals)["INV_L_SEND"]["ref_reso_edge"].push(pack->inv_l_send(i).ref_reso_edge());
		(*net_signals)["INV_L_SEND"]["speed_1"].push(pack->inv_l_send(i).speed_1());
		(*net_signals)["INV_L_SEND"]["speed_2"].push(pack->inv_l_send(i).speed_2());
		(*net_signals)["INV_L_SEND"]["pos_tol_win"].push(pack->inv_l_send(i).pos_tol_win());
		(*net_signals)["INV_L_SEND"]["pos_preset_val"].push(pack->inv_l_send(i).pos_preset_val());
		(*net_signals)["INV_L_SEND"]["can_id_2_rx"].push(pack->inv_l_send(i).can_id_2_rx());
		(*net_signals)["INV_L_SEND"]["can_id_2_tx"].push(pack->inv_l_send(i).can_id_2_tx());
		(*net_signals)["INV_L_SEND"]["v_ref"].push(pack->inv_l_send(i).v_ref());
		(*net_signals)["INV_L_SEND"]["v_kp"].push(pack->inv_l_send(i).v_kp());
		(*net_signals)["INV_L_SEND"]["v_ti"].push(pack->inv_l_send(i).v_ti());
		(*net_signals)["INV_L_SEND"]["clear_errors"].push(pack->inv_l_send(i).clear_errors());
		(*net_signals)["INV_L_SEND"]["m_setdig__iq"].push(pack->inv_l_send(i).m_setdig__iq());
		(*net_signals)["INV_L_SEND"]["i_red_tm"].push(pack->inv_l_send(i).i_red_tm());
		(*net_signals)["INV_L_SEND"]["m_temp"].push(pack->inv_l_send(i).m_temp());
		(*net_enums)["INV_L_SEND"]["mo_feedback_1"].push(pack->inv_l_send(i).mo_feedback_1());
		inverters_inv_l_send_mo_feedback_1_enum_to_string((inverters_inv_l_send_mo_feedback_1)pack->inv_l_send(i).mo_feedback_1(), buffer);
		(*net_strings)["INV_L_SEND"]["mo_feedback_1"].push(buffer);
		(*net_signals)["INV_L_SEND"]["dc_bus_min_lim"].push(pack->inv_l_send(i).dc_bus_min_lim());
		(*net_signals)["INV_L_SEND"]["fb_incr_mot"].push(pack->inv_l_send(i).fb_incr_mot());
		(*net_signals)["INV_L_SEND"]["fb_pole"].push(pack->inv_l_send(i).fb_pole());
		(*net_signals)["INV_L_SEND"]["motor_lsq"].push(pack->inv_l_send(i).motor_lsq());
		(*net_signals)["INV_L_SEND"]["id_nom"].push(pack->inv_l_send(i).id_nom());
		(*net_signals)["INV_L_SEND"]["motor_lm"].push(pack->inv_l_send(i).motor_lm());
		(*net_signals)["INV_L_SEND"]["motor_rr"].push(pack->inv_l_send(i).motor_rr());
		(*net_signals)["INV_L_SEND"]["id_min"].push(pack->inv_l_send(i).id_min());
		(*net_signals)["INV_L_SEND"]["motor_tr"].push(pack->inv_l_send(i).motor_tr());
		(*net_signals)["INV_L_SEND"]["motor_lsd"].push(pack->inv_l_send(i).motor_lsd());
		(*net_signals)["INV_L_SEND"]["motor_rs"].push(pack->inv_l_send(i).motor_rs());
		(*net_signals)["INV_L_SEND"]["motor_ts"].push(pack->inv_l_send(i).motor_ts());
		(*net_enums)["INV_L_SEND"]["def_end_1"].push(pack->inv_l_send(i).def_end_1());
		inverters_inv_l_send_def_end_1_enum_to_string((inverters_inv_l_send_def_end_1)pack->inv_l_send(i).def_end_1(), buffer);
		(*net_strings)["INV_L_SEND"]["def_end_1"].push(buffer);
		(*net_enums)["INV_L_SEND"]["def_end_2"].push(pack->inv_l_send(i).def_end_2());
		inverters_inv_l_send_def_end_2_enum_to_string((inverters_inv_l_send_def_end_2)pack->inv_l_send(i).def_end_2(), buffer);
		(*net_strings)["INV_L_SEND"]["def_end_2"].push(buffer);
		(*net_enums)["INV_L_SEND"]["def_din_1"].push(pack->inv_l_send(i).def_din_1());
		inverters_inv_l_send_def_din_1_enum_to_string((inverters_inv_l_send_def_din_1)pack->inv_l_send(i).def_din_1(), buffer);
		(*net_strings)["INV_L_SEND"]["def_din_1"].push(buffer);
		(*net_enums)["INV_L_SEND"]["def_din_2"].push(pack->inv_l_send(i).def_din_2());
		inverters_inv_l_send_def_din_2_enum_to_string((inverters_inv_l_send_def_din_2)pack->inv_l_send(i).def_din_2(), buffer);
		(*net_strings)["INV_L_SEND"]["def_din_2"].push(buffer);
		(*net_signals)["INV_L_SEND"]["i_max_pk"].push(pack->inv_l_send(i).i_max_pk());
		(*net_signals)["INV_L_SEND"]["i_con_eff"].push(pack->inv_l_send(i).i_con_eff());
		(*net_signals)["INV_L_SEND"]["i_device"].push(pack->inv_l_send(i).i_device());
		(*net_signals)["INV_L_SEND"]["n_r_lim"].push(pack->inv_l_send(i).n_r_lim());
		(*net_signals)["INV_L_SEND"]["nmax100perc"].push(pack->inv_l_send(i).nmax100perc());
		(*net_signals)["INV_L_SEND"]["pid_i__xkp__iq"].push(pack->inv_l_send(i).pid_i__xkp__iq());
		(*net_signals)["INV_L_SEND"]["bat_opr_limit__mot"].push(pack->inv_l_send(i).bat_opr_limit__mot());
		(*net_signals)["INV_L_SEND"]["pid_i__kf__iq"].push(pack->inv_l_send(i).pid_i__kf__iq());
		(*net_enums)["INV_L_SEND"]["cmc__bit0__dc_current_sens_ena"].push(pack->inv_l_send(i).cmc__bit0__dc_current_sens_ena());
		(*net_signals)["INV_L_SEND"]["can_rxtimeout"].push(pack->inv_l_send(i).can_rxtimeout());
		(*net_signals)["INV_L_SEND"]["var_1"].push(pack->inv_l_send(i).var_1());
		(*net_signals)["INV_L_SEND"]["var_2"].push(pack->inv_l_send(i).var_2());
		(*net_signals)["INV_L_SEND"]["var_3"].push(pack->inv_l_send(i).var_3());
		(*net_signals)["INV_L_SEND"]["var_4"].push(pack->inv_l_send(i).var_4());
		(*net_signals)["INV_L_SEND"]["ain_in_2_offsetval"].push(pack->inv_l_send(i).ain_in_2_offsetval());
		(*net_signals)["INV_L_SEND"]["n_r_dec"].push(pack->inv_l_send(i).n_r_dec());
		(*net_signals)["INV_L_SEND"]["v_shunt"].push(pack->inv_l_send(i).v_shunt());
		(*net_signals)["INV_L_SEND"]["t_peak"].push(pack->inv_l_send(i).t_peak());
		(*net_signals)["INV_L_SEND"]["brake_delay"].push(pack->inv_l_send(i).brake_delay());
		(*net_signals)["INV_L_SEND"]["axis"].push(pack->inv_l_send(i).axis());
		(*net_enums)["INV_L_SEND"]["km_speed_0"].push(pack->inv_l_send(i).km_speed_0());
		(*net_enums)["INV_L_SEND"]["cmc__bit1__idc_limit_ena"].push(pack->inv_l_send(i).cmc__bit1__idc_limit_ena());
		(*net_enums)["INV_L_SEND"]["km_frg_off"].push(pack->inv_l_send(i).km_frg_off());
		(*net_enums)["INV_L_SEND"]["cmc__bit2__pdc_limit_usage"].push(pack->inv_l_send(i).cmc__bit2__pdc_limit_usage());
		(*net_enums)["INV_L_SEND"]["km_cal_off"].push(pack->inv_l_send(i).km_cal_off());
		(*net_enums)["INV_L_SEND"]["cmc__bit3__torqueval_init_ena"].push(pack->inv_l_send(i).cmc__bit3__torqueval_init_ena());
		(*net_enums)["INV_L_SEND"]["km_tx_tog_stat"].push(pack->inv_l_send(i).km_tx_tog_stat());
		(*net_enums)["INV_L_SEND"]["cmc__bit4__dig_m_rcpramp_ena"].push(pack->inv_l_send(i).cmc__bit4__dig_m_rcpramp_ena());
		(*net_enums)["INV_L_SEND"]["km_i_limit"].push(pack->inv_l_send(i).km_i_limit());
		(*net_enums)["INV_L_SEND"]["mo_feedback_2"].push(pack->inv_l_send(i).mo_feedback_2());
		inverters_inv_l_send_mo_feedback_2_enum_to_string((inverters_inv_l_send_mo_feedback_2)pack->inv_l_send(i).mo_feedback_2(), buffer);
		(*net_strings)["INV_L_SEND"]["mo_feedback_2"].push(buffer);
		(*net_enums)["INV_L_SEND"]["cmc__bit5__reset_nramp_atnzero"].push(pack->inv_l_send(i).cmc__bit5__reset_nramp_atnzero());
		(*net_enums)["INV_L_SEND"]["km_n_clip"].push(pack->inv_l_send(i).km_n_clip());
		(*net_enums)["INV_L_SEND"]["cmc__bit6__torquetimeout_100ms_e"].push(pack->inv_l_send(i).cmc__bit6__torquetimeout_100ms_e());
		(*net_enums)["INV_L_SEND"]["km_mix_ana_on"].push(pack->inv_l_send(i).km_mix_ana_on());
		(*net_signals)["INV_L_SEND"]["cmc__bit13_7__free"].push(pack->inv_l_send(i).cmc__bit13_7__free());
		(*net_enums)["INV_L_SEND"]["ret_interval"].push(pack->inv_l_send(i).ret_interval());
		inverters_inv_l_send_ret_interval_enum_to_string((inverters_inv_l_send_ret_interval)pack->inv_l_send(i).ret_interval(), buffer);
		(*net_strings)["INV_L_SEND"]["ret_interval"].push(buffer);
		(*net_enums)["INV_L_SEND"]["km_allow_sync"].push(pack->inv_l_send(i).km_allow_sync());
		(*net_signals)["INV_L_SEND"]["ain_in_2_filter"].push(pack->inv_l_send(i).ain_in_2_filter());
		(*net_enums)["INV_L_SEND"]["mo_sc1_reso"].push(pack->inv_l_send(i).mo_sc1_reso());
		inverters_inv_l_send_mo_sc1_reso_enum_to_string((inverters_inv_l_send_mo_sc1_reso)pack->inv_l_send(i).mo_sc1_reso(), buffer);
		(*net_strings)["INV_L_SEND"]["mo_sc1_reso"].push(buffer);
		(*net_enums)["INV_L_SEND"]["km_handwheel"].push(pack->inv_l_send(i).km_handwheel());
		(*net_enums)["INV_L_SEND"]["km_phasing_extend"].push(pack->inv_l_send(i).km_phasing_extend());
		(*net_enums)["INV_L_SEND"]["km_rsvd_11"].push(pack->inv_l_send(i).km_rsvd_11());
		(*net_enums)["INV_L_SEND"]["mo_sc1_comp"].push(pack->inv_l_send(i).mo_sc1_comp());
		(*net_enums)["INV_L_SEND"]["km_rsvd_12"].push(pack->inv_l_send(i).km_rsvd_12());
		(*net_enums)["INV_L_SEND"]["mo_sc2_reso"].push(pack->inv_l_send(i).mo_sc2_reso());
		inverters_inv_l_send_mo_sc2_reso_enum_to_string((inverters_inv_l_send_mo_sc2_reso)pack->inv_l_send(i).mo_sc2_reso(), buffer);
		(*net_strings)["INV_L_SEND"]["mo_sc2_reso"].push(buffer);
		(*net_enums)["INV_L_SEND"]["km_rsvd_13"].push(pack->inv_l_send(i).km_rsvd_13());
		(*net_enums)["INV_L_SEND"]["km_pseudo_enable"].push(pack->inv_l_send(i).km_pseudo_enable());
		(*net_enums)["INV_L_SEND"]["cmc__bit14__idc_limit_ena_v2"].push(pack->inv_l_send(i).cmc__bit14__idc_limit_ena_v2());
		(*net_enums)["INV_L_SEND"]["km_debug_test"].push(pack->inv_l_send(i).km_debug_test());
		(*net_enums)["INV_L_SEND"]["mo_sc2_inv"].push(pack->inv_l_send(i).mo_sc2_inv());
		(*net_enums)["INV_L_SEND"]["active190"].push(pack->inv_l_send(i).active190());
		inverters_inv_l_send_active190_enum_to_string((inverters_inv_l_send_active190)pack->inv_l_send(i).active190(), buffer);
		(*net_strings)["INV_L_SEND"]["active190"].push(buffer);
		(*net_enums)["INV_L_SEND"]["active191"].push(pack->inv_l_send(i).active191());
		inverters_inv_l_send_active191_enum_to_string((inverters_inv_l_send_active191)pack->inv_l_send(i).active191(), buffer);
		(*net_strings)["INV_L_SEND"]["active191"].push(buffer);
		(*net_enums)["INV_L_SEND"]["active192"].push(pack->inv_l_send(i).active192());
		inverters_inv_l_send_active192_enum_to_string((inverters_inv_l_send_active192)pack->inv_l_send(i).active192(), buffer);
		(*net_strings)["INV_L_SEND"]["active192"].push(buffer);
		(*net_enums)["INV_L_SEND"]["active193"].push(pack->inv_l_send(i).active193());
		inverters_inv_l_send_active193_enum_to_string((inverters_inv_l_send_active193)pack->inv_l_send(i).active193(), buffer);
		(*net_strings)["INV_L_SEND"]["active193"].push(buffer);
		(*net_enums)["INV_L_SEND"]["cmc__bit15__dig_e_brake_act"].push(pack->inv_l_send(i).cmc__bit15__dig_e_brake_act());
		(*net_signals)["INV_L_SEND"]["pid_i__kp__id"].push(pack->inv_l_send(i).pid_i__kp__id());
		(*net_signals)["INV_L_SEND"]["pid_i__ti__id"].push(pack->inv_l_send(i).pid_i__ti__id());
		(*net_signals)["INV_L_SEND"]["pid_i__tim__id"].push(pack->inv_l_send(i).pid_i__tim__id());
		(*net_signals)["INV_L_SEND"]["m_r_acc"].push(pack->inv_l_send(i).m_r_acc());
		(*net_signals)["INV_L_SEND"]["regen_r"].push(pack->inv_l_send(i).regen_r());
		(*net_signals)["INV_L_SEND"]["dc_bus_max_lim"].push(pack->inv_l_send(i).dc_bus_max_lim());
		(*net_signals)["INV_L_SEND"]["m_r_rcp"].push(pack->inv_l_send(i).m_r_rcp());
		(*net_signals)["INV_L_SEND"]["pid_i__xkp__id"].push(pack->inv_l_send(i).pid_i__xkp__id());
		(*net_signals)["INV_L_SEND"]["bat_opr_limit__gen"].push(pack->inv_l_send(i).bat_opr_limit__gen());
		(*net_signals)["INV_L_SEND"]["pid_i__kf__id"].push(pack->inv_l_send(i).pid_i__kf__id());
		(*net_signals)["INV_L_SEND"]["cmc__bit17_16__checkipeak_config"].push(pack->inv_l_send(i).cmc__bit17_16__checkipeak_config());
		(*net_signals)["INV_L_SEND"]["ain_in_2_scaleval"].push(pack->inv_l_send(i).ain_in_2_scaleval());
		(*net_signals)["INV_L_SEND"]["m_r_dec"].push(pack->inv_l_send(i).m_r_dec());
		(*net_enums)["INV_L_SEND"]["cmc__bit18__tractioncontrol_ena"].push(pack->inv_l_send(i).cmc__bit18__tractioncontrol_ena());
		(*net_signals)["INV_L_SEND"]["cmc__bit20_19__tc_deltatime_conf"].push(pack->inv_l_send(i).cmc__bit20_19__tc_deltatime_conf());
		(*net_signals)["INV_L_SEND"]["cmc__bit22_21__tc_minspeed_conf"].push(pack->inv_l_send(i).cmc__bit22_21__tc_minspeed_conf());
		(*net_enums)["INV_L_SEND"]["cmc__bit23__tc_ncmdrestoption"].push(pack->inv_l_send(i).cmc__bit23__tc_ncmdrestoption());
		(*net_signals)["INV_L_SEND"]["cmc__bit31_24__free"].push(pack->inv_l_send(i).cmc__bit31_24__free());

    }

    for(int i = 0; i < pack->inv_l_rcv_size(); i++){
#ifdef CANLIB_TIMESTAMP
        static uint64_t last_timestamp = 0;
        if(pack->inv_l_rcv(i)._inner_timestamp() - last_timestamp < resample_us) continue;
        else last_timestamp = pack->inv_l_rcv(i)._inner_timestamp();
        (*net_signals)["INV_L_RCV"]["_timestamp"].push(pack->inv_l_rcv(i)._inner_timestamp());
#endif // CANLIB_TIMESTAMP

		(*net_enums)["INV_L_RCV"]["rcv_mux"].push(pack->inv_l_rcv(i).rcv_mux());
		inverters_inv_l_rcv_rcv_mux_enum_to_string((inverters_inv_l_rcv_rcv_mux)pack->inv_l_rcv(i).rcv_mux(), buffer);
		(*net_strings)["INV_L_RCV"]["rcv_mux"].push(buffer);
		(*net_signals)["INV_L_RCV"]["n_actual"].push(pack->inv_l_rcv(i).n_actual());
		(*net_signals)["INV_L_RCV"]["n_r_dec"].push(pack->inv_l_rcv(i).n_r_dec());
		(*net_signals)["INV_L_RCV"]["n_r_lim"].push(pack->inv_l_rcv(i).n_r_lim());
		(*net_signals)["INV_L_RCV"]["n_actual_filt"].push(pack->inv_l_rcv(i).n_actual_filt());
		(*net_signals)["INV_L_RCV"]["firmware"].push(pack->inv_l_rcv(i).firmware());
		(*net_enums)["INV_L_RCV"]["devicetype"].push(pack->inv_l_rcv(i).devicetype());
		inverters_inv_l_rcv_devicetype_enum_to_string((inverters_inv_l_rcv_devicetype)pack->inv_l_rcv(i).devicetype(), buffer);
		(*net_strings)["INV_L_RCV"]["devicetype"].push(buffer);
		(*net_signals)["INV_L_RCV"]["snr"].push(pack->inv_l_rcv(i).snr());
		(*net_signals)["INV_L_RCV"]["axis"].push(pack->inv_l_rcv(i).axis());
		(*net_signals)["INV_L_RCV"]["i_device"].push(pack->inv_l_rcv(i).i_device());
		(*net_signals)["INV_L_RCV"]["v_shunt"].push(pack->inv_l_rcv(i).v_shunt());
		(*net_signals)["INV_L_RCV"]["i_200perc"].push(pack->inv_l_rcv(i).i_200perc());
		(*net_signals)["INV_L_RCV"]["status_bitmap"].push(pack->inv_l_rcv(i).status_bitmap());
		(*net_enums)["INV_L_RCV"]["err_badparas"].push(pack->inv_l_rcv(i).err_badparas());
		(*net_enums)["INV_L_RCV"]["lmt_active_1"].push(pack->inv_l_rcv(i).lmt_active_1());
		(*net_signals)["INV_L_RCV"]["ain_in_1_raw"].push(pack->inv_l_rcv(i).ain_in_1_raw());
		(*net_signals)["INV_L_RCV"]["ain_in_2_raw"].push(pack->inv_l_rcv(i).ain_in_2_raw());
		(*net_signals)["INV_L_RCV"]["nmax100perc"].push(pack->inv_l_rcv(i).nmax100perc());
		(*net_signals)["INV_L_RCV"]["n_setdig"].push(pack->inv_l_rcv(i).n_setdig());
		(*net_signals)["INV_L_RCV"]["n_cmd"].push(pack->inv_l_rcv(i).n_cmd());
		(*net_signals)["INV_L_RCV"]["n_cmd_ramp"].push(pack->inv_l_rcv(i).n_cmd_ramp());
		(*net_signals)["INV_L_RCV"]["n_lim"].push(pack->inv_l_rcv(i).n_lim());
		(*net_signals)["INV_L_RCV"]["n_error"].push(pack->inv_l_rcv(i).n_error());
		(*net_signals)["INV_L_RCV"]["m_setdig__iq"].push(pack->inv_l_rcv(i).m_setdig__iq());
		(*net_signals)["INV_L_RCV"]["id_setdig__id"].push(pack->inv_l_rcv(i).id_setdig__id());
		(*net_signals)["INV_L_RCV"]["i_max_pk"].push(pack->inv_l_rcv(i).i_max_pk());
		(*net_signals)["INV_L_RCV"]["i_con_eff"].push(pack->inv_l_rcv(i).i_con_eff());
		(*net_signals)["INV_L_RCV"]["i_max_eff"].push(pack->inv_l_rcv(i).i_max_eff());
		(*net_signals)["INV_L_RCV"]["i_nom_eff"].push(pack->inv_l_rcv(i).i_nom_eff());
		(*net_signals)["INV_L_RCV"]["i_limit_inuse"].push(pack->inv_l_rcv(i).i_limit_inuse());
		(*net_signals)["INV_L_RCV"]["i_cmd"].push(pack->inv_l_rcv(i).i_cmd());
		(*net_signals)["INV_L_RCV"]["i_cmd_ramp"].push(pack->inv_l_rcv(i).i_cmd_ramp());
		(*net_signals)["INV_L_RCV"]["i_actual"].push(pack->inv_l_rcv(i).i_actual());
		(*net_signals)["INV_L_RCV"]["i_actual_filt"].push(pack->inv_l_rcv(i).i_actual_filt());
		(*net_signals)["INV_L_RCV"]["iq_actual"].push(pack->inv_l_rcv(i).iq_actual());
		(*net_signals)["INV_L_RCV"]["id_actual"].push(pack->inv_l_rcv(i).id_actual());
		(*net_signals)["INV_L_RCV"]["iq_error"].push(pack->inv_l_rcv(i).iq_error());
		(*net_signals)["INV_L_RCV"]["id_error"].push(pack->inv_l_rcv(i).id_error());
		(*net_signals)["INV_L_RCV"]["i1_actual"].push(pack->inv_l_rcv(i).i1_actual());
		(*net_signals)["INV_L_RCV"]["i2_actual"].push(pack->inv_l_rcv(i).i2_actual());
		(*net_signals)["INV_L_RCV"]["i3_actual"].push(pack->inv_l_rcv(i).i3_actual());
		(*net_signals)["INV_L_RCV"]["i3_adc"].push(pack->inv_l_rcv(i).i3_adc());
		(*net_signals)["INV_L_RCV"]["i2_adc"].push(pack->inv_l_rcv(i).i2_adc());
		(*net_signals)["INV_L_RCV"]["vq"].push(pack->inv_l_rcv(i).vq());
		(*net_signals)["INV_L_RCV"]["vd"].push(pack->inv_l_rcv(i).vd());
		(*net_signals)["INV_L_RCV"]["vout"].push(pack->inv_l_rcv(i).vout());
		(*net_signals)["INV_L_RCV"]["t_motor"].push(pack->inv_l_rcv(i).t_motor());
		(*net_signals)["INV_L_RCV"]["t_igbt"].push(pack->inv_l_rcv(i).t_igbt());
		(*net_signals)["INV_L_RCV"]["t_air"].push(pack->inv_l_rcv(i).t_air());
		(*net_signals)["INV_L_RCV"]["vdc_bus_filt"].push(pack->inv_l_rcv(i).vdc_bus_filt());
		(*net_enums)["INV_L_RCV"]["end_1"].push(pack->inv_l_rcv(i).end_1());
		(*net_enums)["INV_L_RCV"]["din_1"].push(pack->inv_l_rcv(i).din_1());
		(*net_enums)["INV_L_RCV"]["end_2"].push(pack->inv_l_rcv(i).end_2());
		(*net_enums)["INV_L_RCV"]["din_2"].push(pack->inv_l_rcv(i).din_2());
		(*net_enums)["INV_L_RCV"]["run232"].push(pack->inv_l_rcv(i).run232());
		(*net_enums)["INV_L_RCV"]["dout_1"].push(pack->inv_l_rcv(i).dout_1());
		(*net_enums)["INV_L_RCV"]["dout_2"].push(pack->inv_l_rcv(i).dout_2());
		(*net_enums)["INV_L_RCV"]["dout_3"].push(pack->inv_l_rcv(i).dout_3());
		(*net_enums)["INV_L_RCV"]["rdy_btb"].push(pack->inv_l_rcv(i).rdy_btb());
		(*net_enums)["INV_L_RCV"]["i_fault"].push(pack->inv_l_rcv(i).i_fault());
		(*net_enums)["INV_L_RCV"]["dout_4"].push(pack->inv_l_rcv(i).dout_4());
		(*net_signals)["INV_L_RCV"]["i_lim_dig"].push(pack->inv_l_rcv(i).i_lim_dig());
		(*net_signals)["INV_L_RCV"]["i_red_n"].push(pack->inv_l_rcv(i).i_red_n());
		(*net_signals)["INV_L_RCV"]["i_red_td"].push(pack->inv_l_rcv(i).i_red_td());
		(*net_signals)["INV_L_RCV"]["i_red_te"].push(pack->inv_l_rcv(i).i_red_te());
		(*net_signals)["INV_L_RCV"]["i_red_tm"].push(pack->inv_l_rcv(i).i_red_tm());
		(*net_signals)["INV_L_RCV"]["cs_ain_1_format"].push(pack->inv_l_rcv(i).cs_ain_1_format());
		(*net_signals)["INV_L_RCV"]["id_ref"].push(pack->inv_l_rcv(i).id_ref());
		(*net_signals)["INV_L_RCV"]["m_outdig__iq"].push(pack->inv_l_rcv(i).m_outdig__iq());
		(*net_signals)["INV_L_RCV"]["ptr_1_debug"].push(pack->inv_l_rcv(i).ptr_1_debug());
		(*net_signals)["INV_L_RCV"]["ptr_2_debug"].push(pack->inv_l_rcv(i).ptr_2_debug());
		(*net_signals)["INV_L_RCV"]["temp_debug"].push(pack->inv_l_rcv(i).temp_debug());
		(*net_signals)["INV_L_RCV"]["motor_f_n"].push(pack->inv_l_rcv(i).motor_f_n());
		(*net_signals)["INV_L_RCV"]["motor_v_n"].push(pack->inv_l_rcv(i).motor_v_n());
		(*net_signals)["INV_L_RCV"]["t_dc__start"].push(pack->inv_l_rcv(i).t_dc__start());
		(*net_signals)["INV_L_RCV"]["v_dc__start"].push(pack->inv_l_rcv(i).v_dc__start());
		(*net_signals)["INV_L_RCV"]["v_min__start"].push(pack->inv_l_rcv(i).v_min__start());
		(*net_signals)["INV_L_RCV"]["f_min__start"].push(pack->inv_l_rcv(i).f_min__start());
		(*net_signals)["INV_L_RCV"]["v_corner__start"].push(pack->inv_l_rcv(i).v_corner__start());
		(*net_signals)["INV_L_RCV"]["f_corner__start"].push(pack->inv_l_rcv(i).f_corner__start());
		(*net_signals)["INV_L_RCV"]["cos_phi"].push(pack->inv_l_rcv(i).cos_phi());
		(*net_signals)["INV_L_RCV"]["pwm_enum"].push(pack->inv_l_rcv(i).pwm_enum());
		(*net_signals)["INV_L_RCV"]["calib_ref_value"].push(pack->inv_l_rcv(i).calib_ref_value());
		(*net_signals)["INV_L_RCV"]["pid_i__kp__iq"].push(pack->inv_l_rcv(i).pid_i__kp__iq());
		(*net_signals)["INV_L_RCV"]["pid_i__ti__iq"].push(pack->inv_l_rcv(i).pid_i__ti__iq());
		(*net_signals)["INV_L_RCV"]["cutoffdig"].push(pack->inv_l_rcv(i).cutoffdig());
		(*net_signals)["INV_L_RCV"]["i3_offset"].push(pack->inv_l_rcv(i).i3_offset());
		(*net_signals)["INV_L_RCV"]["i_delta_ramp"].push(pack->inv_l_rcv(i).i_delta_ramp());
		(*net_signals)["INV_L_RCV"]["pid_i__tim__iq"].push(pack->inv_l_rcv(i).pid_i__tim__iq());
		(*net_signals)["INV_L_RCV"]["pid_n__kp"].push(pack->inv_l_rcv(i).pid_n__kp());
		(*net_signals)["INV_L_RCV"]["v_ti"].push(pack->inv_l_rcv(i).v_ti());
		(*net_signals)["INV_L_RCV"]["pid_n__td"].push(pack->inv_l_rcv(i).pid_n__td());
		(*net_signals)["INV_L_RCV"]["ain_in_1_offsetval"].push(pack->inv_l_rcv(i).ain_in_1_offsetval());
		(*net_signals)["INV_L_RCV"]["ain_in_2_offsetval"].push(pack->inv_l_rcv(i).ain_in_2_offsetval());
		(*net_signals)["INV_L_RCV"]["dzr_seq"].push(pack->inv_l_rcv(i).dzr_seq());
		(*net_signals)["INV_L_RCV"]["pid_n__tim"].push(pack->inv_l_rcv(i).pid_n__tim());
		(*net_signals)["INV_L_RCV"]["n_lim_plus"].push(pack->inv_l_rcv(i).n_lim_plus());
		(*net_signals)["INV_L_RCV"]["n_lim_minus"].push(pack->inv_l_rcv(i).n_lim_minus());
		(*net_signals)["INV_L_RCV"]["incr_delta"].push(pack->inv_l_rcv(i).incr_delta());
		(*net_signals)["INV_L_RCV"]["motorpos_mech"].push(pack->inv_l_rcv(i).motorpos_mech());
		(*net_signals)["INV_L_RCV"]["motorpos_elec"].push(pack->inv_l_rcv(i).motorpos_elec());
		(*net_signals)["INV_L_RCV"]["fb_offset"].push(pack->inv_l_rcv(i).fb_offset());
		(*net_signals)["INV_L_RCV"]["it_rg_monitor"].push(pack->inv_l_rcv(i).it_rg_monitor());
		(*net_signals)["INV_L_RCV"]["motor_pole"].push(pack->inv_l_rcv(i).motor_pole());
		(*net_signals)["INV_L_RCV"]["ain_in_1_cutoff"].push(pack->inv_l_rcv(i).ain_in_1_cutoff());
		(*net_enums)["INV_L_RCV"]["km_rsvd_0"].push(pack->inv_l_rcv(i).km_rsvd_0());
		(*net_enums)["INV_L_RCV"]["ena82"].push(pack->inv_l_rcv(i).ena82());
		(*net_signals)["INV_L_RCV"]["ain_in_2_cutoff"].push(pack->inv_l_rcv(i).ain_in_2_cutoff());
		(*net_signals)["INV_L_RCV"]["i_limit_inuse_ramp"].push(pack->inv_l_rcv(i).i_limit_inuse_ramp());
		(*net_signals)["INV_L_RCV"]["n_nom"].push(pack->inv_l_rcv(i).n_nom());
		(*net_signals)["INV_L_RCV"]["pid_n__kacc"].push(pack->inv_l_rcv(i).pid_n__kacc());
		(*net_signals)["INV_L_RCV"]["rotor_signals"].push(pack->inv_l_rcv(i).rotor_signals());
		(*net_signals)["INV_L_RCV"]["speed_filter"].push(pack->inv_l_rcv(i).speed_filter());
		(*net_signals)["INV_L_RCV"]["ain_in_1_filter"].push(pack->inv_l_rcv(i).ain_in_1_filter());
		(*net_signals)["INV_L_RCV"]["ixt_monitor"].push(pack->inv_l_rcv(i).ixt_monitor());
		(*net_enums)["INV_L_RCV"]["ecode_bit0_firsterrordtcd99"].push(pack->inv_l_rcv(i).ecode_bit0_firsterrordtcd99());
		(*net_signals)["INV_L_RCV"]["device_mains"].push(pack->inv_l_rcv(i).device_mains());
		(*net_signals)["INV_L_RCV"]["regen_p"].push(pack->inv_l_rcv(i).regen_p());
		(*net_signals)["INV_L_RCV"]["can_id_rx"].push(pack->inv_l_rcv(i).can_id_rx());
		(*net_signals)["INV_L_RCV"]["can_id_tx"].push(pack->inv_l_rcv(i).can_id_tx());
		(*net_signals)["INV_L_RCV"]["pos_kp"].push(pack->inv_l_rcv(i).pos_kp());
		(*net_signals)["INV_L_RCV"]["pos_ti"].push(pack->inv_l_rcv(i).pos_ti());
		(*net_signals)["INV_L_RCV"]["pos_td"].push(pack->inv_l_rcv(i).pos_td());
		(*net_signals)["INV_L_RCV"]["pos_actual"].push(pack->inv_l_rcv(i).pos_actual());
		(*net_signals)["INV_L_RCV"]["pos_dest"].push(pack->inv_l_rcv(i).pos_dest());
		(*net_signals)["INV_L_RCV"]["pos_actual_2"].push(pack->inv_l_rcv(i).pos_actual_2());
		(*net_signals)["INV_L_RCV"]["pos_error"].push(pack->inv_l_rcv(i).pos_error());
		(*net_signals)["INV_L_RCV"]["pos_tim"].push(pack->inv_l_rcv(i).pos_tim());
		(*net_signals)["INV_L_RCV"]["pos_offsref"].push(pack->inv_l_rcv(i).pos_offsref());
		(*net_enums)["INV_L_RCV"]["can_nbt"].push(pack->inv_l_rcv(i).can_nbt());
		inverters_inv_l_rcv_can_nbt_enum_to_string((inverters_inv_l_rcv_can_nbt)pack->inv_l_rcv(i).can_nbt(), buffer);
		(*net_strings)["INV_L_RCV"]["can_nbt"].push(buffer);
		(*net_signals)["INV_L_RCV"]["pos_zero_capture"].push(pack->inv_l_rcv(i).pos_zero_capture());
		(*net_signals)["INV_L_RCV"]["ref_reso_edge"].push(pack->inv_l_rcv(i).ref_reso_edge());
		(*net_signals)["INV_L_RCV"]["speed_1"].push(pack->inv_l_rcv(i).speed_1());
		(*net_signals)["INV_L_RCV"]["speed_2"].push(pack->inv_l_rcv(i).speed_2());
		(*net_signals)["INV_L_RCV"]["pos_tol_win"].push(pack->inv_l_rcv(i).pos_tol_win());
		(*net_signals)["INV_L_RCV"]["pos_preset_val"].push(pack->inv_l_rcv(i).pos_preset_val());
		(*net_signals)["INV_L_RCV"]["pos_zero_offset"].push(pack->inv_l_rcv(i).pos_zero_offset());
		(*net_signals)["INV_L_RCV"]["pos_nd_scale"].push(pack->inv_l_rcv(i).pos_nd_scale());
		(*net_signals)["INV_L_RCV"]["pos_nd_offset"].push(pack->inv_l_rcv(i).pos_nd_offset());
		(*net_signals)["INV_L_RCV"]["fb2_scale_ext"].push(pack->inv_l_rcv(i).fb2_scale_ext());
		(*net_signals)["INV_L_RCV"]["pos_offset_slack"].push(pack->inv_l_rcv(i).pos_offset_slack());
		(*net_signals)["INV_L_RCV"]["pos_diff_slack"].push(pack->inv_l_rcv(i).pos_diff_slack());
		(*net_signals)["INV_L_RCV"]["fun_para_read"].push(pack->inv_l_rcv(i).fun_para_read());
		(*net_signals)["INV_L_RCV"]["fun_para_write"].push(pack->inv_l_rcv(i).fun_para_write());
		(*net_signals)["INV_L_RCV"]["fun_special"].push(pack->inv_l_rcv(i).fun_special());
		(*net_signals)["INV_L_RCV"]["can_id_2_rx"].push(pack->inv_l_rcv(i).can_id_2_rx());
		(*net_signals)["INV_L_RCV"]["can_id_2_tx"].push(pack->inv_l_rcv(i).can_id_2_tx());
		(*net_signals)["INV_L_RCV"]["v_ref"].push(pack->inv_l_rcv(i).v_ref());
		(*net_signals)["INV_L_RCV"]["v_kp"].push(pack->inv_l_rcv(i).v_kp());
		(*net_signals)["INV_L_RCV"]["pid_n__ti"].push(pack->inv_l_rcv(i).pid_n__ti());
		(*net_signals)["INV_L_RCV"]["clear_errors"].push(pack->inv_l_rcv(i).clear_errors());
		(*net_signals)["INV_L_RCV"]["pos_cmd"].push(pack->inv_l_rcv(i).pos_cmd());
		(*net_signals)["INV_L_RCV"]["can_error_busoff"].push(pack->inv_l_rcv(i).can_error_busoff());
		(*net_signals)["INV_L_RCV"]["can_error_writetime"].push(pack->inv_l_rcv(i).can_error_writetime());
		(*net_enums)["INV_L_RCV"]["ecode_bit0_firsterrordtcd148"].push(pack->inv_l_rcv(i).ecode_bit0_firsterrordtcd148());
		(*net_signals)["INV_L_RCV"]["can_error_no_ack"].push(pack->inv_l_rcv(i).can_error_no_ack());
		(*net_signals)["INV_L_RCV"]["can_error_crc_check150"].push(pack->inv_l_rcv(i).can_error_crc_check150());
		(*net_signals)["INV_L_RCV"]["can_error_crc_check151"].push(pack->inv_l_rcv(i).can_error_crc_check151());
		(*net_signals)["INV_L_RCV"]["info_timer_diff"].push(pack->inv_l_rcv(i).info_timer_diff());
		(*net_signals)["INV_L_RCV"]["ballastcount"].push(pack->inv_l_rcv(i).ballastcount());
		(*net_signals)["INV_L_RCV"]["m_temp"].push(pack->inv_l_rcv(i).m_temp());
		(*net_enums)["INV_L_RCV"]["mo_feedback_1"].push(pack->inv_l_rcv(i).mo_feedback_1());
		inverters_inv_l_rcv_mo_feedback_1_enum_to_string((inverters_inv_l_rcv_mo_feedback_1)pack->inv_l_rcv(i).mo_feedback_1(), buffer);
		(*net_strings)["INV_L_RCV"]["mo_feedback_1"].push(buffer);
		(*net_signals)["INV_L_RCV"]["dc_bus_min_lim"].push(pack->inv_l_rcv(i).dc_bus_min_lim());
		(*net_signals)["INV_L_RCV"]["fb_incr_mot"].push(pack->inv_l_rcv(i).fb_incr_mot());
		(*net_signals)["INV_L_RCV"]["fb_pole"].push(pack->inv_l_rcv(i).fb_pole());
		(*net_signals)["INV_L_RCV"]["logic_freq"].push(pack->inv_l_rcv(i).logic_freq());
		(*net_signals)["INV_L_RCV"]["pwm_1"].push(pack->inv_l_rcv(i).pwm_1());
		(*net_signals)["INV_L_RCV"]["pwm_2"].push(pack->inv_l_rcv(i).pwm_2());
		(*net_signals)["INV_L_RCV"]["pwm_3"].push(pack->inv_l_rcv(i).pwm_3());
		(*net_signals)["INV_L_RCV"]["timer_delta"].push(pack->inv_l_rcv(i).timer_delta());
		(*net_signals)["INV_L_RCV"]["motor_lsq"].push(pack->inv_l_rcv(i).motor_lsq());
		(*net_signals)["INV_L_RCV"]["motor_lsd"].push(pack->inv_l_rcv(i).motor_lsd());
		(*net_signals)["INV_L_RCV"]["id_nom"].push(pack->inv_l_rcv(i).id_nom());
		(*net_signals)["INV_L_RCV"]["motor_lm"].push(pack->inv_l_rcv(i).motor_lm());
		(*net_signals)["INV_L_RCV"]["motor_rr"].push(pack->inv_l_rcv(i).motor_rr());
		(*net_signals)["INV_L_RCV"]["id_min"].push(pack->inv_l_rcv(i).id_min());
		(*net_signals)["INV_L_RCV"]["motor_tr"].push(pack->inv_l_rcv(i).motor_tr());
		(*net_signals)["INV_L_RCV"]["motor_rs"].push(pack->inv_l_rcv(i).motor_rs());
		(*net_signals)["INV_L_RCV"]["motor_ts"].push(pack->inv_l_rcv(i).motor_ts());
		(*net_enums)["INV_L_RCV"]["def_end_1"].push(pack->inv_l_rcv(i).def_end_1());
		inverters_inv_l_rcv_def_end_1_enum_to_string((inverters_inv_l_rcv_def_end_1)pack->inv_l_rcv(i).def_end_1(), buffer);
		(*net_strings)["INV_L_RCV"]["def_end_1"].push(buffer);
		(*net_enums)["INV_L_RCV"]["def_end_2"].push(pack->inv_l_rcv(i).def_end_2());
		inverters_inv_l_rcv_def_end_2_enum_to_string((inverters_inv_l_rcv_def_end_2)pack->inv_l_rcv(i).def_end_2(), buffer);
		(*net_strings)["INV_L_RCV"]["def_end_2"].push(buffer);
		(*net_enums)["INV_L_RCV"]["def_din_1"].push(pack->inv_l_rcv(i).def_din_1());
		inverters_inv_l_rcv_def_din_1_enum_to_string((inverters_inv_l_rcv_def_din_1)pack->inv_l_rcv(i).def_din_1(), buffer);
		(*net_strings)["INV_L_RCV"]["def_din_1"].push(buffer);
		(*net_enums)["INV_L_RCV"]["def_din_2"].push(pack->inv_l_rcv(i).def_din_2());
		inverters_inv_l_rcv_def_din_2_enum_to_string((inverters_inv_l_rcv_def_din_2)pack->inv_l_rcv(i).def_din_2(), buffer);
		(*net_strings)["INV_L_RCV"]["def_din_2"].push(buffer);
		(*net_signals)["INV_L_RCV"]["operand194"].push(pack->inv_l_rcv(i).operand194());
		(*net_signals)["INV_L_RCV"]["i_max_inuse"].push(pack->inv_l_rcv(i).i_max_inuse());
		(*net_enums)["INV_L_RCV"]["signal_go"].push(pack->inv_l_rcv(i).signal_go());
		(*net_enums)["INV_L_RCV"]["signal_brake"].push(pack->inv_l_rcv(i).signal_brake());
		(*net_enums)["INV_L_RCV"]["signal_icns"].push(pack->inv_l_rcv(i).signal_icns());
		(*net_enums)["INV_L_RCV"]["signal_lessn0"].push(pack->inv_l_rcv(i).signal_lessn0());
		(*net_enums)["INV_L_RCV"]["signal_postolerance"].push(pack->inv_l_rcv(i).signal_postolerance());
		(*net_signals)["INV_L_RCV"]["ain_in_1_scaled251"].push(pack->inv_l_rcv(i).ain_in_1_scaled251());
		(*net_signals)["INV_L_RCV"]["ain_in_2_scaled252"].push(pack->inv_l_rcv(i).ain_in_2_scaled252());
		(*net_signals)["INV_L_RCV"]["operand195"].push(pack->inv_l_rcv(i).operand195());
		(*net_signals)["INV_L_RCV"]["operand218"].push(pack->inv_l_rcv(i).operand218());
		(*net_signals)["INV_L_RCV"]["operand219"].push(pack->inv_l_rcv(i).operand219());
		(*net_signals)["INV_L_RCV"]["pid_i__xkp__iq"].push(pack->inv_l_rcv(i).pid_i__xkp__iq());
		(*net_signals)["INV_L_RCV"]["bat_opr_limit__mot"].push(pack->inv_l_rcv(i).bat_opr_limit__mot());
		(*net_signals)["INV_L_RCV"]["pid_i__kf__iq"].push(pack->inv_l_rcv(i).pid_i__kf__iq());
		(*net_enums)["INV_L_RCV"]["dc_current_sens_ena_set"].push(pack->inv_l_rcv(i).dc_current_sens_ena_set());
		(*net_enums)["INV_L_RCV"]["cmc__bit0__dc_current_sens_ena"].push(pack->inv_l_rcv(i).cmc__bit0__dc_current_sens_ena());
		(*net_signals)["INV_L_RCV"]["n_rpm_maxint"].push(pack->inv_l_rcv(i).n_rpm_maxint());
		(*net_signals)["INV_L_RCV"]["var_1"].push(pack->inv_l_rcv(i).var_1());
		(*net_signals)["INV_L_RCV"]["can_rxtimeout"].push(pack->inv_l_rcv(i).can_rxtimeout());
		(*net_signals)["INV_L_RCV"]["var_2"].push(pack->inv_l_rcv(i).var_2());
		(*net_signals)["INV_L_RCV"]["var_3"].push(pack->inv_l_rcv(i).var_3());
		(*net_signals)["INV_L_RCV"]["var_4"].push(pack->inv_l_rcv(i).var_4());
		(*net_signals)["INV_L_RCV"]["dup__bit7_0__dac_source_channel"].push(pack->inv_l_rcv(i).dup__bit7_0__dac_source_channel());
		(*net_enums)["INV_L_RCV"]["fb_lossofsignal"].push(pack->inv_l_rcv(i).fb_lossofsignal());
		(*net_enums)["INV_L_RCV"]["no_hw_fault"].push(pack->inv_l_rcv(i).no_hw_fault());
		(*net_signals)["INV_L_RCV"]["t_peak"].push(pack->inv_l_rcv(i).t_peak());
		(*net_signals)["INV_L_RCV"]["brake_delay"].push(pack->inv_l_rcv(i).brake_delay());
		(*net_signals)["INV_L_RCV"]["power"].push(pack->inv_l_rcv(i).power());
		(*net_signals)["INV_L_RCV"]["work"].push(pack->inv_l_rcv(i).work());
		(*net_signals)["INV_L_RCV"]["extra__start"].push(pack->inv_l_rcv(i).extra__start());
		(*net_signals)["INV_L_RCV"]["capture_channel"].push(pack->inv_l_rcv(i).capture_channel());
		(*net_signals)["INV_L_RCV"]["trig_level"].push(pack->inv_l_rcv(i).trig_level());
		(*net_signals)["INV_L_RCV"]["trig_edge"].push(pack->inv_l_rcv(i).trig_edge());
		(*net_signals)["INV_L_RCV"]["trig_source"].push(pack->inv_l_rcv(i).trig_source());
		(*net_signals)["INV_L_RCV"]["oszi_source"].push(pack->inv_l_rcv(i).oszi_source());
		(*net_signals)["INV_L_RCV"]["oszi_skip"].push(pack->inv_l_rcv(i).oszi_skip());
		(*net_signals)["INV_L_RCV"]["oszi_run_cmd"].push(pack->inv_l_rcv(i).oszi_run_cmd());
		(*net_signals)["INV_L_RCV"]["oszi_read_cmd"].push(pack->inv_l_rcv(i).oszi_read_cmd());
		(*net_signals)["INV_L_RCV"]["pos_ref_start"].push(pack->inv_l_rcv(i).pos_ref_start());
		(*net_signals)["INV_L_RCV"]["vdc_bus"].push(pack->inv_l_rcv(i).vdc_bus());
		(*net_signals)["INV_L_RCV"]["m_cmd_ramp"].push(pack->inv_l_rcv(i).m_cmd_ramp());
		(*net_enums)["INV_L_RCV"]["lmt_1"].push(pack->inv_l_rcv(i).lmt_1());
		(*net_enums)["INV_L_RCV"]["out_1"].push(pack->inv_l_rcv(i).out_1());
		(*net_signals)["INV_L_RCV"]["subversion_nr"].push(pack->inv_l_rcv(i).subversion_nr());
		(*net_enums)["INV_L_RCV"]["err_powerfault"].push(pack->inv_l_rcv(i).err_powerfault());
		(*net_enums)["INV_L_RCV"]["lmt_active_2"].push(pack->inv_l_rcv(i).lmt_active_2());
		(*net_enums)["INV_L_RCV"]["km_speed_0"].push(pack->inv_l_rcv(i).km_speed_0());
		(*net_enums)["INV_L_RCV"]["ncr082"].push(pack->inv_l_rcv(i).ncr082());
		(*net_enums)["INV_L_RCV"]["ecode_bit1__hw1_state99"].push(pack->inv_l_rcv(i).ecode_bit1__hw1_state99());
		(*net_enums)["INV_L_RCV"]["ecode_bit1__hw1_state148"].push(pack->inv_l_rcv(i).ecode_bit1__hw1_state148());
		(*net_enums)["INV_L_RCV"]["dc_i_sensena_set"].push(pack->inv_l_rcv(i).dc_i_sensena_set());
		(*net_enums)["INV_L_RCV"]["cmc__bit1__idc_limit_ena"].push(pack->inv_l_rcv(i).cmc__bit1__idc_limit_ena());
		(*net_enums)["INV_L_RCV"]["lmt_2"].push(pack->inv_l_rcv(i).lmt_2());
		(*net_enums)["INV_L_RCV"]["out_2"].push(pack->inv_l_rcv(i).out_2());
		(*net_enums)["INV_L_RCV"]["err_rfe_fault"].push(pack->inv_l_rcv(i).err_rfe_fault());
		(*net_enums)["INV_L_RCV"]["in_active_2"].push(pack->inv_l_rcv(i).in_active_2());
		(*net_signals)["INV_L_RCV"]["cs_ain_2_format"].push(pack->inv_l_rcv(i).cs_ain_2_format());
		(*net_enums)["INV_L_RCV"]["km_frg_off"].push(pack->inv_l_rcv(i).km_frg_off());
		(*net_enums)["INV_L_RCV"]["lim_plus82"].push(pack->inv_l_rcv(i).lim_plus82());
		(*net_enums)["INV_L_RCV"]["ecode_bit2__hw0_state99"].push(pack->inv_l_rcv(i).ecode_bit2__hw0_state99());
		(*net_enums)["INV_L_RCV"]["ecode_bit2__hw0_state148"].push(pack->inv_l_rcv(i).ecode_bit2__hw0_state148());
		(*net_signals)["INV_L_RCV"]["op_mode_quadrant"].push(pack->inv_l_rcv(i).op_mode_quadrant());
		(*net_enums)["INV_L_RCV"]["cmc__bit2__pdc_limit_usage"].push(pack->inv_l_rcv(i).cmc__bit2__pdc_limit_usage());
		(*net_enums)["INV_L_RCV"]["in_2"].push(pack->inv_l_rcv(i).in_2());
		(*net_enums)["INV_L_RCV"]["rdy155"].push(pack->inv_l_rcv(i).rdy155());
		(*net_enums)["INV_L_RCV"]["err_bustimeout"].push(pack->inv_l_rcv(i).err_bustimeout());
		(*net_enums)["INV_L_RCV"]["in_active_1"].push(pack->inv_l_rcv(i).in_active_1());
		(*net_enums)["INV_L_RCV"]["km_cal_off"].push(pack->inv_l_rcv(i).km_cal_off());
		(*net_enums)["INV_L_RCV"]["lim_minus82"].push(pack->inv_l_rcv(i).lim_minus82());
		(*net_enums)["INV_L_RCV"]["ecode_bit3__free99"].push(pack->inv_l_rcv(i).ecode_bit3__free99());
		(*net_enums)["INV_L_RCV"]["ecode_bit3__free148"].push(pack->inv_l_rcv(i).ecode_bit3__free148());
		(*net_enums)["INV_L_RCV"]["cmc__bit3__torqueval_init_ena"].push(pack->inv_l_rcv(i).cmc__bit3__torqueval_init_ena());
		(*net_enums)["INV_L_RCV"]["in_1"].push(pack->inv_l_rcv(i).in_1());
		(*net_enums)["INV_L_RCV"]["go155"].push(pack->inv_l_rcv(i).go155());
		(*net_enums)["INV_L_RCV"]["err_feedbacksignal"].push(pack->inv_l_rcv(i).err_feedbacksignal());
		(*net_enums)["INV_L_RCV"]["frgrun"].push(pack->inv_l_rcv(i).frgrun());
		(*net_enums)["INV_L_RCV"]["cs_ain_1_mode"].push(pack->inv_l_rcv(i).cs_ain_1_mode());
		inverters_inv_l_rcv_cs_ain_1_mode_enum_to_string((inverters_inv_l_rcv_cs_ain_1_mode)pack->inv_l_rcv(i).cs_ain_1_mode(), buffer);
		(*net_strings)["INV_L_RCV"]["cs_ain_1_mode"].push(buffer);
		(*net_enums)["INV_L_RCV"]["km_tx_tog_stat"].push(pack->inv_l_rcv(i).km_tx_tog_stat());
		(*net_enums)["INV_L_RCV"]["ok82"].push(pack->inv_l_rcv(i).ok82());
		(*net_enums)["INV_L_RCV"]["ecode_bit4__rdy399"].push(pack->inv_l_rcv(i).ecode_bit4__rdy399());
		(*net_enums)["INV_L_RCV"]["ecode_bit4__rdy3148"].push(pack->inv_l_rcv(i).ecode_bit4__rdy3148());
		(*net_enums)["INV_L_RCV"]["compare_var194"].push(pack->inv_l_rcv(i).compare_var194());
		inverters_inv_l_rcv_compare_var194_enum_to_string((inverters_inv_l_rcv_compare_var194)pack->inv_l_rcv(i).compare_var194(), buffer);
		(*net_strings)["INV_L_RCV"]["compare_var194"].push(buffer);
		(*net_enums)["INV_L_RCV"]["compare_var195"].push(pack->inv_l_rcv(i).compare_var195());
		inverters_inv_l_rcv_compare_var195_enum_to_string((inverters_inv_l_rcv_compare_var195)pack->inv_l_rcv(i).compare_var195(), buffer);
		(*net_strings)["INV_L_RCV"]["compare_var195"].push(buffer);
		(*net_enums)["INV_L_RCV"]["compare_var218"].push(pack->inv_l_rcv(i).compare_var218());
		inverters_inv_l_rcv_compare_var218_enum_to_string((inverters_inv_l_rcv_compare_var218)pack->inv_l_rcv(i).compare_var218(), buffer);
		(*net_strings)["INV_L_RCV"]["compare_var218"].push(buffer);
		(*net_enums)["INV_L_RCV"]["compare_var219"].push(pack->inv_l_rcv(i).compare_var219());
		inverters_inv_l_rcv_compare_var219_enum_to_string((inverters_inv_l_rcv_compare_var219)pack->inv_l_rcv(i).compare_var219(), buffer);
		(*net_strings)["INV_L_RCV"]["compare_var219"].push(buffer);
		(*net_enums)["INV_L_RCV"]["cmc__bit4__dig_m_rcpramp_ena"].push(pack->inv_l_rcv(i).cmc__bit4__dig_m_rcpramp_ena());
		(*net_enums)["INV_L_RCV"]["run152"].push(pack->inv_l_rcv(i).run152());
		(*net_enums)["INV_L_RCV"]["out_3"].push(pack->inv_l_rcv(i).out_3());
		(*net_enums)["INV_L_RCV"]["err_powervoltage_low"].push(pack->inv_l_rcv(i).err_powervoltage_low());
		(*net_enums)["INV_L_RCV"]["rfe216"].push(pack->inv_l_rcv(i).rfe216());
		(*net_enums)["INV_L_RCV"]["km_i_limit"].push(pack->inv_l_rcv(i).km_i_limit());
		(*net_enums)["INV_L_RCV"]["icns82"].push(pack->inv_l_rcv(i).icns82());
		(*net_enums)["INV_L_RCV"]["ecode_bit5__n_fail99"].push(pack->inv_l_rcv(i).ecode_bit5__n_fail99());
		(*net_enums)["INV_L_RCV"]["ecode_bit5__n_fail148"].push(pack->inv_l_rcv(i).ecode_bit5__n_fail148());
		(*net_enums)["INV_L_RCV"]["mo_feedback_2"].push(pack->inv_l_rcv(i).mo_feedback_2());
		inverters_inv_l_rcv_mo_feedback_2_enum_to_string((inverters_inv_l_rcv_mo_feedback_2)pack->inv_l_rcv(i).mo_feedback_2(), buffer);
		(*net_strings)["INV_L_RCV"]["mo_feedback_2"].push(buffer);
		(*net_enums)["INV_L_RCV"]["recup_is_acv"].push(pack->inv_l_rcv(i).recup_is_acv());
		(*net_enums)["INV_L_RCV"]["cmc__bit5__reset_nramp_atnzero"].push(pack->inv_l_rcv(i).cmc__bit5__reset_nramp_atnzero());
		(*net_enums)["INV_L_RCV"]["rfe152"].push(pack->inv_l_rcv(i).rfe152());
		(*net_enums)["INV_L_RCV"]["out_4"].push(pack->inv_l_rcv(i).out_4());
		(*net_enums)["INV_L_RCV"]["err_motortemp"].push(pack->inv_l_rcv(i).err_motortemp());
		(*net_enums)["INV_L_RCV"]["km_n_clip"].push(pack->inv_l_rcv(i).km_n_clip());
		(*net_enums)["INV_L_RCV"]["tnlim82"].push(pack->inv_l_rcv(i).tnlim82());
		(*net_enums)["INV_L_RCV"]["ecode_bit6__flths99"].push(pack->inv_l_rcv(i).ecode_bit6__flths99());
		(*net_enums)["INV_L_RCV"]["ecode_bit6__flths148"].push(pack->inv_l_rcv(i).ecode_bit6__flths148());
		(*net_enums)["INV_L_RCV"]["i_dc_limit_is_acv"].push(pack->inv_l_rcv(i).i_dc_limit_is_acv());
		(*net_enums)["INV_L_RCV"]["cmc__bit6__torquetimeout_100ms_e"].push(pack->inv_l_rcv(i).cmc__bit6__torquetimeout_100ms_e());
		(*net_signals)["INV_L_RCV"]["rsvd"].push(pack->inv_l_rcv(i).rsvd());
		(*net_enums)["INV_L_RCV"]["rsvd1"].push(pack->inv_l_rcv(i).rsvd1());
		(*net_enums)["INV_L_RCV"]["err_devicetemp"].push(pack->inv_l_rcv(i).err_devicetemp());
		(*net_enums)["INV_L_RCV"]["cs_oora1"].push(pack->inv_l_rcv(i).cs_oora1());
		(*net_enums)["INV_L_RCV"]["km_mix_ana_on"].push(pack->inv_l_rcv(i).km_mix_ana_on());
		(*net_enums)["INV_L_RCV"]["pn82"].push(pack->inv_l_rcv(i).pn82());
		(*net_enums)["INV_L_RCV"]["ecode_bit7__fltls99"].push(pack->inv_l_rcv(i).ecode_bit7__fltls99());
		(*net_enums)["INV_L_RCV"]["ecode_bit7__fltls148"].push(pack->inv_l_rcv(i).ecode_bit7__fltls148());
		(*net_signals)["INV_L_RCV"]["cmc__bit13_7__free"].push(pack->inv_l_rcv(i).cmc__bit13_7__free());
		(*net_enums)["INV_L_RCV"]["brk1155"].push(pack->inv_l_rcv(i).brk1155());
		(*net_enums)["INV_L_RCV"]["err_overvoltage"].push(pack->inv_l_rcv(i).err_overvoltage());
		(*net_enums)["INV_L_RCV"]["d_out_1_on"].push(pack->inv_l_rcv(i).d_out_1_on());
		(*net_enums)["INV_L_RCV"]["cs_ain_2_mode"].push(pack->inv_l_rcv(i).cs_ain_2_mode());
		inverters_inv_l_rcv_cs_ain_2_mode_enum_to_string((inverters_inv_l_rcv_cs_ain_2_mode)pack->inv_l_rcv(i).cs_ain_2_mode(), buffer);
		(*net_strings)["INV_L_RCV"]["cs_ain_2_mode"].push(buffer);
		(*net_enums)["INV_L_RCV"]["km_allow_sync"].push(pack->inv_l_rcv(i).km_allow_sync());
		(*net_enums)["INV_L_RCV"]["ni82"].push(pack->inv_l_rcv(i).ni82());
		(*net_signals)["INV_L_RCV"]["ain_in_2_filter"].push(pack->inv_l_rcv(i).ain_in_2_filter());
		(*net_enums)["INV_L_RCV"]["ecode_bit8__fail_idc99"].push(pack->inv_l_rcv(i).ecode_bit8__fail_idc99());
		(*net_enums)["INV_L_RCV"]["ecode_bit8__fail_idc148"].push(pack->inv_l_rcv(i).ecode_bit8__fail_idc148());
		(*net_enums)["INV_L_RCV"]["mo_sc1_reso"].push(pack->inv_l_rcv(i).mo_sc1_reso());
		inverters_inv_l_rcv_mo_sc1_reso_enum_to_string((inverters_inv_l_rcv_mo_sc1_reso)pack->inv_l_rcv(i).mo_sc1_reso(), buffer);
		(*net_strings)["INV_L_RCV"]["mo_sc1_reso"].push(buffer);
		(*net_enums)["INV_L_RCV"]["source_id194"].push(pack->inv_l_rcv(i).source_id194());
		inverters_inv_l_rcv_source_id194_enum_to_string((inverters_inv_l_rcv_source_id194)pack->inv_l_rcv(i).source_id194(), buffer);
		(*net_strings)["INV_L_RCV"]["source_id194"].push(buffer);
		(*net_enums)["INV_L_RCV"]["source_id195"].push(pack->inv_l_rcv(i).source_id195());
		inverters_inv_l_rcv_source_id195_enum_to_string((inverters_inv_l_rcv_source_id195)pack->inv_l_rcv(i).source_id195(), buffer);
		(*net_strings)["INV_L_RCV"]["source_id195"].push(buffer);
		(*net_enums)["INV_L_RCV"]["source_id218"].push(pack->inv_l_rcv(i).source_id218());
		inverters_inv_l_rcv_source_id218_enum_to_string((inverters_inv_l_rcv_source_id218)pack->inv_l_rcv(i).source_id218(), buffer);
		(*net_strings)["INV_L_RCV"]["source_id218"].push(buffer);
		(*net_enums)["INV_L_RCV"]["source_id219"].push(pack->inv_l_rcv(i).source_id219());
		inverters_inv_l_rcv_source_id219_enum_to_string((inverters_inv_l_rcv_source_id219)pack->inv_l_rcv(i).source_id219(), buffer);
		(*net_strings)["INV_L_RCV"]["source_id219"].push(buffer);
		(*net_enums)["INV_L_RCV"]["dup__bit8__can_extended_0"].push(pack->inv_l_rcv(i).dup__bit8__can_extended_0());
		(*net_enums)["INV_L_RCV"]["err_ipeak"].push(pack->inv_l_rcv(i).err_ipeak());
		(*net_enums)["INV_L_RCV"]["d_out_2_on"].push(pack->inv_l_rcv(i).d_out_2_on());
		(*net_enums)["INV_L_RCV"]["km_handwheel"].push(pack->inv_l_rcv(i).km_handwheel());
		(*net_enums)["INV_L_RCV"]["_n082"].push(pack->inv_l_rcv(i)._n082());
		(*net_enums)["INV_L_RCV"]["ecode_bit9__fail_i99"].push(pack->inv_l_rcv(i).ecode_bit9__fail_i99());
		(*net_enums)["INV_L_RCV"]["ecode_bit9__fail_i148"].push(pack->inv_l_rcv(i).ecode_bit9__fail_i148());
		(*net_enums)["INV_L_RCV"]["dup__bit9__generator"].push(pack->inv_l_rcv(i).dup__bit9__generator());
		(*net_enums)["INV_L_RCV"]["err_raceaway"].push(pack->inv_l_rcv(i).err_raceaway());
		(*net_enums)["INV_L_RCV"]["btbrdy"].push(pack->inv_l_rcv(i).btbrdy());
		(*net_enums)["INV_L_RCV"]["km_phasing_extend"].push(pack->inv_l_rcv(i).km_phasing_extend());
		(*net_enums)["INV_L_RCV"]["rsw82"].push(pack->inv_l_rcv(i).rsw82());
		(*net_enums)["INV_L_RCV"]["ecode_bit10__vccm99"].push(pack->inv_l_rcv(i).ecode_bit10__vccm99());
		(*net_enums)["INV_L_RCV"]["ecode_bit10__vccm148"].push(pack->inv_l_rcv(i).ecode_bit10__vccm148());
		(*net_enums)["INV_L_RCV"]["dup__bit10__park_rms"].push(pack->inv_l_rcv(i).dup__bit10__park_rms());
		(*net_enums)["INV_L_RCV"]["err_user"].push(pack->inv_l_rcv(i).err_user());
		(*net_enums)["INV_L_RCV"]["go216"].push(pack->inv_l_rcv(i).go216());
		(*net_enums)["INV_L_RCV"]["cs_oora2"].push(pack->inv_l_rcv(i).cs_oora2());
		(*net_enums)["INV_L_RCV"]["km_rsvd_11"].push(pack->inv_l_rcv(i).km_rsvd_11());
		(*net_enums)["INV_L_RCV"]["cal082"].push(pack->inv_l_rcv(i).cal082());
		(*net_enums)["INV_L_RCV"]["ecode_bit11__15m_minus99"].push(pack->inv_l_rcv(i).ecode_bit11__15m_minus99());
		(*net_enums)["INV_L_RCV"]["ecode_bit11__15m_minus148"].push(pack->inv_l_rcv(i).ecode_bit11__15m_minus148());
		(*net_enums)["INV_L_RCV"]["mo_sc1_comp"].push(pack->inv_l_rcv(i).mo_sc1_comp());
		(*net_enums)["INV_L_RCV"]["dup__bit11__dcbus_volts"].push(pack->inv_l_rcv(i).dup__bit11__dcbus_volts());
		(*net_signals)["INV_L_RCV"]["test"].push(pack->inv_l_rcv(i).test());
		(*net_enums)["INV_L_RCV"]["d_out_3_on"].push(pack->inv_l_rcv(i).d_out_3_on());
		(*net_enums)["INV_L_RCV"]["cs_cmd_type"].push(pack->inv_l_rcv(i).cs_cmd_type());
		inverters_inv_l_rcv_cs_cmd_type_enum_to_string((inverters_inv_l_rcv_cs_cmd_type)pack->inv_l_rcv(i).cs_cmd_type(), buffer);
		(*net_strings)["INV_L_RCV"]["cs_cmd_type"].push(buffer);
		(*net_enums)["INV_L_RCV"]["km_rsvd_12"].push(pack->inv_l_rcv(i).km_rsvd_12());
		(*net_enums)["INV_L_RCV"]["cal82"].push(pack->inv_l_rcv(i).cal82());
		(*net_enums)["INV_L_RCV"]["ecode_bit12__15m_plus99"].push(pack->inv_l_rcv(i).ecode_bit12__15m_plus99());
		(*net_enums)["INV_L_RCV"]["ecode_bit12__15m_plus148"].push(pack->inv_l_rcv(i).ecode_bit12__15m_plus148());
		(*net_enums)["INV_L_RCV"]["mo_sc2_reso"].push(pack->inv_l_rcv(i).mo_sc2_reso());
		inverters_inv_l_rcv_mo_sc2_reso_enum_to_string((inverters_inv_l_rcv_mo_sc2_reso)pack->inv_l_rcv(i).mo_sc2_reso(), buffer);
		(*net_strings)["INV_L_RCV"]["mo_sc2_reso"].push(buffer);
		(*net_enums)["INV_L_RCV"]["dup__bit12__boat_pedal"].push(pack->inv_l_rcv(i).dup__bit12__boat_pedal());
		(*net_enums)["INV_L_RCV"]["d_out_4_on"].push(pack->inv_l_rcv(i).d_out_4_on());
		(*net_enums)["INV_L_RCV"]["km_rsvd_13"].push(pack->inv_l_rcv(i).km_rsvd_13());
		(*net_enums)["INV_L_RCV"]["tol82"].push(pack->inv_l_rcv(i).tol82());
		(*net_enums)["INV_L_RCV"]["ecode_bit13__18m_plus99"].push(pack->inv_l_rcv(i).ecode_bit13__18m_plus99());
		(*net_enums)["INV_L_RCV"]["ecode_bit13__18m_plus148"].push(pack->inv_l_rcv(i).ecode_bit13__18m_plus148());
		(*net_enums)["INV_L_RCV"]["dup__bit13__gen_autoiaclimit"].push(pack->inv_l_rcv(i).dup__bit13__gen_autoiaclimit());
		(*net_enums)["INV_L_RCV"]["err_hwerr"].push(pack->inv_l_rcv(i).err_hwerr());
		(*net_enums)["INV_L_RCV"]["goff"].push(pack->inv_l_rcv(i).goff());
		(*net_enums)["INV_L_RCV"]["cs_ain_2__i_limit"].push(pack->inv_l_rcv(i).cs_ain_2__i_limit());
		(*net_enums)["INV_L_RCV"]["km_pseudo_enable"].push(pack->inv_l_rcv(i).km_pseudo_enable());
		(*net_enums)["INV_L_RCV"]["rdy82"].push(pack->inv_l_rcv(i).rdy82());
		(*net_enums)["INV_L_RCV"]["ecode_bit14__ubmam99"].push(pack->inv_l_rcv(i).ecode_bit14__ubmam99());
		(*net_enums)["INV_L_RCV"]["ecode_bit14__ubmam148"].push(pack->inv_l_rcv(i).ecode_bit14__ubmam148());
		(*net_enums)["INV_L_RCV"]["cmc__bit14__idc_limit_ena_v2"].push(pack->inv_l_rcv(i).cmc__bit14__idc_limit_ena_v2());
		(*net_enums)["INV_L_RCV"]["dup__bit14__mtpa_reluct_enab"].push(pack->inv_l_rcv(i).dup__bit14__mtpa_reluct_enab());
		(*net_enums)["INV_L_RCV"]["err_ballast"].push(pack->inv_l_rcv(i).err_ballast());
		(*net_enums)["INV_L_RCV"]["brk1216"].push(pack->inv_l_rcv(i).brk1216());
		(*net_enums)["INV_L_RCV"]["cs_ain_1__n_limit"].push(pack->inv_l_rcv(i).cs_ain_1__n_limit());
		(*net_enums)["INV_L_RCV"]["km_debug_test"].push(pack->inv_l_rcv(i).km_debug_test());
		(*net_enums)["INV_L_RCV"]["brk082"].push(pack->inv_l_rcv(i).brk082());
		(*net_enums)["INV_L_RCV"]["ecode_bit15__t_igbt99"].push(pack->inv_l_rcv(i).ecode_bit15__t_igbt99());
		(*net_enums)["INV_L_RCV"]["ecode_bit15__t_igbt148"].push(pack->inv_l_rcv(i).ecode_bit15__t_igbt148());
		(*net_enums)["INV_L_RCV"]["mo_sc2_inv"].push(pack->inv_l_rcv(i).mo_sc2_inv());
		(*net_enums)["INV_L_RCV"]["active190"].push(pack->inv_l_rcv(i).active190());
		inverters_inv_l_rcv_active190_enum_to_string((inverters_inv_l_rcv_active190)pack->inv_l_rcv(i).active190(), buffer);
		(*net_strings)["INV_L_RCV"]["active190"].push(buffer);
		(*net_enums)["INV_L_RCV"]["active191"].push(pack->inv_l_rcv(i).active191());
		inverters_inv_l_rcv_active191_enum_to_string((inverters_inv_l_rcv_active191)pack->inv_l_rcv(i).active191(), buffer);
		(*net_strings)["INV_L_RCV"]["active191"].push(buffer);
		(*net_enums)["INV_L_RCV"]["active192"].push(pack->inv_l_rcv(i).active192());
		inverters_inv_l_rcv_active192_enum_to_string((inverters_inv_l_rcv_active192)pack->inv_l_rcv(i).active192(), buffer);
		(*net_strings)["INV_L_RCV"]["active192"].push(buffer);
		(*net_enums)["INV_L_RCV"]["active193"].push(pack->inv_l_rcv(i).active193());
		inverters_inv_l_rcv_active193_enum_to_string((inverters_inv_l_rcv_active193)pack->inv_l_rcv(i).active193(), buffer);
		(*net_strings)["INV_L_RCV"]["active193"].push(buffer);
		(*net_enums)["INV_L_RCV"]["gen_autoiaclimit_is_acv"].push(pack->inv_l_rcv(i).gen_autoiaclimit_is_acv());
		(*net_enums)["INV_L_RCV"]["cmc__bit15__dig_e_brake_act"].push(pack->inv_l_rcv(i).cmc__bit15__dig_e_brake_act());
		(*net_enums)["INV_L_RCV"]["dup__bit15__canopen_acv"].push(pack->inv_l_rcv(i).dup__bit15__canopen_acv());
		(*net_signals)["INV_L_RCV"]["m_r_dec"].push(pack->inv_l_rcv(i).m_r_dec());
		(*net_signals)["INV_L_RCV"]["m_r_rcp"].push(pack->inv_l_rcv(i).m_r_rcp());
		(*net_enums)["INV_L_RCV"]["warn_warning_0"].push(pack->inv_l_rcv(i).warn_warning_0());
		(*net_signals)["INV_L_RCV"]["ain_in_1_scaled213"].push(pack->inv_l_rcv(i).ain_in_1_scaled213());
		(*net_signals)["INV_L_RCV"]["ain_in_2_scaled214"].push(pack->inv_l_rcv(i).ain_in_2_scaled214());
		(*net_signals)["INV_L_RCV"]["t_dc__stop"].push(pack->inv_l_rcv(i).t_dc__stop());
		(*net_signals)["INV_L_RCV"]["v_dc__stop"].push(pack->inv_l_rcv(i).v_dc__stop());
		(*net_signals)["INV_L_RCV"]["v_min__stop"].push(pack->inv_l_rcv(i).v_min__stop());
		(*net_signals)["INV_L_RCV"]["f_min__stop"].push(pack->inv_l_rcv(i).f_min__stop());
		(*net_signals)["INV_L_RCV"]["v_corner__stop"].push(pack->inv_l_rcv(i).v_corner__stop());
		(*net_signals)["INV_L_RCV"]["f_corner__stop"].push(pack->inv_l_rcv(i).f_corner__stop());
		(*net_signals)["INV_L_RCV"]["pid_i__kp__id"].push(pack->inv_l_rcv(i).pid_i__kp__id());
		(*net_signals)["INV_L_RCV"]["pid_i__ti__id"].push(pack->inv_l_rcv(i).pid_i__ti__id());
		(*net_signals)["INV_L_RCV"]["pid_i__tim__id"].push(pack->inv_l_rcv(i).pid_i__tim__id());
		(*net_signals)["INV_L_RCV"]["ain_in_1_scaleval"].push(pack->inv_l_rcv(i).ain_in_1_scaleval());
		(*net_signals)["INV_L_RCV"]["ain_in_2_scaleval"].push(pack->inv_l_rcv(i).ain_in_2_scaleval());
		(*net_enums)["INV_L_RCV"]["signmag82"].push(pack->inv_l_rcv(i).signmag82());
		(*net_signals)["INV_L_RCV"]["regen_r"].push(pack->inv_l_rcv(i).regen_r());
		(*net_signals)["INV_L_RCV"]["dc_bus_max_lim"].push(pack->inv_l_rcv(i).dc_bus_max_lim());
		(*net_signals)["INV_L_RCV"]["pid_i__xkp__id"].push(pack->inv_l_rcv(i).pid_i__xkp__id());
		(*net_signals)["INV_L_RCV"]["bat_opr_limit__gen"].push(pack->inv_l_rcv(i).bat_opr_limit__gen());
		(*net_signals)["INV_L_RCV"]["pid_i__kf__id"].push(pack->inv_l_rcv(i).pid_i__kf__id());
		(*net_signals)["INV_L_RCV"]["cmc__bit17_16__checkipeak_config"].push(pack->inv_l_rcv(i).cmc__bit17_16__checkipeak_config());
		(*net_enums)["INV_L_RCV"]["dup__bit16__bamobil3_2_offcrct"].push(pack->inv_l_rcv(i).dup__bit16__bamobil3_2_offcrct());
		(*net_signals)["INV_L_RCV"]["special__stop"].push(pack->inv_l_rcv(i).special__stop());
		(*net_signals)["INV_L_RCV"]["free"].push(pack->inv_l_rcv(i).free());
		(*net_signals)["INV_L_RCV"]["svnrevision_nr"].push(pack->inv_l_rcv(i).svnrevision_nr());
		(*net_enums)["INV_L_RCV"]["warn_illegal_status"].push(pack->inv_l_rcv(i).warn_illegal_status());
		(*net_enums)["INV_L_RCV"]["nclip82"].push(pack->inv_l_rcv(i).nclip82());
		(*net_signals)["INV_L_RCV"]["dup__bit19_17__ecode_redefine"].push(pack->inv_l_rcv(i).dup__bit19_17__ecode_redefine());
		(*net_enums)["INV_L_RCV"]["warn_safe_in"].push(pack->inv_l_rcv(i).warn_safe_in());
		(*net_enums)["INV_L_RCV"]["nclip_minus82"].push(pack->inv_l_rcv(i).nclip_minus82());
		(*net_enums)["INV_L_RCV"]["cmc__bit18__tractioncontrol_ena"].push(pack->inv_l_rcv(i).cmc__bit18__tractioncontrol_ena());
		(*net_enums)["INV_L_RCV"]["nclip_plus82"].push(pack->inv_l_rcv(i).nclip_plus82());
		(*net_signals)["INV_L_RCV"]["cmc__bit20_19__tc_deltatime_conf"].push(pack->inv_l_rcv(i).cmc__bit20_19__tc_deltatime_conf());
		(*net_enums)["INV_L_RCV"]["irddig82"].push(pack->inv_l_rcv(i).irddig82());
		(*net_enums)["INV_L_RCV"]["dup__bit20__hal_extmr_acv"].push(pack->inv_l_rcv(i).dup__bit20__hal_extmr_acv());
		(*net_enums)["INV_L_RCV"]["iuserchd82"].push(pack->inv_l_rcv(i).iuserchd82());
		(*net_signals)["INV_L_RCV"]["cmc__bit22_21__tc_minspeed_conf"].push(pack->inv_l_rcv(i).cmc__bit22_21__tc_minspeed_conf());
		(*net_enums)["INV_L_RCV"]["dup__bit21__initwith_frg_off"].push(pack->inv_l_rcv(i).dup__bit21__initwith_frg_off());
		(*net_enums)["INV_L_RCV"]["warn_motortemp"].push(pack->inv_l_rcv(i).warn_motortemp());
		(*net_enums)["INV_L_RCV"]["irdn82"].push(pack->inv_l_rcv(i).irdn82());
		(*net_signals)["INV_L_RCV"]["dup__bit31_22__free"].push(pack->inv_l_rcv(i).dup__bit31_22__free());
		(*net_enums)["INV_L_RCV"]["warn_devicetemp"].push(pack->inv_l_rcv(i).warn_devicetemp());
		(*net_enums)["INV_L_RCV"]["irdti82"].push(pack->inv_l_rcv(i).irdti82());
		(*net_enums)["INV_L_RCV"]["cmc__bit23__tc_ncmdrestoption"].push(pack->inv_l_rcv(i).cmc__bit23__tc_ncmdrestoption());
		(*net_signals)["INV_L_RCV"]["m_r_acc"].push(pack->inv_l_rcv(i).m_r_acc());
		(*net_enums)["INV_L_RCV"]["warn_vout_sat"].push(pack->inv_l_rcv(i).warn_vout_sat());
		(*net_enums)["INV_L_RCV"]["irdtir82"].push(pack->inv_l_rcv(i).irdtir82());
		(*net_signals)["INV_L_RCV"]["cmc__bit31_24__free"].push(pack->inv_l_rcv(i).cmc__bit31_24__free());
		(*net_enums)["INV_L_RCV"]["warn_ipeak"].push(pack->inv_l_rcv(i).warn_ipeak());
		(*net_enums)["INV_L_RCV"]["_10hz82"].push(pack->inv_l_rcv(i)._10hz82());
		(*net_enums)["INV_L_RCV"]["warn_raceaway"].push(pack->inv_l_rcv(i).warn_raceaway());
		(*net_enums)["INV_L_RCV"]["irdtm82"].push(pack->inv_l_rcv(i).irdtm82());
		(*net_enums)["INV_L_RCV"]["irdana82"].push(pack->inv_l_rcv(i).irdana82());
		(*net_enums)["INV_L_RCV"]["iwcns82"].push(pack->inv_l_rcv(i).iwcns82());
		(*net_enums)["INV_L_RCV"]["rfepulse82"].push(pack->inv_l_rcv(i).rfepulse82());
		(*net_enums)["INV_L_RCV"]["md82"].push(pack->inv_l_rcv(i).md82());
		(*net_enums)["INV_L_RCV"]["warn_ballast"].push(pack->inv_l_rcv(i).warn_ballast());
		(*net_enums)["INV_L_RCV"]["hndwhl82"].push(pack->inv_l_rcv(i).hndwhl82());

    }

    for(int i = 0; i < pack->inv_r_send_size(); i++){
#ifdef CANLIB_TIMESTAMP
        static uint64_t last_timestamp = 0;
        if(pack->inv_r_send(i)._inner_timestamp() - last_timestamp < resample_us) continue;
        else last_timestamp = pack->inv_r_send(i)._inner_timestamp();
        (*net_signals)["INV_R_SEND"]["_timestamp"].push(pack->inv_r_send(i)._inner_timestamp());
#endif // CANLIB_TIMESTAMP

		(*net_enums)["INV_R_SEND"]["send_mux"].push(pack->inv_r_send(i).send_mux());
		inverters_inv_r_send_send_mux_enum_to_string((inverters_inv_r_send_send_mux)pack->inv_r_send(i).send_mux(), buffer);
		(*net_strings)["INV_R_SEND"]["send_mux"].push(buffer);
		(*net_signals)["INV_R_SEND"]["motor_f_n"].push(pack->inv_r_send(i).motor_f_n());
		(*net_signals)["INV_R_SEND"]["cos_phi"].push(pack->inv_r_send(i).cos_phi());
		(*net_signals)["INV_R_SEND"]["pid_i__kp__iq"].push(pack->inv_r_send(i).pid_i__kp__iq());
		(*net_signals)["INV_R_SEND"]["pid_i__ti__iq"].push(pack->inv_r_send(i).pid_i__ti__iq());
		(*net_signals)["INV_R_SEND"]["id_setdig__id"].push(pack->inv_r_send(i).id_setdig__id());
		(*net_signals)["INV_R_SEND"]["i_delta_ramp"].push(pack->inv_r_send(i).i_delta_ramp());
		(*net_signals)["INV_R_SEND"]["pid_i__tim__iq"].push(pack->inv_r_send(i).pid_i__tim__iq());
		(*net_signals)["INV_R_SEND"]["pid_n__kp"].push(pack->inv_r_send(i).pid_n__kp());
		(*net_signals)["INV_R_SEND"]["pid_n__ti"].push(pack->inv_r_send(i).pid_n__ti());
		(*net_signals)["INV_R_SEND"]["pid_n__td"].push(pack->inv_r_send(i).pid_n__td());
		(*net_signals)["INV_R_SEND"]["n_setdig"].push(pack->inv_r_send(i).n_setdig());
		(*net_signals)["INV_R_SEND"]["n_lim"].push(pack->inv_r_send(i).n_lim());
		(*net_signals)["INV_R_SEND"]["n_r_acc"].push(pack->inv_r_send(i).n_r_acc());
		(*net_signals)["INV_R_SEND"]["pid_n__tim"].push(pack->inv_r_send(i).pid_n__tim());
		(*net_signals)["INV_R_SEND"]["i_red_n"].push(pack->inv_r_send(i).i_red_n());
		(*net_signals)["INV_R_SEND"]["n_lim_minus"].push(pack->inv_r_send(i).n_lim_minus());
		(*net_signals)["INV_R_SEND"]["n_lim_plus"].push(pack->inv_r_send(i).n_lim_plus());
		(*net_enums)["INV_R_SEND"]["read_id"].push(pack->inv_r_send(i).read_id());
		inverters_inv_r_send_read_id_enum_to_string((inverters_inv_r_send_read_id)pack->inv_r_send(i).read_id(), buffer);
		(*net_strings)["INV_R_SEND"]["read_id"].push(buffer);
		(*net_signals)["INV_R_SEND"]["i_lim_dig"].push(pack->inv_r_send(i).i_lim_dig());
		(*net_signals)["INV_R_SEND"]["i_red_te"].push(pack->inv_r_send(i).i_red_te());
		(*net_signals)["INV_R_SEND"]["i_max_eff"].push(pack->inv_r_send(i).i_max_eff());
		(*net_signals)["INV_R_SEND"]["i_nom_eff"].push(pack->inv_r_send(i).i_nom_eff());
		(*net_signals)["INV_R_SEND"]["motor_pole"].push(pack->inv_r_send(i).motor_pole());
		(*net_signals)["INV_R_SEND"]["ain_in_1_cutoff"].push(pack->inv_r_send(i).ain_in_1_cutoff());
		(*net_enums)["INV_R_SEND"]["km_rsvd_0"].push(pack->inv_r_send(i).km_rsvd_0());
		(*net_signals)["INV_R_SEND"]["ain_in_2_cutoff"].push(pack->inv_r_send(i).ain_in_2_cutoff());
		(*net_signals)["INV_R_SEND"]["i_red_td"].push(pack->inv_r_send(i).i_red_td());
		(*net_signals)["INV_R_SEND"]["n_nom"].push(pack->inv_r_send(i).n_nom());
		(*net_signals)["INV_R_SEND"]["pid_n__kacc"].push(pack->inv_r_send(i).pid_n__kacc());
		(*net_signals)["INV_R_SEND"]["speed_filter"].push(pack->inv_r_send(i).speed_filter());
		(*net_signals)["INV_R_SEND"]["ain_in_1_filter"].push(pack->inv_r_send(i).ain_in_1_filter());
		(*net_signals)["INV_R_SEND"]["snr"].push(pack->inv_r_send(i).snr());
		(*net_signals)["INV_R_SEND"]["device_mains"].push(pack->inv_r_send(i).device_mains());
		(*net_signals)["INV_R_SEND"]["regen_p"].push(pack->inv_r_send(i).regen_p());
		(*net_enums)["INV_R_SEND"]["devicetype"].push(pack->inv_r_send(i).devicetype());
		inverters_inv_r_send_devicetype_enum_to_string((inverters_inv_r_send_devicetype)pack->inv_r_send(i).devicetype(), buffer);
		(*net_strings)["INV_R_SEND"]["devicetype"].push(buffer);
		(*net_signals)["INV_R_SEND"]["can_id_rx"].push(pack->inv_r_send(i).can_id_rx());
		(*net_signals)["INV_R_SEND"]["can_id_tx"].push(pack->inv_r_send(i).can_id_tx());
		(*net_signals)["INV_R_SEND"]["pos_kp"].push(pack->inv_r_send(i).pos_kp());
		(*net_signals)["INV_R_SEND"]["pos_ti"].push(pack->inv_r_send(i).pos_ti());
		(*net_signals)["INV_R_SEND"]["pos_td"].push(pack->inv_r_send(i).pos_td());
		(*net_signals)["INV_R_SEND"]["pos_dest"].push(pack->inv_r_send(i).pos_dest());
		(*net_signals)["INV_R_SEND"]["pos_tim"].push(pack->inv_r_send(i).pos_tim());
		(*net_signals)["INV_R_SEND"]["pos_offsref"].push(pack->inv_r_send(i).pos_offsref());
		(*net_enums)["INV_R_SEND"]["can_nbt"].push(pack->inv_r_send(i).can_nbt());
		inverters_inv_r_send_can_nbt_enum_to_string((inverters_inv_r_send_can_nbt)pack->inv_r_send(i).can_nbt(), buffer);
		(*net_strings)["INV_R_SEND"]["can_nbt"].push(buffer);
		(*net_signals)["INV_R_SEND"]["ref_reso_edge"].push(pack->inv_r_send(i).ref_reso_edge());
		(*net_signals)["INV_R_SEND"]["speed_1"].push(pack->inv_r_send(i).speed_1());
		(*net_signals)["INV_R_SEND"]["speed_2"].push(pack->inv_r_send(i).speed_2());
		(*net_signals)["INV_R_SEND"]["pos_tol_win"].push(pack->inv_r_send(i).pos_tol_win());
		(*net_signals)["INV_R_SEND"]["pos_preset_val"].push(pack->inv_r_send(i).pos_preset_val());
		(*net_signals)["INV_R_SEND"]["can_id_2_rx"].push(pack->inv_r_send(i).can_id_2_rx());
		(*net_signals)["INV_R_SEND"]["can_id_2_tx"].push(pack->inv_r_send(i).can_id_2_tx());
		(*net_signals)["INV_R_SEND"]["v_ref"].push(pack->inv_r_send(i).v_ref());
		(*net_signals)["INV_R_SEND"]["v_kp"].push(pack->inv_r_send(i).v_kp());
		(*net_signals)["INV_R_SEND"]["v_ti"].push(pack->inv_r_send(i).v_ti());
		(*net_signals)["INV_R_SEND"]["clear_errors"].push(pack->inv_r_send(i).clear_errors());
		(*net_signals)["INV_R_SEND"]["m_setdig__iq"].push(pack->inv_r_send(i).m_setdig__iq());
		(*net_signals)["INV_R_SEND"]["i_red_tm"].push(pack->inv_r_send(i).i_red_tm());
		(*net_signals)["INV_R_SEND"]["m_temp"].push(pack->inv_r_send(i).m_temp());
		(*net_enums)["INV_R_SEND"]["mo_feedback_1"].push(pack->inv_r_send(i).mo_feedback_1());
		inverters_inv_r_send_mo_feedback_1_enum_to_string((inverters_inv_r_send_mo_feedback_1)pack->inv_r_send(i).mo_feedback_1(), buffer);
		(*net_strings)["INV_R_SEND"]["mo_feedback_1"].push(buffer);
		(*net_signals)["INV_R_SEND"]["dc_bus_min_lim"].push(pack->inv_r_send(i).dc_bus_min_lim());
		(*net_signals)["INV_R_SEND"]["fb_incr_mot"].push(pack->inv_r_send(i).fb_incr_mot());
		(*net_signals)["INV_R_SEND"]["fb_pole"].push(pack->inv_r_send(i).fb_pole());
		(*net_signals)["INV_R_SEND"]["motor_lsq"].push(pack->inv_r_send(i).motor_lsq());
		(*net_signals)["INV_R_SEND"]["id_nom"].push(pack->inv_r_send(i).id_nom());
		(*net_signals)["INV_R_SEND"]["motor_lm"].push(pack->inv_r_send(i).motor_lm());
		(*net_signals)["INV_R_SEND"]["motor_rr"].push(pack->inv_r_send(i).motor_rr());
		(*net_signals)["INV_R_SEND"]["id_min"].push(pack->inv_r_send(i).id_min());
		(*net_signals)["INV_R_SEND"]["motor_tr"].push(pack->inv_r_send(i).motor_tr());
		(*net_signals)["INV_R_SEND"]["motor_lsd"].push(pack->inv_r_send(i).motor_lsd());
		(*net_signals)["INV_R_SEND"]["motor_rs"].push(pack->inv_r_send(i).motor_rs());
		(*net_signals)["INV_R_SEND"]["motor_ts"].push(pack->inv_r_send(i).motor_ts());
		(*net_enums)["INV_R_SEND"]["def_end_1"].push(pack->inv_r_send(i).def_end_1());
		inverters_inv_r_send_def_end_1_enum_to_string((inverters_inv_r_send_def_end_1)pack->inv_r_send(i).def_end_1(), buffer);
		(*net_strings)["INV_R_SEND"]["def_end_1"].push(buffer);
		(*net_enums)["INV_R_SEND"]["def_end_2"].push(pack->inv_r_send(i).def_end_2());
		inverters_inv_r_send_def_end_2_enum_to_string((inverters_inv_r_send_def_end_2)pack->inv_r_send(i).def_end_2(), buffer);
		(*net_strings)["INV_R_SEND"]["def_end_2"].push(buffer);
		(*net_enums)["INV_R_SEND"]["def_din_1"].push(pack->inv_r_send(i).def_din_1());
		inverters_inv_r_send_def_din_1_enum_to_string((inverters_inv_r_send_def_din_1)pack->inv_r_send(i).def_din_1(), buffer);
		(*net_strings)["INV_R_SEND"]["def_din_1"].push(buffer);
		(*net_enums)["INV_R_SEND"]["def_din_2"].push(pack->inv_r_send(i).def_din_2());
		inverters_inv_r_send_def_din_2_enum_to_string((inverters_inv_r_send_def_din_2)pack->inv_r_send(i).def_din_2(), buffer);
		(*net_strings)["INV_R_SEND"]["def_din_2"].push(buffer);
		(*net_signals)["INV_R_SEND"]["i_max_pk"].push(pack->inv_r_send(i).i_max_pk());
		(*net_signals)["INV_R_SEND"]["i_con_eff"].push(pack->inv_r_send(i).i_con_eff());
		(*net_signals)["INV_R_SEND"]["i_device"].push(pack->inv_r_send(i).i_device());
		(*net_signals)["INV_R_SEND"]["n_r_lim"].push(pack->inv_r_send(i).n_r_lim());
		(*net_signals)["INV_R_SEND"]["nmax100perc"].push(pack->inv_r_send(i).nmax100perc());
		(*net_signals)["INV_R_SEND"]["pid_i__xkp__iq"].push(pack->inv_r_send(i).pid_i__xkp__iq());
		(*net_signals)["INV_R_SEND"]["bat_opr_limit__mot"].push(pack->inv_r_send(i).bat_opr_limit__mot());
		(*net_signals)["INV_R_SEND"]["pid_i__kf__iq"].push(pack->inv_r_send(i).pid_i__kf__iq());
		(*net_enums)["INV_R_SEND"]["cmc__bit0__dc_current_sens_ena"].push(pack->inv_r_send(i).cmc__bit0__dc_current_sens_ena());
		(*net_signals)["INV_R_SEND"]["can_rxtimeout"].push(pack->inv_r_send(i).can_rxtimeout());
		(*net_signals)["INV_R_SEND"]["var_1"].push(pack->inv_r_send(i).var_1());
		(*net_signals)["INV_R_SEND"]["var_2"].push(pack->inv_r_send(i).var_2());
		(*net_signals)["INV_R_SEND"]["var_3"].push(pack->inv_r_send(i).var_3());
		(*net_signals)["INV_R_SEND"]["var_4"].push(pack->inv_r_send(i).var_4());
		(*net_signals)["INV_R_SEND"]["ain_in_2_offsetval"].push(pack->inv_r_send(i).ain_in_2_offsetval());
		(*net_signals)["INV_R_SEND"]["n_r_dec"].push(pack->inv_r_send(i).n_r_dec());
		(*net_signals)["INV_R_SEND"]["v_shunt"].push(pack->inv_r_send(i).v_shunt());
		(*net_signals)["INV_R_SEND"]["t_peak"].push(pack->inv_r_send(i).t_peak());
		(*net_signals)["INV_R_SEND"]["brake_delay"].push(pack->inv_r_send(i).brake_delay());
		(*net_signals)["INV_R_SEND"]["axis"].push(pack->inv_r_send(i).axis());
		(*net_enums)["INV_R_SEND"]["km_speed_0"].push(pack->inv_r_send(i).km_speed_0());
		(*net_enums)["INV_R_SEND"]["cmc__bit1__idc_limit_ena"].push(pack->inv_r_send(i).cmc__bit1__idc_limit_ena());
		(*net_enums)["INV_R_SEND"]["km_frg_off"].push(pack->inv_r_send(i).km_frg_off());
		(*net_enums)["INV_R_SEND"]["cmc__bit2__pdc_limit_usage"].push(pack->inv_r_send(i).cmc__bit2__pdc_limit_usage());
		(*net_enums)["INV_R_SEND"]["km_cal_off"].push(pack->inv_r_send(i).km_cal_off());
		(*net_enums)["INV_R_SEND"]["cmc__bit3__torqueval_init_ena"].push(pack->inv_r_send(i).cmc__bit3__torqueval_init_ena());
		(*net_enums)["INV_R_SEND"]["km_tx_tog_stat"].push(pack->inv_r_send(i).km_tx_tog_stat());
		(*net_enums)["INV_R_SEND"]["cmc__bit4__dig_m_rcpramp_ena"].push(pack->inv_r_send(i).cmc__bit4__dig_m_rcpramp_ena());
		(*net_enums)["INV_R_SEND"]["km_i_limit"].push(pack->inv_r_send(i).km_i_limit());
		(*net_enums)["INV_R_SEND"]["mo_feedback_2"].push(pack->inv_r_send(i).mo_feedback_2());
		inverters_inv_r_send_mo_feedback_2_enum_to_string((inverters_inv_r_send_mo_feedback_2)pack->inv_r_send(i).mo_feedback_2(), buffer);
		(*net_strings)["INV_R_SEND"]["mo_feedback_2"].push(buffer);
		(*net_enums)["INV_R_SEND"]["cmc__bit5__reset_nramp_atnzero"].push(pack->inv_r_send(i).cmc__bit5__reset_nramp_atnzero());
		(*net_enums)["INV_R_SEND"]["km_n_clip"].push(pack->inv_r_send(i).km_n_clip());
		(*net_enums)["INV_R_SEND"]["cmc__bit6__torquetimeout_100ms_e"].push(pack->inv_r_send(i).cmc__bit6__torquetimeout_100ms_e());
		(*net_enums)["INV_R_SEND"]["km_mix_ana_on"].push(pack->inv_r_send(i).km_mix_ana_on());
		(*net_signals)["INV_R_SEND"]["cmc__bit13_7__free"].push(pack->inv_r_send(i).cmc__bit13_7__free());
		(*net_enums)["INV_R_SEND"]["ret_interval"].push(pack->inv_r_send(i).ret_interval());
		inverters_inv_r_send_ret_interval_enum_to_string((inverters_inv_r_send_ret_interval)pack->inv_r_send(i).ret_interval(), buffer);
		(*net_strings)["INV_R_SEND"]["ret_interval"].push(buffer);
		(*net_enums)["INV_R_SEND"]["km_allow_sync"].push(pack->inv_r_send(i).km_allow_sync());
		(*net_signals)["INV_R_SEND"]["ain_in_2_filter"].push(pack->inv_r_send(i).ain_in_2_filter());
		(*net_enums)["INV_R_SEND"]["mo_sc1_reso"].push(pack->inv_r_send(i).mo_sc1_reso());
		inverters_inv_r_send_mo_sc1_reso_enum_to_string((inverters_inv_r_send_mo_sc1_reso)pack->inv_r_send(i).mo_sc1_reso(), buffer);
		(*net_strings)["INV_R_SEND"]["mo_sc1_reso"].push(buffer);
		(*net_enums)["INV_R_SEND"]["km_handwheel"].push(pack->inv_r_send(i).km_handwheel());
		(*net_enums)["INV_R_SEND"]["km_phasing_extend"].push(pack->inv_r_send(i).km_phasing_extend());
		(*net_enums)["INV_R_SEND"]["km_rsvd_11"].push(pack->inv_r_send(i).km_rsvd_11());
		(*net_enums)["INV_R_SEND"]["mo_sc1_comp"].push(pack->inv_r_send(i).mo_sc1_comp());
		(*net_enums)["INV_R_SEND"]["km_rsvd_12"].push(pack->inv_r_send(i).km_rsvd_12());
		(*net_enums)["INV_R_SEND"]["mo_sc2_reso"].push(pack->inv_r_send(i).mo_sc2_reso());
		inverters_inv_r_send_mo_sc2_reso_enum_to_string((inverters_inv_r_send_mo_sc2_reso)pack->inv_r_send(i).mo_sc2_reso(), buffer);
		(*net_strings)["INV_R_SEND"]["mo_sc2_reso"].push(buffer);
		(*net_enums)["INV_R_SEND"]["km_rsvd_13"].push(pack->inv_r_send(i).km_rsvd_13());
		(*net_enums)["INV_R_SEND"]["km_pseudo_enable"].push(pack->inv_r_send(i).km_pseudo_enable());
		(*net_enums)["INV_R_SEND"]["cmc__bit14__idc_limit_ena_v2"].push(pack->inv_r_send(i).cmc__bit14__idc_limit_ena_v2());
		(*net_enums)["INV_R_SEND"]["km_debug_test"].push(pack->inv_r_send(i).km_debug_test());
		(*net_enums)["INV_R_SEND"]["mo_sc2_inv"].push(pack->inv_r_send(i).mo_sc2_inv());
		(*net_enums)["INV_R_SEND"]["active190"].push(pack->inv_r_send(i).active190());
		inverters_inv_r_send_active190_enum_to_string((inverters_inv_r_send_active190)pack->inv_r_send(i).active190(), buffer);
		(*net_strings)["INV_R_SEND"]["active190"].push(buffer);
		(*net_enums)["INV_R_SEND"]["active191"].push(pack->inv_r_send(i).active191());
		inverters_inv_r_send_active191_enum_to_string((inverters_inv_r_send_active191)pack->inv_r_send(i).active191(), buffer);
		(*net_strings)["INV_R_SEND"]["active191"].push(buffer);
		(*net_enums)["INV_R_SEND"]["active192"].push(pack->inv_r_send(i).active192());
		inverters_inv_r_send_active192_enum_to_string((inverters_inv_r_send_active192)pack->inv_r_send(i).active192(), buffer);
		(*net_strings)["INV_R_SEND"]["active192"].push(buffer);
		(*net_enums)["INV_R_SEND"]["active193"].push(pack->inv_r_send(i).active193());
		inverters_inv_r_send_active193_enum_to_string((inverters_inv_r_send_active193)pack->inv_r_send(i).active193(), buffer);
		(*net_strings)["INV_R_SEND"]["active193"].push(buffer);
		(*net_enums)["INV_R_SEND"]["cmc__bit15__dig_e_brake_act"].push(pack->inv_r_send(i).cmc__bit15__dig_e_brake_act());
		(*net_signals)["INV_R_SEND"]["pid_i__kp__id"].push(pack->inv_r_send(i).pid_i__kp__id());
		(*net_signals)["INV_R_SEND"]["pid_i__ti__id"].push(pack->inv_r_send(i).pid_i__ti__id());
		(*net_signals)["INV_R_SEND"]["pid_i__tim__id"].push(pack->inv_r_send(i).pid_i__tim__id());
		(*net_signals)["INV_R_SEND"]["m_r_acc"].push(pack->inv_r_send(i).m_r_acc());
		(*net_signals)["INV_R_SEND"]["regen_r"].push(pack->inv_r_send(i).regen_r());
		(*net_signals)["INV_R_SEND"]["dc_bus_max_lim"].push(pack->inv_r_send(i).dc_bus_max_lim());
		(*net_signals)["INV_R_SEND"]["m_r_rcp"].push(pack->inv_r_send(i).m_r_rcp());
		(*net_signals)["INV_R_SEND"]["pid_i__xkp__id"].push(pack->inv_r_send(i).pid_i__xkp__id());
		(*net_signals)["INV_R_SEND"]["bat_opr_limit__gen"].push(pack->inv_r_send(i).bat_opr_limit__gen());
		(*net_signals)["INV_R_SEND"]["pid_i__kf__id"].push(pack->inv_r_send(i).pid_i__kf__id());
		(*net_signals)["INV_R_SEND"]["cmc__bit17_16__checkipeak_config"].push(pack->inv_r_send(i).cmc__bit17_16__checkipeak_config());
		(*net_signals)["INV_R_SEND"]["ain_in_2_scaleval"].push(pack->inv_r_send(i).ain_in_2_scaleval());
		(*net_signals)["INV_R_SEND"]["m_r_dec"].push(pack->inv_r_send(i).m_r_dec());
		(*net_enums)["INV_R_SEND"]["cmc__bit18__tractioncontrol_ena"].push(pack->inv_r_send(i).cmc__bit18__tractioncontrol_ena());
		(*net_signals)["INV_R_SEND"]["cmc__bit20_19__tc_deltatime_conf"].push(pack->inv_r_send(i).cmc__bit20_19__tc_deltatime_conf());
		(*net_signals)["INV_R_SEND"]["cmc__bit22_21__tc_minspeed_conf"].push(pack->inv_r_send(i).cmc__bit22_21__tc_minspeed_conf());
		(*net_enums)["INV_R_SEND"]["cmc__bit23__tc_ncmdrestoption"].push(pack->inv_r_send(i).cmc__bit23__tc_ncmdrestoption());
		(*net_signals)["INV_R_SEND"]["cmc__bit31_24__free"].push(pack->inv_r_send(i).cmc__bit31_24__free());

    }

    for(int i = 0; i < pack->inv_r_rcv_size(); i++){
#ifdef CANLIB_TIMESTAMP
        static uint64_t last_timestamp = 0;
        if(pack->inv_r_rcv(i)._inner_timestamp() - last_timestamp < resample_us) continue;
        else last_timestamp = pack->inv_r_rcv(i)._inner_timestamp();
        (*net_signals)["INV_R_RCV"]["_timestamp"].push(pack->inv_r_rcv(i)._inner_timestamp());
#endif // CANLIB_TIMESTAMP

		(*net_enums)["INV_R_RCV"]["rcv_mux"].push(pack->inv_r_rcv(i).rcv_mux());
		inverters_inv_r_rcv_rcv_mux_enum_to_string((inverters_inv_r_rcv_rcv_mux)pack->inv_r_rcv(i).rcv_mux(), buffer);
		(*net_strings)["INV_R_RCV"]["rcv_mux"].push(buffer);
		(*net_signals)["INV_R_RCV"]["n_actual"].push(pack->inv_r_rcv(i).n_actual());
		(*net_signals)["INV_R_RCV"]["n_r_dec"].push(pack->inv_r_rcv(i).n_r_dec());
		(*net_signals)["INV_R_RCV"]["n_r_lim"].push(pack->inv_r_rcv(i).n_r_lim());
		(*net_signals)["INV_R_RCV"]["n_actual_filt"].push(pack->inv_r_rcv(i).n_actual_filt());
		(*net_signals)["INV_R_RCV"]["firmware"].push(pack->inv_r_rcv(i).firmware());
		(*net_enums)["INV_R_RCV"]["devicetype"].push(pack->inv_r_rcv(i).devicetype());
		inverters_inv_r_rcv_devicetype_enum_to_string((inverters_inv_r_rcv_devicetype)pack->inv_r_rcv(i).devicetype(), buffer);
		(*net_strings)["INV_R_RCV"]["devicetype"].push(buffer);
		(*net_signals)["INV_R_RCV"]["snr"].push(pack->inv_r_rcv(i).snr());
		(*net_signals)["INV_R_RCV"]["axis"].push(pack->inv_r_rcv(i).axis());
		(*net_signals)["INV_R_RCV"]["i_device"].push(pack->inv_r_rcv(i).i_device());
		(*net_signals)["INV_R_RCV"]["v_shunt"].push(pack->inv_r_rcv(i).v_shunt());
		(*net_signals)["INV_R_RCV"]["i_200perc"].push(pack->inv_r_rcv(i).i_200perc());
		(*net_signals)["INV_R_RCV"]["status_bitmap"].push(pack->inv_r_rcv(i).status_bitmap());
		(*net_enums)["INV_R_RCV"]["err_badparas"].push(pack->inv_r_rcv(i).err_badparas());
		(*net_enums)["INV_R_RCV"]["lmt_active_1"].push(pack->inv_r_rcv(i).lmt_active_1());
		(*net_signals)["INV_R_RCV"]["ain_in_1_raw"].push(pack->inv_r_rcv(i).ain_in_1_raw());
		(*net_signals)["INV_R_RCV"]["ain_in_2_raw"].push(pack->inv_r_rcv(i).ain_in_2_raw());
		(*net_signals)["INV_R_RCV"]["nmax100perc"].push(pack->inv_r_rcv(i).nmax100perc());
		(*net_signals)["INV_R_RCV"]["n_setdig"].push(pack->inv_r_rcv(i).n_setdig());
		(*net_signals)["INV_R_RCV"]["n_cmd"].push(pack->inv_r_rcv(i).n_cmd());
		(*net_signals)["INV_R_RCV"]["n_cmd_ramp"].push(pack->inv_r_rcv(i).n_cmd_ramp());
		(*net_signals)["INV_R_RCV"]["n_lim"].push(pack->inv_r_rcv(i).n_lim());
		(*net_signals)["INV_R_RCV"]["n_error"].push(pack->inv_r_rcv(i).n_error());
		(*net_signals)["INV_R_RCV"]["m_setdig__iq"].push(pack->inv_r_rcv(i).m_setdig__iq());
		(*net_signals)["INV_R_RCV"]["id_setdig__id"].push(pack->inv_r_rcv(i).id_setdig__id());
		(*net_signals)["INV_R_RCV"]["i_max_pk"].push(pack->inv_r_rcv(i).i_max_pk());
		(*net_signals)["INV_R_RCV"]["i_con_eff"].push(pack->inv_r_rcv(i).i_con_eff());
		(*net_signals)["INV_R_RCV"]["i_max_eff"].push(pack->inv_r_rcv(i).i_max_eff());
		(*net_signals)["INV_R_RCV"]["i_nom_eff"].push(pack->inv_r_rcv(i).i_nom_eff());
		(*net_signals)["INV_R_RCV"]["i_limit_inuse"].push(pack->inv_r_rcv(i).i_limit_inuse());
		(*net_signals)["INV_R_RCV"]["i_cmd"].push(pack->inv_r_rcv(i).i_cmd());
		(*net_signals)["INV_R_RCV"]["i_cmd_ramp"].push(pack->inv_r_rcv(i).i_cmd_ramp());
		(*net_signals)["INV_R_RCV"]["i_actual"].push(pack->inv_r_rcv(i).i_actual());
		(*net_signals)["INV_R_RCV"]["i_actual_filt"].push(pack->inv_r_rcv(i).i_actual_filt());
		(*net_signals)["INV_R_RCV"]["iq_actual"].push(pack->inv_r_rcv(i).iq_actual());
		(*net_signals)["INV_R_RCV"]["id_actual"].push(pack->inv_r_rcv(i).id_actual());
		(*net_signals)["INV_R_RCV"]["iq_error"].push(pack->inv_r_rcv(i).iq_error());
		(*net_signals)["INV_R_RCV"]["id_error"].push(pack->inv_r_rcv(i).id_error());
		(*net_signals)["INV_R_RCV"]["i1_actual"].push(pack->inv_r_rcv(i).i1_actual());
		(*net_signals)["INV_R_RCV"]["i2_actual"].push(pack->inv_r_rcv(i).i2_actual());
		(*net_signals)["INV_R_RCV"]["i3_actual"].push(pack->inv_r_rcv(i).i3_actual());
		(*net_signals)["INV_R_RCV"]["i3_adc"].push(pack->inv_r_rcv(i).i3_adc());
		(*net_signals)["INV_R_RCV"]["i2_adc"].push(pack->inv_r_rcv(i).i2_adc());
		(*net_signals)["INV_R_RCV"]["vq"].push(pack->inv_r_rcv(i).vq());
		(*net_signals)["INV_R_RCV"]["vd"].push(pack->inv_r_rcv(i).vd());
		(*net_signals)["INV_R_RCV"]["vout"].push(pack->inv_r_rcv(i).vout());
		(*net_signals)["INV_R_RCV"]["t_motor"].push(pack->inv_r_rcv(i).t_motor());
		(*net_signals)["INV_R_RCV"]["t_igbt"].push(pack->inv_r_rcv(i).t_igbt());
		(*net_signals)["INV_R_RCV"]["t_air"].push(pack->inv_r_rcv(i).t_air());
		(*net_signals)["INV_R_RCV"]["vdc_bus_filt"].push(pack->inv_r_rcv(i).vdc_bus_filt());
		(*net_enums)["INV_R_RCV"]["end_1"].push(pack->inv_r_rcv(i).end_1());
		(*net_enums)["INV_R_RCV"]["din_1"].push(pack->inv_r_rcv(i).din_1());
		(*net_enums)["INV_R_RCV"]["end_2"].push(pack->inv_r_rcv(i).end_2());
		(*net_enums)["INV_R_RCV"]["din_2"].push(pack->inv_r_rcv(i).din_2());
		(*net_enums)["INV_R_RCV"]["run232"].push(pack->inv_r_rcv(i).run232());
		(*net_enums)["INV_R_RCV"]["dout_1"].push(pack->inv_r_rcv(i).dout_1());
		(*net_enums)["INV_R_RCV"]["dout_2"].push(pack->inv_r_rcv(i).dout_2());
		(*net_enums)["INV_R_RCV"]["dout_3"].push(pack->inv_r_rcv(i).dout_3());
		(*net_enums)["INV_R_RCV"]["rdy_btb"].push(pack->inv_r_rcv(i).rdy_btb());
		(*net_enums)["INV_R_RCV"]["i_fault"].push(pack->inv_r_rcv(i).i_fault());
		(*net_enums)["INV_R_RCV"]["dout_4"].push(pack->inv_r_rcv(i).dout_4());
		(*net_signals)["INV_R_RCV"]["i_lim_dig"].push(pack->inv_r_rcv(i).i_lim_dig());
		(*net_signals)["INV_R_RCV"]["i_red_n"].push(pack->inv_r_rcv(i).i_red_n());
		(*net_signals)["INV_R_RCV"]["i_red_td"].push(pack->inv_r_rcv(i).i_red_td());
		(*net_signals)["INV_R_RCV"]["i_red_te"].push(pack->inv_r_rcv(i).i_red_te());
		(*net_signals)["INV_R_RCV"]["i_red_tm"].push(pack->inv_r_rcv(i).i_red_tm());
		(*net_signals)["INV_R_RCV"]["cs_ain_1_format"].push(pack->inv_r_rcv(i).cs_ain_1_format());
		(*net_signals)["INV_R_RCV"]["id_ref"].push(pack->inv_r_rcv(i).id_ref());
		(*net_signals)["INV_R_RCV"]["m_outdig__iq"].push(pack->inv_r_rcv(i).m_outdig__iq());
		(*net_signals)["INV_R_RCV"]["ptr_1_debug"].push(pack->inv_r_rcv(i).ptr_1_debug());
		(*net_signals)["INV_R_RCV"]["ptr_2_debug"].push(pack->inv_r_rcv(i).ptr_2_debug());
		(*net_signals)["INV_R_RCV"]["temp_debug"].push(pack->inv_r_rcv(i).temp_debug());
		(*net_signals)["INV_R_RCV"]["motor_f_n"].push(pack->inv_r_rcv(i).motor_f_n());
		(*net_signals)["INV_R_RCV"]["motor_v_n"].push(pack->inv_r_rcv(i).motor_v_n());
		(*net_signals)["INV_R_RCV"]["t_dc__start"].push(pack->inv_r_rcv(i).t_dc__start());
		(*net_signals)["INV_R_RCV"]["v_dc__start"].push(pack->inv_r_rcv(i).v_dc__start());
		(*net_signals)["INV_R_RCV"]["v_min__start"].push(pack->inv_r_rcv(i).v_min__start());
		(*net_signals)["INV_R_RCV"]["f_min__start"].push(pack->inv_r_rcv(i).f_min__start());
		(*net_signals)["INV_R_RCV"]["v_corner__start"].push(pack->inv_r_rcv(i).v_corner__start());
		(*net_signals)["INV_R_RCV"]["f_corner__start"].push(pack->inv_r_rcv(i).f_corner__start());
		(*net_signals)["INV_R_RCV"]["cos_phi"].push(pack->inv_r_rcv(i).cos_phi());
		(*net_signals)["INV_R_RCV"]["pwm_enum"].push(pack->inv_r_rcv(i).pwm_enum());
		(*net_signals)["INV_R_RCV"]["calib_ref_value"].push(pack->inv_r_rcv(i).calib_ref_value());
		(*net_signals)["INV_R_RCV"]["pid_i__kp__iq"].push(pack->inv_r_rcv(i).pid_i__kp__iq());
		(*net_signals)["INV_R_RCV"]["pid_i__ti__iq"].push(pack->inv_r_rcv(i).pid_i__ti__iq());
		(*net_signals)["INV_R_RCV"]["cutoffdig"].push(pack->inv_r_rcv(i).cutoffdig());
		(*net_signals)["INV_R_RCV"]["i3_offset"].push(pack->inv_r_rcv(i).i3_offset());
		(*net_signals)["INV_R_RCV"]["i_delta_ramp"].push(pack->inv_r_rcv(i).i_delta_ramp());
		(*net_signals)["INV_R_RCV"]["pid_i__tim__iq"].push(pack->inv_r_rcv(i).pid_i__tim__iq());
		(*net_signals)["INV_R_RCV"]["pid_n__kp"].push(pack->inv_r_rcv(i).pid_n__kp());
		(*net_signals)["INV_R_RCV"]["v_ti"].push(pack->inv_r_rcv(i).v_ti());
		(*net_signals)["INV_R_RCV"]["pid_n__td"].push(pack->inv_r_rcv(i).pid_n__td());
		(*net_signals)["INV_R_RCV"]["ain_in_1_offsetval"].push(pack->inv_r_rcv(i).ain_in_1_offsetval());
		(*net_signals)["INV_R_RCV"]["ain_in_2_offsetval"].push(pack->inv_r_rcv(i).ain_in_2_offsetval());
		(*net_signals)["INV_R_RCV"]["dzr_seq"].push(pack->inv_r_rcv(i).dzr_seq());
		(*net_signals)["INV_R_RCV"]["pid_n__tim"].push(pack->inv_r_rcv(i).pid_n__tim());
		(*net_signals)["INV_R_RCV"]["n_lim_plus"].push(pack->inv_r_rcv(i).n_lim_plus());
		(*net_signals)["INV_R_RCV"]["n_lim_minus"].push(pack->inv_r_rcv(i).n_lim_minus());
		(*net_signals)["INV_R_RCV"]["incr_delta"].push(pack->inv_r_rcv(i).incr_delta());
		(*net_signals)["INV_R_RCV"]["motorpos_mech"].push(pack->inv_r_rcv(i).motorpos_mech());
		(*net_signals)["INV_R_RCV"]["motorpos_elec"].push(pack->inv_r_rcv(i).motorpos_elec());
		(*net_signals)["INV_R_RCV"]["fb_offset"].push(pack->inv_r_rcv(i).fb_offset());
		(*net_signals)["INV_R_RCV"]["it_rg_monitor"].push(pack->inv_r_rcv(i).it_rg_monitor());
		(*net_signals)["INV_R_RCV"]["motor_pole"].push(pack->inv_r_rcv(i).motor_pole());
		(*net_signals)["INV_R_RCV"]["ain_in_1_cutoff"].push(pack->inv_r_rcv(i).ain_in_1_cutoff());
		(*net_enums)["INV_R_RCV"]["km_rsvd_0"].push(pack->inv_r_rcv(i).km_rsvd_0());
		(*net_enums)["INV_R_RCV"]["ena82"].push(pack->inv_r_rcv(i).ena82());
		(*net_signals)["INV_R_RCV"]["ain_in_2_cutoff"].push(pack->inv_r_rcv(i).ain_in_2_cutoff());
		(*net_signals)["INV_R_RCV"]["i_limit_inuse_ramp"].push(pack->inv_r_rcv(i).i_limit_inuse_ramp());
		(*net_signals)["INV_R_RCV"]["n_nom"].push(pack->inv_r_rcv(i).n_nom());
		(*net_signals)["INV_R_RCV"]["pid_n__kacc"].push(pack->inv_r_rcv(i).pid_n__kacc());
		(*net_signals)["INV_R_RCV"]["rotor_signals"].push(pack->inv_r_rcv(i).rotor_signals());
		(*net_signals)["INV_R_RCV"]["speed_filter"].push(pack->inv_r_rcv(i).speed_filter());
		(*net_signals)["INV_R_RCV"]["ain_in_1_filter"].push(pack->inv_r_rcv(i).ain_in_1_filter());
		(*net_signals)["INV_R_RCV"]["ixt_monitor"].push(pack->inv_r_rcv(i).ixt_monitor());
		(*net_enums)["INV_R_RCV"]["ecode_bit0_firsterrordtcd99"].push(pack->inv_r_rcv(i).ecode_bit0_firsterrordtcd99());
		(*net_signals)["INV_R_RCV"]["device_mains"].push(pack->inv_r_rcv(i).device_mains());
		(*net_signals)["INV_R_RCV"]["regen_p"].push(pack->inv_r_rcv(i).regen_p());
		(*net_signals)["INV_R_RCV"]["can_id_rx"].push(pack->inv_r_rcv(i).can_id_rx());
		(*net_signals)["INV_R_RCV"]["can_id_tx"].push(pack->inv_r_rcv(i).can_id_tx());
		(*net_signals)["INV_R_RCV"]["pos_kp"].push(pack->inv_r_rcv(i).pos_kp());
		(*net_signals)["INV_R_RCV"]["pos_ti"].push(pack->inv_r_rcv(i).pos_ti());
		(*net_signals)["INV_R_RCV"]["pos_td"].push(pack->inv_r_rcv(i).pos_td());
		(*net_signals)["INV_R_RCV"]["pos_actual"].push(pack->inv_r_rcv(i).pos_actual());
		(*net_signals)["INV_R_RCV"]["pos_dest"].push(pack->inv_r_rcv(i).pos_dest());
		(*net_signals)["INV_R_RCV"]["pos_actual_2"].push(pack->inv_r_rcv(i).pos_actual_2());
		(*net_signals)["INV_R_RCV"]["pos_error"].push(pack->inv_r_rcv(i).pos_error());
		(*net_signals)["INV_R_RCV"]["pos_tim"].push(pack->inv_r_rcv(i).pos_tim());
		(*net_signals)["INV_R_RCV"]["pos_offsref"].push(pack->inv_r_rcv(i).pos_offsref());
		(*net_enums)["INV_R_RCV"]["can_nbt"].push(pack->inv_r_rcv(i).can_nbt());
		inverters_inv_r_rcv_can_nbt_enum_to_string((inverters_inv_r_rcv_can_nbt)pack->inv_r_rcv(i).can_nbt(), buffer);
		(*net_strings)["INV_R_RCV"]["can_nbt"].push(buffer);
		(*net_signals)["INV_R_RCV"]["pos_zero_capture"].push(pack->inv_r_rcv(i).pos_zero_capture());
		(*net_signals)["INV_R_RCV"]["ref_reso_edge"].push(pack->inv_r_rcv(i).ref_reso_edge());
		(*net_signals)["INV_R_RCV"]["speed_1"].push(pack->inv_r_rcv(i).speed_1());
		(*net_signals)["INV_R_RCV"]["speed_2"].push(pack->inv_r_rcv(i).speed_2());
		(*net_signals)["INV_R_RCV"]["pos_tol_win"].push(pack->inv_r_rcv(i).pos_tol_win());
		(*net_signals)["INV_R_RCV"]["pos_preset_val"].push(pack->inv_r_rcv(i).pos_preset_val());
		(*net_signals)["INV_R_RCV"]["pos_zero_offset"].push(pack->inv_r_rcv(i).pos_zero_offset());
		(*net_signals)["INV_R_RCV"]["pos_nd_scale"].push(pack->inv_r_rcv(i).pos_nd_scale());
		(*net_signals)["INV_R_RCV"]["pos_nd_offset"].push(pack->inv_r_rcv(i).pos_nd_offset());
		(*net_signals)["INV_R_RCV"]["fb2_scale_ext"].push(pack->inv_r_rcv(i).fb2_scale_ext());
		(*net_signals)["INV_R_RCV"]["pos_offset_slack"].push(pack->inv_r_rcv(i).pos_offset_slack());
		(*net_signals)["INV_R_RCV"]["pos_diff_slack"].push(pack->inv_r_rcv(i).pos_diff_slack());
		(*net_signals)["INV_R_RCV"]["fun_para_read"].push(pack->inv_r_rcv(i).fun_para_read());
		(*net_signals)["INV_R_RCV"]["fun_para_write"].push(pack->inv_r_rcv(i).fun_para_write());
		(*net_signals)["INV_R_RCV"]["fun_special"].push(pack->inv_r_rcv(i).fun_special());
		(*net_signals)["INV_R_RCV"]["can_id_2_rx"].push(pack->inv_r_rcv(i).can_id_2_rx());
		(*net_signals)["INV_R_RCV"]["can_id_2_tx"].push(pack->inv_r_rcv(i).can_id_2_tx());
		(*net_signals)["INV_R_RCV"]["v_ref"].push(pack->inv_r_rcv(i).v_ref());
		(*net_signals)["INV_R_RCV"]["v_kp"].push(pack->inv_r_rcv(i).v_kp());
		(*net_signals)["INV_R_RCV"]["pid_n__ti"].push(pack->inv_r_rcv(i).pid_n__ti());
		(*net_signals)["INV_R_RCV"]["clear_errors"].push(pack->inv_r_rcv(i).clear_errors());
		(*net_signals)["INV_R_RCV"]["pos_cmd"].push(pack->inv_r_rcv(i).pos_cmd());
		(*net_signals)["INV_R_RCV"]["can_error_busoff"].push(pack->inv_r_rcv(i).can_error_busoff());
		(*net_signals)["INV_R_RCV"]["can_error_writetime"].push(pack->inv_r_rcv(i).can_error_writetime());
		(*net_enums)["INV_R_RCV"]["ecode_bit0_firsterrordtcd148"].push(pack->inv_r_rcv(i).ecode_bit0_firsterrordtcd148());
		(*net_signals)["INV_R_RCV"]["can_error_no_ack"].push(pack->inv_r_rcv(i).can_error_no_ack());
		(*net_signals)["INV_R_RCV"]["can_error_crc_check150"].push(pack->inv_r_rcv(i).can_error_crc_check150());
		(*net_signals)["INV_R_RCV"]["can_error_crc_check151"].push(pack->inv_r_rcv(i).can_error_crc_check151());
		(*net_signals)["INV_R_RCV"]["info_timer_diff"].push(pack->inv_r_rcv(i).info_timer_diff());
		(*net_signals)["INV_R_RCV"]["ballastcount"].push(pack->inv_r_rcv(i).ballastcount());
		(*net_signals)["INV_R_RCV"]["m_temp"].push(pack->inv_r_rcv(i).m_temp());
		(*net_enums)["INV_R_RCV"]["mo_feedback_1"].push(pack->inv_r_rcv(i).mo_feedback_1());
		inverters_inv_r_rcv_mo_feedback_1_enum_to_string((inverters_inv_r_rcv_mo_feedback_1)pack->inv_r_rcv(i).mo_feedback_1(), buffer);
		(*net_strings)["INV_R_RCV"]["mo_feedback_1"].push(buffer);
		(*net_signals)["INV_R_RCV"]["dc_bus_min_lim"].push(pack->inv_r_rcv(i).dc_bus_min_lim());
		(*net_signals)["INV_R_RCV"]["fb_incr_mot"].push(pack->inv_r_rcv(i).fb_incr_mot());
		(*net_signals)["INV_R_RCV"]["fb_pole"].push(pack->inv_r_rcv(i).fb_pole());
		(*net_signals)["INV_R_RCV"]["logic_freq"].push(pack->inv_r_rcv(i).logic_freq());
		(*net_signals)["INV_R_RCV"]["pwm_1"].push(pack->inv_r_rcv(i).pwm_1());
		(*net_signals)["INV_R_RCV"]["pwm_2"].push(pack->inv_r_rcv(i).pwm_2());
		(*net_signals)["INV_R_RCV"]["pwm_3"].push(pack->inv_r_rcv(i).pwm_3());
		(*net_signals)["INV_R_RCV"]["timer_delta"].push(pack->inv_r_rcv(i).timer_delta());
		(*net_signals)["INV_R_RCV"]["motor_lsq"].push(pack->inv_r_rcv(i).motor_lsq());
		(*net_signals)["INV_R_RCV"]["motor_lsd"].push(pack->inv_r_rcv(i).motor_lsd());
		(*net_signals)["INV_R_RCV"]["id_nom"].push(pack->inv_r_rcv(i).id_nom());
		(*net_signals)["INV_R_RCV"]["motor_lm"].push(pack->inv_r_rcv(i).motor_lm());
		(*net_signals)["INV_R_RCV"]["motor_rr"].push(pack->inv_r_rcv(i).motor_rr());
		(*net_signals)["INV_R_RCV"]["id_min"].push(pack->inv_r_rcv(i).id_min());
		(*net_signals)["INV_R_RCV"]["motor_tr"].push(pack->inv_r_rcv(i).motor_tr());
		(*net_signals)["INV_R_RCV"]["motor_rs"].push(pack->inv_r_rcv(i).motor_rs());
		(*net_signals)["INV_R_RCV"]["motor_ts"].push(pack->inv_r_rcv(i).motor_ts());
		(*net_enums)["INV_R_RCV"]["def_end_1"].push(pack->inv_r_rcv(i).def_end_1());
		inverters_inv_r_rcv_def_end_1_enum_to_string((inverters_inv_r_rcv_def_end_1)pack->inv_r_rcv(i).def_end_1(), buffer);
		(*net_strings)["INV_R_RCV"]["def_end_1"].push(buffer);
		(*net_enums)["INV_R_RCV"]["def_end_2"].push(pack->inv_r_rcv(i).def_end_2());
		inverters_inv_r_rcv_def_end_2_enum_to_string((inverters_inv_r_rcv_def_end_2)pack->inv_r_rcv(i).def_end_2(), buffer);
		(*net_strings)["INV_R_RCV"]["def_end_2"].push(buffer);
		(*net_enums)["INV_R_RCV"]["def_din_1"].push(pack->inv_r_rcv(i).def_din_1());
		inverters_inv_r_rcv_def_din_1_enum_to_string((inverters_inv_r_rcv_def_din_1)pack->inv_r_rcv(i).def_din_1(), buffer);
		(*net_strings)["INV_R_RCV"]["def_din_1"].push(buffer);
		(*net_enums)["INV_R_RCV"]["def_din_2"].push(pack->inv_r_rcv(i).def_din_2());
		inverters_inv_r_rcv_def_din_2_enum_to_string((inverters_inv_r_rcv_def_din_2)pack->inv_r_rcv(i).def_din_2(), buffer);
		(*net_strings)["INV_R_RCV"]["def_din_2"].push(buffer);
		(*net_signals)["INV_R_RCV"]["operand194"].push(pack->inv_r_rcv(i).operand194());
		(*net_signals)["INV_R_RCV"]["i_max_inuse"].push(pack->inv_r_rcv(i).i_max_inuse());
		(*net_enums)["INV_R_RCV"]["signal_go"].push(pack->inv_r_rcv(i).signal_go());
		(*net_enums)["INV_R_RCV"]["signal_brake"].push(pack->inv_r_rcv(i).signal_brake());
		(*net_enums)["INV_R_RCV"]["signal_icns"].push(pack->inv_r_rcv(i).signal_icns());
		(*net_enums)["INV_R_RCV"]["signal_lessn0"].push(pack->inv_r_rcv(i).signal_lessn0());
		(*net_enums)["INV_R_RCV"]["signal_postolerance"].push(pack->inv_r_rcv(i).signal_postolerance());
		(*net_signals)["INV_R_RCV"]["ain_in_1_scaled251"].push(pack->inv_r_rcv(i).ain_in_1_scaled251());
		(*net_signals)["INV_R_RCV"]["ain_in_2_scaled252"].push(pack->inv_r_rcv(i).ain_in_2_scaled252());
		(*net_signals)["INV_R_RCV"]["operand195"].push(pack->inv_r_rcv(i).operand195());
		(*net_signals)["INV_R_RCV"]["operand218"].push(pack->inv_r_rcv(i).operand218());
		(*net_signals)["INV_R_RCV"]["operand219"].push(pack->inv_r_rcv(i).operand219());
		(*net_signals)["INV_R_RCV"]["pid_i__xkp__iq"].push(pack->inv_r_rcv(i).pid_i__xkp__iq());
		(*net_signals)["INV_R_RCV"]["bat_opr_limit__mot"].push(pack->inv_r_rcv(i).bat_opr_limit__mot());
		(*net_signals)["INV_R_RCV"]["pid_i__kf__iq"].push(pack->inv_r_rcv(i).pid_i__kf__iq());
		(*net_enums)["INV_R_RCV"]["dc_current_sens_ena_set"].push(pack->inv_r_rcv(i).dc_current_sens_ena_set());
		(*net_enums)["INV_R_RCV"]["cmc__bit0__dc_current_sens_ena"].push(pack->inv_r_rcv(i).cmc__bit0__dc_current_sens_ena());
		(*net_signals)["INV_R_RCV"]["n_rpm_maxint"].push(pack->inv_r_rcv(i).n_rpm_maxint());
		(*net_signals)["INV_R_RCV"]["var_1"].push(pack->inv_r_rcv(i).var_1());
		(*net_signals)["INV_R_RCV"]["can_rxtimeout"].push(pack->inv_r_rcv(i).can_rxtimeout());
		(*net_signals)["INV_R_RCV"]["var_2"].push(pack->inv_r_rcv(i).var_2());
		(*net_signals)["INV_R_RCV"]["var_3"].push(pack->inv_r_rcv(i).var_3());
		(*net_signals)["INV_R_RCV"]["var_4"].push(pack->inv_r_rcv(i).var_4());
		(*net_signals)["INV_R_RCV"]["dup__bit7_0__dac_source_channel"].push(pack->inv_r_rcv(i).dup__bit7_0__dac_source_channel());
		(*net_enums)["INV_R_RCV"]["fb_lossofsignal"].push(pack->inv_r_rcv(i).fb_lossofsignal());
		(*net_enums)["INV_R_RCV"]["no_hw_fault"].push(pack->inv_r_rcv(i).no_hw_fault());
		(*net_signals)["INV_R_RCV"]["t_peak"].push(pack->inv_r_rcv(i).t_peak());
		(*net_signals)["INV_R_RCV"]["brake_delay"].push(pack->inv_r_rcv(i).brake_delay());
		(*net_signals)["INV_R_RCV"]["power"].push(pack->inv_r_rcv(i).power());
		(*net_signals)["INV_R_RCV"]["work"].push(pack->inv_r_rcv(i).work());
		(*net_signals)["INV_R_RCV"]["extra__start"].push(pack->inv_r_rcv(i).extra__start());
		(*net_signals)["INV_R_RCV"]["capture_channel"].push(pack->inv_r_rcv(i).capture_channel());
		(*net_signals)["INV_R_RCV"]["trig_level"].push(pack->inv_r_rcv(i).trig_level());
		(*net_signals)["INV_R_RCV"]["trig_edge"].push(pack->inv_r_rcv(i).trig_edge());
		(*net_signals)["INV_R_RCV"]["trig_source"].push(pack->inv_r_rcv(i).trig_source());
		(*net_signals)["INV_R_RCV"]["oszi_source"].push(pack->inv_r_rcv(i).oszi_source());
		(*net_signals)["INV_R_RCV"]["oszi_skip"].push(pack->inv_r_rcv(i).oszi_skip());
		(*net_signals)["INV_R_RCV"]["oszi_run_cmd"].push(pack->inv_r_rcv(i).oszi_run_cmd());
		(*net_signals)["INV_R_RCV"]["oszi_read_cmd"].push(pack->inv_r_rcv(i).oszi_read_cmd());
		(*net_signals)["INV_R_RCV"]["pos_ref_start"].push(pack->inv_r_rcv(i).pos_ref_start());
		(*net_signals)["INV_R_RCV"]["vdc_bus"].push(pack->inv_r_rcv(i).vdc_bus());
		(*net_signals)["INV_R_RCV"]["m_cmd_ramp"].push(pack->inv_r_rcv(i).m_cmd_ramp());
		(*net_enums)["INV_R_RCV"]["lmt_1"].push(pack->inv_r_rcv(i).lmt_1());
		(*net_enums)["INV_R_RCV"]["out_1"].push(pack->inv_r_rcv(i).out_1());
		(*net_signals)["INV_R_RCV"]["subversion_nr"].push(pack->inv_r_rcv(i).subversion_nr());
		(*net_enums)["INV_R_RCV"]["err_powerfault"].push(pack->inv_r_rcv(i).err_powerfault());
		(*net_enums)["INV_R_RCV"]["lmt_active_2"].push(pack->inv_r_rcv(i).lmt_active_2());
		(*net_enums)["INV_R_RCV"]["km_speed_0"].push(pack->inv_r_rcv(i).km_speed_0());
		(*net_enums)["INV_R_RCV"]["ncr082"].push(pack->inv_r_rcv(i).ncr082());
		(*net_enums)["INV_R_RCV"]["ecode_bit1__hw1_state99"].push(pack->inv_r_rcv(i).ecode_bit1__hw1_state99());
		(*net_enums)["INV_R_RCV"]["ecode_bit1__hw1_state148"].push(pack->inv_r_rcv(i).ecode_bit1__hw1_state148());
		(*net_enums)["INV_R_RCV"]["dc_i_sensena_set"].push(pack->inv_r_rcv(i).dc_i_sensena_set());
		(*net_enums)["INV_R_RCV"]["cmc__bit1__idc_limit_ena"].push(pack->inv_r_rcv(i).cmc__bit1__idc_limit_ena());
		(*net_enums)["INV_R_RCV"]["lmt_2"].push(pack->inv_r_rcv(i).lmt_2());
		(*net_enums)["INV_R_RCV"]["out_2"].push(pack->inv_r_rcv(i).out_2());
		(*net_enums)["INV_R_RCV"]["err_rfe_fault"].push(pack->inv_r_rcv(i).err_rfe_fault());
		(*net_enums)["INV_R_RCV"]["in_active_2"].push(pack->inv_r_rcv(i).in_active_2());
		(*net_signals)["INV_R_RCV"]["cs_ain_2_format"].push(pack->inv_r_rcv(i).cs_ain_2_format());
		(*net_enums)["INV_R_RCV"]["km_frg_off"].push(pack->inv_r_rcv(i).km_frg_off());
		(*net_enums)["INV_R_RCV"]["lim_plus82"].push(pack->inv_r_rcv(i).lim_plus82());
		(*net_enums)["INV_R_RCV"]["ecode_bit2__hw0_state99"].push(pack->inv_r_rcv(i).ecode_bit2__hw0_state99());
		(*net_enums)["INV_R_RCV"]["ecode_bit2__hw0_state148"].push(pack->inv_r_rcv(i).ecode_bit2__hw0_state148());
		(*net_signals)["INV_R_RCV"]["op_mode_quadrant"].push(pack->inv_r_rcv(i).op_mode_quadrant());
		(*net_enums)["INV_R_RCV"]["cmc__bit2__pdc_limit_usage"].push(pack->inv_r_rcv(i).cmc__bit2__pdc_limit_usage());
		(*net_enums)["INV_R_RCV"]["in_2"].push(pack->inv_r_rcv(i).in_2());
		(*net_enums)["INV_R_RCV"]["rdy155"].push(pack->inv_r_rcv(i).rdy155());
		(*net_enums)["INV_R_RCV"]["err_bustimeout"].push(pack->inv_r_rcv(i).err_bustimeout());
		(*net_enums)["INV_R_RCV"]["in_active_1"].push(pack->inv_r_rcv(i).in_active_1());
		(*net_enums)["INV_R_RCV"]["km_cal_off"].push(pack->inv_r_rcv(i).km_cal_off());
		(*net_enums)["INV_R_RCV"]["lim_minus82"].push(pack->inv_r_rcv(i).lim_minus82());
		(*net_enums)["INV_R_RCV"]["ecode_bit3__free99"].push(pack->inv_r_rcv(i).ecode_bit3__free99());
		(*net_enums)["INV_R_RCV"]["ecode_bit3__free148"].push(pack->inv_r_rcv(i).ecode_bit3__free148());
		(*net_enums)["INV_R_RCV"]["cmc__bit3__torqueval_init_ena"].push(pack->inv_r_rcv(i).cmc__bit3__torqueval_init_ena());
		(*net_enums)["INV_R_RCV"]["in_1"].push(pack->inv_r_rcv(i).in_1());
		(*net_enums)["INV_R_RCV"]["go155"].push(pack->inv_r_rcv(i).go155());
		(*net_enums)["INV_R_RCV"]["err_feedbacksignal"].push(pack->inv_r_rcv(i).err_feedbacksignal());
		(*net_enums)["INV_R_RCV"]["frgrun"].push(pack->inv_r_rcv(i).frgrun());
		(*net_enums)["INV_R_RCV"]["cs_ain_1_mode"].push(pack->inv_r_rcv(i).cs_ain_1_mode());
		inverters_inv_r_rcv_cs_ain_1_mode_enum_to_string((inverters_inv_r_rcv_cs_ain_1_mode)pack->inv_r_rcv(i).cs_ain_1_mode(), buffer);
		(*net_strings)["INV_R_RCV"]["cs_ain_1_mode"].push(buffer);
		(*net_enums)["INV_R_RCV"]["km_tx_tog_stat"].push(pack->inv_r_rcv(i).km_tx_tog_stat());
		(*net_enums)["INV_R_RCV"]["ok82"].push(pack->inv_r_rcv(i).ok82());
		(*net_enums)["INV_R_RCV"]["ecode_bit4__rdy399"].push(pack->inv_r_rcv(i).ecode_bit4__rdy399());
		(*net_enums)["INV_R_RCV"]["ecode_bit4__rdy3148"].push(pack->inv_r_rcv(i).ecode_bit4__rdy3148());
		(*net_enums)["INV_R_RCV"]["compare_var194"].push(pack->inv_r_rcv(i).compare_var194());
		inverters_inv_r_rcv_compare_var194_enum_to_string((inverters_inv_r_rcv_compare_var194)pack->inv_r_rcv(i).compare_var194(), buffer);
		(*net_strings)["INV_R_RCV"]["compare_var194"].push(buffer);
		(*net_enums)["INV_R_RCV"]["compare_var195"].push(pack->inv_r_rcv(i).compare_var195());
		inverters_inv_r_rcv_compare_var195_enum_to_string((inverters_inv_r_rcv_compare_var195)pack->inv_r_rcv(i).compare_var195(), buffer);
		(*net_strings)["INV_R_RCV"]["compare_var195"].push(buffer);
		(*net_enums)["INV_R_RCV"]["compare_var218"].push(pack->inv_r_rcv(i).compare_var218());
		inverters_inv_r_rcv_compare_var218_enum_to_string((inverters_inv_r_rcv_compare_var218)pack->inv_r_rcv(i).compare_var218(), buffer);
		(*net_strings)["INV_R_RCV"]["compare_var218"].push(buffer);
		(*net_enums)["INV_R_RCV"]["compare_var219"].push(pack->inv_r_rcv(i).compare_var219());
		inverters_inv_r_rcv_compare_var219_enum_to_string((inverters_inv_r_rcv_compare_var219)pack->inv_r_rcv(i).compare_var219(), buffer);
		(*net_strings)["INV_R_RCV"]["compare_var219"].push(buffer);
		(*net_enums)["INV_R_RCV"]["cmc__bit4__dig_m_rcpramp_ena"].push(pack->inv_r_rcv(i).cmc__bit4__dig_m_rcpramp_ena());
		(*net_enums)["INV_R_RCV"]["run152"].push(pack->inv_r_rcv(i).run152());
		(*net_enums)["INV_R_RCV"]["out_3"].push(pack->inv_r_rcv(i).out_3());
		(*net_enums)["INV_R_RCV"]["err_powervoltage_low"].push(pack->inv_r_rcv(i).err_powervoltage_low());
		(*net_enums)["INV_R_RCV"]["rfe216"].push(pack->inv_r_rcv(i).rfe216());
		(*net_enums)["INV_R_RCV"]["km_i_limit"].push(pack->inv_r_rcv(i).km_i_limit());
		(*net_enums)["INV_R_RCV"]["icns82"].push(pack->inv_r_rcv(i).icns82());
		(*net_enums)["INV_R_RCV"]["ecode_bit5__n_fail99"].push(pack->inv_r_rcv(i).ecode_bit5__n_fail99());
		(*net_enums)["INV_R_RCV"]["ecode_bit5__n_fail148"].push(pack->inv_r_rcv(i).ecode_bit5__n_fail148());
		(*net_enums)["INV_R_RCV"]["mo_feedback_2"].push(pack->inv_r_rcv(i).mo_feedback_2());
		inverters_inv_r_rcv_mo_feedback_2_enum_to_string((inverters_inv_r_rcv_mo_feedback_2)pack->inv_r_rcv(i).mo_feedback_2(), buffer);
		(*net_strings)["INV_R_RCV"]["mo_feedback_2"].push(buffer);
		(*net_enums)["INV_R_RCV"]["recup_is_acv"].push(pack->inv_r_rcv(i).recup_is_acv());
		(*net_enums)["INV_R_RCV"]["cmc__bit5__reset_nramp_atnzero"].push(pack->inv_r_rcv(i).cmc__bit5__reset_nramp_atnzero());
		(*net_enums)["INV_R_RCV"]["rfe152"].push(pack->inv_r_rcv(i).rfe152());
		(*net_enums)["INV_R_RCV"]["out_4"].push(pack->inv_r_rcv(i).out_4());
		(*net_enums)["INV_R_RCV"]["err_motortemp"].push(pack->inv_r_rcv(i).err_motortemp());
		(*net_enums)["INV_R_RCV"]["km_n_clip"].push(pack->inv_r_rcv(i).km_n_clip());
		(*net_enums)["INV_R_RCV"]["tnlim82"].push(pack->inv_r_rcv(i).tnlim82());
		(*net_enums)["INV_R_RCV"]["ecode_bit6__flths99"].push(pack->inv_r_rcv(i).ecode_bit6__flths99());
		(*net_enums)["INV_R_RCV"]["ecode_bit6__flths148"].push(pack->inv_r_rcv(i).ecode_bit6__flths148());
		(*net_enums)["INV_R_RCV"]["i_dc_limit_is_acv"].push(pack->inv_r_rcv(i).i_dc_limit_is_acv());
		(*net_enums)["INV_R_RCV"]["cmc__bit6__torquetimeout_100ms_e"].push(pack->inv_r_rcv(i).cmc__bit6__torquetimeout_100ms_e());
		(*net_signals)["INV_R_RCV"]["rsvd"].push(pack->inv_r_rcv(i).rsvd());
		(*net_enums)["INV_R_RCV"]["rsvd1"].push(pack->inv_r_rcv(i).rsvd1());
		(*net_enums)["INV_R_RCV"]["err_devicetemp"].push(pack->inv_r_rcv(i).err_devicetemp());
		(*net_enums)["INV_R_RCV"]["cs_oora1"].push(pack->inv_r_rcv(i).cs_oora1());
		(*net_enums)["INV_R_RCV"]["km_mix_ana_on"].push(pack->inv_r_rcv(i).km_mix_ana_on());
		(*net_enums)["INV_R_RCV"]["pn82"].push(pack->inv_r_rcv(i).pn82());
		(*net_enums)["INV_R_RCV"]["ecode_bit7__fltls99"].push(pack->inv_r_rcv(i).ecode_bit7__fltls99());
		(*net_enums)["INV_R_RCV"]["ecode_bit7__fltls148"].push(pack->inv_r_rcv(i).ecode_bit7__fltls148());
		(*net_signals)["INV_R_RCV"]["cmc__bit13_7__free"].push(pack->inv_r_rcv(i).cmc__bit13_7__free());
		(*net_enums)["INV_R_RCV"]["brk1155"].push(pack->inv_r_rcv(i).brk1155());
		(*net_enums)["INV_R_RCV"]["err_overvoltage"].push(pack->inv_r_rcv(i).err_overvoltage());
		(*net_enums)["INV_R_RCV"]["d_out_1_on"].push(pack->inv_r_rcv(i).d_out_1_on());
		(*net_enums)["INV_R_RCV"]["cs_ain_2_mode"].push(pack->inv_r_rcv(i).cs_ain_2_mode());
		inverters_inv_r_rcv_cs_ain_2_mode_enum_to_string((inverters_inv_r_rcv_cs_ain_2_mode)pack->inv_r_rcv(i).cs_ain_2_mode(), buffer);
		(*net_strings)["INV_R_RCV"]["cs_ain_2_mode"].push(buffer);
		(*net_enums)["INV_R_RCV"]["km_allow_sync"].push(pack->inv_r_rcv(i).km_allow_sync());
		(*net_enums)["INV_R_RCV"]["ni82"].push(pack->inv_r_rcv(i).ni82());
		(*net_signals)["INV_R_RCV"]["ain_in_2_filter"].push(pack->inv_r_rcv(i).ain_in_2_filter());
		(*net_enums)["INV_R_RCV"]["ecode_bit8__fail_idc99"].push(pack->inv_r_rcv(i).ecode_bit8__fail_idc99());
		(*net_enums)["INV_R_RCV"]["ecode_bit8__fail_idc148"].push(pack->inv_r_rcv(i).ecode_bit8__fail_idc148());
		(*net_enums)["INV_R_RCV"]["mo_sc1_reso"].push(pack->inv_r_rcv(i).mo_sc1_reso());
		inverters_inv_r_rcv_mo_sc1_reso_enum_to_string((inverters_inv_r_rcv_mo_sc1_reso)pack->inv_r_rcv(i).mo_sc1_reso(), buffer);
		(*net_strings)["INV_R_RCV"]["mo_sc1_reso"].push(buffer);
		(*net_enums)["INV_R_RCV"]["source_id194"].push(pack->inv_r_rcv(i).source_id194());
		inverters_inv_r_rcv_source_id194_enum_to_string((inverters_inv_r_rcv_source_id194)pack->inv_r_rcv(i).source_id194(), buffer);
		(*net_strings)["INV_R_RCV"]["source_id194"].push(buffer);
		(*net_enums)["INV_R_RCV"]["source_id195"].push(pack->inv_r_rcv(i).source_id195());
		inverters_inv_r_rcv_source_id195_enum_to_string((inverters_inv_r_rcv_source_id195)pack->inv_r_rcv(i).source_id195(), buffer);
		(*net_strings)["INV_R_RCV"]["source_id195"].push(buffer);
		(*net_enums)["INV_R_RCV"]["source_id218"].push(pack->inv_r_rcv(i).source_id218());
		inverters_inv_r_rcv_source_id218_enum_to_string((inverters_inv_r_rcv_source_id218)pack->inv_r_rcv(i).source_id218(), buffer);
		(*net_strings)["INV_R_RCV"]["source_id218"].push(buffer);
		(*net_enums)["INV_R_RCV"]["source_id219"].push(pack->inv_r_rcv(i).source_id219());
		inverters_inv_r_rcv_source_id219_enum_to_string((inverters_inv_r_rcv_source_id219)pack->inv_r_rcv(i).source_id219(), buffer);
		(*net_strings)["INV_R_RCV"]["source_id219"].push(buffer);
		(*net_enums)["INV_R_RCV"]["dup__bit8__can_extended_0"].push(pack->inv_r_rcv(i).dup__bit8__can_extended_0());
		(*net_enums)["INV_R_RCV"]["err_ipeak"].push(pack->inv_r_rcv(i).err_ipeak());
		(*net_enums)["INV_R_RCV"]["d_out_2_on"].push(pack->inv_r_rcv(i).d_out_2_on());
		(*net_enums)["INV_R_RCV"]["km_handwheel"].push(pack->inv_r_rcv(i).km_handwheel());
		(*net_enums)["INV_R_RCV"]["_n082"].push(pack->inv_r_rcv(i)._n082());
		(*net_enums)["INV_R_RCV"]["ecode_bit9__fail_i99"].push(pack->inv_r_rcv(i).ecode_bit9__fail_i99());
		(*net_enums)["INV_R_RCV"]["ecode_bit9__fail_i148"].push(pack->inv_r_rcv(i).ecode_bit9__fail_i148());
		(*net_enums)["INV_R_RCV"]["dup__bit9__generator"].push(pack->inv_r_rcv(i).dup__bit9__generator());
		(*net_enums)["INV_R_RCV"]["err_raceaway"].push(pack->inv_r_rcv(i).err_raceaway());
		(*net_enums)["INV_R_RCV"]["btbrdy"].push(pack->inv_r_rcv(i).btbrdy());
		(*net_enums)["INV_R_RCV"]["km_phasing_extend"].push(pack->inv_r_rcv(i).km_phasing_extend());
		(*net_enums)["INV_R_RCV"]["rsw82"].push(pack->inv_r_rcv(i).rsw82());
		(*net_enums)["INV_R_RCV"]["ecode_bit10__vccm99"].push(pack->inv_r_rcv(i).ecode_bit10__vccm99());
		(*net_enums)["INV_R_RCV"]["ecode_bit10__vccm148"].push(pack->inv_r_rcv(i).ecode_bit10__vccm148());
		(*net_enums)["INV_R_RCV"]["dup__bit10__park_rms"].push(pack->inv_r_rcv(i).dup__bit10__park_rms());
		(*net_enums)["INV_R_RCV"]["err_user"].push(pack->inv_r_rcv(i).err_user());
		(*net_enums)["INV_R_RCV"]["go216"].push(pack->inv_r_rcv(i).go216());
		(*net_enums)["INV_R_RCV"]["cs_oora2"].push(pack->inv_r_rcv(i).cs_oora2());
		(*net_enums)["INV_R_RCV"]["km_rsvd_11"].push(pack->inv_r_rcv(i).km_rsvd_11());
		(*net_enums)["INV_R_RCV"]["cal082"].push(pack->inv_r_rcv(i).cal082());
		(*net_enums)["INV_R_RCV"]["ecode_bit11__15m_minus99"].push(pack->inv_r_rcv(i).ecode_bit11__15m_minus99());
		(*net_enums)["INV_R_RCV"]["ecode_bit11__15m_minus148"].push(pack->inv_r_rcv(i).ecode_bit11__15m_minus148());
		(*net_enums)["INV_R_RCV"]["mo_sc1_comp"].push(pack->inv_r_rcv(i).mo_sc1_comp());
		(*net_enums)["INV_R_RCV"]["dup__bit11__dcbus_volts"].push(pack->inv_r_rcv(i).dup__bit11__dcbus_volts());
		(*net_signals)["INV_R_RCV"]["test"].push(pack->inv_r_rcv(i).test());
		(*net_enums)["INV_R_RCV"]["d_out_3_on"].push(pack->inv_r_rcv(i).d_out_3_on());
		(*net_enums)["INV_R_RCV"]["cs_cmd_type"].push(pack->inv_r_rcv(i).cs_cmd_type());
		inverters_inv_r_rcv_cs_cmd_type_enum_to_string((inverters_inv_r_rcv_cs_cmd_type)pack->inv_r_rcv(i).cs_cmd_type(), buffer);
		(*net_strings)["INV_R_RCV"]["cs_cmd_type"].push(buffer);
		(*net_enums)["INV_R_RCV"]["km_rsvd_12"].push(pack->inv_r_rcv(i).km_rsvd_12());
		(*net_enums)["INV_R_RCV"]["cal82"].push(pack->inv_r_rcv(i).cal82());
		(*net_enums)["INV_R_RCV"]["ecode_bit12__15m_plus99"].push(pack->inv_r_rcv(i).ecode_bit12__15m_plus99());
		(*net_enums)["INV_R_RCV"]["ecode_bit12__15m_plus148"].push(pack->inv_r_rcv(i).ecode_bit12__15m_plus148());
		(*net_enums)["INV_R_RCV"]["mo_sc2_reso"].push(pack->inv_r_rcv(i).mo_sc2_reso());
		inverters_inv_r_rcv_mo_sc2_reso_enum_to_string((inverters_inv_r_rcv_mo_sc2_reso)pack->inv_r_rcv(i).mo_sc2_reso(), buffer);
		(*net_strings)["INV_R_RCV"]["mo_sc2_reso"].push(buffer);
		(*net_enums)["INV_R_RCV"]["dup__bit12__boat_pedal"].push(pack->inv_r_rcv(i).dup__bit12__boat_pedal());
		(*net_enums)["INV_R_RCV"]["d_out_4_on"].push(pack->inv_r_rcv(i).d_out_4_on());
		(*net_enums)["INV_R_RCV"]["km_rsvd_13"].push(pack->inv_r_rcv(i).km_rsvd_13());
		(*net_enums)["INV_R_RCV"]["tol82"].push(pack->inv_r_rcv(i).tol82());
		(*net_enums)["INV_R_RCV"]["ecode_bit13__18m_plus99"].push(pack->inv_r_rcv(i).ecode_bit13__18m_plus99());
		(*net_enums)["INV_R_RCV"]["ecode_bit13__18m_plus148"].push(pack->inv_r_rcv(i).ecode_bit13__18m_plus148());
		(*net_enums)["INV_R_RCV"]["dup__bit13__gen_autoiaclimit"].push(pack->inv_r_rcv(i).dup__bit13__gen_autoiaclimit());
		(*net_enums)["INV_R_RCV"]["err_hwerr"].push(pack->inv_r_rcv(i).err_hwerr());
		(*net_enums)["INV_R_RCV"]["goff"].push(pack->inv_r_rcv(i).goff());
		(*net_enums)["INV_R_RCV"]["cs_ain_2__i_limit"].push(pack->inv_r_rcv(i).cs_ain_2__i_limit());
		(*net_enums)["INV_R_RCV"]["km_pseudo_enable"].push(pack->inv_r_rcv(i).km_pseudo_enable());
		(*net_enums)["INV_R_RCV"]["rdy82"].push(pack->inv_r_rcv(i).rdy82());
		(*net_enums)["INV_R_RCV"]["ecode_bit14__ubmam99"].push(pack->inv_r_rcv(i).ecode_bit14__ubmam99());
		(*net_enums)["INV_R_RCV"]["ecode_bit14__ubmam148"].push(pack->inv_r_rcv(i).ecode_bit14__ubmam148());
		(*net_enums)["INV_R_RCV"]["cmc__bit14__idc_limit_ena_v2"].push(pack->inv_r_rcv(i).cmc__bit14__idc_limit_ena_v2());
		(*net_enums)["INV_R_RCV"]["dup__bit14__mtpa_reluct_enab"].push(pack->inv_r_rcv(i).dup__bit14__mtpa_reluct_enab());
		(*net_enums)["INV_R_RCV"]["err_ballast"].push(pack->inv_r_rcv(i).err_ballast());
		(*net_enums)["INV_R_RCV"]["brk1216"].push(pack->inv_r_rcv(i).brk1216());
		(*net_enums)["INV_R_RCV"]["cs_ain_1__n_limit"].push(pack->inv_r_rcv(i).cs_ain_1__n_limit());
		(*net_enums)["INV_R_RCV"]["km_debug_test"].push(pack->inv_r_rcv(i).km_debug_test());
		(*net_enums)["INV_R_RCV"]["brk082"].push(pack->inv_r_rcv(i).brk082());
		(*net_enums)["INV_R_RCV"]["ecode_bit15__t_igbt99"].push(pack->inv_r_rcv(i).ecode_bit15__t_igbt99());
		(*net_enums)["INV_R_RCV"]["ecode_bit15__t_igbt148"].push(pack->inv_r_rcv(i).ecode_bit15__t_igbt148());
		(*net_enums)["INV_R_RCV"]["mo_sc2_inv"].push(pack->inv_r_rcv(i).mo_sc2_inv());
		(*net_enums)["INV_R_RCV"]["active190"].push(pack->inv_r_rcv(i).active190());
		inverters_inv_r_rcv_active190_enum_to_string((inverters_inv_r_rcv_active190)pack->inv_r_rcv(i).active190(), buffer);
		(*net_strings)["INV_R_RCV"]["active190"].push(buffer);
		(*net_enums)["INV_R_RCV"]["active191"].push(pack->inv_r_rcv(i).active191());
		inverters_inv_r_rcv_active191_enum_to_string((inverters_inv_r_rcv_active191)pack->inv_r_rcv(i).active191(), buffer);
		(*net_strings)["INV_R_RCV"]["active191"].push(buffer);
		(*net_enums)["INV_R_RCV"]["active192"].push(pack->inv_r_rcv(i).active192());
		inverters_inv_r_rcv_active192_enum_to_string((inverters_inv_r_rcv_active192)pack->inv_r_rcv(i).active192(), buffer);
		(*net_strings)["INV_R_RCV"]["active192"].push(buffer);
		(*net_enums)["INV_R_RCV"]["active193"].push(pack->inv_r_rcv(i).active193());
		inverters_inv_r_rcv_active193_enum_to_string((inverters_inv_r_rcv_active193)pack->inv_r_rcv(i).active193(), buffer);
		(*net_strings)["INV_R_RCV"]["active193"].push(buffer);
		(*net_enums)["INV_R_RCV"]["gen_autoiaclimit_is_acv"].push(pack->inv_r_rcv(i).gen_autoiaclimit_is_acv());
		(*net_enums)["INV_R_RCV"]["cmc__bit15__dig_e_brake_act"].push(pack->inv_r_rcv(i).cmc__bit15__dig_e_brake_act());
		(*net_enums)["INV_R_RCV"]["dup__bit15__canopen_acv"].push(pack->inv_r_rcv(i).dup__bit15__canopen_acv());
		(*net_signals)["INV_R_RCV"]["m_r_dec"].push(pack->inv_r_rcv(i).m_r_dec());
		(*net_signals)["INV_R_RCV"]["m_r_rcp"].push(pack->inv_r_rcv(i).m_r_rcp());
		(*net_enums)["INV_R_RCV"]["warn_warning_0"].push(pack->inv_r_rcv(i).warn_warning_0());
		(*net_signals)["INV_R_RCV"]["ain_in_1_scaled213"].push(pack->inv_r_rcv(i).ain_in_1_scaled213());
		(*net_signals)["INV_R_RCV"]["ain_in_2_scaled214"].push(pack->inv_r_rcv(i).ain_in_2_scaled214());
		(*net_signals)["INV_R_RCV"]["t_dc__stop"].push(pack->inv_r_rcv(i).t_dc__stop());
		(*net_signals)["INV_R_RCV"]["v_dc__stop"].push(pack->inv_r_rcv(i).v_dc__stop());
		(*net_signals)["INV_R_RCV"]["v_min__stop"].push(pack->inv_r_rcv(i).v_min__stop());
		(*net_signals)["INV_R_RCV"]["f_min__stop"].push(pack->inv_r_rcv(i).f_min__stop());
		(*net_signals)["INV_R_RCV"]["v_corner__stop"].push(pack->inv_r_rcv(i).v_corner__stop());
		(*net_signals)["INV_R_RCV"]["f_corner__stop"].push(pack->inv_r_rcv(i).f_corner__stop());
		(*net_signals)["INV_R_RCV"]["pid_i__kp__id"].push(pack->inv_r_rcv(i).pid_i__kp__id());
		(*net_signals)["INV_R_RCV"]["pid_i__ti__id"].push(pack->inv_r_rcv(i).pid_i__ti__id());
		(*net_signals)["INV_R_RCV"]["pid_i__tim__id"].push(pack->inv_r_rcv(i).pid_i__tim__id());
		(*net_signals)["INV_R_RCV"]["ain_in_1_scaleval"].push(pack->inv_r_rcv(i).ain_in_1_scaleval());
		(*net_signals)["INV_R_RCV"]["ain_in_2_scaleval"].push(pack->inv_r_rcv(i).ain_in_2_scaleval());
		(*net_enums)["INV_R_RCV"]["signmag82"].push(pack->inv_r_rcv(i).signmag82());
		(*net_signals)["INV_R_RCV"]["regen_r"].push(pack->inv_r_rcv(i).regen_r());
		(*net_signals)["INV_R_RCV"]["dc_bus_max_lim"].push(pack->inv_r_rcv(i).dc_bus_max_lim());
		(*net_signals)["INV_R_RCV"]["pid_i__xkp__id"].push(pack->inv_r_rcv(i).pid_i__xkp__id());
		(*net_signals)["INV_R_RCV"]["bat_opr_limit__gen"].push(pack->inv_r_rcv(i).bat_opr_limit__gen());
		(*net_signals)["INV_R_RCV"]["pid_i__kf__id"].push(pack->inv_r_rcv(i).pid_i__kf__id());
		(*net_signals)["INV_R_RCV"]["cmc__bit17_16__checkipeak_config"].push(pack->inv_r_rcv(i).cmc__bit17_16__checkipeak_config());
		(*net_enums)["INV_R_RCV"]["dup__bit16__bamobil3_2_offcrct"].push(pack->inv_r_rcv(i).dup__bit16__bamobil3_2_offcrct());
		(*net_signals)["INV_R_RCV"]["special__stop"].push(pack->inv_r_rcv(i).special__stop());
		(*net_signals)["INV_R_RCV"]["free"].push(pack->inv_r_rcv(i).free());
		(*net_signals)["INV_R_RCV"]["svnrevision_nr"].push(pack->inv_r_rcv(i).svnrevision_nr());
		(*net_enums)["INV_R_RCV"]["warn_illegal_status"].push(pack->inv_r_rcv(i).warn_illegal_status());
		(*net_enums)["INV_R_RCV"]["nclip82"].push(pack->inv_r_rcv(i).nclip82());
		(*net_signals)["INV_R_RCV"]["dup__bit19_17__ecode_redefine"].push(pack->inv_r_rcv(i).dup__bit19_17__ecode_redefine());
		(*net_enums)["INV_R_RCV"]["warn_safe_in"].push(pack->inv_r_rcv(i).warn_safe_in());
		(*net_enums)["INV_R_RCV"]["nclip_minus82"].push(pack->inv_r_rcv(i).nclip_minus82());
		(*net_enums)["INV_R_RCV"]["cmc__bit18__tractioncontrol_ena"].push(pack->inv_r_rcv(i).cmc__bit18__tractioncontrol_ena());
		(*net_enums)["INV_R_RCV"]["nclip_plus82"].push(pack->inv_r_rcv(i).nclip_plus82());
		(*net_signals)["INV_R_RCV"]["cmc__bit20_19__tc_deltatime_conf"].push(pack->inv_r_rcv(i).cmc__bit20_19__tc_deltatime_conf());
		(*net_enums)["INV_R_RCV"]["irddig82"].push(pack->inv_r_rcv(i).irddig82());
		(*net_enums)["INV_R_RCV"]["dup__bit20__hal_extmr_acv"].push(pack->inv_r_rcv(i).dup__bit20__hal_extmr_acv());
		(*net_enums)["INV_R_RCV"]["iuserchd82"].push(pack->inv_r_rcv(i).iuserchd82());
		(*net_signals)["INV_R_RCV"]["cmc__bit22_21__tc_minspeed_conf"].push(pack->inv_r_rcv(i).cmc__bit22_21__tc_minspeed_conf());
		(*net_enums)["INV_R_RCV"]["dup__bit21__initwith_frg_off"].push(pack->inv_r_rcv(i).dup__bit21__initwith_frg_off());
		(*net_enums)["INV_R_RCV"]["warn_motortemp"].push(pack->inv_r_rcv(i).warn_motortemp());
		(*net_enums)["INV_R_RCV"]["irdn82"].push(pack->inv_r_rcv(i).irdn82());
		(*net_signals)["INV_R_RCV"]["dup__bit31_22__free"].push(pack->inv_r_rcv(i).dup__bit31_22__free());
		(*net_enums)["INV_R_RCV"]["warn_devicetemp"].push(pack->inv_r_rcv(i).warn_devicetemp());
		(*net_enums)["INV_R_RCV"]["irdti82"].push(pack->inv_r_rcv(i).irdti82());
		(*net_enums)["INV_R_RCV"]["cmc__bit23__tc_ncmdrestoption"].push(pack->inv_r_rcv(i).cmc__bit23__tc_ncmdrestoption());
		(*net_signals)["INV_R_RCV"]["m_r_acc"].push(pack->inv_r_rcv(i).m_r_acc());
		(*net_enums)["INV_R_RCV"]["warn_vout_sat"].push(pack->inv_r_rcv(i).warn_vout_sat());
		(*net_enums)["INV_R_RCV"]["irdtir82"].push(pack->inv_r_rcv(i).irdtir82());
		(*net_signals)["INV_R_RCV"]["cmc__bit31_24__free"].push(pack->inv_r_rcv(i).cmc__bit31_24__free());
		(*net_enums)["INV_R_RCV"]["warn_ipeak"].push(pack->inv_r_rcv(i).warn_ipeak());
		(*net_enums)["INV_R_RCV"]["_10hz82"].push(pack->inv_r_rcv(i)._10hz82());
		(*net_enums)["INV_R_RCV"]["warn_raceaway"].push(pack->inv_r_rcv(i).warn_raceaway());
		(*net_enums)["INV_R_RCV"]["irdtm82"].push(pack->inv_r_rcv(i).irdtm82());
		(*net_enums)["INV_R_RCV"]["irdana82"].push(pack->inv_r_rcv(i).irdana82());
		(*net_enums)["INV_R_RCV"]["iwcns82"].push(pack->inv_r_rcv(i).iwcns82());
		(*net_enums)["INV_R_RCV"]["rfepulse82"].push(pack->inv_r_rcv(i).rfepulse82());
		(*net_enums)["INV_R_RCV"]["md82"].push(pack->inv_r_rcv(i).md82());
		(*net_enums)["INV_R_RCV"]["warn_ballast"].push(pack->inv_r_rcv(i).warn_ballast());
		(*net_enums)["INV_R_RCV"]["hndwhl82"].push(pack->inv_r_rcv(i).hndwhl82());

    }

}

void inverters_proto_interface_serialize_from_id(canlib_message_id id, inverters::Pack* pack, device_t* device) {
    int index = inverters_index_from_id(id);

    if (index == -1) return;

    switch(id) {
        
        case 513: {
            inverters_inv_l_send_converted_t* msg = (inverters_inv_l_send_converted_t*)(device->message);
            inverters::INV_L_SEND* proto_msg = pack->add_inv_l_send();
			proto_msg->set_send_mux((inverters::inverters_inv_l_send_send_mux)msg->send_mux);
			proto_msg->set_motor_f_n(msg->motor_f_n);
			proto_msg->set_cos_phi(msg->cos_phi);
			proto_msg->set_pid_i__kp__iq(msg->pid_i__kp__iq);
			proto_msg->set_pid_i__ti__iq(msg->pid_i__ti__iq);
			proto_msg->set_id_setdig__id(msg->id_setdig__id);
			proto_msg->set_i_delta_ramp(msg->i_delta_ramp);
			proto_msg->set_pid_i__tim__iq(msg->pid_i__tim__iq);
			proto_msg->set_pid_n__kp(msg->pid_n__kp);
			proto_msg->set_pid_n__ti(msg->pid_n__ti);
			proto_msg->set_pid_n__td(msg->pid_n__td);
			proto_msg->set_n_setdig(msg->n_setdig);
			proto_msg->set_n_lim(msg->n_lim);
			proto_msg->set_n_r_acc(msg->n_r_acc);
			proto_msg->set_pid_n__tim(msg->pid_n__tim);
			proto_msg->set_i_red_n(msg->i_red_n);
			proto_msg->set_n_lim_minus(msg->n_lim_minus);
			proto_msg->set_n_lim_plus(msg->n_lim_plus);
			proto_msg->set_read_id((inverters::inverters_inv_l_send_read_id)msg->read_id);
			proto_msg->set_i_lim_dig(msg->i_lim_dig);
			proto_msg->set_i_red_te(msg->i_red_te);
			proto_msg->set_i_max_eff(msg->i_max_eff);
			proto_msg->set_i_nom_eff(msg->i_nom_eff);
			proto_msg->set_motor_pole(msg->motor_pole);
			proto_msg->set_ain_in_1_cutoff(msg->ain_in_1_cutoff);
			proto_msg->set_km_rsvd_0(msg->km_rsvd_0);
			proto_msg->set_ain_in_2_cutoff(msg->ain_in_2_cutoff);
			proto_msg->set_i_red_td(msg->i_red_td);
			proto_msg->set_n_nom(msg->n_nom);
			proto_msg->set_pid_n__kacc(msg->pid_n__kacc);
			proto_msg->set_speed_filter(msg->speed_filter);
			proto_msg->set_ain_in_1_filter(msg->ain_in_1_filter);
			proto_msg->set_snr(msg->snr);
			proto_msg->set_device_mains(msg->device_mains);
			proto_msg->set_regen_p(msg->regen_p);
			proto_msg->set_devicetype((inverters::inverters_inv_l_send_devicetype)msg->devicetype);
			proto_msg->set_can_id_rx(msg->can_id_rx);
			proto_msg->set_can_id_tx(msg->can_id_tx);
			proto_msg->set_pos_kp(msg->pos_kp);
			proto_msg->set_pos_ti(msg->pos_ti);
			proto_msg->set_pos_td(msg->pos_td);
			proto_msg->set_pos_dest(msg->pos_dest);
			proto_msg->set_pos_tim(msg->pos_tim);
			proto_msg->set_pos_offsref(msg->pos_offsref);
			proto_msg->set_can_nbt((inverters::inverters_inv_l_send_can_nbt)msg->can_nbt);
			proto_msg->set_ref_reso_edge(msg->ref_reso_edge);
			proto_msg->set_speed_1(msg->speed_1);
			proto_msg->set_speed_2(msg->speed_2);
			proto_msg->set_pos_tol_win(msg->pos_tol_win);
			proto_msg->set_pos_preset_val(msg->pos_preset_val);
			proto_msg->set_can_id_2_rx(msg->can_id_2_rx);
			proto_msg->set_can_id_2_tx(msg->can_id_2_tx);
			proto_msg->set_v_ref(msg->v_ref);
			proto_msg->set_v_kp(msg->v_kp);
			proto_msg->set_v_ti(msg->v_ti);
			proto_msg->set_clear_errors(msg->clear_errors);
			proto_msg->set_m_setdig__iq(msg->m_setdig__iq);
			proto_msg->set_i_red_tm(msg->i_red_tm);
			proto_msg->set_m_temp(msg->m_temp);
			proto_msg->set_mo_feedback_1((inverters::inverters_inv_l_send_mo_feedback_1)msg->mo_feedback_1);
			proto_msg->set_dc_bus_min_lim(msg->dc_bus_min_lim);
			proto_msg->set_fb_incr_mot(msg->fb_incr_mot);
			proto_msg->set_fb_pole(msg->fb_pole);
			proto_msg->set_motor_lsq(msg->motor_lsq);
			proto_msg->set_id_nom(msg->id_nom);
			proto_msg->set_motor_lm(msg->motor_lm);
			proto_msg->set_motor_rr(msg->motor_rr);
			proto_msg->set_id_min(msg->id_min);
			proto_msg->set_motor_tr(msg->motor_tr);
			proto_msg->set_motor_lsd(msg->motor_lsd);
			proto_msg->set_motor_rs(msg->motor_rs);
			proto_msg->set_motor_ts(msg->motor_ts);
			proto_msg->set_def_end_1((inverters::inverters_inv_l_send_def_end_1)msg->def_end_1);
			proto_msg->set_def_end_2((inverters::inverters_inv_l_send_def_end_2)msg->def_end_2);
			proto_msg->set_def_din_1((inverters::inverters_inv_l_send_def_din_1)msg->def_din_1);
			proto_msg->set_def_din_2((inverters::inverters_inv_l_send_def_din_2)msg->def_din_2);
			proto_msg->set_i_max_pk(msg->i_max_pk);
			proto_msg->set_i_con_eff(msg->i_con_eff);
			proto_msg->set_i_device(msg->i_device);
			proto_msg->set_n_r_lim(msg->n_r_lim);
			proto_msg->set_nmax100perc(msg->nmax100perc);
			proto_msg->set_pid_i__xkp__iq(msg->pid_i__xkp__iq);
			proto_msg->set_bat_opr_limit__mot(msg->bat_opr_limit__mot);
			proto_msg->set_pid_i__kf__iq(msg->pid_i__kf__iq);
			proto_msg->set_cmc__bit0__dc_current_sens_ena(msg->cmc__bit0__dc_current_sens_ena);
			proto_msg->set_can_rxtimeout(msg->can_rxtimeout);
			proto_msg->set_var_1(msg->var_1);
			proto_msg->set_var_2(msg->var_2);
			proto_msg->set_var_3(msg->var_3);
			proto_msg->set_var_4(msg->var_4);
			proto_msg->set_ain_in_2_offsetval(msg->ain_in_2_offsetval);
			proto_msg->set_n_r_dec(msg->n_r_dec);
			proto_msg->set_v_shunt(msg->v_shunt);
			proto_msg->set_t_peak(msg->t_peak);
			proto_msg->set_brake_delay(msg->brake_delay);
			proto_msg->set_axis(msg->axis);
			proto_msg->set_km_speed_0(msg->km_speed_0);
			proto_msg->set_cmc__bit1__idc_limit_ena(msg->cmc__bit1__idc_limit_ena);
			proto_msg->set_km_frg_off(msg->km_frg_off);
			proto_msg->set_cmc__bit2__pdc_limit_usage(msg->cmc__bit2__pdc_limit_usage);
			proto_msg->set_km_cal_off(msg->km_cal_off);
			proto_msg->set_cmc__bit3__torqueval_init_ena(msg->cmc__bit3__torqueval_init_ena);
			proto_msg->set_km_tx_tog_stat(msg->km_tx_tog_stat);
			proto_msg->set_cmc__bit4__dig_m_rcpramp_ena(msg->cmc__bit4__dig_m_rcpramp_ena);
			proto_msg->set_km_i_limit(msg->km_i_limit);
			proto_msg->set_mo_feedback_2((inverters::inverters_inv_l_send_mo_feedback_2)msg->mo_feedback_2);
			proto_msg->set_cmc__bit5__reset_nramp_atnzero(msg->cmc__bit5__reset_nramp_atnzero);
			proto_msg->set_km_n_clip(msg->km_n_clip);
			proto_msg->set_cmc__bit6__torquetimeout_100ms_e(msg->cmc__bit6__torquetimeout_100ms_e);
			proto_msg->set_km_mix_ana_on(msg->km_mix_ana_on);
			proto_msg->set_cmc__bit13_7__free(msg->cmc__bit13_7__free);
			proto_msg->set_ret_interval((inverters::inverters_inv_l_send_ret_interval)msg->ret_interval);
			proto_msg->set_km_allow_sync(msg->km_allow_sync);
			proto_msg->set_ain_in_2_filter(msg->ain_in_2_filter);
			proto_msg->set_mo_sc1_reso((inverters::inverters_inv_l_send_mo_sc1_reso)msg->mo_sc1_reso);
			proto_msg->set_km_handwheel(msg->km_handwheel);
			proto_msg->set_km_phasing_extend(msg->km_phasing_extend);
			proto_msg->set_km_rsvd_11(msg->km_rsvd_11);
			proto_msg->set_mo_sc1_comp(msg->mo_sc1_comp);
			proto_msg->set_km_rsvd_12(msg->km_rsvd_12);
			proto_msg->set_mo_sc2_reso((inverters::inverters_inv_l_send_mo_sc2_reso)msg->mo_sc2_reso);
			proto_msg->set_km_rsvd_13(msg->km_rsvd_13);
			proto_msg->set_km_pseudo_enable(msg->km_pseudo_enable);
			proto_msg->set_cmc__bit14__idc_limit_ena_v2(msg->cmc__bit14__idc_limit_ena_v2);
			proto_msg->set_km_debug_test(msg->km_debug_test);
			proto_msg->set_mo_sc2_inv(msg->mo_sc2_inv);
			proto_msg->set_active190((inverters::inverters_inv_l_send_active190)msg->active190);
			proto_msg->set_active191((inverters::inverters_inv_l_send_active191)msg->active191);
			proto_msg->set_active192((inverters::inverters_inv_l_send_active192)msg->active192);
			proto_msg->set_active193((inverters::inverters_inv_l_send_active193)msg->active193);
			proto_msg->set_cmc__bit15__dig_e_brake_act(msg->cmc__bit15__dig_e_brake_act);
			proto_msg->set_pid_i__kp__id(msg->pid_i__kp__id);
			proto_msg->set_pid_i__ti__id(msg->pid_i__ti__id);
			proto_msg->set_pid_i__tim__id(msg->pid_i__tim__id);
			proto_msg->set_m_r_acc(msg->m_r_acc);
			proto_msg->set_regen_r(msg->regen_r);
			proto_msg->set_dc_bus_max_lim(msg->dc_bus_max_lim);
			proto_msg->set_m_r_rcp(msg->m_r_rcp);
			proto_msg->set_pid_i__xkp__id(msg->pid_i__xkp__id);
			proto_msg->set_bat_opr_limit__gen(msg->bat_opr_limit__gen);
			proto_msg->set_pid_i__kf__id(msg->pid_i__kf__id);
			proto_msg->set_cmc__bit17_16__checkipeak_config(msg->cmc__bit17_16__checkipeak_config);
			proto_msg->set_ain_in_2_scaleval(msg->ain_in_2_scaleval);
			proto_msg->set_m_r_dec(msg->m_r_dec);
			proto_msg->set_cmc__bit18__tractioncontrol_ena(msg->cmc__bit18__tractioncontrol_ena);
			proto_msg->set_cmc__bit20_19__tc_deltatime_conf(msg->cmc__bit20_19__tc_deltatime_conf);
			proto_msg->set_cmc__bit22_21__tc_minspeed_conf(msg->cmc__bit22_21__tc_minspeed_conf);
			proto_msg->set_cmc__bit23__tc_ncmdrestoption(msg->cmc__bit23__tc_ncmdrestoption);
			proto_msg->set_cmc__bit31_24__free(msg->cmc__bit31_24__free);

#ifdef CANLIB_TIMESTAMP
            proto_msg->set__inner_timestamp(msg->_timestamp);
#endif // CANLIB_TIMESTAMP
            break;
        }

        case 385: {
            inverters_inv_l_rcv_converted_t* msg = (inverters_inv_l_rcv_converted_t*)(device->message);
            inverters::INV_L_RCV* proto_msg = pack->add_inv_l_rcv();
			proto_msg->set_rcv_mux((inverters::inverters_inv_l_rcv_rcv_mux)msg->rcv_mux);
			proto_msg->set_n_actual(msg->n_actual);
			proto_msg->set_n_r_dec(msg->n_r_dec);
			proto_msg->set_n_r_lim(msg->n_r_lim);
			proto_msg->set_n_actual_filt(msg->n_actual_filt);
			proto_msg->set_firmware(msg->firmware);
			proto_msg->set_devicetype((inverters::inverters_inv_l_rcv_devicetype)msg->devicetype);
			proto_msg->set_snr(msg->snr);
			proto_msg->set_axis(msg->axis);
			proto_msg->set_i_device(msg->i_device);
			proto_msg->set_v_shunt(msg->v_shunt);
			proto_msg->set_i_200perc(msg->i_200perc);
			proto_msg->set_status_bitmap(msg->status_bitmap);
			proto_msg->set_err_badparas(msg->err_badparas);
			proto_msg->set_lmt_active_1(msg->lmt_active_1);
			proto_msg->set_ain_in_1_raw(msg->ain_in_1_raw);
			proto_msg->set_ain_in_2_raw(msg->ain_in_2_raw);
			proto_msg->set_nmax100perc(msg->nmax100perc);
			proto_msg->set_n_setdig(msg->n_setdig);
			proto_msg->set_n_cmd(msg->n_cmd);
			proto_msg->set_n_cmd_ramp(msg->n_cmd_ramp);
			proto_msg->set_n_lim(msg->n_lim);
			proto_msg->set_n_error(msg->n_error);
			proto_msg->set_m_setdig__iq(msg->m_setdig__iq);
			proto_msg->set_id_setdig__id(msg->id_setdig__id);
			proto_msg->set_i_max_pk(msg->i_max_pk);
			proto_msg->set_i_con_eff(msg->i_con_eff);
			proto_msg->set_i_max_eff(msg->i_max_eff);
			proto_msg->set_i_nom_eff(msg->i_nom_eff);
			proto_msg->set_i_limit_inuse(msg->i_limit_inuse);
			proto_msg->set_i_cmd(msg->i_cmd);
			proto_msg->set_i_cmd_ramp(msg->i_cmd_ramp);
			proto_msg->set_i_actual(msg->i_actual);
			proto_msg->set_i_actual_filt(msg->i_actual_filt);
			proto_msg->set_iq_actual(msg->iq_actual);
			proto_msg->set_id_actual(msg->id_actual);
			proto_msg->set_iq_error(msg->iq_error);
			proto_msg->set_id_error(msg->id_error);
			proto_msg->set_i1_actual(msg->i1_actual);
			proto_msg->set_i2_actual(msg->i2_actual);
			proto_msg->set_i3_actual(msg->i3_actual);
			proto_msg->set_i3_adc(msg->i3_adc);
			proto_msg->set_i2_adc(msg->i2_adc);
			proto_msg->set_vq(msg->vq);
			proto_msg->set_vd(msg->vd);
			proto_msg->set_vout(msg->vout);
			proto_msg->set_t_motor(msg->t_motor);
			proto_msg->set_t_igbt(msg->t_igbt);
			proto_msg->set_t_air(msg->t_air);
			proto_msg->set_vdc_bus_filt(msg->vdc_bus_filt);
			proto_msg->set_end_1(msg->end_1);
			proto_msg->set_din_1(msg->din_1);
			proto_msg->set_end_2(msg->end_2);
			proto_msg->set_din_2(msg->din_2);
			proto_msg->set_run232(msg->run232);
			proto_msg->set_dout_1(msg->dout_1);
			proto_msg->set_dout_2(msg->dout_2);
			proto_msg->set_dout_3(msg->dout_3);
			proto_msg->set_rdy_btb(msg->rdy_btb);
			proto_msg->set_i_fault(msg->i_fault);
			proto_msg->set_dout_4(msg->dout_4);
			proto_msg->set_i_lim_dig(msg->i_lim_dig);
			proto_msg->set_i_red_n(msg->i_red_n);
			proto_msg->set_i_red_td(msg->i_red_td);
			proto_msg->set_i_red_te(msg->i_red_te);
			proto_msg->set_i_red_tm(msg->i_red_tm);
			proto_msg->set_cs_ain_1_format(msg->cs_ain_1_format);
			proto_msg->set_id_ref(msg->id_ref);
			proto_msg->set_m_outdig__iq(msg->m_outdig__iq);
			proto_msg->set_ptr_1_debug(msg->ptr_1_debug);
			proto_msg->set_ptr_2_debug(msg->ptr_2_debug);
			proto_msg->set_temp_debug(msg->temp_debug);
			proto_msg->set_motor_f_n(msg->motor_f_n);
			proto_msg->set_motor_v_n(msg->motor_v_n);
			proto_msg->set_t_dc__start(msg->t_dc__start);
			proto_msg->set_v_dc__start(msg->v_dc__start);
			proto_msg->set_v_min__start(msg->v_min__start);
			proto_msg->set_f_min__start(msg->f_min__start);
			proto_msg->set_v_corner__start(msg->v_corner__start);
			proto_msg->set_f_corner__start(msg->f_corner__start);
			proto_msg->set_cos_phi(msg->cos_phi);
			proto_msg->set_pwm_enum(msg->pwm_enum);
			proto_msg->set_calib_ref_value(msg->calib_ref_value);
			proto_msg->set_pid_i__kp__iq(msg->pid_i__kp__iq);
			proto_msg->set_pid_i__ti__iq(msg->pid_i__ti__iq);
			proto_msg->set_cutoffdig(msg->cutoffdig);
			proto_msg->set_i3_offset(msg->i3_offset);
			proto_msg->set_i_delta_ramp(msg->i_delta_ramp);
			proto_msg->set_pid_i__tim__iq(msg->pid_i__tim__iq);
			proto_msg->set_pid_n__kp(msg->pid_n__kp);
			proto_msg->set_v_ti(msg->v_ti);
			proto_msg->set_pid_n__td(msg->pid_n__td);
			proto_msg->set_ain_in_1_offsetval(msg->ain_in_1_offsetval);
			proto_msg->set_ain_in_2_offsetval(msg->ain_in_2_offsetval);
			proto_msg->set_dzr_seq(msg->dzr_seq);
			proto_msg->set_pid_n__tim(msg->pid_n__tim);
			proto_msg->set_n_lim_plus(msg->n_lim_plus);
			proto_msg->set_n_lim_minus(msg->n_lim_minus);
			proto_msg->set_incr_delta(msg->incr_delta);
			proto_msg->set_motorpos_mech(msg->motorpos_mech);
			proto_msg->set_motorpos_elec(msg->motorpos_elec);
			proto_msg->set_fb_offset(msg->fb_offset);
			proto_msg->set_it_rg_monitor(msg->it_rg_monitor);
			proto_msg->set_motor_pole(msg->motor_pole);
			proto_msg->set_ain_in_1_cutoff(msg->ain_in_1_cutoff);
			proto_msg->set_km_rsvd_0(msg->km_rsvd_0);
			proto_msg->set_ena82(msg->ena82);
			proto_msg->set_ain_in_2_cutoff(msg->ain_in_2_cutoff);
			proto_msg->set_i_limit_inuse_ramp(msg->i_limit_inuse_ramp);
			proto_msg->set_n_nom(msg->n_nom);
			proto_msg->set_pid_n__kacc(msg->pid_n__kacc);
			proto_msg->set_rotor_signals(msg->rotor_signals);
			proto_msg->set_speed_filter(msg->speed_filter);
			proto_msg->set_ain_in_1_filter(msg->ain_in_1_filter);
			proto_msg->set_ixt_monitor(msg->ixt_monitor);
			proto_msg->set_ecode_bit0_firsterrordtcd99(msg->ecode_bit0_firsterrordtcd99);
			proto_msg->set_device_mains(msg->device_mains);
			proto_msg->set_regen_p(msg->regen_p);
			proto_msg->set_can_id_rx(msg->can_id_rx);
			proto_msg->set_can_id_tx(msg->can_id_tx);
			proto_msg->set_pos_kp(msg->pos_kp);
			proto_msg->set_pos_ti(msg->pos_ti);
			proto_msg->set_pos_td(msg->pos_td);
			proto_msg->set_pos_actual(msg->pos_actual);
			proto_msg->set_pos_dest(msg->pos_dest);
			proto_msg->set_pos_actual_2(msg->pos_actual_2);
			proto_msg->set_pos_error(msg->pos_error);
			proto_msg->set_pos_tim(msg->pos_tim);
			proto_msg->set_pos_offsref(msg->pos_offsref);
			proto_msg->set_can_nbt((inverters::inverters_inv_l_rcv_can_nbt)msg->can_nbt);
			proto_msg->set_pos_zero_capture(msg->pos_zero_capture);
			proto_msg->set_ref_reso_edge(msg->ref_reso_edge);
			proto_msg->set_speed_1(msg->speed_1);
			proto_msg->set_speed_2(msg->speed_2);
			proto_msg->set_pos_tol_win(msg->pos_tol_win);
			proto_msg->set_pos_preset_val(msg->pos_preset_val);
			proto_msg->set_pos_zero_offset(msg->pos_zero_offset);
			proto_msg->set_pos_nd_scale(msg->pos_nd_scale);
			proto_msg->set_pos_nd_offset(msg->pos_nd_offset);
			proto_msg->set_fb2_scale_ext(msg->fb2_scale_ext);
			proto_msg->set_pos_offset_slack(msg->pos_offset_slack);
			proto_msg->set_pos_diff_slack(msg->pos_diff_slack);
			proto_msg->set_fun_para_read(msg->fun_para_read);
			proto_msg->set_fun_para_write(msg->fun_para_write);
			proto_msg->set_fun_special(msg->fun_special);
			proto_msg->set_can_id_2_rx(msg->can_id_2_rx);
			proto_msg->set_can_id_2_tx(msg->can_id_2_tx);
			proto_msg->set_v_ref(msg->v_ref);
			proto_msg->set_v_kp(msg->v_kp);
			proto_msg->set_pid_n__ti(msg->pid_n__ti);
			proto_msg->set_clear_errors(msg->clear_errors);
			proto_msg->set_pos_cmd(msg->pos_cmd);
			proto_msg->set_can_error_busoff(msg->can_error_busoff);
			proto_msg->set_can_error_writetime(msg->can_error_writetime);
			proto_msg->set_ecode_bit0_firsterrordtcd148(msg->ecode_bit0_firsterrordtcd148);
			proto_msg->set_can_error_no_ack(msg->can_error_no_ack);
			proto_msg->set_can_error_crc_check150(msg->can_error_crc_check150);
			proto_msg->set_can_error_crc_check151(msg->can_error_crc_check151);
			proto_msg->set_info_timer_diff(msg->info_timer_diff);
			proto_msg->set_ballastcount(msg->ballastcount);
			proto_msg->set_m_temp(msg->m_temp);
			proto_msg->set_mo_feedback_1((inverters::inverters_inv_l_rcv_mo_feedback_1)msg->mo_feedback_1);
			proto_msg->set_dc_bus_min_lim(msg->dc_bus_min_lim);
			proto_msg->set_fb_incr_mot(msg->fb_incr_mot);
			proto_msg->set_fb_pole(msg->fb_pole);
			proto_msg->set_logic_freq(msg->logic_freq);
			proto_msg->set_pwm_1(msg->pwm_1);
			proto_msg->set_pwm_2(msg->pwm_2);
			proto_msg->set_pwm_3(msg->pwm_3);
			proto_msg->set_timer_delta(msg->timer_delta);
			proto_msg->set_motor_lsq(msg->motor_lsq);
			proto_msg->set_motor_lsd(msg->motor_lsd);
			proto_msg->set_id_nom(msg->id_nom);
			proto_msg->set_motor_lm(msg->motor_lm);
			proto_msg->set_motor_rr(msg->motor_rr);
			proto_msg->set_id_min(msg->id_min);
			proto_msg->set_motor_tr(msg->motor_tr);
			proto_msg->set_motor_rs(msg->motor_rs);
			proto_msg->set_motor_ts(msg->motor_ts);
			proto_msg->set_def_end_1((inverters::inverters_inv_l_rcv_def_end_1)msg->def_end_1);
			proto_msg->set_def_end_2((inverters::inverters_inv_l_rcv_def_end_2)msg->def_end_2);
			proto_msg->set_def_din_1((inverters::inverters_inv_l_rcv_def_din_1)msg->def_din_1);
			proto_msg->set_def_din_2((inverters::inverters_inv_l_rcv_def_din_2)msg->def_din_2);
			proto_msg->set_operand194(msg->operand194);
			proto_msg->set_i_max_inuse(msg->i_max_inuse);
			proto_msg->set_signal_go(msg->signal_go);
			proto_msg->set_signal_brake(msg->signal_brake);
			proto_msg->set_signal_icns(msg->signal_icns);
			proto_msg->set_signal_lessn0(msg->signal_lessn0);
			proto_msg->set_signal_postolerance(msg->signal_postolerance);
			proto_msg->set_ain_in_1_scaled251(msg->ain_in_1_scaled251);
			proto_msg->set_ain_in_2_scaled252(msg->ain_in_2_scaled252);
			proto_msg->set_operand195(msg->operand195);
			proto_msg->set_operand218(msg->operand218);
			proto_msg->set_operand219(msg->operand219);
			proto_msg->set_pid_i__xkp__iq(msg->pid_i__xkp__iq);
			proto_msg->set_bat_opr_limit__mot(msg->bat_opr_limit__mot);
			proto_msg->set_pid_i__kf__iq(msg->pid_i__kf__iq);
			proto_msg->set_dc_current_sens_ena_set(msg->dc_current_sens_ena_set);
			proto_msg->set_cmc__bit0__dc_current_sens_ena(msg->cmc__bit0__dc_current_sens_ena);
			proto_msg->set_n_rpm_maxint(msg->n_rpm_maxint);
			proto_msg->set_var_1(msg->var_1);
			proto_msg->set_can_rxtimeout(msg->can_rxtimeout);
			proto_msg->set_var_2(msg->var_2);
			proto_msg->set_var_3(msg->var_3);
			proto_msg->set_var_4(msg->var_4);
			proto_msg->set_dup__bit7_0__dac_source_channel(msg->dup__bit7_0__dac_source_channel);
			proto_msg->set_fb_lossofsignal(msg->fb_lossofsignal);
			proto_msg->set_no_hw_fault(msg->no_hw_fault);
			proto_msg->set_t_peak(msg->t_peak);
			proto_msg->set_brake_delay(msg->brake_delay);
			proto_msg->set_power(msg->power);
			proto_msg->set_work(msg->work);
			proto_msg->set_extra__start(msg->extra__start);
			proto_msg->set_capture_channel(msg->capture_channel);
			proto_msg->set_trig_level(msg->trig_level);
			proto_msg->set_trig_edge(msg->trig_edge);
			proto_msg->set_trig_source(msg->trig_source);
			proto_msg->set_oszi_source(msg->oszi_source);
			proto_msg->set_oszi_skip(msg->oszi_skip);
			proto_msg->set_oszi_run_cmd(msg->oszi_run_cmd);
			proto_msg->set_oszi_read_cmd(msg->oszi_read_cmd);
			proto_msg->set_pos_ref_start(msg->pos_ref_start);
			proto_msg->set_vdc_bus(msg->vdc_bus);
			proto_msg->set_m_cmd_ramp(msg->m_cmd_ramp);
			proto_msg->set_lmt_1(msg->lmt_1);
			proto_msg->set_out_1(msg->out_1);
			proto_msg->set_subversion_nr(msg->subversion_nr);
			proto_msg->set_err_powerfault(msg->err_powerfault);
			proto_msg->set_lmt_active_2(msg->lmt_active_2);
			proto_msg->set_km_speed_0(msg->km_speed_0);
			proto_msg->set_ncr082(msg->ncr082);
			proto_msg->set_ecode_bit1__hw1_state99(msg->ecode_bit1__hw1_state99);
			proto_msg->set_ecode_bit1__hw1_state148(msg->ecode_bit1__hw1_state148);
			proto_msg->set_dc_i_sensena_set(msg->dc_i_sensena_set);
			proto_msg->set_cmc__bit1__idc_limit_ena(msg->cmc__bit1__idc_limit_ena);
			proto_msg->set_lmt_2(msg->lmt_2);
			proto_msg->set_out_2(msg->out_2);
			proto_msg->set_err_rfe_fault(msg->err_rfe_fault);
			proto_msg->set_in_active_2(msg->in_active_2);
			proto_msg->set_cs_ain_2_format(msg->cs_ain_2_format);
			proto_msg->set_km_frg_off(msg->km_frg_off);
			proto_msg->set_lim_plus82(msg->lim_plus82);
			proto_msg->set_ecode_bit2__hw0_state99(msg->ecode_bit2__hw0_state99);
			proto_msg->set_ecode_bit2__hw0_state148(msg->ecode_bit2__hw0_state148);
			proto_msg->set_op_mode_quadrant(msg->op_mode_quadrant);
			proto_msg->set_cmc__bit2__pdc_limit_usage(msg->cmc__bit2__pdc_limit_usage);
			proto_msg->set_in_2(msg->in_2);
			proto_msg->set_rdy155(msg->rdy155);
			proto_msg->set_err_bustimeout(msg->err_bustimeout);
			proto_msg->set_in_active_1(msg->in_active_1);
			proto_msg->set_km_cal_off(msg->km_cal_off);
			proto_msg->set_lim_minus82(msg->lim_minus82);
			proto_msg->set_ecode_bit3__free99(msg->ecode_bit3__free99);
			proto_msg->set_ecode_bit3__free148(msg->ecode_bit3__free148);
			proto_msg->set_cmc__bit3__torqueval_init_ena(msg->cmc__bit3__torqueval_init_ena);
			proto_msg->set_in_1(msg->in_1);
			proto_msg->set_go155(msg->go155);
			proto_msg->set_err_feedbacksignal(msg->err_feedbacksignal);
			proto_msg->set_frgrun(msg->frgrun);
			proto_msg->set_cs_ain_1_mode((inverters::inverters_inv_l_rcv_cs_ain_1_mode)msg->cs_ain_1_mode);
			proto_msg->set_km_tx_tog_stat(msg->km_tx_tog_stat);
			proto_msg->set_ok82(msg->ok82);
			proto_msg->set_ecode_bit4__rdy399(msg->ecode_bit4__rdy399);
			proto_msg->set_ecode_bit4__rdy3148(msg->ecode_bit4__rdy3148);
			proto_msg->set_compare_var194((inverters::inverters_inv_l_rcv_compare_var194)msg->compare_var194);
			proto_msg->set_compare_var195((inverters::inverters_inv_l_rcv_compare_var195)msg->compare_var195);
			proto_msg->set_compare_var218((inverters::inverters_inv_l_rcv_compare_var218)msg->compare_var218);
			proto_msg->set_compare_var219((inverters::inverters_inv_l_rcv_compare_var219)msg->compare_var219);
			proto_msg->set_cmc__bit4__dig_m_rcpramp_ena(msg->cmc__bit4__dig_m_rcpramp_ena);
			proto_msg->set_run152(msg->run152);
			proto_msg->set_out_3(msg->out_3);
			proto_msg->set_err_powervoltage_low(msg->err_powervoltage_low);
			proto_msg->set_rfe216(msg->rfe216);
			proto_msg->set_km_i_limit(msg->km_i_limit);
			proto_msg->set_icns82(msg->icns82);
			proto_msg->set_ecode_bit5__n_fail99(msg->ecode_bit5__n_fail99);
			proto_msg->set_ecode_bit5__n_fail148(msg->ecode_bit5__n_fail148);
			proto_msg->set_mo_feedback_2((inverters::inverters_inv_l_rcv_mo_feedback_2)msg->mo_feedback_2);
			proto_msg->set_recup_is_acv(msg->recup_is_acv);
			proto_msg->set_cmc__bit5__reset_nramp_atnzero(msg->cmc__bit5__reset_nramp_atnzero);
			proto_msg->set_rfe152(msg->rfe152);
			proto_msg->set_out_4(msg->out_4);
			proto_msg->set_err_motortemp(msg->err_motortemp);
			proto_msg->set_km_n_clip(msg->km_n_clip);
			proto_msg->set_tnlim82(msg->tnlim82);
			proto_msg->set_ecode_bit6__flths99(msg->ecode_bit6__flths99);
			proto_msg->set_ecode_bit6__flths148(msg->ecode_bit6__flths148);
			proto_msg->set_i_dc_limit_is_acv(msg->i_dc_limit_is_acv);
			proto_msg->set_cmc__bit6__torquetimeout_100ms_e(msg->cmc__bit6__torquetimeout_100ms_e);
			proto_msg->set_rsvd(msg->rsvd);
			proto_msg->set_rsvd1(msg->rsvd1);
			proto_msg->set_err_devicetemp(msg->err_devicetemp);
			proto_msg->set_cs_oora1(msg->cs_oora1);
			proto_msg->set_km_mix_ana_on(msg->km_mix_ana_on);
			proto_msg->set_pn82(msg->pn82);
			proto_msg->set_ecode_bit7__fltls99(msg->ecode_bit7__fltls99);
			proto_msg->set_ecode_bit7__fltls148(msg->ecode_bit7__fltls148);
			proto_msg->set_cmc__bit13_7__free(msg->cmc__bit13_7__free);
			proto_msg->set_brk1155(msg->brk1155);
			proto_msg->set_err_overvoltage(msg->err_overvoltage);
			proto_msg->set_d_out_1_on(msg->d_out_1_on);
			proto_msg->set_cs_ain_2_mode((inverters::inverters_inv_l_rcv_cs_ain_2_mode)msg->cs_ain_2_mode);
			proto_msg->set_km_allow_sync(msg->km_allow_sync);
			proto_msg->set_ni82(msg->ni82);
			proto_msg->set_ain_in_2_filter(msg->ain_in_2_filter);
			proto_msg->set_ecode_bit8__fail_idc99(msg->ecode_bit8__fail_idc99);
			proto_msg->set_ecode_bit8__fail_idc148(msg->ecode_bit8__fail_idc148);
			proto_msg->set_mo_sc1_reso((inverters::inverters_inv_l_rcv_mo_sc1_reso)msg->mo_sc1_reso);
			proto_msg->set_source_id194((inverters::inverters_inv_l_rcv_source_id194)msg->source_id194);
			proto_msg->set_source_id195((inverters::inverters_inv_l_rcv_source_id195)msg->source_id195);
			proto_msg->set_source_id218((inverters::inverters_inv_l_rcv_source_id218)msg->source_id218);
			proto_msg->set_source_id219((inverters::inverters_inv_l_rcv_source_id219)msg->source_id219);
			proto_msg->set_dup__bit8__can_extended_0(msg->dup__bit8__can_extended_0);
			proto_msg->set_err_ipeak(msg->err_ipeak);
			proto_msg->set_d_out_2_on(msg->d_out_2_on);
			proto_msg->set_km_handwheel(msg->km_handwheel);
			proto_msg->set__n082(msg->_n082);
			proto_msg->set_ecode_bit9__fail_i99(msg->ecode_bit9__fail_i99);
			proto_msg->set_ecode_bit9__fail_i148(msg->ecode_bit9__fail_i148);
			proto_msg->set_dup__bit9__generator(msg->dup__bit9__generator);
			proto_msg->set_err_raceaway(msg->err_raceaway);
			proto_msg->set_btbrdy(msg->btbrdy);
			proto_msg->set_km_phasing_extend(msg->km_phasing_extend);
			proto_msg->set_rsw82(msg->rsw82);
			proto_msg->set_ecode_bit10__vccm99(msg->ecode_bit10__vccm99);
			proto_msg->set_ecode_bit10__vccm148(msg->ecode_bit10__vccm148);
			proto_msg->set_dup__bit10__park_rms(msg->dup__bit10__park_rms);
			proto_msg->set_err_user(msg->err_user);
			proto_msg->set_go216(msg->go216);
			proto_msg->set_cs_oora2(msg->cs_oora2);
			proto_msg->set_km_rsvd_11(msg->km_rsvd_11);
			proto_msg->set_cal082(msg->cal082);
			proto_msg->set_ecode_bit11__15m_minus99(msg->ecode_bit11__15m_minus99);
			proto_msg->set_ecode_bit11__15m_minus148(msg->ecode_bit11__15m_minus148);
			proto_msg->set_mo_sc1_comp(msg->mo_sc1_comp);
			proto_msg->set_dup__bit11__dcbus_volts(msg->dup__bit11__dcbus_volts);
			proto_msg->set_test(msg->test);
			proto_msg->set_d_out_3_on(msg->d_out_3_on);
			proto_msg->set_cs_cmd_type((inverters::inverters_inv_l_rcv_cs_cmd_type)msg->cs_cmd_type);
			proto_msg->set_km_rsvd_12(msg->km_rsvd_12);
			proto_msg->set_cal82(msg->cal82);
			proto_msg->set_ecode_bit12__15m_plus99(msg->ecode_bit12__15m_plus99);
			proto_msg->set_ecode_bit12__15m_plus148(msg->ecode_bit12__15m_plus148);
			proto_msg->set_mo_sc2_reso((inverters::inverters_inv_l_rcv_mo_sc2_reso)msg->mo_sc2_reso);
			proto_msg->set_dup__bit12__boat_pedal(msg->dup__bit12__boat_pedal);
			proto_msg->set_d_out_4_on(msg->d_out_4_on);
			proto_msg->set_km_rsvd_13(msg->km_rsvd_13);
			proto_msg->set_tol82(msg->tol82);
			proto_msg->set_ecode_bit13__18m_plus99(msg->ecode_bit13__18m_plus99);
			proto_msg->set_ecode_bit13__18m_plus148(msg->ecode_bit13__18m_plus148);
			proto_msg->set_dup__bit13__gen_autoiaclimit(msg->dup__bit13__gen_autoiaclimit);
			proto_msg->set_err_hwerr(msg->err_hwerr);
			proto_msg->set_goff(msg->goff);
			proto_msg->set_cs_ain_2__i_limit(msg->cs_ain_2__i_limit);
			proto_msg->set_km_pseudo_enable(msg->km_pseudo_enable);
			proto_msg->set_rdy82(msg->rdy82);
			proto_msg->set_ecode_bit14__ubmam99(msg->ecode_bit14__ubmam99);
			proto_msg->set_ecode_bit14__ubmam148(msg->ecode_bit14__ubmam148);
			proto_msg->set_cmc__bit14__idc_limit_ena_v2(msg->cmc__bit14__idc_limit_ena_v2);
			proto_msg->set_dup__bit14__mtpa_reluct_enab(msg->dup__bit14__mtpa_reluct_enab);
			proto_msg->set_err_ballast(msg->err_ballast);
			proto_msg->set_brk1216(msg->brk1216);
			proto_msg->set_cs_ain_1__n_limit(msg->cs_ain_1__n_limit);
			proto_msg->set_km_debug_test(msg->km_debug_test);
			proto_msg->set_brk082(msg->brk082);
			proto_msg->set_ecode_bit15__t_igbt99(msg->ecode_bit15__t_igbt99);
			proto_msg->set_ecode_bit15__t_igbt148(msg->ecode_bit15__t_igbt148);
			proto_msg->set_mo_sc2_inv(msg->mo_sc2_inv);
			proto_msg->set_active190((inverters::inverters_inv_l_rcv_active190)msg->active190);
			proto_msg->set_active191((inverters::inverters_inv_l_rcv_active191)msg->active191);
			proto_msg->set_active192((inverters::inverters_inv_l_rcv_active192)msg->active192);
			proto_msg->set_active193((inverters::inverters_inv_l_rcv_active193)msg->active193);
			proto_msg->set_gen_autoiaclimit_is_acv(msg->gen_autoiaclimit_is_acv);
			proto_msg->set_cmc__bit15__dig_e_brake_act(msg->cmc__bit15__dig_e_brake_act);
			proto_msg->set_dup__bit15__canopen_acv(msg->dup__bit15__canopen_acv);
			proto_msg->set_m_r_dec(msg->m_r_dec);
			proto_msg->set_m_r_rcp(msg->m_r_rcp);
			proto_msg->set_warn_warning_0(msg->warn_warning_0);
			proto_msg->set_ain_in_1_scaled213(msg->ain_in_1_scaled213);
			proto_msg->set_ain_in_2_scaled214(msg->ain_in_2_scaled214);
			proto_msg->set_t_dc__stop(msg->t_dc__stop);
			proto_msg->set_v_dc__stop(msg->v_dc__stop);
			proto_msg->set_v_min__stop(msg->v_min__stop);
			proto_msg->set_f_min__stop(msg->f_min__stop);
			proto_msg->set_v_corner__stop(msg->v_corner__stop);
			proto_msg->set_f_corner__stop(msg->f_corner__stop);
			proto_msg->set_pid_i__kp__id(msg->pid_i__kp__id);
			proto_msg->set_pid_i__ti__id(msg->pid_i__ti__id);
			proto_msg->set_pid_i__tim__id(msg->pid_i__tim__id);
			proto_msg->set_ain_in_1_scaleval(msg->ain_in_1_scaleval);
			proto_msg->set_ain_in_2_scaleval(msg->ain_in_2_scaleval);
			proto_msg->set_signmag82(msg->signmag82);
			proto_msg->set_regen_r(msg->regen_r);
			proto_msg->set_dc_bus_max_lim(msg->dc_bus_max_lim);
			proto_msg->set_pid_i__xkp__id(msg->pid_i__xkp__id);
			proto_msg->set_bat_opr_limit__gen(msg->bat_opr_limit__gen);
			proto_msg->set_pid_i__kf__id(msg->pid_i__kf__id);
			proto_msg->set_cmc__bit17_16__checkipeak_config(msg->cmc__bit17_16__checkipeak_config);
			proto_msg->set_dup__bit16__bamobil3_2_offcrct(msg->dup__bit16__bamobil3_2_offcrct);
			proto_msg->set_special__stop(msg->special__stop);
			proto_msg->set_free(msg->free);
			proto_msg->set_svnrevision_nr(msg->svnrevision_nr);
			proto_msg->set_warn_illegal_status(msg->warn_illegal_status);
			proto_msg->set_nclip82(msg->nclip82);
			proto_msg->set_dup__bit19_17__ecode_redefine(msg->dup__bit19_17__ecode_redefine);
			proto_msg->set_warn_safe_in(msg->warn_safe_in);
			proto_msg->set_nclip_minus82(msg->nclip_minus82);
			proto_msg->set_cmc__bit18__tractioncontrol_ena(msg->cmc__bit18__tractioncontrol_ena);
			proto_msg->set_nclip_plus82(msg->nclip_plus82);
			proto_msg->set_cmc__bit20_19__tc_deltatime_conf(msg->cmc__bit20_19__tc_deltatime_conf);
			proto_msg->set_irddig82(msg->irddig82);
			proto_msg->set_dup__bit20__hal_extmr_acv(msg->dup__bit20__hal_extmr_acv);
			proto_msg->set_iuserchd82(msg->iuserchd82);
			proto_msg->set_cmc__bit22_21__tc_minspeed_conf(msg->cmc__bit22_21__tc_minspeed_conf);
			proto_msg->set_dup__bit21__initwith_frg_off(msg->dup__bit21__initwith_frg_off);
			proto_msg->set_warn_motortemp(msg->warn_motortemp);
			proto_msg->set_irdn82(msg->irdn82);
			proto_msg->set_dup__bit31_22__free(msg->dup__bit31_22__free);
			proto_msg->set_warn_devicetemp(msg->warn_devicetemp);
			proto_msg->set_irdti82(msg->irdti82);
			proto_msg->set_cmc__bit23__tc_ncmdrestoption(msg->cmc__bit23__tc_ncmdrestoption);
			proto_msg->set_m_r_acc(msg->m_r_acc);
			proto_msg->set_warn_vout_sat(msg->warn_vout_sat);
			proto_msg->set_irdtir82(msg->irdtir82);
			proto_msg->set_cmc__bit31_24__free(msg->cmc__bit31_24__free);
			proto_msg->set_warn_ipeak(msg->warn_ipeak);
			proto_msg->set__10hz82(msg->_10hz82);
			proto_msg->set_warn_raceaway(msg->warn_raceaway);
			proto_msg->set_irdtm82(msg->irdtm82);
			proto_msg->set_irdana82(msg->irdana82);
			proto_msg->set_iwcns82(msg->iwcns82);
			proto_msg->set_rfepulse82(msg->rfepulse82);
			proto_msg->set_md82(msg->md82);
			proto_msg->set_warn_ballast(msg->warn_ballast);
			proto_msg->set_hndwhl82(msg->hndwhl82);

#ifdef CANLIB_TIMESTAMP
            proto_msg->set__inner_timestamp(msg->_timestamp);
#endif // CANLIB_TIMESTAMP
            break;
        }

        case 314: {
            inverters_inv_r_send_converted_t* msg = (inverters_inv_r_send_converted_t*)(device->message);
            inverters::INV_R_SEND* proto_msg = pack->add_inv_r_send();
			proto_msg->set_send_mux((inverters::inverters_inv_r_send_send_mux)msg->send_mux);
			proto_msg->set_motor_f_n(msg->motor_f_n);
			proto_msg->set_cos_phi(msg->cos_phi);
			proto_msg->set_pid_i__kp__iq(msg->pid_i__kp__iq);
			proto_msg->set_pid_i__ti__iq(msg->pid_i__ti__iq);
			proto_msg->set_id_setdig__id(msg->id_setdig__id);
			proto_msg->set_i_delta_ramp(msg->i_delta_ramp);
			proto_msg->set_pid_i__tim__iq(msg->pid_i__tim__iq);
			proto_msg->set_pid_n__kp(msg->pid_n__kp);
			proto_msg->set_pid_n__ti(msg->pid_n__ti);
			proto_msg->set_pid_n__td(msg->pid_n__td);
			proto_msg->set_n_setdig(msg->n_setdig);
			proto_msg->set_n_lim(msg->n_lim);
			proto_msg->set_n_r_acc(msg->n_r_acc);
			proto_msg->set_pid_n__tim(msg->pid_n__tim);
			proto_msg->set_i_red_n(msg->i_red_n);
			proto_msg->set_n_lim_minus(msg->n_lim_minus);
			proto_msg->set_n_lim_plus(msg->n_lim_plus);
			proto_msg->set_read_id((inverters::inverters_inv_r_send_read_id)msg->read_id);
			proto_msg->set_i_lim_dig(msg->i_lim_dig);
			proto_msg->set_i_red_te(msg->i_red_te);
			proto_msg->set_i_max_eff(msg->i_max_eff);
			proto_msg->set_i_nom_eff(msg->i_nom_eff);
			proto_msg->set_motor_pole(msg->motor_pole);
			proto_msg->set_ain_in_1_cutoff(msg->ain_in_1_cutoff);
			proto_msg->set_km_rsvd_0(msg->km_rsvd_0);
			proto_msg->set_ain_in_2_cutoff(msg->ain_in_2_cutoff);
			proto_msg->set_i_red_td(msg->i_red_td);
			proto_msg->set_n_nom(msg->n_nom);
			proto_msg->set_pid_n__kacc(msg->pid_n__kacc);
			proto_msg->set_speed_filter(msg->speed_filter);
			proto_msg->set_ain_in_1_filter(msg->ain_in_1_filter);
			proto_msg->set_snr(msg->snr);
			proto_msg->set_device_mains(msg->device_mains);
			proto_msg->set_regen_p(msg->regen_p);
			proto_msg->set_devicetype((inverters::inverters_inv_r_send_devicetype)msg->devicetype);
			proto_msg->set_can_id_rx(msg->can_id_rx);
			proto_msg->set_can_id_tx(msg->can_id_tx);
			proto_msg->set_pos_kp(msg->pos_kp);
			proto_msg->set_pos_ti(msg->pos_ti);
			proto_msg->set_pos_td(msg->pos_td);
			proto_msg->set_pos_dest(msg->pos_dest);
			proto_msg->set_pos_tim(msg->pos_tim);
			proto_msg->set_pos_offsref(msg->pos_offsref);
			proto_msg->set_can_nbt((inverters::inverters_inv_r_send_can_nbt)msg->can_nbt);
			proto_msg->set_ref_reso_edge(msg->ref_reso_edge);
			proto_msg->set_speed_1(msg->speed_1);
			proto_msg->set_speed_2(msg->speed_2);
			proto_msg->set_pos_tol_win(msg->pos_tol_win);
			proto_msg->set_pos_preset_val(msg->pos_preset_val);
			proto_msg->set_can_id_2_rx(msg->can_id_2_rx);
			proto_msg->set_can_id_2_tx(msg->can_id_2_tx);
			proto_msg->set_v_ref(msg->v_ref);
			proto_msg->set_v_kp(msg->v_kp);
			proto_msg->set_v_ti(msg->v_ti);
			proto_msg->set_clear_errors(msg->clear_errors);
			proto_msg->set_m_setdig__iq(msg->m_setdig__iq);
			proto_msg->set_i_red_tm(msg->i_red_tm);
			proto_msg->set_m_temp(msg->m_temp);
			proto_msg->set_mo_feedback_1((inverters::inverters_inv_r_send_mo_feedback_1)msg->mo_feedback_1);
			proto_msg->set_dc_bus_min_lim(msg->dc_bus_min_lim);
			proto_msg->set_fb_incr_mot(msg->fb_incr_mot);
			proto_msg->set_fb_pole(msg->fb_pole);
			proto_msg->set_motor_lsq(msg->motor_lsq);
			proto_msg->set_id_nom(msg->id_nom);
			proto_msg->set_motor_lm(msg->motor_lm);
			proto_msg->set_motor_rr(msg->motor_rr);
			proto_msg->set_id_min(msg->id_min);
			proto_msg->set_motor_tr(msg->motor_tr);
			proto_msg->set_motor_lsd(msg->motor_lsd);
			proto_msg->set_motor_rs(msg->motor_rs);
			proto_msg->set_motor_ts(msg->motor_ts);
			proto_msg->set_def_end_1((inverters::inverters_inv_r_send_def_end_1)msg->def_end_1);
			proto_msg->set_def_end_2((inverters::inverters_inv_r_send_def_end_2)msg->def_end_2);
			proto_msg->set_def_din_1((inverters::inverters_inv_r_send_def_din_1)msg->def_din_1);
			proto_msg->set_def_din_2((inverters::inverters_inv_r_send_def_din_2)msg->def_din_2);
			proto_msg->set_i_max_pk(msg->i_max_pk);
			proto_msg->set_i_con_eff(msg->i_con_eff);
			proto_msg->set_i_device(msg->i_device);
			proto_msg->set_n_r_lim(msg->n_r_lim);
			proto_msg->set_nmax100perc(msg->nmax100perc);
			proto_msg->set_pid_i__xkp__iq(msg->pid_i__xkp__iq);
			proto_msg->set_bat_opr_limit__mot(msg->bat_opr_limit__mot);
			proto_msg->set_pid_i__kf__iq(msg->pid_i__kf__iq);
			proto_msg->set_cmc__bit0__dc_current_sens_ena(msg->cmc__bit0__dc_current_sens_ena);
			proto_msg->set_can_rxtimeout(msg->can_rxtimeout);
			proto_msg->set_var_1(msg->var_1);
			proto_msg->set_var_2(msg->var_2);
			proto_msg->set_var_3(msg->var_3);
			proto_msg->set_var_4(msg->var_4);
			proto_msg->set_ain_in_2_offsetval(msg->ain_in_2_offsetval);
			proto_msg->set_n_r_dec(msg->n_r_dec);
			proto_msg->set_v_shunt(msg->v_shunt);
			proto_msg->set_t_peak(msg->t_peak);
			proto_msg->set_brake_delay(msg->brake_delay);
			proto_msg->set_axis(msg->axis);
			proto_msg->set_km_speed_0(msg->km_speed_0);
			proto_msg->set_cmc__bit1__idc_limit_ena(msg->cmc__bit1__idc_limit_ena);
			proto_msg->set_km_frg_off(msg->km_frg_off);
			proto_msg->set_cmc__bit2__pdc_limit_usage(msg->cmc__bit2__pdc_limit_usage);
			proto_msg->set_km_cal_off(msg->km_cal_off);
			proto_msg->set_cmc__bit3__torqueval_init_ena(msg->cmc__bit3__torqueval_init_ena);
			proto_msg->set_km_tx_tog_stat(msg->km_tx_tog_stat);
			proto_msg->set_cmc__bit4__dig_m_rcpramp_ena(msg->cmc__bit4__dig_m_rcpramp_ena);
			proto_msg->set_km_i_limit(msg->km_i_limit);
			proto_msg->set_mo_feedback_2((inverters::inverters_inv_r_send_mo_feedback_2)msg->mo_feedback_2);
			proto_msg->set_cmc__bit5__reset_nramp_atnzero(msg->cmc__bit5__reset_nramp_atnzero);
			proto_msg->set_km_n_clip(msg->km_n_clip);
			proto_msg->set_cmc__bit6__torquetimeout_100ms_e(msg->cmc__bit6__torquetimeout_100ms_e);
			proto_msg->set_km_mix_ana_on(msg->km_mix_ana_on);
			proto_msg->set_cmc__bit13_7__free(msg->cmc__bit13_7__free);
			proto_msg->set_ret_interval((inverters::inverters_inv_r_send_ret_interval)msg->ret_interval);
			proto_msg->set_km_allow_sync(msg->km_allow_sync);
			proto_msg->set_ain_in_2_filter(msg->ain_in_2_filter);
			proto_msg->set_mo_sc1_reso((inverters::inverters_inv_r_send_mo_sc1_reso)msg->mo_sc1_reso);
			proto_msg->set_km_handwheel(msg->km_handwheel);
			proto_msg->set_km_phasing_extend(msg->km_phasing_extend);
			proto_msg->set_km_rsvd_11(msg->km_rsvd_11);
			proto_msg->set_mo_sc1_comp(msg->mo_sc1_comp);
			proto_msg->set_km_rsvd_12(msg->km_rsvd_12);
			proto_msg->set_mo_sc2_reso((inverters::inverters_inv_r_send_mo_sc2_reso)msg->mo_sc2_reso);
			proto_msg->set_km_rsvd_13(msg->km_rsvd_13);
			proto_msg->set_km_pseudo_enable(msg->km_pseudo_enable);
			proto_msg->set_cmc__bit14__idc_limit_ena_v2(msg->cmc__bit14__idc_limit_ena_v2);
			proto_msg->set_km_debug_test(msg->km_debug_test);
			proto_msg->set_mo_sc2_inv(msg->mo_sc2_inv);
			proto_msg->set_active190((inverters::inverters_inv_r_send_active190)msg->active190);
			proto_msg->set_active191((inverters::inverters_inv_r_send_active191)msg->active191);
			proto_msg->set_active192((inverters::inverters_inv_r_send_active192)msg->active192);
			proto_msg->set_active193((inverters::inverters_inv_r_send_active193)msg->active193);
			proto_msg->set_cmc__bit15__dig_e_brake_act(msg->cmc__bit15__dig_e_brake_act);
			proto_msg->set_pid_i__kp__id(msg->pid_i__kp__id);
			proto_msg->set_pid_i__ti__id(msg->pid_i__ti__id);
			proto_msg->set_pid_i__tim__id(msg->pid_i__tim__id);
			proto_msg->set_m_r_acc(msg->m_r_acc);
			proto_msg->set_regen_r(msg->regen_r);
			proto_msg->set_dc_bus_max_lim(msg->dc_bus_max_lim);
			proto_msg->set_m_r_rcp(msg->m_r_rcp);
			proto_msg->set_pid_i__xkp__id(msg->pid_i__xkp__id);
			proto_msg->set_bat_opr_limit__gen(msg->bat_opr_limit__gen);
			proto_msg->set_pid_i__kf__id(msg->pid_i__kf__id);
			proto_msg->set_cmc__bit17_16__checkipeak_config(msg->cmc__bit17_16__checkipeak_config);
			proto_msg->set_ain_in_2_scaleval(msg->ain_in_2_scaleval);
			proto_msg->set_m_r_dec(msg->m_r_dec);
			proto_msg->set_cmc__bit18__tractioncontrol_ena(msg->cmc__bit18__tractioncontrol_ena);
			proto_msg->set_cmc__bit20_19__tc_deltatime_conf(msg->cmc__bit20_19__tc_deltatime_conf);
			proto_msg->set_cmc__bit22_21__tc_minspeed_conf(msg->cmc__bit22_21__tc_minspeed_conf);
			proto_msg->set_cmc__bit23__tc_ncmdrestoption(msg->cmc__bit23__tc_ncmdrestoption);
			proto_msg->set_cmc__bit31_24__free(msg->cmc__bit31_24__free);

#ifdef CANLIB_TIMESTAMP
            proto_msg->set__inner_timestamp(msg->_timestamp);
#endif // CANLIB_TIMESTAMP
            break;
        }

        case 386: {
            inverters_inv_r_rcv_converted_t* msg = (inverters_inv_r_rcv_converted_t*)(device->message);
            inverters::INV_R_RCV* proto_msg = pack->add_inv_r_rcv();
			proto_msg->set_rcv_mux((inverters::inverters_inv_r_rcv_rcv_mux)msg->rcv_mux);
			proto_msg->set_n_actual(msg->n_actual);
			proto_msg->set_n_r_dec(msg->n_r_dec);
			proto_msg->set_n_r_lim(msg->n_r_lim);
			proto_msg->set_n_actual_filt(msg->n_actual_filt);
			proto_msg->set_firmware(msg->firmware);
			proto_msg->set_devicetype((inverters::inverters_inv_r_rcv_devicetype)msg->devicetype);
			proto_msg->set_snr(msg->snr);
			proto_msg->set_axis(msg->axis);
			proto_msg->set_i_device(msg->i_device);
			proto_msg->set_v_shunt(msg->v_shunt);
			proto_msg->set_i_200perc(msg->i_200perc);
			proto_msg->set_status_bitmap(msg->status_bitmap);
			proto_msg->set_err_badparas(msg->err_badparas);
			proto_msg->set_lmt_active_1(msg->lmt_active_1);
			proto_msg->set_ain_in_1_raw(msg->ain_in_1_raw);
			proto_msg->set_ain_in_2_raw(msg->ain_in_2_raw);
			proto_msg->set_nmax100perc(msg->nmax100perc);
			proto_msg->set_n_setdig(msg->n_setdig);
			proto_msg->set_n_cmd(msg->n_cmd);
			proto_msg->set_n_cmd_ramp(msg->n_cmd_ramp);
			proto_msg->set_n_lim(msg->n_lim);
			proto_msg->set_n_error(msg->n_error);
			proto_msg->set_m_setdig__iq(msg->m_setdig__iq);
			proto_msg->set_id_setdig__id(msg->id_setdig__id);
			proto_msg->set_i_max_pk(msg->i_max_pk);
			proto_msg->set_i_con_eff(msg->i_con_eff);
			proto_msg->set_i_max_eff(msg->i_max_eff);
			proto_msg->set_i_nom_eff(msg->i_nom_eff);
			proto_msg->set_i_limit_inuse(msg->i_limit_inuse);
			proto_msg->set_i_cmd(msg->i_cmd);
			proto_msg->set_i_cmd_ramp(msg->i_cmd_ramp);
			proto_msg->set_i_actual(msg->i_actual);
			proto_msg->set_i_actual_filt(msg->i_actual_filt);
			proto_msg->set_iq_actual(msg->iq_actual);
			proto_msg->set_id_actual(msg->id_actual);
			proto_msg->set_iq_error(msg->iq_error);
			proto_msg->set_id_error(msg->id_error);
			proto_msg->set_i1_actual(msg->i1_actual);
			proto_msg->set_i2_actual(msg->i2_actual);
			proto_msg->set_i3_actual(msg->i3_actual);
			proto_msg->set_i3_adc(msg->i3_adc);
			proto_msg->set_i2_adc(msg->i2_adc);
			proto_msg->set_vq(msg->vq);
			proto_msg->set_vd(msg->vd);
			proto_msg->set_vout(msg->vout);
			proto_msg->set_t_motor(msg->t_motor);
			proto_msg->set_t_igbt(msg->t_igbt);
			proto_msg->set_t_air(msg->t_air);
			proto_msg->set_vdc_bus_filt(msg->vdc_bus_filt);
			proto_msg->set_end_1(msg->end_1);
			proto_msg->set_din_1(msg->din_1);
			proto_msg->set_end_2(msg->end_2);
			proto_msg->set_din_2(msg->din_2);
			proto_msg->set_run232(msg->run232);
			proto_msg->set_dout_1(msg->dout_1);
			proto_msg->set_dout_2(msg->dout_2);
			proto_msg->set_dout_3(msg->dout_3);
			proto_msg->set_rdy_btb(msg->rdy_btb);
			proto_msg->set_i_fault(msg->i_fault);
			proto_msg->set_dout_4(msg->dout_4);
			proto_msg->set_i_lim_dig(msg->i_lim_dig);
			proto_msg->set_i_red_n(msg->i_red_n);
			proto_msg->set_i_red_td(msg->i_red_td);
			proto_msg->set_i_red_te(msg->i_red_te);
			proto_msg->set_i_red_tm(msg->i_red_tm);
			proto_msg->set_cs_ain_1_format(msg->cs_ain_1_format);
			proto_msg->set_id_ref(msg->id_ref);
			proto_msg->set_m_outdig__iq(msg->m_outdig__iq);
			proto_msg->set_ptr_1_debug(msg->ptr_1_debug);
			proto_msg->set_ptr_2_debug(msg->ptr_2_debug);
			proto_msg->set_temp_debug(msg->temp_debug);
			proto_msg->set_motor_f_n(msg->motor_f_n);
			proto_msg->set_motor_v_n(msg->motor_v_n);
			proto_msg->set_t_dc__start(msg->t_dc__start);
			proto_msg->set_v_dc__start(msg->v_dc__start);
			proto_msg->set_v_min__start(msg->v_min__start);
			proto_msg->set_f_min__start(msg->f_min__start);
			proto_msg->set_v_corner__start(msg->v_corner__start);
			proto_msg->set_f_corner__start(msg->f_corner__start);
			proto_msg->set_cos_phi(msg->cos_phi);
			proto_msg->set_pwm_enum(msg->pwm_enum);
			proto_msg->set_calib_ref_value(msg->calib_ref_value);
			proto_msg->set_pid_i__kp__iq(msg->pid_i__kp__iq);
			proto_msg->set_pid_i__ti__iq(msg->pid_i__ti__iq);
			proto_msg->set_cutoffdig(msg->cutoffdig);
			proto_msg->set_i3_offset(msg->i3_offset);
			proto_msg->set_i_delta_ramp(msg->i_delta_ramp);
			proto_msg->set_pid_i__tim__iq(msg->pid_i__tim__iq);
			proto_msg->set_pid_n__kp(msg->pid_n__kp);
			proto_msg->set_v_ti(msg->v_ti);
			proto_msg->set_pid_n__td(msg->pid_n__td);
			proto_msg->set_ain_in_1_offsetval(msg->ain_in_1_offsetval);
			proto_msg->set_ain_in_2_offsetval(msg->ain_in_2_offsetval);
			proto_msg->set_dzr_seq(msg->dzr_seq);
			proto_msg->set_pid_n__tim(msg->pid_n__tim);
			proto_msg->set_n_lim_plus(msg->n_lim_plus);
			proto_msg->set_n_lim_minus(msg->n_lim_minus);
			proto_msg->set_incr_delta(msg->incr_delta);
			proto_msg->set_motorpos_mech(msg->motorpos_mech);
			proto_msg->set_motorpos_elec(msg->motorpos_elec);
			proto_msg->set_fb_offset(msg->fb_offset);
			proto_msg->set_it_rg_monitor(msg->it_rg_monitor);
			proto_msg->set_motor_pole(msg->motor_pole);
			proto_msg->set_ain_in_1_cutoff(msg->ain_in_1_cutoff);
			proto_msg->set_km_rsvd_0(msg->km_rsvd_0);
			proto_msg->set_ena82(msg->ena82);
			proto_msg->set_ain_in_2_cutoff(msg->ain_in_2_cutoff);
			proto_msg->set_i_limit_inuse_ramp(msg->i_limit_inuse_ramp);
			proto_msg->set_n_nom(msg->n_nom);
			proto_msg->set_pid_n__kacc(msg->pid_n__kacc);
			proto_msg->set_rotor_signals(msg->rotor_signals);
			proto_msg->set_speed_filter(msg->speed_filter);
			proto_msg->set_ain_in_1_filter(msg->ain_in_1_filter);
			proto_msg->set_ixt_monitor(msg->ixt_monitor);
			proto_msg->set_ecode_bit0_firsterrordtcd99(msg->ecode_bit0_firsterrordtcd99);
			proto_msg->set_device_mains(msg->device_mains);
			proto_msg->set_regen_p(msg->regen_p);
			proto_msg->set_can_id_rx(msg->can_id_rx);
			proto_msg->set_can_id_tx(msg->can_id_tx);
			proto_msg->set_pos_kp(msg->pos_kp);
			proto_msg->set_pos_ti(msg->pos_ti);
			proto_msg->set_pos_td(msg->pos_td);
			proto_msg->set_pos_actual(msg->pos_actual);
			proto_msg->set_pos_dest(msg->pos_dest);
			proto_msg->set_pos_actual_2(msg->pos_actual_2);
			proto_msg->set_pos_error(msg->pos_error);
			proto_msg->set_pos_tim(msg->pos_tim);
			proto_msg->set_pos_offsref(msg->pos_offsref);
			proto_msg->set_can_nbt((inverters::inverters_inv_r_rcv_can_nbt)msg->can_nbt);
			proto_msg->set_pos_zero_capture(msg->pos_zero_capture);
			proto_msg->set_ref_reso_edge(msg->ref_reso_edge);
			proto_msg->set_speed_1(msg->speed_1);
			proto_msg->set_speed_2(msg->speed_2);
			proto_msg->set_pos_tol_win(msg->pos_tol_win);
			proto_msg->set_pos_preset_val(msg->pos_preset_val);
			proto_msg->set_pos_zero_offset(msg->pos_zero_offset);
			proto_msg->set_pos_nd_scale(msg->pos_nd_scale);
			proto_msg->set_pos_nd_offset(msg->pos_nd_offset);
			proto_msg->set_fb2_scale_ext(msg->fb2_scale_ext);
			proto_msg->set_pos_offset_slack(msg->pos_offset_slack);
			proto_msg->set_pos_diff_slack(msg->pos_diff_slack);
			proto_msg->set_fun_para_read(msg->fun_para_read);
			proto_msg->set_fun_para_write(msg->fun_para_write);
			proto_msg->set_fun_special(msg->fun_special);
			proto_msg->set_can_id_2_rx(msg->can_id_2_rx);
			proto_msg->set_can_id_2_tx(msg->can_id_2_tx);
			proto_msg->set_v_ref(msg->v_ref);
			proto_msg->set_v_kp(msg->v_kp);
			proto_msg->set_pid_n__ti(msg->pid_n__ti);
			proto_msg->set_clear_errors(msg->clear_errors);
			proto_msg->set_pos_cmd(msg->pos_cmd);
			proto_msg->set_can_error_busoff(msg->can_error_busoff);
			proto_msg->set_can_error_writetime(msg->can_error_writetime);
			proto_msg->set_ecode_bit0_firsterrordtcd148(msg->ecode_bit0_firsterrordtcd148);
			proto_msg->set_can_error_no_ack(msg->can_error_no_ack);
			proto_msg->set_can_error_crc_check150(msg->can_error_crc_check150);
			proto_msg->set_can_error_crc_check151(msg->can_error_crc_check151);
			proto_msg->set_info_timer_diff(msg->info_timer_diff);
			proto_msg->set_ballastcount(msg->ballastcount);
			proto_msg->set_m_temp(msg->m_temp);
			proto_msg->set_mo_feedback_1((inverters::inverters_inv_r_rcv_mo_feedback_1)msg->mo_feedback_1);
			proto_msg->set_dc_bus_min_lim(msg->dc_bus_min_lim);
			proto_msg->set_fb_incr_mot(msg->fb_incr_mot);
			proto_msg->set_fb_pole(msg->fb_pole);
			proto_msg->set_logic_freq(msg->logic_freq);
			proto_msg->set_pwm_1(msg->pwm_1);
			proto_msg->set_pwm_2(msg->pwm_2);
			proto_msg->set_pwm_3(msg->pwm_3);
			proto_msg->set_timer_delta(msg->timer_delta);
			proto_msg->set_motor_lsq(msg->motor_lsq);
			proto_msg->set_motor_lsd(msg->motor_lsd);
			proto_msg->set_id_nom(msg->id_nom);
			proto_msg->set_motor_lm(msg->motor_lm);
			proto_msg->set_motor_rr(msg->motor_rr);
			proto_msg->set_id_min(msg->id_min);
			proto_msg->set_motor_tr(msg->motor_tr);
			proto_msg->set_motor_rs(msg->motor_rs);
			proto_msg->set_motor_ts(msg->motor_ts);
			proto_msg->set_def_end_1((inverters::inverters_inv_r_rcv_def_end_1)msg->def_end_1);
			proto_msg->set_def_end_2((inverters::inverters_inv_r_rcv_def_end_2)msg->def_end_2);
			proto_msg->set_def_din_1((inverters::inverters_inv_r_rcv_def_din_1)msg->def_din_1);
			proto_msg->set_def_din_2((inverters::inverters_inv_r_rcv_def_din_2)msg->def_din_2);
			proto_msg->set_operand194(msg->operand194);
			proto_msg->set_i_max_inuse(msg->i_max_inuse);
			proto_msg->set_signal_go(msg->signal_go);
			proto_msg->set_signal_brake(msg->signal_brake);
			proto_msg->set_signal_icns(msg->signal_icns);
			proto_msg->set_signal_lessn0(msg->signal_lessn0);
			proto_msg->set_signal_postolerance(msg->signal_postolerance);
			proto_msg->set_ain_in_1_scaled251(msg->ain_in_1_scaled251);
			proto_msg->set_ain_in_2_scaled252(msg->ain_in_2_scaled252);
			proto_msg->set_operand195(msg->operand195);
			proto_msg->set_operand218(msg->operand218);
			proto_msg->set_operand219(msg->operand219);
			proto_msg->set_pid_i__xkp__iq(msg->pid_i__xkp__iq);
			proto_msg->set_bat_opr_limit__mot(msg->bat_opr_limit__mot);
			proto_msg->set_pid_i__kf__iq(msg->pid_i__kf__iq);
			proto_msg->set_dc_current_sens_ena_set(msg->dc_current_sens_ena_set);
			proto_msg->set_cmc__bit0__dc_current_sens_ena(msg->cmc__bit0__dc_current_sens_ena);
			proto_msg->set_n_rpm_maxint(msg->n_rpm_maxint);
			proto_msg->set_var_1(msg->var_1);
			proto_msg->set_can_rxtimeout(msg->can_rxtimeout);
			proto_msg->set_var_2(msg->var_2);
			proto_msg->set_var_3(msg->var_3);
			proto_msg->set_var_4(msg->var_4);
			proto_msg->set_dup__bit7_0__dac_source_channel(msg->dup__bit7_0__dac_source_channel);
			proto_msg->set_fb_lossofsignal(msg->fb_lossofsignal);
			proto_msg->set_no_hw_fault(msg->no_hw_fault);
			proto_msg->set_t_peak(msg->t_peak);
			proto_msg->set_brake_delay(msg->brake_delay);
			proto_msg->set_power(msg->power);
			proto_msg->set_work(msg->work);
			proto_msg->set_extra__start(msg->extra__start);
			proto_msg->set_capture_channel(msg->capture_channel);
			proto_msg->set_trig_level(msg->trig_level);
			proto_msg->set_trig_edge(msg->trig_edge);
			proto_msg->set_trig_source(msg->trig_source);
			proto_msg->set_oszi_source(msg->oszi_source);
			proto_msg->set_oszi_skip(msg->oszi_skip);
			proto_msg->set_oszi_run_cmd(msg->oszi_run_cmd);
			proto_msg->set_oszi_read_cmd(msg->oszi_read_cmd);
			proto_msg->set_pos_ref_start(msg->pos_ref_start);
			proto_msg->set_vdc_bus(msg->vdc_bus);
			proto_msg->set_m_cmd_ramp(msg->m_cmd_ramp);
			proto_msg->set_lmt_1(msg->lmt_1);
			proto_msg->set_out_1(msg->out_1);
			proto_msg->set_subversion_nr(msg->subversion_nr);
			proto_msg->set_err_powerfault(msg->err_powerfault);
			proto_msg->set_lmt_active_2(msg->lmt_active_2);
			proto_msg->set_km_speed_0(msg->km_speed_0);
			proto_msg->set_ncr082(msg->ncr082);
			proto_msg->set_ecode_bit1__hw1_state99(msg->ecode_bit1__hw1_state99);
			proto_msg->set_ecode_bit1__hw1_state148(msg->ecode_bit1__hw1_state148);
			proto_msg->set_dc_i_sensena_set(msg->dc_i_sensena_set);
			proto_msg->set_cmc__bit1__idc_limit_ena(msg->cmc__bit1__idc_limit_ena);
			proto_msg->set_lmt_2(msg->lmt_2);
			proto_msg->set_out_2(msg->out_2);
			proto_msg->set_err_rfe_fault(msg->err_rfe_fault);
			proto_msg->set_in_active_2(msg->in_active_2);
			proto_msg->set_cs_ain_2_format(msg->cs_ain_2_format);
			proto_msg->set_km_frg_off(msg->km_frg_off);
			proto_msg->set_lim_plus82(msg->lim_plus82);
			proto_msg->set_ecode_bit2__hw0_state99(msg->ecode_bit2__hw0_state99);
			proto_msg->set_ecode_bit2__hw0_state148(msg->ecode_bit2__hw0_state148);
			proto_msg->set_op_mode_quadrant(msg->op_mode_quadrant);
			proto_msg->set_cmc__bit2__pdc_limit_usage(msg->cmc__bit2__pdc_limit_usage);
			proto_msg->set_in_2(msg->in_2);
			proto_msg->set_rdy155(msg->rdy155);
			proto_msg->set_err_bustimeout(msg->err_bustimeout);
			proto_msg->set_in_active_1(msg->in_active_1);
			proto_msg->set_km_cal_off(msg->km_cal_off);
			proto_msg->set_lim_minus82(msg->lim_minus82);
			proto_msg->set_ecode_bit3__free99(msg->ecode_bit3__free99);
			proto_msg->set_ecode_bit3__free148(msg->ecode_bit3__free148);
			proto_msg->set_cmc__bit3__torqueval_init_ena(msg->cmc__bit3__torqueval_init_ena);
			proto_msg->set_in_1(msg->in_1);
			proto_msg->set_go155(msg->go155);
			proto_msg->set_err_feedbacksignal(msg->err_feedbacksignal);
			proto_msg->set_frgrun(msg->frgrun);
			proto_msg->set_cs_ain_1_mode((inverters::inverters_inv_r_rcv_cs_ain_1_mode)msg->cs_ain_1_mode);
			proto_msg->set_km_tx_tog_stat(msg->km_tx_tog_stat);
			proto_msg->set_ok82(msg->ok82);
			proto_msg->set_ecode_bit4__rdy399(msg->ecode_bit4__rdy399);
			proto_msg->set_ecode_bit4__rdy3148(msg->ecode_bit4__rdy3148);
			proto_msg->set_compare_var194((inverters::inverters_inv_r_rcv_compare_var194)msg->compare_var194);
			proto_msg->set_compare_var195((inverters::inverters_inv_r_rcv_compare_var195)msg->compare_var195);
			proto_msg->set_compare_var218((inverters::inverters_inv_r_rcv_compare_var218)msg->compare_var218);
			proto_msg->set_compare_var219((inverters::inverters_inv_r_rcv_compare_var219)msg->compare_var219);
			proto_msg->set_cmc__bit4__dig_m_rcpramp_ena(msg->cmc__bit4__dig_m_rcpramp_ena);
			proto_msg->set_run152(msg->run152);
			proto_msg->set_out_3(msg->out_3);
			proto_msg->set_err_powervoltage_low(msg->err_powervoltage_low);
			proto_msg->set_rfe216(msg->rfe216);
			proto_msg->set_km_i_limit(msg->km_i_limit);
			proto_msg->set_icns82(msg->icns82);
			proto_msg->set_ecode_bit5__n_fail99(msg->ecode_bit5__n_fail99);
			proto_msg->set_ecode_bit5__n_fail148(msg->ecode_bit5__n_fail148);
			proto_msg->set_mo_feedback_2((inverters::inverters_inv_r_rcv_mo_feedback_2)msg->mo_feedback_2);
			proto_msg->set_recup_is_acv(msg->recup_is_acv);
			proto_msg->set_cmc__bit5__reset_nramp_atnzero(msg->cmc__bit5__reset_nramp_atnzero);
			proto_msg->set_rfe152(msg->rfe152);
			proto_msg->set_out_4(msg->out_4);
			proto_msg->set_err_motortemp(msg->err_motortemp);
			proto_msg->set_km_n_clip(msg->km_n_clip);
			proto_msg->set_tnlim82(msg->tnlim82);
			proto_msg->set_ecode_bit6__flths99(msg->ecode_bit6__flths99);
			proto_msg->set_ecode_bit6__flths148(msg->ecode_bit6__flths148);
			proto_msg->set_i_dc_limit_is_acv(msg->i_dc_limit_is_acv);
			proto_msg->set_cmc__bit6__torquetimeout_100ms_e(msg->cmc__bit6__torquetimeout_100ms_e);
			proto_msg->set_rsvd(msg->rsvd);
			proto_msg->set_rsvd1(msg->rsvd1);
			proto_msg->set_err_devicetemp(msg->err_devicetemp);
			proto_msg->set_cs_oora1(msg->cs_oora1);
			proto_msg->set_km_mix_ana_on(msg->km_mix_ana_on);
			proto_msg->set_pn82(msg->pn82);
			proto_msg->set_ecode_bit7__fltls99(msg->ecode_bit7__fltls99);
			proto_msg->set_ecode_bit7__fltls148(msg->ecode_bit7__fltls148);
			proto_msg->set_cmc__bit13_7__free(msg->cmc__bit13_7__free);
			proto_msg->set_brk1155(msg->brk1155);
			proto_msg->set_err_overvoltage(msg->err_overvoltage);
			proto_msg->set_d_out_1_on(msg->d_out_1_on);
			proto_msg->set_cs_ain_2_mode((inverters::inverters_inv_r_rcv_cs_ain_2_mode)msg->cs_ain_2_mode);
			proto_msg->set_km_allow_sync(msg->km_allow_sync);
			proto_msg->set_ni82(msg->ni82);
			proto_msg->set_ain_in_2_filter(msg->ain_in_2_filter);
			proto_msg->set_ecode_bit8__fail_idc99(msg->ecode_bit8__fail_idc99);
			proto_msg->set_ecode_bit8__fail_idc148(msg->ecode_bit8__fail_idc148);
			proto_msg->set_mo_sc1_reso((inverters::inverters_inv_r_rcv_mo_sc1_reso)msg->mo_sc1_reso);
			proto_msg->set_source_id194((inverters::inverters_inv_r_rcv_source_id194)msg->source_id194);
			proto_msg->set_source_id195((inverters::inverters_inv_r_rcv_source_id195)msg->source_id195);
			proto_msg->set_source_id218((inverters::inverters_inv_r_rcv_source_id218)msg->source_id218);
			proto_msg->set_source_id219((inverters::inverters_inv_r_rcv_source_id219)msg->source_id219);
			proto_msg->set_dup__bit8__can_extended_0(msg->dup__bit8__can_extended_0);
			proto_msg->set_err_ipeak(msg->err_ipeak);
			proto_msg->set_d_out_2_on(msg->d_out_2_on);
			proto_msg->set_km_handwheel(msg->km_handwheel);
			proto_msg->set__n082(msg->_n082);
			proto_msg->set_ecode_bit9__fail_i99(msg->ecode_bit9__fail_i99);
			proto_msg->set_ecode_bit9__fail_i148(msg->ecode_bit9__fail_i148);
			proto_msg->set_dup__bit9__generator(msg->dup__bit9__generator);
			proto_msg->set_err_raceaway(msg->err_raceaway);
			proto_msg->set_btbrdy(msg->btbrdy);
			proto_msg->set_km_phasing_extend(msg->km_phasing_extend);
			proto_msg->set_rsw82(msg->rsw82);
			proto_msg->set_ecode_bit10__vccm99(msg->ecode_bit10__vccm99);
			proto_msg->set_ecode_bit10__vccm148(msg->ecode_bit10__vccm148);
			proto_msg->set_dup__bit10__park_rms(msg->dup__bit10__park_rms);
			proto_msg->set_err_user(msg->err_user);
			proto_msg->set_go216(msg->go216);
			proto_msg->set_cs_oora2(msg->cs_oora2);
			proto_msg->set_km_rsvd_11(msg->km_rsvd_11);
			proto_msg->set_cal082(msg->cal082);
			proto_msg->set_ecode_bit11__15m_minus99(msg->ecode_bit11__15m_minus99);
			proto_msg->set_ecode_bit11__15m_minus148(msg->ecode_bit11__15m_minus148);
			proto_msg->set_mo_sc1_comp(msg->mo_sc1_comp);
			proto_msg->set_dup__bit11__dcbus_volts(msg->dup__bit11__dcbus_volts);
			proto_msg->set_test(msg->test);
			proto_msg->set_d_out_3_on(msg->d_out_3_on);
			proto_msg->set_cs_cmd_type((inverters::inverters_inv_r_rcv_cs_cmd_type)msg->cs_cmd_type);
			proto_msg->set_km_rsvd_12(msg->km_rsvd_12);
			proto_msg->set_cal82(msg->cal82);
			proto_msg->set_ecode_bit12__15m_plus99(msg->ecode_bit12__15m_plus99);
			proto_msg->set_ecode_bit12__15m_plus148(msg->ecode_bit12__15m_plus148);
			proto_msg->set_mo_sc2_reso((inverters::inverters_inv_r_rcv_mo_sc2_reso)msg->mo_sc2_reso);
			proto_msg->set_dup__bit12__boat_pedal(msg->dup__bit12__boat_pedal);
			proto_msg->set_d_out_4_on(msg->d_out_4_on);
			proto_msg->set_km_rsvd_13(msg->km_rsvd_13);
			proto_msg->set_tol82(msg->tol82);
			proto_msg->set_ecode_bit13__18m_plus99(msg->ecode_bit13__18m_plus99);
			proto_msg->set_ecode_bit13__18m_plus148(msg->ecode_bit13__18m_plus148);
			proto_msg->set_dup__bit13__gen_autoiaclimit(msg->dup__bit13__gen_autoiaclimit);
			proto_msg->set_err_hwerr(msg->err_hwerr);
			proto_msg->set_goff(msg->goff);
			proto_msg->set_cs_ain_2__i_limit(msg->cs_ain_2__i_limit);
			proto_msg->set_km_pseudo_enable(msg->km_pseudo_enable);
			proto_msg->set_rdy82(msg->rdy82);
			proto_msg->set_ecode_bit14__ubmam99(msg->ecode_bit14__ubmam99);
			proto_msg->set_ecode_bit14__ubmam148(msg->ecode_bit14__ubmam148);
			proto_msg->set_cmc__bit14__idc_limit_ena_v2(msg->cmc__bit14__idc_limit_ena_v2);
			proto_msg->set_dup__bit14__mtpa_reluct_enab(msg->dup__bit14__mtpa_reluct_enab);
			proto_msg->set_err_ballast(msg->err_ballast);
			proto_msg->set_brk1216(msg->brk1216);
			proto_msg->set_cs_ain_1__n_limit(msg->cs_ain_1__n_limit);
			proto_msg->set_km_debug_test(msg->km_debug_test);
			proto_msg->set_brk082(msg->brk082);
			proto_msg->set_ecode_bit15__t_igbt99(msg->ecode_bit15__t_igbt99);
			proto_msg->set_ecode_bit15__t_igbt148(msg->ecode_bit15__t_igbt148);
			proto_msg->set_mo_sc2_inv(msg->mo_sc2_inv);
			proto_msg->set_active190((inverters::inverters_inv_r_rcv_active190)msg->active190);
			proto_msg->set_active191((inverters::inverters_inv_r_rcv_active191)msg->active191);
			proto_msg->set_active192((inverters::inverters_inv_r_rcv_active192)msg->active192);
			proto_msg->set_active193((inverters::inverters_inv_r_rcv_active193)msg->active193);
			proto_msg->set_gen_autoiaclimit_is_acv(msg->gen_autoiaclimit_is_acv);
			proto_msg->set_cmc__bit15__dig_e_brake_act(msg->cmc__bit15__dig_e_brake_act);
			proto_msg->set_dup__bit15__canopen_acv(msg->dup__bit15__canopen_acv);
			proto_msg->set_m_r_dec(msg->m_r_dec);
			proto_msg->set_m_r_rcp(msg->m_r_rcp);
			proto_msg->set_warn_warning_0(msg->warn_warning_0);
			proto_msg->set_ain_in_1_scaled213(msg->ain_in_1_scaled213);
			proto_msg->set_ain_in_2_scaled214(msg->ain_in_2_scaled214);
			proto_msg->set_t_dc__stop(msg->t_dc__stop);
			proto_msg->set_v_dc__stop(msg->v_dc__stop);
			proto_msg->set_v_min__stop(msg->v_min__stop);
			proto_msg->set_f_min__stop(msg->f_min__stop);
			proto_msg->set_v_corner__stop(msg->v_corner__stop);
			proto_msg->set_f_corner__stop(msg->f_corner__stop);
			proto_msg->set_pid_i__kp__id(msg->pid_i__kp__id);
			proto_msg->set_pid_i__ti__id(msg->pid_i__ti__id);
			proto_msg->set_pid_i__tim__id(msg->pid_i__tim__id);
			proto_msg->set_ain_in_1_scaleval(msg->ain_in_1_scaleval);
			proto_msg->set_ain_in_2_scaleval(msg->ain_in_2_scaleval);
			proto_msg->set_signmag82(msg->signmag82);
			proto_msg->set_regen_r(msg->regen_r);
			proto_msg->set_dc_bus_max_lim(msg->dc_bus_max_lim);
			proto_msg->set_pid_i__xkp__id(msg->pid_i__xkp__id);
			proto_msg->set_bat_opr_limit__gen(msg->bat_opr_limit__gen);
			proto_msg->set_pid_i__kf__id(msg->pid_i__kf__id);
			proto_msg->set_cmc__bit17_16__checkipeak_config(msg->cmc__bit17_16__checkipeak_config);
			proto_msg->set_dup__bit16__bamobil3_2_offcrct(msg->dup__bit16__bamobil3_2_offcrct);
			proto_msg->set_special__stop(msg->special__stop);
			proto_msg->set_free(msg->free);
			proto_msg->set_svnrevision_nr(msg->svnrevision_nr);
			proto_msg->set_warn_illegal_status(msg->warn_illegal_status);
			proto_msg->set_nclip82(msg->nclip82);
			proto_msg->set_dup__bit19_17__ecode_redefine(msg->dup__bit19_17__ecode_redefine);
			proto_msg->set_warn_safe_in(msg->warn_safe_in);
			proto_msg->set_nclip_minus82(msg->nclip_minus82);
			proto_msg->set_cmc__bit18__tractioncontrol_ena(msg->cmc__bit18__tractioncontrol_ena);
			proto_msg->set_nclip_plus82(msg->nclip_plus82);
			proto_msg->set_cmc__bit20_19__tc_deltatime_conf(msg->cmc__bit20_19__tc_deltatime_conf);
			proto_msg->set_irddig82(msg->irddig82);
			proto_msg->set_dup__bit20__hal_extmr_acv(msg->dup__bit20__hal_extmr_acv);
			proto_msg->set_iuserchd82(msg->iuserchd82);
			proto_msg->set_cmc__bit22_21__tc_minspeed_conf(msg->cmc__bit22_21__tc_minspeed_conf);
			proto_msg->set_dup__bit21__initwith_frg_off(msg->dup__bit21__initwith_frg_off);
			proto_msg->set_warn_motortemp(msg->warn_motortemp);
			proto_msg->set_irdn82(msg->irdn82);
			proto_msg->set_dup__bit31_22__free(msg->dup__bit31_22__free);
			proto_msg->set_warn_devicetemp(msg->warn_devicetemp);
			proto_msg->set_irdti82(msg->irdti82);
			proto_msg->set_cmc__bit23__tc_ncmdrestoption(msg->cmc__bit23__tc_ncmdrestoption);
			proto_msg->set_m_r_acc(msg->m_r_acc);
			proto_msg->set_warn_vout_sat(msg->warn_vout_sat);
			proto_msg->set_irdtir82(msg->irdtir82);
			proto_msg->set_cmc__bit31_24__free(msg->cmc__bit31_24__free);
			proto_msg->set_warn_ipeak(msg->warn_ipeak);
			proto_msg->set__10hz82(msg->_10hz82);
			proto_msg->set_warn_raceaway(msg->warn_raceaway);
			proto_msg->set_irdtm82(msg->irdtm82);
			proto_msg->set_irdana82(msg->irdana82);
			proto_msg->set_iwcns82(msg->iwcns82);
			proto_msg->set_rfepulse82(msg->rfepulse82);
			proto_msg->set_md82(msg->md82);
			proto_msg->set_warn_ballast(msg->warn_ballast);
			proto_msg->set_hndwhl82(msg->hndwhl82);

#ifdef CANLIB_TIMESTAMP
            proto_msg->set__inner_timestamp(msg->_timestamp);
#endif // CANLIB_TIMESTAMP
            break;
        }

    }
}



#endif // inverters_PROTO_INTERAFCE_IMPLEMENTATION

#endif // inverters_PROTO_INTERFACE_H
