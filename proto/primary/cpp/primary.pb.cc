// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primary.proto

#include "primary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMBIENT_TEMPERATURE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMS_HV_JMP_TO_BLT_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMS_LV_JMP_TO_BLT_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ACT_I_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ACT_II_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ERR_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_NLG5_CTL_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ST_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_TEMP_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAR_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CONTROL_OUTPUT_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COOLING_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DAS_ERRORS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DAS_VERSION_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DATA_LOGGER_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_HV_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_HV_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_LV_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_LV_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_0_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_0_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_1_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_1_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_2_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_2_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_3_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_3_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_4_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_4_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_5_RX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_5_TX_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HANDCART_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CAN_FORWARD_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CAN_FORWARD_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CELLS_TEMP_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CELLS_VOLTAGE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CELL_BALANCING_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CURRENT_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_ERRORS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_FANS_OVERRIDE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_FANS_OVERRIDE_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_FEEDBACKS_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_IMD_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_TEMP_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_VERSION_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_VOLTAGE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INVERTER_CONNECTION_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_L_REQUEST_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_L_RESPONSE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_R_REQUEST_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_R_RESPONSE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LC_RESET_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_CURRENT_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_ERRORS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_TEMPERATURE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_TOTAL_VOLTAGE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_VERSION_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_VOLTAGE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MARKER_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_CAR_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_CELL_BALANCING_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_INVERTER_CONNECTION_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_PEDALS_RANGE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_PUMPS_SPEED_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_RADIATOR_SPEED_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_STEERING_ANGLE_RANGE_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_TLM_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_TS_STATUS_DAS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_TS_STATUS_HANDCART_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHUTDOWN_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPEED_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEER_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEER_SYSTEM_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEER_VERSION_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIMESTAMP_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLM_STATUS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLM_VERSION_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TS_STATUS_DAS_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TS_STATUS_HANDCART_primary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TS_STATUS_STEER_primary_2eproto;
namespace primary {
class BMS_HV_JMP_TO_BLTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMS_HV_JMP_TO_BLT> _instance;
} _BMS_HV_JMP_TO_BLT_default_instance_;
class BMS_LV_JMP_TO_BLTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMS_LV_JMP_TO_BLT> _instance;
} _BMS_LV_JMP_TO_BLT_default_instance_;
class STEER_VERSIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STEER_VERSION> _instance;
} _STEER_VERSION_default_instance_;
class DAS_VERSIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DAS_VERSION> _instance;
} _DAS_VERSION_default_instance_;
class HV_VERSIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_VERSION> _instance;
} _HV_VERSION_default_instance_;
class LV_VERSIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LV_VERSION> _instance;
} _LV_VERSION_default_instance_;
class TLM_VERSIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLM_VERSION> _instance;
} _TLM_VERSION_default_instance_;
class TIMESTAMPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TIMESTAMP> _instance;
} _TIMESTAMP_default_instance_;
class AMBIENT_TEMPERATUREDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMBIENT_TEMPERATURE> _instance;
} _AMBIENT_TEMPERATURE_default_instance_;
class DATA_LOGGERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DATA_LOGGER> _instance;
} _DATA_LOGGER_default_instance_;
class SET_TLM_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_TLM_STATUS> _instance;
} _SET_TLM_STATUS_default_instance_;
class TLM_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLM_STATUS> _instance;
} _TLM_STATUS_default_instance_;
class STEER_SYSTEM_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STEER_SYSTEM_STATUS> _instance;
} _STEER_SYSTEM_STATUS_default_instance_;
class HV_VOLTAGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_VOLTAGE> _instance;
} _HV_VOLTAGE_default_instance_;
class HV_CURRENTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_CURRENT> _instance;
} _HV_CURRENT_default_instance_;
class HV_TEMPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_TEMP> _instance;
} _HV_TEMP_default_instance_;
class HV_ERRORSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_ERRORS> _instance;
} _HV_ERRORS_default_instance_;
class HV_CAN_FORWARDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_CAN_FORWARD> _instance;
} _HV_CAN_FORWARD_default_instance_;
class HV_FANS_OVERRIDEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_FANS_OVERRIDE> _instance;
} _HV_FANS_OVERRIDE_default_instance_;
class HV_CAN_FORWARD_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_CAN_FORWARD_STATUS> _instance;
} _HV_CAN_FORWARD_STATUS_default_instance_;
class HV_FANS_OVERRIDE_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_FANS_OVERRIDE_STATUS> _instance;
} _HV_FANS_OVERRIDE_STATUS_default_instance_;
class HV_FEEDBACKS_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_FEEDBACKS_STATUS> _instance;
} _HV_FEEDBACKS_STATUS_default_instance_;
class HV_IMD_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_IMD_STATUS> _instance;
} _HV_IMD_STATUS_default_instance_;
class TS_STATUS_DASDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TS_STATUS_DAS> _instance;
} _TS_STATUS_DAS_default_instance_;
class TS_STATUS_STEERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TS_STATUS_STEER> _instance;
} _TS_STATUS_STEER_default_instance_;
class TS_STATUS_HANDCARTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TS_STATUS_HANDCART> _instance;
} _TS_STATUS_HANDCART_default_instance_;
class SET_TS_STATUS_DASDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_TS_STATUS_DAS> _instance;
} _SET_TS_STATUS_DAS_default_instance_;
class SET_TS_STATUS_HANDCARTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_TS_STATUS_HANDCART> _instance;
} _SET_TS_STATUS_HANDCART_default_instance_;
class STEER_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STEER_STATUS> _instance;
} _STEER_STATUS_default_instance_;
class SET_CAR_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_CAR_STATUS> _instance;
} _SET_CAR_STATUS_default_instance_;
class SET_PEDALS_RANGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_PEDALS_RANGE> _instance;
} _SET_PEDALS_RANGE_default_instance_;
class SET_STEERING_ANGLE_RANGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_STEERING_ANGLE_RANGE> _instance;
} _SET_STEERING_ANGLE_RANGE_default_instance_;
class CAR_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAR_STATUS> _instance;
} _CAR_STATUS_default_instance_;
class DAS_ERRORSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DAS_ERRORS> _instance;
} _DAS_ERRORS_default_instance_;
class LV_CURRENTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LV_CURRENT> _instance;
} _LV_CURRENT_default_instance_;
class LV_VOLTAGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LV_VOLTAGE> _instance;
} _LV_VOLTAGE_default_instance_;
class LV_TOTAL_VOLTAGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LV_TOTAL_VOLTAGE> _instance;
} _LV_TOTAL_VOLTAGE_default_instance_;
class LV_TEMPERATUREDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LV_TEMPERATURE> _instance;
} _LV_TEMPERATURE_default_instance_;
class COOLING_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COOLING_STATUS> _instance;
} _COOLING_STATUS_default_instance_;
class SET_RADIATOR_SPEEDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_RADIATOR_SPEED> _instance;
} _SET_RADIATOR_SPEED_default_instance_;
class SET_PUMPS_SPEEDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_PUMPS_SPEED> _instance;
} _SET_PUMPS_SPEED_default_instance_;
class SET_INVERTER_CONNECTION_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_INVERTER_CONNECTION_STATUS> _instance;
} _SET_INVERTER_CONNECTION_STATUS_default_instance_;
class INVERTER_CONNECTION_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<INVERTER_CONNECTION_STATUS> _instance;
} _INVERTER_CONNECTION_STATUS_default_instance_;
class LV_ERRORSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LV_ERRORS> _instance;
} _LV_ERRORS_default_instance_;
class SHUTDOWN_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHUTDOWN_STATUS> _instance;
} _SHUTDOWN_STATUS_default_instance_;
class MARKERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MARKER> _instance;
} _MARKER_default_instance_;
class HV_CELLS_VOLTAGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_CELLS_VOLTAGE> _instance;
} _HV_CELLS_VOLTAGE_default_instance_;
class HV_CELLS_TEMPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_CELLS_TEMP> _instance;
} _HV_CELLS_TEMP_default_instance_;
class HV_CELL_BALANCING_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HV_CELL_BALANCING_STATUS> _instance;
} _HV_CELL_BALANCING_STATUS_default_instance_;
class SET_CELL_BALANCING_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SET_CELL_BALANCING_STATUS> _instance;
} _SET_CELL_BALANCING_STATUS_default_instance_;
class HANDCART_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HANDCART_STATUS> _instance;
} _HANDCART_STATUS_default_instance_;
class SPEEDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPEED> _instance;
} _SPEED_default_instance_;
class INV_L_REQUESTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<INV_L_REQUEST> _instance;
} _INV_L_REQUEST_default_instance_;
class INV_R_REQUESTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<INV_R_REQUEST> _instance;
} _INV_R_REQUEST_default_instance_;
class INV_L_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<INV_L_RESPONSE> _instance;
} _INV_L_RESPONSE_default_instance_;
class INV_R_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<INV_R_RESPONSE> _instance;
} _INV_R_RESPONSE_default_instance_;
class FLASH_CELLBOARD_0_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_0_TX> _instance;
} _FLASH_CELLBOARD_0_TX_default_instance_;
class FLASH_CELLBOARD_0_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_0_RX> _instance;
} _FLASH_CELLBOARD_0_RX_default_instance_;
class FLASH_CELLBOARD_1_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_1_TX> _instance;
} _FLASH_CELLBOARD_1_TX_default_instance_;
class FLASH_CELLBOARD_1_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_1_RX> _instance;
} _FLASH_CELLBOARD_1_RX_default_instance_;
class FLASH_CELLBOARD_2_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_2_TX> _instance;
} _FLASH_CELLBOARD_2_TX_default_instance_;
class FLASH_CELLBOARD_2_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_2_RX> _instance;
} _FLASH_CELLBOARD_2_RX_default_instance_;
class FLASH_CELLBOARD_3_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_3_TX> _instance;
} _FLASH_CELLBOARD_3_TX_default_instance_;
class FLASH_CELLBOARD_3_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_3_RX> _instance;
} _FLASH_CELLBOARD_3_RX_default_instance_;
class FLASH_CELLBOARD_4_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_4_TX> _instance;
} _FLASH_CELLBOARD_4_TX_default_instance_;
class FLASH_CELLBOARD_4_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_4_RX> _instance;
} _FLASH_CELLBOARD_4_RX_default_instance_;
class FLASH_CELLBOARD_5_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_5_TX> _instance;
} _FLASH_CELLBOARD_5_TX_default_instance_;
class FLASH_CELLBOARD_5_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_CELLBOARD_5_RX> _instance;
} _FLASH_CELLBOARD_5_RX_default_instance_;
class FLASH_BMS_HV_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_BMS_HV_TX> _instance;
} _FLASH_BMS_HV_TX_default_instance_;
class FLASH_BMS_HV_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_BMS_HV_RX> _instance;
} _FLASH_BMS_HV_RX_default_instance_;
class FLASH_BMS_LV_TXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_BMS_LV_TX> _instance;
} _FLASH_BMS_LV_TX_default_instance_;
class FLASH_BMS_LV_RXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FLASH_BMS_LV_RX> _instance;
} _FLASH_BMS_LV_RX_default_instance_;
class BRUSA_NLG5_CTLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BRUSA_NLG5_CTL> _instance;
} _BRUSA_NLG5_CTL_default_instance_;
class BRUSA_STDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BRUSA_ST> _instance;
} _BRUSA_ST_default_instance_;
class BRUSA_ACT_IDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BRUSA_ACT_I> _instance;
} _BRUSA_ACT_I_default_instance_;
class BRUSA_ACT_IIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BRUSA_ACT_II> _instance;
} _BRUSA_ACT_II_default_instance_;
class BRUSA_TEMPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BRUSA_TEMP> _instance;
} _BRUSA_TEMP_default_instance_;
class BRUSA_ERRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BRUSA_ERR> _instance;
} _BRUSA_ERR_default_instance_;
class CONTROL_OUTPUTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CONTROL_OUTPUT> _instance;
} _CONTROL_OUTPUT_default_instance_;
class LC_RESETDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LC_RESET> _instance;
} _LC_RESET_default_instance_;
class PackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pack> _instance;
} _Pack_default_instance_;
}  // namespace primary
static void InitDefaultsscc_info_AMBIENT_TEMPERATURE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_AMBIENT_TEMPERATURE_default_instance_;
    new (ptr) ::primary::AMBIENT_TEMPERATURE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::AMBIENT_TEMPERATURE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMBIENT_TEMPERATURE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AMBIENT_TEMPERATURE_primary_2eproto}, {}};

static void InitDefaultsscc_info_BMS_HV_JMP_TO_BLT_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BMS_HV_JMP_TO_BLT_default_instance_;
    new (ptr) ::primary::BMS_HV_JMP_TO_BLT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BMS_HV_JMP_TO_BLT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMS_HV_JMP_TO_BLT_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMS_HV_JMP_TO_BLT_primary_2eproto}, {}};

static void InitDefaultsscc_info_BMS_LV_JMP_TO_BLT_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BMS_LV_JMP_TO_BLT_default_instance_;
    new (ptr) ::primary::BMS_LV_JMP_TO_BLT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BMS_LV_JMP_TO_BLT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMS_LV_JMP_TO_BLT_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMS_LV_JMP_TO_BLT_primary_2eproto}, {}};

static void InitDefaultsscc_info_BRUSA_ACT_I_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BRUSA_ACT_I_default_instance_;
    new (ptr) ::primary::BRUSA_ACT_I();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BRUSA_ACT_I::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ACT_I_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BRUSA_ACT_I_primary_2eproto}, {}};

static void InitDefaultsscc_info_BRUSA_ACT_II_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BRUSA_ACT_II_default_instance_;
    new (ptr) ::primary::BRUSA_ACT_II();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BRUSA_ACT_II::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ACT_II_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BRUSA_ACT_II_primary_2eproto}, {}};

static void InitDefaultsscc_info_BRUSA_ERR_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BRUSA_ERR_default_instance_;
    new (ptr) ::primary::BRUSA_ERR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BRUSA_ERR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ERR_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BRUSA_ERR_primary_2eproto}, {}};

static void InitDefaultsscc_info_BRUSA_NLG5_CTL_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BRUSA_NLG5_CTL_default_instance_;
    new (ptr) ::primary::BRUSA_NLG5_CTL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BRUSA_NLG5_CTL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_NLG5_CTL_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BRUSA_NLG5_CTL_primary_2eproto}, {}};

static void InitDefaultsscc_info_BRUSA_ST_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BRUSA_ST_default_instance_;
    new (ptr) ::primary::BRUSA_ST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BRUSA_ST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_ST_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BRUSA_ST_primary_2eproto}, {}};

static void InitDefaultsscc_info_BRUSA_TEMP_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_BRUSA_TEMP_default_instance_;
    new (ptr) ::primary::BRUSA_TEMP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::BRUSA_TEMP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BRUSA_TEMP_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BRUSA_TEMP_primary_2eproto}, {}};

static void InitDefaultsscc_info_CAR_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_CAR_STATUS_default_instance_;
    new (ptr) ::primary::CAR_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::CAR_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAR_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAR_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_CONTROL_OUTPUT_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_CONTROL_OUTPUT_default_instance_;
    new (ptr) ::primary::CONTROL_OUTPUT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::CONTROL_OUTPUT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CONTROL_OUTPUT_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CONTROL_OUTPUT_primary_2eproto}, {}};

static void InitDefaultsscc_info_COOLING_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_COOLING_STATUS_default_instance_;
    new (ptr) ::primary::COOLING_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::COOLING_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COOLING_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_COOLING_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_DAS_ERRORS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_DAS_ERRORS_default_instance_;
    new (ptr) ::primary::DAS_ERRORS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::DAS_ERRORS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DAS_ERRORS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DAS_ERRORS_primary_2eproto}, {}};

static void InitDefaultsscc_info_DAS_VERSION_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_DAS_VERSION_default_instance_;
    new (ptr) ::primary::DAS_VERSION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::DAS_VERSION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DAS_VERSION_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DAS_VERSION_primary_2eproto}, {}};

static void InitDefaultsscc_info_DATA_LOGGER_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_DATA_LOGGER_default_instance_;
    new (ptr) ::primary::DATA_LOGGER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::DATA_LOGGER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DATA_LOGGER_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DATA_LOGGER_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_BMS_HV_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_BMS_HV_RX_default_instance_;
    new (ptr) ::primary::FLASH_BMS_HV_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_BMS_HV_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_HV_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_BMS_HV_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_BMS_HV_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_BMS_HV_TX_default_instance_;
    new (ptr) ::primary::FLASH_BMS_HV_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_BMS_HV_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_HV_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_BMS_HV_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_BMS_LV_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_BMS_LV_RX_default_instance_;
    new (ptr) ::primary::FLASH_BMS_LV_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_BMS_LV_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_LV_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_BMS_LV_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_BMS_LV_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_BMS_LV_TX_default_instance_;
    new (ptr) ::primary::FLASH_BMS_LV_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_BMS_LV_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_BMS_LV_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_BMS_LV_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_0_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_0_RX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_0_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_0_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_0_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_0_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_0_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_0_TX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_0_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_0_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_0_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_0_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_1_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_1_RX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_1_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_1_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_1_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_1_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_1_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_1_TX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_1_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_1_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_1_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_1_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_2_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_2_RX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_2_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_2_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_2_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_2_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_2_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_2_TX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_2_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_2_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_2_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_2_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_3_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_3_RX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_3_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_3_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_3_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_3_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_3_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_3_TX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_3_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_3_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_3_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_3_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_4_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_4_RX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_4_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_4_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_4_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_4_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_4_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_4_TX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_4_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_4_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_4_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_4_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_5_RX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_5_RX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_5_RX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_5_RX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_5_RX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_5_RX_primary_2eproto}, {}};

static void InitDefaultsscc_info_FLASH_CELLBOARD_5_TX_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_FLASH_CELLBOARD_5_TX_default_instance_;
    new (ptr) ::primary::FLASH_CELLBOARD_5_TX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::FLASH_CELLBOARD_5_TX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FLASH_CELLBOARD_5_TX_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FLASH_CELLBOARD_5_TX_primary_2eproto}, {}};

static void InitDefaultsscc_info_HANDCART_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HANDCART_STATUS_default_instance_;
    new (ptr) ::primary::HANDCART_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HANDCART_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HANDCART_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HANDCART_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_CAN_FORWARD_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_CAN_FORWARD_default_instance_;
    new (ptr) ::primary::HV_CAN_FORWARD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_CAN_FORWARD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CAN_FORWARD_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_CAN_FORWARD_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_CAN_FORWARD_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_CAN_FORWARD_STATUS_default_instance_;
    new (ptr) ::primary::HV_CAN_FORWARD_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_CAN_FORWARD_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CAN_FORWARD_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_CAN_FORWARD_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_CELLS_TEMP_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_CELLS_TEMP_default_instance_;
    new (ptr) ::primary::HV_CELLS_TEMP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_CELLS_TEMP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CELLS_TEMP_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_CELLS_TEMP_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_CELLS_VOLTAGE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_CELLS_VOLTAGE_default_instance_;
    new (ptr) ::primary::HV_CELLS_VOLTAGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_CELLS_VOLTAGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CELLS_VOLTAGE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_CELLS_VOLTAGE_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_CELL_BALANCING_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_CELL_BALANCING_STATUS_default_instance_;
    new (ptr) ::primary::HV_CELL_BALANCING_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_CELL_BALANCING_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CELL_BALANCING_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_CELL_BALANCING_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_CURRENT_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_CURRENT_default_instance_;
    new (ptr) ::primary::HV_CURRENT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_CURRENT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_CURRENT_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_CURRENT_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_ERRORS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_ERRORS_default_instance_;
    new (ptr) ::primary::HV_ERRORS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_ERRORS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_ERRORS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_ERRORS_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_FANS_OVERRIDE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_FANS_OVERRIDE_default_instance_;
    new (ptr) ::primary::HV_FANS_OVERRIDE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_FANS_OVERRIDE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_FANS_OVERRIDE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_FANS_OVERRIDE_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_FANS_OVERRIDE_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_FANS_OVERRIDE_STATUS_default_instance_;
    new (ptr) ::primary::HV_FANS_OVERRIDE_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_FANS_OVERRIDE_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_FANS_OVERRIDE_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_FANS_OVERRIDE_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_FEEDBACKS_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_FEEDBACKS_STATUS_default_instance_;
    new (ptr) ::primary::HV_FEEDBACKS_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_FEEDBACKS_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_FEEDBACKS_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_FEEDBACKS_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_IMD_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_IMD_STATUS_default_instance_;
    new (ptr) ::primary::HV_IMD_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_IMD_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_IMD_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_IMD_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_TEMP_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_TEMP_default_instance_;
    new (ptr) ::primary::HV_TEMP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_TEMP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_TEMP_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_TEMP_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_VERSION_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_VERSION_default_instance_;
    new (ptr) ::primary::HV_VERSION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_VERSION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_VERSION_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_VERSION_primary_2eproto}, {}};

static void InitDefaultsscc_info_HV_VOLTAGE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_HV_VOLTAGE_default_instance_;
    new (ptr) ::primary::HV_VOLTAGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::HV_VOLTAGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HV_VOLTAGE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HV_VOLTAGE_primary_2eproto}, {}};

static void InitDefaultsscc_info_INVERTER_CONNECTION_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_INVERTER_CONNECTION_STATUS_default_instance_;
    new (ptr) ::primary::INVERTER_CONNECTION_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::INVERTER_CONNECTION_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INVERTER_CONNECTION_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_INVERTER_CONNECTION_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_INV_L_REQUEST_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_INV_L_REQUEST_default_instance_;
    new (ptr) ::primary::INV_L_REQUEST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::INV_L_REQUEST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_L_REQUEST_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_INV_L_REQUEST_primary_2eproto}, {}};

static void InitDefaultsscc_info_INV_L_RESPONSE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_INV_L_RESPONSE_default_instance_;
    new (ptr) ::primary::INV_L_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::INV_L_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_L_RESPONSE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_INV_L_RESPONSE_primary_2eproto}, {}};

static void InitDefaultsscc_info_INV_R_REQUEST_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_INV_R_REQUEST_default_instance_;
    new (ptr) ::primary::INV_R_REQUEST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::INV_R_REQUEST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_R_REQUEST_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_INV_R_REQUEST_primary_2eproto}, {}};

static void InitDefaultsscc_info_INV_R_RESPONSE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_INV_R_RESPONSE_default_instance_;
    new (ptr) ::primary::INV_R_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::INV_R_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_INV_R_RESPONSE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_INV_R_RESPONSE_primary_2eproto}, {}};

static void InitDefaultsscc_info_LC_RESET_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_LC_RESET_default_instance_;
    new (ptr) ::primary::LC_RESET();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::LC_RESET::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LC_RESET_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LC_RESET_primary_2eproto}, {}};

static void InitDefaultsscc_info_LV_CURRENT_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_LV_CURRENT_default_instance_;
    new (ptr) ::primary::LV_CURRENT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::LV_CURRENT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_CURRENT_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LV_CURRENT_primary_2eproto}, {}};

static void InitDefaultsscc_info_LV_ERRORS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_LV_ERRORS_default_instance_;
    new (ptr) ::primary::LV_ERRORS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::LV_ERRORS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_ERRORS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LV_ERRORS_primary_2eproto}, {}};

static void InitDefaultsscc_info_LV_TEMPERATURE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_LV_TEMPERATURE_default_instance_;
    new (ptr) ::primary::LV_TEMPERATURE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::LV_TEMPERATURE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_TEMPERATURE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LV_TEMPERATURE_primary_2eproto}, {}};

static void InitDefaultsscc_info_LV_TOTAL_VOLTAGE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_LV_TOTAL_VOLTAGE_default_instance_;
    new (ptr) ::primary::LV_TOTAL_VOLTAGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::LV_TOTAL_VOLTAGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_TOTAL_VOLTAGE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LV_TOTAL_VOLTAGE_primary_2eproto}, {}};

static void InitDefaultsscc_info_LV_VERSION_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_LV_VERSION_default_instance_;
    new (ptr) ::primary::LV_VERSION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::LV_VERSION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_VERSION_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LV_VERSION_primary_2eproto}, {}};

static void InitDefaultsscc_info_LV_VOLTAGE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_LV_VOLTAGE_default_instance_;
    new (ptr) ::primary::LV_VOLTAGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::LV_VOLTAGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LV_VOLTAGE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LV_VOLTAGE_primary_2eproto}, {}};

static void InitDefaultsscc_info_MARKER_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_MARKER_default_instance_;
    new (ptr) ::primary::MARKER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::MARKER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MARKER_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MARKER_primary_2eproto}, {}};

static void InitDefaultsscc_info_Pack_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_Pack_default_instance_;
    new (ptr) ::primary::Pack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::Pack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<80> scc_info_Pack_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 80, 0, InitDefaultsscc_info_Pack_primary_2eproto}, {
      &scc_info_BMS_HV_JMP_TO_BLT_primary_2eproto.base,
      &scc_info_BMS_LV_JMP_TO_BLT_primary_2eproto.base,
      &scc_info_STEER_VERSION_primary_2eproto.base,
      &scc_info_DAS_VERSION_primary_2eproto.base,
      &scc_info_HV_VERSION_primary_2eproto.base,
      &scc_info_LV_VERSION_primary_2eproto.base,
      &scc_info_TLM_VERSION_primary_2eproto.base,
      &scc_info_TIMESTAMP_primary_2eproto.base,
      &scc_info_AMBIENT_TEMPERATURE_primary_2eproto.base,
      &scc_info_DATA_LOGGER_primary_2eproto.base,
      &scc_info_SET_TLM_STATUS_primary_2eproto.base,
      &scc_info_TLM_STATUS_primary_2eproto.base,
      &scc_info_STEER_SYSTEM_STATUS_primary_2eproto.base,
      &scc_info_HV_VOLTAGE_primary_2eproto.base,
      &scc_info_HV_CURRENT_primary_2eproto.base,
      &scc_info_HV_TEMP_primary_2eproto.base,
      &scc_info_HV_ERRORS_primary_2eproto.base,
      &scc_info_HV_CAN_FORWARD_primary_2eproto.base,
      &scc_info_HV_FANS_OVERRIDE_primary_2eproto.base,
      &scc_info_HV_CAN_FORWARD_STATUS_primary_2eproto.base,
      &scc_info_HV_FANS_OVERRIDE_STATUS_primary_2eproto.base,
      &scc_info_HV_FEEDBACKS_STATUS_primary_2eproto.base,
      &scc_info_HV_IMD_STATUS_primary_2eproto.base,
      &scc_info_TS_STATUS_DAS_primary_2eproto.base,
      &scc_info_TS_STATUS_STEER_primary_2eproto.base,
      &scc_info_TS_STATUS_HANDCART_primary_2eproto.base,
      &scc_info_SET_TS_STATUS_DAS_primary_2eproto.base,
      &scc_info_SET_TS_STATUS_HANDCART_primary_2eproto.base,
      &scc_info_STEER_STATUS_primary_2eproto.base,
      &scc_info_SET_CAR_STATUS_primary_2eproto.base,
      &scc_info_SET_PEDALS_RANGE_primary_2eproto.base,
      &scc_info_SET_STEERING_ANGLE_RANGE_primary_2eproto.base,
      &scc_info_CAR_STATUS_primary_2eproto.base,
      &scc_info_DAS_ERRORS_primary_2eproto.base,
      &scc_info_LV_CURRENT_primary_2eproto.base,
      &scc_info_LV_VOLTAGE_primary_2eproto.base,
      &scc_info_LV_TOTAL_VOLTAGE_primary_2eproto.base,
      &scc_info_LV_TEMPERATURE_primary_2eproto.base,
      &scc_info_COOLING_STATUS_primary_2eproto.base,
      &scc_info_SET_RADIATOR_SPEED_primary_2eproto.base,
      &scc_info_SET_PUMPS_SPEED_primary_2eproto.base,
      &scc_info_SET_INVERTER_CONNECTION_STATUS_primary_2eproto.base,
      &scc_info_INVERTER_CONNECTION_STATUS_primary_2eproto.base,
      &scc_info_LV_ERRORS_primary_2eproto.base,
      &scc_info_SHUTDOWN_STATUS_primary_2eproto.base,
      &scc_info_MARKER_primary_2eproto.base,
      &scc_info_HV_CELLS_VOLTAGE_primary_2eproto.base,
      &scc_info_HV_CELLS_TEMP_primary_2eproto.base,
      &scc_info_HV_CELL_BALANCING_STATUS_primary_2eproto.base,
      &scc_info_SET_CELL_BALANCING_STATUS_primary_2eproto.base,
      &scc_info_HANDCART_STATUS_primary_2eproto.base,
      &scc_info_SPEED_primary_2eproto.base,
      &scc_info_INV_L_REQUEST_primary_2eproto.base,
      &scc_info_INV_R_REQUEST_primary_2eproto.base,
      &scc_info_INV_L_RESPONSE_primary_2eproto.base,
      &scc_info_INV_R_RESPONSE_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_0_TX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_0_RX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_1_TX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_1_RX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_2_TX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_2_RX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_3_TX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_3_RX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_4_TX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_4_RX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_5_TX_primary_2eproto.base,
      &scc_info_FLASH_CELLBOARD_5_RX_primary_2eproto.base,
      &scc_info_FLASH_BMS_HV_TX_primary_2eproto.base,
      &scc_info_FLASH_BMS_HV_RX_primary_2eproto.base,
      &scc_info_FLASH_BMS_LV_TX_primary_2eproto.base,
      &scc_info_FLASH_BMS_LV_RX_primary_2eproto.base,
      &scc_info_BRUSA_NLG5_CTL_primary_2eproto.base,
      &scc_info_BRUSA_ST_primary_2eproto.base,
      &scc_info_BRUSA_ACT_I_primary_2eproto.base,
      &scc_info_BRUSA_ACT_II_primary_2eproto.base,
      &scc_info_BRUSA_TEMP_primary_2eproto.base,
      &scc_info_BRUSA_ERR_primary_2eproto.base,
      &scc_info_CONTROL_OUTPUT_primary_2eproto.base,
      &scc_info_LC_RESET_primary_2eproto.base,}};

static void InitDefaultsscc_info_SET_CAR_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_CAR_STATUS_default_instance_;
    new (ptr) ::primary::SET_CAR_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_CAR_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_CAR_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_CAR_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_CELL_BALANCING_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_CELL_BALANCING_STATUS_default_instance_;
    new (ptr) ::primary::SET_CELL_BALANCING_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_CELL_BALANCING_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_CELL_BALANCING_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_CELL_BALANCING_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_INVERTER_CONNECTION_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_INVERTER_CONNECTION_STATUS_default_instance_;
    new (ptr) ::primary::SET_INVERTER_CONNECTION_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_INVERTER_CONNECTION_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_INVERTER_CONNECTION_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_INVERTER_CONNECTION_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_PEDALS_RANGE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_PEDALS_RANGE_default_instance_;
    new (ptr) ::primary::SET_PEDALS_RANGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_PEDALS_RANGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_PEDALS_RANGE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_PEDALS_RANGE_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_PUMPS_SPEED_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_PUMPS_SPEED_default_instance_;
    new (ptr) ::primary::SET_PUMPS_SPEED();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_PUMPS_SPEED::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_PUMPS_SPEED_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_PUMPS_SPEED_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_RADIATOR_SPEED_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_RADIATOR_SPEED_default_instance_;
    new (ptr) ::primary::SET_RADIATOR_SPEED();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_RADIATOR_SPEED::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_RADIATOR_SPEED_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_RADIATOR_SPEED_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_STEERING_ANGLE_RANGE_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_STEERING_ANGLE_RANGE_default_instance_;
    new (ptr) ::primary::SET_STEERING_ANGLE_RANGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_STEERING_ANGLE_RANGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_STEERING_ANGLE_RANGE_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_STEERING_ANGLE_RANGE_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_TLM_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_TLM_STATUS_default_instance_;
    new (ptr) ::primary::SET_TLM_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_TLM_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_TLM_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_TLM_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_TS_STATUS_DAS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_TS_STATUS_DAS_default_instance_;
    new (ptr) ::primary::SET_TS_STATUS_DAS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_TS_STATUS_DAS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_TS_STATUS_DAS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_TS_STATUS_DAS_primary_2eproto}, {}};

static void InitDefaultsscc_info_SET_TS_STATUS_HANDCART_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SET_TS_STATUS_HANDCART_default_instance_;
    new (ptr) ::primary::SET_TS_STATUS_HANDCART();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SET_TS_STATUS_HANDCART::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SET_TS_STATUS_HANDCART_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SET_TS_STATUS_HANDCART_primary_2eproto}, {}};

static void InitDefaultsscc_info_SHUTDOWN_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SHUTDOWN_STATUS_default_instance_;
    new (ptr) ::primary::SHUTDOWN_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SHUTDOWN_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHUTDOWN_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHUTDOWN_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_SPEED_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_SPEED_default_instance_;
    new (ptr) ::primary::SPEED();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::SPEED::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPEED_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SPEED_primary_2eproto}, {}};

static void InitDefaultsscc_info_STEER_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_STEER_STATUS_default_instance_;
    new (ptr) ::primary::STEER_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::STEER_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEER_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STEER_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_STEER_SYSTEM_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_STEER_SYSTEM_STATUS_default_instance_;
    new (ptr) ::primary::STEER_SYSTEM_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::STEER_SYSTEM_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEER_SYSTEM_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STEER_SYSTEM_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_STEER_VERSION_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_STEER_VERSION_default_instance_;
    new (ptr) ::primary::STEER_VERSION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::STEER_VERSION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEER_VERSION_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STEER_VERSION_primary_2eproto}, {}};

static void InitDefaultsscc_info_TIMESTAMP_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_TIMESTAMP_default_instance_;
    new (ptr) ::primary::TIMESTAMP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::TIMESTAMP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIMESTAMP_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TIMESTAMP_primary_2eproto}, {}};

static void InitDefaultsscc_info_TLM_STATUS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_TLM_STATUS_default_instance_;
    new (ptr) ::primary::TLM_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::TLM_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLM_STATUS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TLM_STATUS_primary_2eproto}, {}};

static void InitDefaultsscc_info_TLM_VERSION_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_TLM_VERSION_default_instance_;
    new (ptr) ::primary::TLM_VERSION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::TLM_VERSION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLM_VERSION_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TLM_VERSION_primary_2eproto}, {}};

static void InitDefaultsscc_info_TS_STATUS_DAS_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_TS_STATUS_DAS_default_instance_;
    new (ptr) ::primary::TS_STATUS_DAS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::TS_STATUS_DAS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TS_STATUS_DAS_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TS_STATUS_DAS_primary_2eproto}, {}};

static void InitDefaultsscc_info_TS_STATUS_HANDCART_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_TS_STATUS_HANDCART_default_instance_;
    new (ptr) ::primary::TS_STATUS_HANDCART();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::TS_STATUS_HANDCART::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TS_STATUS_HANDCART_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TS_STATUS_HANDCART_primary_2eproto}, {}};

static void InitDefaultsscc_info_TS_STATUS_STEER_primary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::primary::_TS_STATUS_STEER_default_instance_;
    new (ptr) ::primary::TS_STATUS_STEER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::primary::TS_STATUS_STEER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TS_STATUS_STEER_primary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TS_STATUS_STEER_primary_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_primary_2eproto[81];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_primary_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_primary_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_primary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BMS_HV_JMP_TO_BLT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BMS_HV_JMP_TO_BLT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BMS_LV_JMP_TO_BLT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BMS_LV_JMP_TO_BLT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, canlib_build_time_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, canlib_build_time_),
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, canlib_build_time_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, canlib_build_time_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, canlib_build_time_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, timestamp_),
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::AMBIENT_TEMPERATURE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::AMBIENT_TEMPERATURE, temp_),
  PROTOBUF_FIELD_OFFSET(::primary::AMBIENT_TEMPERATURE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DATA_LOGGER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::DATA_LOGGER, placeholder1_),
  PROTOBUF_FIELD_OFFSET(::primary::DATA_LOGGER, placeholder2_),
  PROTOBUF_FIELD_OFFSET(::primary::DATA_LOGGER, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, soc_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, pack_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, bus_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, max_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, min_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, current_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, power_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, energy_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, soc_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, average_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, max_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, min_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, warnings_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, errors_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CAN_FORWARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CAN_FORWARD, can_forward_set_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CAN_FORWARD, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE, fans_override_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE, fans_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CAN_FORWARD_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CAN_FORWARD_STATUS, can_forward_status_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CAN_FORWARD_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE_STATUS, fans_override_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE_STATUS, fans_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_FANS_OVERRIDE_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_FEEDBACKS_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_FEEDBACKS_STATUS, feedbacks_status_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_FEEDBACKS_STATUS, is_circuitry_error_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_FEEDBACKS_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_IMD_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_IMD_STATUS, imd_fault_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_IMD_STATUS, imd_status_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_IMD_STATUS, imd_info_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_IMD_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_DAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_DAS, ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_DAS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_STEER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_STEER, ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_STEER, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_HANDCART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_HANDCART, ts_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS_HANDCART, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_DAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_DAS, ts_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_DAS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_HANDCART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_HANDCART, ts_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS_HANDCART, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, map_pw_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, map_sc_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, map_tv_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, car_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, bound_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, pedal_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_STEERING_ANGLE_RANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_STEERING_ANGLE_RANGE, bound_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_STEERING_ANGLE_RANGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_ERRORS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_ERRORS, das_error_),
  PROTOBUF_FIELD_OFFSET(::primary::DAS_ERRORS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, current_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_3_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_4_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TOTAL_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TOTAL_VOLTAGE, total_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TOTAL_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, bp_temperature_1_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, bp_temperature_2_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, dcdc12_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, dcdc24_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, radiators_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, pumps_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_RADIATOR_SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_RADIATOR_SPEED, radiators_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_RADIATOR_SPEED, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PUMPS_SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PUMPS_SPEED, pumps_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_PUMPS_SPEED, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_INVERTER_CONNECTION_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_INVERTER_CONNECTION_STATUS, status_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_INVERTER_CONNECTION_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::INVERTER_CONNECTION_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::INVERTER_CONNECTION_STATUS, status_),
  PROTOBUF_FIELD_OFFSET(::primary::INVERTER_CONNECTION_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_ERRORS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::LV_ERRORS, warnings_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_ERRORS, errors_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_ERRORS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SHUTDOWN_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SHUTDOWN_STATUS, input_),
  PROTOBUF_FIELD_OFFSET(::primary::SHUTDOWN_STATUS, output_),
  PROTOBUF_FIELD_OFFSET(::primary::SHUTDOWN_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::MARKER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::MARKER, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, start_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, start_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_3_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_4_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_5_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, set_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, connected_),
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, encoder_r_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, encoder_l_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_0_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_1_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_2_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_3_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_4_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_5_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_6_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, data_7_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_REQUEST, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_0_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_1_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_2_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_3_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_4_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_5_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_6_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, data_7_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_REQUEST, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, reg_id_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_0_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_1_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_2_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_3_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_4_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_5_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, data_6_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_L_RESPONSE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, reg_id_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, data_0_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, data_1_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, data_2_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, data_3_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, data_4_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, data_5_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, data_6_),
  PROTOBUF_FIELD_OFFSET(::primary::INV_R_RESPONSE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_0_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_0_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_0_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_0_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_1_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_1_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_1_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_1_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_2_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_2_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_2_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_2_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_3_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_3_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_3_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_3_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_4_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_4_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_4_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_4_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_5_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_5_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_5_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_CELLBOARD_5_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_HV_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_HV_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_HV_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_HV_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_LV_TX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_LV_TX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_LV_RX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::FLASH_BMS_LV_RX, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_NLG5_CTL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_NLG5_CTL, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ST, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ACT_I, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ACT_I, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ACT_II, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ACT_II, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_TEMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_TEMP, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ERR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::BRUSA_ERR, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CONTROL_OUTPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::CONTROL_OUTPUT, estimated_velocity_),
  PROTOBUF_FIELD_OFFSET(::primary::CONTROL_OUTPUT, tmax_r_),
  PROTOBUF_FIELD_OFFSET(::primary::CONTROL_OUTPUT, tmax_l_),
  PROTOBUF_FIELD_OFFSET(::primary::CONTROL_OUTPUT, torque_l_),
  PROTOBUF_FIELD_OFFSET(::primary::CONTROL_OUTPUT, torque_r_),
  PROTOBUF_FIELD_OFFSET(::primary::CONTROL_OUTPUT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LC_RESET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::LC_RESET, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Pack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::primary::Pack, bms_hv_jmp_to_blt_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, bms_lv_jmp_to_blt_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, steer_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, das_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, tlm_version_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, timestamp_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, ambient_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, data_logger_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, steer_system_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_current_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_errors_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_can_forward_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_fans_override_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_can_forward_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_fans_override_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_feedbacks_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_imd_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, ts_status_das_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, ts_status_steer_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, ts_status_handcart_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_ts_status_das_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_ts_status_handcart_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, steer_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_pedals_range_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_steering_angle_range_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, car_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, das_errors_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_current_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_total_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, cooling_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_radiator_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_pumps_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_inverter_connection_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, inverter_connection_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lv_errors_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, shutdown_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, marker_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_cells_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_cells_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, hv_cell_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, set_cell_balancing_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, handcart_status_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, speed_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, inv_l_request_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, inv_r_request_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, inv_l_response_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, inv_r_response_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_0_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_0_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_1_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_1_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_2_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_2_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_3_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_3_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_4_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_4_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_5_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_cellboard_5_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_bms_hv_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_bms_hv_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_bms_lv_tx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, flash_bms_lv_rx_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, brusa_nlg5_ctl_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, brusa_st_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, brusa_act_i_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, brusa_act_ii_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, brusa_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, brusa_err_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, control_output_),
  PROTOBUF_FIELD_OFFSET(::primary::Pack, lc_reset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::primary::BMS_HV_JMP_TO_BLT)},
  { 6, -1, sizeof(::primary::BMS_LV_JMP_TO_BLT)},
  { 12, -1, sizeof(::primary::STEER_VERSION)},
  { 20, -1, sizeof(::primary::DAS_VERSION)},
  { 28, -1, sizeof(::primary::HV_VERSION)},
  { 36, -1, sizeof(::primary::LV_VERSION)},
  { 44, -1, sizeof(::primary::TLM_VERSION)},
  { 52, -1, sizeof(::primary::TIMESTAMP)},
  { 59, -1, sizeof(::primary::AMBIENT_TEMPERATURE)},
  { 66, -1, sizeof(::primary::DATA_LOGGER)},
  { 74, -1, sizeof(::primary::SET_TLM_STATUS)},
  { 81, -1, sizeof(::primary::TLM_STATUS)},
  { 88, -1, sizeof(::primary::STEER_SYSTEM_STATUS)},
  { 95, -1, sizeof(::primary::HV_VOLTAGE)},
  { 105, -1, sizeof(::primary::HV_CURRENT)},
  { 115, -1, sizeof(::primary::HV_TEMP)},
  { 124, -1, sizeof(::primary::HV_ERRORS)},
  { 132, -1, sizeof(::primary::HV_CAN_FORWARD)},
  { 139, -1, sizeof(::primary::HV_FANS_OVERRIDE)},
  { 147, -1, sizeof(::primary::HV_CAN_FORWARD_STATUS)},
  { 154, -1, sizeof(::primary::HV_FANS_OVERRIDE_STATUS)},
  { 162, -1, sizeof(::primary::HV_FEEDBACKS_STATUS)},
  { 170, -1, sizeof(::primary::HV_IMD_STATUS)},
  { 179, -1, sizeof(::primary::TS_STATUS_DAS)},
  { 186, -1, sizeof(::primary::TS_STATUS_STEER)},
  { 193, -1, sizeof(::primary::TS_STATUS_HANDCART)},
  { 200, -1, sizeof(::primary::SET_TS_STATUS_DAS)},
  { 207, -1, sizeof(::primary::SET_TS_STATUS_HANDCART)},
  { 214, -1, sizeof(::primary::STEER_STATUS)},
  { 223, -1, sizeof(::primary::SET_CAR_STATUS)},
  { 230, -1, sizeof(::primary::SET_PEDALS_RANGE)},
  { 238, -1, sizeof(::primary::SET_STEERING_ANGLE_RANGE)},
  { 245, -1, sizeof(::primary::CAR_STATUS)},
  { 254, -1, sizeof(::primary::DAS_ERRORS)},
  { 261, -1, sizeof(::primary::LV_CURRENT)},
  { 268, -1, sizeof(::primary::LV_VOLTAGE)},
  { 278, -1, sizeof(::primary::LV_TOTAL_VOLTAGE)},
  { 285, -1, sizeof(::primary::LV_TEMPERATURE)},
  { 295, -1, sizeof(::primary::COOLING_STATUS)},
  { 303, -1, sizeof(::primary::SET_RADIATOR_SPEED)},
  { 310, -1, sizeof(::primary::SET_PUMPS_SPEED)},
  { 317, -1, sizeof(::primary::SET_INVERTER_CONNECTION_STATUS)},
  { 324, -1, sizeof(::primary::INVERTER_CONNECTION_STATUS)},
  { 331, -1, sizeof(::primary::LV_ERRORS)},
  { 339, -1, sizeof(::primary::SHUTDOWN_STATUS)},
  { 347, -1, sizeof(::primary::MARKER)},
  { 353, -1, sizeof(::primary::HV_CELLS_VOLTAGE)},
  { 363, -1, sizeof(::primary::HV_CELLS_TEMP)},
  { 376, -1, sizeof(::primary::HV_CELL_BALANCING_STATUS)},
  { 383, -1, sizeof(::primary::SET_CELL_BALANCING_STATUS)},
  { 390, -1, sizeof(::primary::HANDCART_STATUS)},
  { 397, -1, sizeof(::primary::SPEED)},
  { 407, -1, sizeof(::primary::INV_L_REQUEST)},
  { 421, -1, sizeof(::primary::INV_R_REQUEST)},
  { 435, -1, sizeof(::primary::INV_L_RESPONSE)},
  { 449, -1, sizeof(::primary::INV_R_RESPONSE)},
  { 463, -1, sizeof(::primary::FLASH_CELLBOARD_0_TX)},
  { 469, -1, sizeof(::primary::FLASH_CELLBOARD_0_RX)},
  { 475, -1, sizeof(::primary::FLASH_CELLBOARD_1_TX)},
  { 481, -1, sizeof(::primary::FLASH_CELLBOARD_1_RX)},
  { 487, -1, sizeof(::primary::FLASH_CELLBOARD_2_TX)},
  { 493, -1, sizeof(::primary::FLASH_CELLBOARD_2_RX)},
  { 499, -1, sizeof(::primary::FLASH_CELLBOARD_3_TX)},
  { 505, -1, sizeof(::primary::FLASH_CELLBOARD_3_RX)},
  { 511, -1, sizeof(::primary::FLASH_CELLBOARD_4_TX)},
  { 517, -1, sizeof(::primary::FLASH_CELLBOARD_4_RX)},
  { 523, -1, sizeof(::primary::FLASH_CELLBOARD_5_TX)},
  { 529, -1, sizeof(::primary::FLASH_CELLBOARD_5_RX)},
  { 535, -1, sizeof(::primary::FLASH_BMS_HV_TX)},
  { 541, -1, sizeof(::primary::FLASH_BMS_HV_RX)},
  { 547, -1, sizeof(::primary::FLASH_BMS_LV_TX)},
  { 553, -1, sizeof(::primary::FLASH_BMS_LV_RX)},
  { 559, -1, sizeof(::primary::BRUSA_NLG5_CTL)},
  { 565, -1, sizeof(::primary::BRUSA_ST)},
  { 571, -1, sizeof(::primary::BRUSA_ACT_I)},
  { 577, -1, sizeof(::primary::BRUSA_ACT_II)},
  { 583, -1, sizeof(::primary::BRUSA_TEMP)},
  { 589, -1, sizeof(::primary::BRUSA_ERR)},
  { 595, -1, sizeof(::primary::CONTROL_OUTPUT)},
  { 606, -1, sizeof(::primary::LC_RESET)},
  { 612, -1, sizeof(::primary::Pack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BMS_HV_JMP_TO_BLT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BMS_LV_JMP_TO_BLT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_STEER_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_DAS_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TLM_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TIMESTAMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_AMBIENT_TEMPERATURE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_DATA_LOGGER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_TLM_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TLM_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_STEER_SYSTEM_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_VOLTAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CURRENT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_TEMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_ERRORS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CAN_FORWARD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_FANS_OVERRIDE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CAN_FORWARD_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_FANS_OVERRIDE_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_FEEDBACKS_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_IMD_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TS_STATUS_DAS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TS_STATUS_STEER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TS_STATUS_HANDCART_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_TS_STATUS_DAS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_TS_STATUS_HANDCART_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_STEER_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_CAR_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_PEDALS_RANGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_STEERING_ANGLE_RANGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_CAR_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_DAS_ERRORS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_CURRENT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_VOLTAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_TOTAL_VOLTAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_TEMPERATURE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_COOLING_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_RADIATOR_SPEED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_PUMPS_SPEED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_INVERTER_CONNECTION_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_INVERTER_CONNECTION_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_ERRORS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SHUTDOWN_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_MARKER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CELLS_VOLTAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CELLS_TEMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CELL_BALANCING_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_CELL_BALANCING_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HANDCART_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SPEED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_INV_L_REQUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_INV_R_REQUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_INV_L_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_INV_R_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_0_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_0_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_1_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_1_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_2_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_2_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_3_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_3_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_4_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_4_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_5_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_CELLBOARD_5_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_BMS_HV_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_BMS_HV_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_BMS_LV_TX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_FLASH_BMS_LV_RX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BRUSA_NLG5_CTL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BRUSA_ST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BRUSA_ACT_I_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BRUSA_ACT_II_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BRUSA_TEMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_BRUSA_ERR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_CONTROL_OUTPUT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LC_RESET_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_Pack_default_instance_),
};

const char descriptor_table_protodef_primary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rprimary.proto\022\007primary\"-\n\021BMS_HV_JMP_T"
  "O_BLT\022\030\n\020_inner_timestamp\030\001 \001(\004\"-\n\021BMS_L"
  "V_JMP_TO_BLT\022\030\n\020_inner_timestamp\030\001 \001(\004\"_"
  "\n\rSTEER_VERSION\022\031\n\021component_version\030\001 \001"
  "(\r\022\031\n\021canlib_build_time\030\002 \001(\r\022\030\n\020_inner_"
  "timestamp\030\003 \001(\004\"]\n\013DAS_VERSION\022\031\n\021compon"
  "ent_version\030\001 \001(\r\022\031\n\021canlib_build_time\030\002"
  " \001(\r\022\030\n\020_inner_timestamp\030\003 \001(\004\"\\\n\nHV_VER"
  "SION\022\031\n\021component_version\030\001 \001(\r\022\031\n\021canli"
  "b_build_time\030\002 \001(\r\022\030\n\020_inner_timestamp\030\003"
  " \001(\004\"\\\n\nLV_VERSION\022\031\n\021component_version\030"
  "\001 \001(\r\022\031\n\021canlib_build_time\030\002 \001(\r\022\030\n\020_inn"
  "er_timestamp\030\003 \001(\004\"]\n\013TLM_VERSION\022\031\n\021com"
  "ponent_version\030\001 \001(\r\022\031\n\021canlib_build_tim"
  "e\030\002 \001(\r\022\030\n\020_inner_timestamp\030\003 \001(\004\"8\n\tTIM"
  "ESTAMP\022\021\n\ttimestamp\030\001 \001(\r\022\030\n\020_inner_time"
  "stamp\030\002 \001(\004\"=\n\023AMBIENT_TEMPERATURE\022\014\n\004te"
  "mp\030\001 \001(\021\022\030\n\020_inner_timestamp\030\002 \001(\004\"S\n\013DA"
  "TA_LOGGER\022\024\n\014placeholder1\030\001 \001(\r\022\024\n\014place"
  "holder2\030\002 \001(\r\022\030\n\020_inner_timestamp\030\003 \001(\004\""
  "O\n\016SET_TLM_STATUS\022#\n\ntlm_status\030\001 \001(\0162\017."
  "primary.Toggle\022\030\n\020_inner_timestamp\030\002 \001(\004"
  "\"K\n\nTLM_STATUS\022#\n\ntlm_status\030\001 \001(\0162\017.pri"
  "mary.Toggle\022\030\n\020_inner_timestamp\030\002 \001(\004\"A\n"
  "\023STEER_SYSTEM_STATUS\022\020\n\010soc_temp\030\001 \001(\r\022\030"
  "\n\020_inner_timestamp\030\002 \001(\004\"\205\001\n\nHV_VOLTAGE\022"
  "\024\n\014pack_voltage\030\001 \001(\002\022\023\n\013bus_voltage\030\002 \001"
  "(\002\022\030\n\020max_cell_voltage\030\003 \001(\002\022\030\n\020min_cell"
  "_voltage\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 \001(\004"
  "\"c\n\nHV_CURRENT\022\017\n\007current\030\001 \001(\002\022\r\n\005power"
  "\030\002 \001(\002\022\016\n\006energy\030\003 \001(\002\022\013\n\003soc\030\004 \001(\002\022\030\n\020_"
  "inner_timestamp\030\005 \001(\004\"]\n\007HV_TEMP\022\024\n\014aver"
  "age_temp\030\001 \001(\002\022\020\n\010max_temp\030\002 \001(\002\022\020\n\010min_"
  "temp\030\003 \001(\002\022\030\n\020_inner_timestamp\030\004 \001(\004\"G\n\t"
  "HV_ERRORS\022\020\n\010warnings\030\001 \001(\r\022\016\n\006errors\030\002 "
  "\001(\r\022\030\n\020_inner_timestamp\030\003 \001(\004\"T\n\016HV_CAN_"
  "FORWARD\022(\n\017can_forward_set\030\001 \001(\0162\017.prima"
  "ry.Toggle\022\030\n\020_inner_timestamp\030\002 \001(\004\"h\n\020H"
  "V_FANS_OVERRIDE\022&\n\rfans_override\030\001 \001(\0162\017"
  ".primary.Toggle\022\022\n\nfans_speed\030\002 \001(\002\022\030\n\020_"
  "inner_timestamp\030\003 \001(\004\"^\n\025HV_CAN_FORWARD_"
  "STATUS\022+\n\022can_forward_status\030\001 \001(\0162\017.pri"
  "mary.Toggle\022\030\n\020_inner_timestamp\030\002 \001(\004\"o\n"
  "\027HV_FANS_OVERRIDE_STATUS\022&\n\rfans_overrid"
  "e\030\001 \001(\0162\017.primary.Toggle\022\022\n\nfans_speed\030\002"
  " \001(\002\022\030\n\020_inner_timestamp\030\003 \001(\004\"e\n\023HV_FEE"
  "DBACKS_STATUS\022\030\n\020feedbacks_status\030\001 \001(\r\022"
  "\032\n\022is_circuitry_error\030\002 \001(\r\022\030\n\020_inner_ti"
  "mestamp\030\003 \001(\004\"v\n\rHV_IMD_STATUS\022\021\n\timd_fa"
  "ult\030\001 \001(\010\022&\n\nimd_status\030\002 \001(\0162\022.primary."
  "ImdStatus\022\020\n\010imd_info\030\003 \001(\021\022\030\n\020_inner_ti"
  "mestamp\030\004 \001(\004\"O\n\rTS_STATUS_DAS\022$\n\tts_sta"
  "tus\030\001 \001(\0162\021.primary.TsStatus\022\030\n\020_inner_t"
  "imestamp\030\002 \001(\004\"Q\n\017TS_STATUS_STEER\022$\n\tts_"
  "status\030\001 \001(\0162\021.primary.TsStatus\022\030\n\020_inne"
  "r_timestamp\030\002 \001(\004\"T\n\022TS_STATUS_HANDCART\022"
  "$\n\tts_status\030\001 \001(\0162\021.primary.TsStatus\022\030\n"
  "\020_inner_timestamp\030\002 \001(\004\"U\n\021SET_TS_STATUS"
  "_DAS\022&\n\rts_status_set\030\001 \001(\0162\017.primary.To"
  "ggle\022\030\n\020_inner_timestamp\030\002 \001(\004\"Z\n\026SET_TS"
  "_STATUS_HANDCART\022&\n\rts_status_set\030\001 \001(\0162"
  "\017.primary.Toggle\022\030\n\020_inner_timestamp\030\002 \001"
  "(\004\"X\n\014STEER_STATUS\022\016\n\006map_pw\030\001 \001(\002\022\016\n\006ma"
  "p_sc\030\002 \001(\002\022\016\n\006map_tv\030\003 \001(\002\022\030\n\020_inner_tim"
  "estamp\030\004 \001(\004\"Y\n\016SET_CAR_STATUS\022-\n\016car_st"
  "atus_set\030\001 \001(\0162\025.primary.SetCarStatus\022\030\n"
  "\020_inner_timestamp\030\002 \001(\004\"j\n\020SET_PEDALS_RA"
  "NGE\022\035\n\005bound\030\001 \001(\0162\016.primary.Bound\022\035\n\005pe"
  "dal\030\002 \001(\0162\016.primary.Pedal\022\030\n\020_inner_time"
  "stamp\030\003 \001(\004\"S\n\030SET_STEERING_ANGLE_RANGE\022"
  "\035\n\005bound\030\001 \001(\0162\016.primary.Bound\022\030\n\020_inner"
  "_timestamp\030\002 \001(\004\"\250\001\n\nCAR_STATUS\022+\n\ninver"
  "ter_l\030\001 \001(\0162\027.primary.InverterStatus\022+\n\n"
  "inverter_r\030\002 \001(\0162\027.primary.InverterStatu"
  "s\022&\n\ncar_status\030\003 \001(\0162\022.primary.CarStatu"
  "s\022\030\n\020_inner_timestamp\030\004 \001(\004\"9\n\nDAS_ERROR"
  "S\022\021\n\tdas_error\030\001 \001(\r\022\030\n\020_inner_timestamp"
  "\030\002 \001(\004\"7\n\nLV_CURRENT\022\017\n\007current\030\001 \001(\002\022\030\n"
  "\020_inner_timestamp\030\002 \001(\004\"r\n\nLV_VOLTAGE\022\021\n"
  "\tvoltage_1\030\001 \001(\002\022\021\n\tvoltage_2\030\002 \001(\002\022\021\n\tv"
  "oltage_3\030\003 \001(\002\022\021\n\tvoltage_4\030\004 \001(\002\022\030\n\020_in"
  "ner_timestamp\030\005 \001(\004\"C\n\020LV_TOTAL_VOLTAGE\022"
  "\025\n\rtotal_voltage\030\001 \001(\002\022\030\n\020_inner_timesta"
  "mp\030\002 \001(\004\"\226\001\n\016LV_TEMPERATURE\022\030\n\020bp_temper"
  "ature_1\030\001 \001(\002\022\030\n\020bp_temperature_2\030\002 \001(\002\022"
  "\032\n\022dcdc12_temperature\030\003 \001(\002\022\032\n\022dcdc24_te"
  "mperature\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 \001("
  "\004\"X\n\016COOLING_STATUS\022\027\n\017radiators_speed\030\001"
  " \001(\002\022\023\n\013pumps_speed\030\002 \001(\002\022\030\n\020_inner_time"
  "stamp\030\003 \001(\004\"G\n\022SET_RADIATOR_SPEED\022\027\n\017rad"
  "iators_speed\030\001 \001(\002\022\030\n\020_inner_timestamp\030\002"
  " \001(\004\"@\n\017SET_PUMPS_SPEED\022\023\n\013pumps_speed\030\001"
  " \001(\002\022\030\n\020_inner_timestamp\030\002 \001(\004\"[\n\036SET_IN"
  "VERTER_CONNECTION_STATUS\022\037\n\006status\030\001 \001(\016"
  "2\017.primary.Toggle\022\030\n\020_inner_timestamp\030\002 "
  "\001(\004\"W\n\032INVERTER_CONNECTION_STATUS\022\037\n\006sta"
  "tus\030\001 \001(\0162\017.primary.Toggle\022\030\n\020_inner_tim"
  "estamp\030\002 \001(\004\"G\n\tLV_ERRORS\022\020\n\010warnings\030\001 "
  "\001(\r\022\016\n\006errors\030\002 \001(\r\022\030\n\020_inner_timestamp\030"
  "\003 \001(\004\"J\n\017SHUTDOWN_STATUS\022\r\n\005input\030\001 \001(\010\022"
  "\016\n\006output\030\002 \001(\010\022\030\n\020_inner_timestamp\030\003 \001("
  "\004\"\"\n\006MARKER\022\030\n\020_inner_timestamp\030\001 \001(\004\"z\n"
  "\020HV_CELLS_VOLTAGE\022\023\n\013start_index\030\001 \001(\r\022\021"
  "\n\tvoltage_0\030\002 \001(\002\022\021\n\tvoltage_1\030\003 \001(\002\022\021\n\t"
  "voltage_2\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 \001("
  "\004\"\236\001\n\rHV_CELLS_TEMP\022\023\n\013start_index\030\001 \001(\r"
  "\022\016\n\006temp_0\030\002 \001(\002\022\016\n\006temp_1\030\003 \001(\002\022\016\n\006temp"
  "_2\030\004 \001(\002\022\016\n\006temp_3\030\005 \001(\002\022\016\n\006temp_4\030\006 \001(\002"
  "\022\016\n\006temp_5\030\007 \001(\002\022\030\n\020_inner_timestamp\030\010 \001"
  "(\004\"_\n\030HV_CELL_BALANCING_STATUS\022)\n\020balanc"
  "ing_status\030\001 \001(\0162\017.primary.Toggle\022\030\n\020_in"
  "ner_timestamp\030\002 \001(\004\"d\n\031SET_CELL_BALANCIN"
  "G_STATUS\022-\n\024set_balancing_status\030\001 \001(\0162\017"
  ".primary.Toggle\022\030\n\020_inner_timestamp\030\002 \001("
  "\004\">\n\017HANDCART_STATUS\022\021\n\tconnected\030\001 \001(\010\022"
  "\030\n\020_inner_timestamp\030\002 \001(\004\"o\n\005SPEED\022\021\n\ten"
  "coder_r\030\001 \001(\002\022\021\n\tencoder_l\030\002 \001(\002\022\022\n\ninve"
  "rter_r\030\003 \001(\002\022\022\n\ninverter_l\030\004 \001(\002\022\030\n\020_inn"
  "er_timestamp\030\005 \001(\004\"\251\001\n\rINV_L_REQUEST\022\016\n\006"
  "data_0\030\001 \001(\r\022\016\n\006data_1\030\002 \001(\r\022\016\n\006data_2\030\003"
  " \001(\r\022\016\n\006data_3\030\004 \001(\r\022\016\n\006data_4\030\005 \001(\r\022\016\n\006"
  "data_5\030\006 \001(\r\022\016\n\006data_6\030\007 \001(\r\022\016\n\006data_7\030\010"
  " \001(\r\022\030\n\020_inner_timestamp\030\t \001(\004\"\251\001\n\rINV_R"
  "_REQUEST\022\016\n\006data_0\030\001 \001(\r\022\016\n\006data_1\030\002 \001(\r"
  "\022\016\n\006data_2\030\003 \001(\r\022\016\n\006data_3\030\004 \001(\r\022\016\n\006data"
  "_4\030\005 \001(\r\022\016\n\006data_5\030\006 \001(\r\022\016\n\006data_6\030\007 \001(\r"
  "\022\016\n\006data_7\030\010 \001(\r\022\030\n\020_inner_timestamp\030\t \001"
  "(\004\"\252\001\n\016INV_L_RESPONSE\022\016\n\006reg_id\030\001 \001(\r\022\016\n"
  "\006data_0\030\002 \001(\r\022\016\n\006data_1\030\003 \001(\r\022\016\n\006data_2\030"
  "\004 \001(\r\022\016\n\006data_3\030\005 \001(\r\022\016\n\006data_4\030\006 \001(\r\022\016\n"
  "\006data_5\030\007 \001(\r\022\016\n\006data_6\030\010 \001(\r\022\030\n\020_inner_"
  "timestamp\030\t \001(\004\"\252\001\n\016INV_R_RESPONSE\022\016\n\006re"
  "g_id\030\001 \001(\r\022\016\n\006data_0\030\002 \001(\r\022\016\n\006data_1\030\003 \001"
  "(\r\022\016\n\006data_2\030\004 \001(\r\022\016\n\006data_3\030\005 \001(\r\022\016\n\006da"
  "ta_4\030\006 \001(\r\022\016\n\006data_5\030\007 \001(\r\022\016\n\006data_6\030\010 \001"
  "(\r\022\030\n\020_inner_timestamp\030\t \001(\004\"0\n\024FLASH_CE"
  "LLBOARD_0_TX\022\030\n\020_inner_timestamp\030\001 \001(\004\"0"
  "\n\024FLASH_CELLBOARD_0_RX\022\030\n\020_inner_timesta"
  "mp\030\001 \001(\004\"0\n\024FLASH_CELLBOARD_1_TX\022\030\n\020_inn"
  "er_timestamp\030\001 \001(\004\"0\n\024FLASH_CELLBOARD_1_"
  "RX\022\030\n\020_inner_timestamp\030\001 \001(\004\"0\n\024FLASH_CE"
  "LLBOARD_2_TX\022\030\n\020_inner_timestamp\030\001 \001(\004\"0"
  "\n\024FLASH_CELLBOARD_2_RX\022\030\n\020_inner_timesta"
  "mp\030\001 \001(\004\"0\n\024FLASH_CELLBOARD_3_TX\022\030\n\020_inn"
  "er_timestamp\030\001 \001(\004\"0\n\024FLASH_CELLBOARD_3_"
  "RX\022\030\n\020_inner_timestamp\030\001 \001(\004\"0\n\024FLASH_CE"
  "LLBOARD_4_TX\022\030\n\020_inner_timestamp\030\001 \001(\004\"0"
  "\n\024FLASH_CELLBOARD_4_RX\022\030\n\020_inner_timesta"
  "mp\030\001 \001(\004\"0\n\024FLASH_CELLBOARD_5_TX\022\030\n\020_inn"
  "er_timestamp\030\001 \001(\004\"0\n\024FLASH_CELLBOARD_5_"
  "RX\022\030\n\020_inner_timestamp\030\001 \001(\004\"+\n\017FLASH_BM"
  "S_HV_TX\022\030\n\020_inner_timestamp\030\001 \001(\004\"+\n\017FLA"
  "SH_BMS_HV_RX\022\030\n\020_inner_timestamp\030\001 \001(\004\"+"
  "\n\017FLASH_BMS_LV_TX\022\030\n\020_inner_timestamp\030\001 "
  "\001(\004\"+\n\017FLASH_BMS_LV_RX\022\030\n\020_inner_timesta"
  "mp\030\001 \001(\004\"*\n\016BRUSA_NLG5_CTL\022\030\n\020_inner_tim"
  "estamp\030\001 \001(\004\"$\n\010BRUSA_ST\022\030\n\020_inner_times"
  "tamp\030\001 \001(\004\"\'\n\013BRUSA_ACT_I\022\030\n\020_inner_time"
  "stamp\030\001 \001(\004\"(\n\014BRUSA_ACT_II\022\030\n\020_inner_ti"
  "mestamp\030\001 \001(\004\"&\n\nBRUSA_TEMP\022\030\n\020_inner_ti"
  "mestamp\030\001 \001(\004\"%\n\tBRUSA_ERR\022\030\n\020_inner_tim"
  "estamp\030\001 \001(\004\"\212\001\n\016CONTROL_OUTPUT\022\032\n\022estim"
  "ated_velocity\030\001 \001(\002\022\016\n\006tmax_r\030\002 \001(\002\022\016\n\006t"
  "max_l\030\003 \001(\002\022\020\n\010torque_l\030\004 \001(\002\022\020\n\010torque_"
  "r\030\005 \001(\002\022\030\n\020_inner_timestamp\030\006 \001(\004\"$\n\010LC_"
  "RESET\022\030\n\020_inner_timestamp\030\001 \001(\004\"\200 \n\004Pack"
  "\0225\n\021BMS_HV_JMP_TO_BLT\030\001 \003(\0132\032.primary.BM"
  "S_HV_JMP_TO_BLT\0225\n\021BMS_LV_JMP_TO_BLT\030\002 \003"
  "(\0132\032.primary.BMS_LV_JMP_TO_BLT\022-\n\rSTEER_"
  "VERSION\030\003 \003(\0132\026.primary.STEER_VERSION\022)\n"
  "\013DAS_VERSION\030\004 \003(\0132\024.primary.DAS_VERSION"
  "\022\'\n\nHV_VERSION\030\005 \003(\0132\023.primary.HV_VERSIO"
  "N\022\'\n\nLV_VERSION\030\006 \003(\0132\023.primary.LV_VERSI"
  "ON\022)\n\013TLM_VERSION\030\007 \003(\0132\024.primary.TLM_VE"
  "RSION\022%\n\tTIMESTAMP\030\010 \003(\0132\022.primary.TIMES"
  "TAMP\0229\n\023AMBIENT_TEMPERATURE\030\t \003(\0132\034.prim"
  "ary.AMBIENT_TEMPERATURE\022)\n\013DATA_LOGGER\030\n"
  " \003(\0132\024.primary.DATA_LOGGER\022/\n\016SET_TLM_ST"
  "ATUS\030\013 \003(\0132\027.primary.SET_TLM_STATUS\022\'\n\nT"
  "LM_STATUS\030\014 \003(\0132\023.primary.TLM_STATUS\0229\n\023"
  "STEER_SYSTEM_STATUS\030\r \003(\0132\034.primary.STEE"
  "R_SYSTEM_STATUS\022\'\n\nHV_VOLTAGE\030\016 \003(\0132\023.pr"
  "imary.HV_VOLTAGE\022\'\n\nHV_CURRENT\030\017 \003(\0132\023.p"
  "rimary.HV_CURRENT\022!\n\007HV_TEMP\030\020 \003(\0132\020.pri"
  "mary.HV_TEMP\022%\n\tHV_ERRORS\030\021 \003(\0132\022.primar"
  "y.HV_ERRORS\022/\n\016HV_CAN_FORWARD\030\022 \003(\0132\027.pr"
  "imary.HV_CAN_FORWARD\0223\n\020HV_FANS_OVERRIDE"
  "\030\023 \003(\0132\031.primary.HV_FANS_OVERRIDE\022=\n\025HV_"
  "CAN_FORWARD_STATUS\030\024 \003(\0132\036.primary.HV_CA"
  "N_FORWARD_STATUS\022A\n\027HV_FANS_OVERRIDE_STA"
  "TUS\030\025 \003(\0132 .primary.HV_FANS_OVERRIDE_STA"
  "TUS\0229\n\023HV_FEEDBACKS_STATUS\030\026 \003(\0132\034.prima"
  "ry.HV_FEEDBACKS_STATUS\022-\n\rHV_IMD_STATUS\030"
  "\027 \003(\0132\026.primary.HV_IMD_STATUS\022-\n\rTS_STAT"
  "US_DAS\030\030 \003(\0132\026.primary.TS_STATUS_DAS\0221\n\017"
  "TS_STATUS_STEER\030\031 \003(\0132\030.primary.TS_STATU"
  "S_STEER\0227\n\022TS_STATUS_HANDCART\030\032 \003(\0132\033.pr"
  "imary.TS_STATUS_HANDCART\0225\n\021SET_TS_STATU"
  "S_DAS\030\033 \003(\0132\032.primary.SET_TS_STATUS_DAS\022"
  "\?\n\026SET_TS_STATUS_HANDCART\030\034 \003(\0132\037.primar"
  "y.SET_TS_STATUS_HANDCART\022+\n\014STEER_STATUS"
  "\030\035 \003(\0132\025.primary.STEER_STATUS\022/\n\016SET_CAR"
  "_STATUS\030\036 \003(\0132\027.primary.SET_CAR_STATUS\0223"
  "\n\020SET_PEDALS_RANGE\030\037 \003(\0132\031.primary.SET_P"
  "EDALS_RANGE\022C\n\030SET_STEERING_ANGLE_RANGE\030"
  "  \003(\0132!.primary.SET_STEERING_ANGLE_RANGE"
  "\022\'\n\nCAR_STATUS\030! \003(\0132\023.primary.CAR_STATU"
  "S\022\'\n\nDAS_ERRORS\030\" \003(\0132\023.primary.DAS_ERRO"
  "RS\022\'\n\nLV_CURRENT\030# \003(\0132\023.primary.LV_CURR"
  "ENT\022\'\n\nLV_VOLTAGE\030$ \003(\0132\023.primary.LV_VOL"
  "TAGE\0223\n\020LV_TOTAL_VOLTAGE\030% \003(\0132\031.primary"
  ".LV_TOTAL_VOLTAGE\022/\n\016LV_TEMPERATURE\030& \003("
  "\0132\027.primary.LV_TEMPERATURE\022/\n\016COOLING_ST"
  "ATUS\030\' \003(\0132\027.primary.COOLING_STATUS\0227\n\022S"
  "ET_RADIATOR_SPEED\030( \003(\0132\033.primary.SET_RA"
  "DIATOR_SPEED\0221\n\017SET_PUMPS_SPEED\030) \003(\0132\030."
  "primary.SET_PUMPS_SPEED\022O\n\036SET_INVERTER_"
  "CONNECTION_STATUS\030* \003(\0132\'.primary.SET_IN"
  "VERTER_CONNECTION_STATUS\022G\n\032INVERTER_CON"
  "NECTION_STATUS\030+ \003(\0132#.primary.INVERTER_"
  "CONNECTION_STATUS\022%\n\tLV_ERRORS\030, \003(\0132\022.p"
  "rimary.LV_ERRORS\0221\n\017SHUTDOWN_STATUS\030- \003("
  "\0132\030.primary.SHUTDOWN_STATUS\022\037\n\006MARKER\030. "
  "\003(\0132\017.primary.MARKER\0223\n\020HV_CELLS_VOLTAGE"
  "\030/ \003(\0132\031.primary.HV_CELLS_VOLTAGE\022-\n\rHV_"
  "CELLS_TEMP\0300 \003(\0132\026.primary.HV_CELLS_TEMP"
  "\022C\n\030HV_CELL_BALANCING_STATUS\0301 \003(\0132!.pri"
  "mary.HV_CELL_BALANCING_STATUS\022E\n\031SET_CEL"
  "L_BALANCING_STATUS\0302 \003(\0132\".primary.SET_C"
  "ELL_BALANCING_STATUS\0221\n\017HANDCART_STATUS\030"
  "3 \003(\0132\030.primary.HANDCART_STATUS\022\035\n\005SPEED"
  "\0304 \003(\0132\016.primary.SPEED\022-\n\rINV_L_REQUEST\030"
  "5 \003(\0132\026.primary.INV_L_REQUEST\022-\n\rINV_R_R"
  "EQUEST\0306 \003(\0132\026.primary.INV_R_REQUEST\022/\n\016"
  "INV_L_RESPONSE\0307 \003(\0132\027.primary.INV_L_RES"
  "PONSE\022/\n\016INV_R_RESPONSE\0308 \003(\0132\027.primary."
  "INV_R_RESPONSE\022;\n\024FLASH_CELLBOARD_0_TX\0309"
  " \003(\0132\035.primary.FLASH_CELLBOARD_0_TX\022;\n\024F"
  "LASH_CELLBOARD_0_RX\030: \003(\0132\035.primary.FLAS"
  "H_CELLBOARD_0_RX\022;\n\024FLASH_CELLBOARD_1_TX"
  "\030; \003(\0132\035.primary.FLASH_CELLBOARD_1_TX\022;\n"
  "\024FLASH_CELLBOARD_1_RX\030< \003(\0132\035.primary.FL"
  "ASH_CELLBOARD_1_RX\022;\n\024FLASH_CELLBOARD_2_"
  "TX\030= \003(\0132\035.primary.FLASH_CELLBOARD_2_TX\022"
  ";\n\024FLASH_CELLBOARD_2_RX\030> \003(\0132\035.primary."
  "FLASH_CELLBOARD_2_RX\022;\n\024FLASH_CELLBOARD_"
  "3_TX\030\? \003(\0132\035.primary.FLASH_CELLBOARD_3_T"
  "X\022;\n\024FLASH_CELLBOARD_3_RX\030@ \003(\0132\035.primar"
  "y.FLASH_CELLBOARD_3_RX\022;\n\024FLASH_CELLBOAR"
  "D_4_TX\030A \003(\0132\035.primary.FLASH_CELLBOARD_4"
  "_TX\022;\n\024FLASH_CELLBOARD_4_RX\030B \003(\0132\035.prim"
  "ary.FLASH_CELLBOARD_4_RX\022;\n\024FLASH_CELLBO"
  "ARD_5_TX\030C \003(\0132\035.primary.FLASH_CELLBOARD"
  "_5_TX\022;\n\024FLASH_CELLBOARD_5_RX\030D \003(\0132\035.pr"
  "imary.FLASH_CELLBOARD_5_RX\0221\n\017FLASH_BMS_"
  "HV_TX\030E \003(\0132\030.primary.FLASH_BMS_HV_TX\0221\n"
  "\017FLASH_BMS_HV_RX\030F \003(\0132\030.primary.FLASH_B"
  "MS_HV_RX\0221\n\017FLASH_BMS_LV_TX\030G \003(\0132\030.prim"
  "ary.FLASH_BMS_LV_TX\0221\n\017FLASH_BMS_LV_RX\030H"
  " \003(\0132\030.primary.FLASH_BMS_LV_RX\022/\n\016BRUSA_"
  "NLG5_CTL\030I \003(\0132\027.primary.BRUSA_NLG5_CTL\022"
  "#\n\010BRUSA_ST\030J \003(\0132\021.primary.BRUSA_ST\022)\n\013"
  "BRUSA_ACT_I\030K \003(\0132\024.primary.BRUSA_ACT_I\022"
  "+\n\014BRUSA_ACT_II\030L \003(\0132\025.primary.BRUSA_AC"
  "T_II\022\'\n\nBRUSA_TEMP\030M \003(\0132\023.primary.BRUSA"
  "_TEMP\022%\n\tBRUSA_ERR\030N \003(\0132\022.primary.BRUSA"
  "_ERR\022/\n\016CONTROL_OUTPUT\030O \003(\0132\027.primary.C"
  "ONTROL_OUTPUT\022#\n\010LC_RESET\030P \003(\0132\021.primar"
  "y.LC_RESET*k\n\010RaceType\022\031\n\025RaceType_ACCEL"
  "ERATION\020\000\022\024\n\020RaceType_SKIDPAD\020\001\022\026\n\022RaceT"
  "ype_AUTOCROSS\020\002\022\026\n\022RaceType_ENDURANCE\020\003*"
  "X\n\016InverterStatus\022\026\n\022InverterStatus_OFF\020"
  "\000\022\027\n\023InverterStatus_IDLE\020\001\022\025\n\021InverterSt"
  "atus_ON\020\002*\224\001\n\tCarStatus\022\022\n\016CarStatus_IDL"
  "E\020\000\022\027\n\023CarStatus_PRE_SETUP\020\001\022\023\n\017CarStatu"
  "s_TS_ON\020\002\022\030\n\024CarStatus_POST_SETUP\020\003\022\023\n\017C"
  "arStatus_DRIVE\020\004\022\026\n\022CarStatus_TEARDOWN\020\005"
  "*\'\n\006Toggle\022\016\n\nToggle_OFF\020\000\022\r\n\tToggle_ON\020"
  "\001*Y\n\010TsStatus\022\020\n\014TsStatus_OFF\020\000\022\026\n\022TsSta"
  "tus_PRECHARGE\020\001\022\017\n\013TsStatus_ON\020\002\022\022\n\016TsSt"
  "atus_FATAL\020\003*U\n\014SetCarStatus\022\025\n\021SetCarSt"
  "atus_IDLE\020\000\022\026\n\022SetCarStatus_READY\020\001\022\026\n\022S"
  "etCarStatus_DRIVE\020\002*-\n\005Bound\022\021\n\rBound_SE"
  "T_MAX\020\000\022\021\n\rBound_SET_MIN\020\001*/\n\005Pedal\022\025\n\021P"
  "edal_ACCELERATOR\020\000\022\017\n\013Pedal_BRAKE\020\001*\274\001\n\t"
  "ImdStatus\022\024\n\020ImdStatus_IMD_SC\020\000\022\030\n\024ImdSt"
  "atus_IMD_NORMAL\020\001\022\037\n\033ImdStatus_IMD_UNDER"
  "_VOLTAGE\020\002\022\037\n\033ImdStatus_IMD_START_MEASUR"
  "E\020\003\022\036\n\032ImdStatus_IMD_DEVICE_ERROR\020\004\022\035\n\031I"
  "mdStatus_IMD_EARTH_FAULT\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_primary_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_primary_2eproto_sccs[81] = {
  &scc_info_AMBIENT_TEMPERATURE_primary_2eproto.base,
  &scc_info_BMS_HV_JMP_TO_BLT_primary_2eproto.base,
  &scc_info_BMS_LV_JMP_TO_BLT_primary_2eproto.base,
  &scc_info_BRUSA_ACT_I_primary_2eproto.base,
  &scc_info_BRUSA_ACT_II_primary_2eproto.base,
  &scc_info_BRUSA_ERR_primary_2eproto.base,
  &scc_info_BRUSA_NLG5_CTL_primary_2eproto.base,
  &scc_info_BRUSA_ST_primary_2eproto.base,
  &scc_info_BRUSA_TEMP_primary_2eproto.base,
  &scc_info_CAR_STATUS_primary_2eproto.base,
  &scc_info_CONTROL_OUTPUT_primary_2eproto.base,
  &scc_info_COOLING_STATUS_primary_2eproto.base,
  &scc_info_DAS_ERRORS_primary_2eproto.base,
  &scc_info_DAS_VERSION_primary_2eproto.base,
  &scc_info_DATA_LOGGER_primary_2eproto.base,
  &scc_info_FLASH_BMS_HV_RX_primary_2eproto.base,
  &scc_info_FLASH_BMS_HV_TX_primary_2eproto.base,
  &scc_info_FLASH_BMS_LV_RX_primary_2eproto.base,
  &scc_info_FLASH_BMS_LV_TX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_0_RX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_0_TX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_1_RX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_1_TX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_2_RX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_2_TX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_3_RX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_3_TX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_4_RX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_4_TX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_5_RX_primary_2eproto.base,
  &scc_info_FLASH_CELLBOARD_5_TX_primary_2eproto.base,
  &scc_info_HANDCART_STATUS_primary_2eproto.base,
  &scc_info_HV_CAN_FORWARD_primary_2eproto.base,
  &scc_info_HV_CAN_FORWARD_STATUS_primary_2eproto.base,
  &scc_info_HV_CELLS_TEMP_primary_2eproto.base,
  &scc_info_HV_CELLS_VOLTAGE_primary_2eproto.base,
  &scc_info_HV_CELL_BALANCING_STATUS_primary_2eproto.base,
  &scc_info_HV_CURRENT_primary_2eproto.base,
  &scc_info_HV_ERRORS_primary_2eproto.base,
  &scc_info_HV_FANS_OVERRIDE_primary_2eproto.base,
  &scc_info_HV_FANS_OVERRIDE_STATUS_primary_2eproto.base,
  &scc_info_HV_FEEDBACKS_STATUS_primary_2eproto.base,
  &scc_info_HV_IMD_STATUS_primary_2eproto.base,
  &scc_info_HV_TEMP_primary_2eproto.base,
  &scc_info_HV_VERSION_primary_2eproto.base,
  &scc_info_HV_VOLTAGE_primary_2eproto.base,
  &scc_info_INVERTER_CONNECTION_STATUS_primary_2eproto.base,
  &scc_info_INV_L_REQUEST_primary_2eproto.base,
  &scc_info_INV_L_RESPONSE_primary_2eproto.base,
  &scc_info_INV_R_REQUEST_primary_2eproto.base,
  &scc_info_INV_R_RESPONSE_primary_2eproto.base,
  &scc_info_LC_RESET_primary_2eproto.base,
  &scc_info_LV_CURRENT_primary_2eproto.base,
  &scc_info_LV_ERRORS_primary_2eproto.base,
  &scc_info_LV_TEMPERATURE_primary_2eproto.base,
  &scc_info_LV_TOTAL_VOLTAGE_primary_2eproto.base,
  &scc_info_LV_VERSION_primary_2eproto.base,
  &scc_info_LV_VOLTAGE_primary_2eproto.base,
  &scc_info_MARKER_primary_2eproto.base,
  &scc_info_Pack_primary_2eproto.base,
  &scc_info_SET_CAR_STATUS_primary_2eproto.base,
  &scc_info_SET_CELL_BALANCING_STATUS_primary_2eproto.base,
  &scc_info_SET_INVERTER_CONNECTION_STATUS_primary_2eproto.base,
  &scc_info_SET_PEDALS_RANGE_primary_2eproto.base,
  &scc_info_SET_PUMPS_SPEED_primary_2eproto.base,
  &scc_info_SET_RADIATOR_SPEED_primary_2eproto.base,
  &scc_info_SET_STEERING_ANGLE_RANGE_primary_2eproto.base,
  &scc_info_SET_TLM_STATUS_primary_2eproto.base,
  &scc_info_SET_TS_STATUS_DAS_primary_2eproto.base,
  &scc_info_SET_TS_STATUS_HANDCART_primary_2eproto.base,
  &scc_info_SHUTDOWN_STATUS_primary_2eproto.base,
  &scc_info_SPEED_primary_2eproto.base,
  &scc_info_STEER_STATUS_primary_2eproto.base,
  &scc_info_STEER_SYSTEM_STATUS_primary_2eproto.base,
  &scc_info_STEER_VERSION_primary_2eproto.base,
  &scc_info_TIMESTAMP_primary_2eproto.base,
  &scc_info_TLM_STATUS_primary_2eproto.base,
  &scc_info_TLM_VERSION_primary_2eproto.base,
  &scc_info_TS_STATUS_DAS_primary_2eproto.base,
  &scc_info_TS_STATUS_HANDCART_primary_2eproto.base,
  &scc_info_TS_STATUS_STEER_primary_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_primary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primary_2eproto = {
  false, false, descriptor_table_protodef_primary_2eproto, "primary.proto", 11594,
  &descriptor_table_primary_2eproto_once, descriptor_table_primary_2eproto_sccs, descriptor_table_primary_2eproto_deps, 81, 0,
  schemas, file_default_instances, TableStruct_primary_2eproto::offsets,
  file_level_metadata_primary_2eproto, 81, file_level_enum_descriptors_primary_2eproto, file_level_service_descriptors_primary_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_primary_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_primary_2eproto)), true);
namespace primary {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[0];
}
bool RaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InverterStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[1];
}
bool InverterStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[2];
}
bool CarStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Toggle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[3];
}
bool Toggle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TsStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[4];
}
bool TsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetCarStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[5];
}
bool SetCarStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bound_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[6];
}
bool Bound_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pedal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[7];
}
bool Pedal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImdStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[8];
}
bool ImdStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BMS_HV_JMP_TO_BLT::InitAsDefaultInstance() {
}
class BMS_HV_JMP_TO_BLT::_Internal {
 public:
};

BMS_HV_JMP_TO_BLT::BMS_HV_JMP_TO_BLT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BMS_HV_JMP_TO_BLT)
}
BMS_HV_JMP_TO_BLT::BMS_HV_JMP_TO_BLT(const BMS_HV_JMP_TO_BLT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BMS_HV_JMP_TO_BLT)
}

void BMS_HV_JMP_TO_BLT::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BMS_HV_JMP_TO_BLT::~BMS_HV_JMP_TO_BLT() {
  // @@protoc_insertion_point(destructor:primary.BMS_HV_JMP_TO_BLT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BMS_HV_JMP_TO_BLT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BMS_HV_JMP_TO_BLT::ArenaDtor(void* object) {
  BMS_HV_JMP_TO_BLT* _this = reinterpret_cast< BMS_HV_JMP_TO_BLT* >(object);
  (void)_this;
}
void BMS_HV_JMP_TO_BLT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BMS_HV_JMP_TO_BLT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMS_HV_JMP_TO_BLT& BMS_HV_JMP_TO_BLT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMS_HV_JMP_TO_BLT_primary_2eproto.base);
  return *internal_default_instance();
}


void BMS_HV_JMP_TO_BLT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BMS_HV_JMP_TO_BLT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BMS_HV_JMP_TO_BLT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMS_HV_JMP_TO_BLT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BMS_HV_JMP_TO_BLT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BMS_HV_JMP_TO_BLT)
  return target;
}

size_t BMS_HV_JMP_TO_BLT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BMS_HV_JMP_TO_BLT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMS_HV_JMP_TO_BLT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BMS_HV_JMP_TO_BLT)
  GOOGLE_DCHECK_NE(&from, this);
  const BMS_HV_JMP_TO_BLT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMS_HV_JMP_TO_BLT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BMS_HV_JMP_TO_BLT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BMS_HV_JMP_TO_BLT)
    MergeFrom(*source);
  }
}

void BMS_HV_JMP_TO_BLT::MergeFrom(const BMS_HV_JMP_TO_BLT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BMS_HV_JMP_TO_BLT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BMS_HV_JMP_TO_BLT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BMS_HV_JMP_TO_BLT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMS_HV_JMP_TO_BLT::CopyFrom(const BMS_HV_JMP_TO_BLT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BMS_HV_JMP_TO_BLT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMS_HV_JMP_TO_BLT::IsInitialized() const {
  return true;
}

void BMS_HV_JMP_TO_BLT::InternalSwap(BMS_HV_JMP_TO_BLT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMS_HV_JMP_TO_BLT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMS_LV_JMP_TO_BLT::InitAsDefaultInstance() {
}
class BMS_LV_JMP_TO_BLT::_Internal {
 public:
};

BMS_LV_JMP_TO_BLT::BMS_LV_JMP_TO_BLT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BMS_LV_JMP_TO_BLT)
}
BMS_LV_JMP_TO_BLT::BMS_LV_JMP_TO_BLT(const BMS_LV_JMP_TO_BLT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BMS_LV_JMP_TO_BLT)
}

void BMS_LV_JMP_TO_BLT::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BMS_LV_JMP_TO_BLT::~BMS_LV_JMP_TO_BLT() {
  // @@protoc_insertion_point(destructor:primary.BMS_LV_JMP_TO_BLT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BMS_LV_JMP_TO_BLT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BMS_LV_JMP_TO_BLT::ArenaDtor(void* object) {
  BMS_LV_JMP_TO_BLT* _this = reinterpret_cast< BMS_LV_JMP_TO_BLT* >(object);
  (void)_this;
}
void BMS_LV_JMP_TO_BLT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BMS_LV_JMP_TO_BLT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMS_LV_JMP_TO_BLT& BMS_LV_JMP_TO_BLT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMS_LV_JMP_TO_BLT_primary_2eproto.base);
  return *internal_default_instance();
}


void BMS_LV_JMP_TO_BLT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BMS_LV_JMP_TO_BLT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BMS_LV_JMP_TO_BLT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMS_LV_JMP_TO_BLT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BMS_LV_JMP_TO_BLT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BMS_LV_JMP_TO_BLT)
  return target;
}

size_t BMS_LV_JMP_TO_BLT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BMS_LV_JMP_TO_BLT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMS_LV_JMP_TO_BLT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BMS_LV_JMP_TO_BLT)
  GOOGLE_DCHECK_NE(&from, this);
  const BMS_LV_JMP_TO_BLT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMS_LV_JMP_TO_BLT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BMS_LV_JMP_TO_BLT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BMS_LV_JMP_TO_BLT)
    MergeFrom(*source);
  }
}

void BMS_LV_JMP_TO_BLT::MergeFrom(const BMS_LV_JMP_TO_BLT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BMS_LV_JMP_TO_BLT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BMS_LV_JMP_TO_BLT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BMS_LV_JMP_TO_BLT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMS_LV_JMP_TO_BLT::CopyFrom(const BMS_LV_JMP_TO_BLT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BMS_LV_JMP_TO_BLT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMS_LV_JMP_TO_BLT::IsInitialized() const {
  return true;
}

void BMS_LV_JMP_TO_BLT::InternalSwap(BMS_LV_JMP_TO_BLT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMS_LV_JMP_TO_BLT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STEER_VERSION::InitAsDefaultInstance() {
}
class STEER_VERSION::_Internal {
 public:
};

STEER_VERSION::STEER_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.STEER_VERSION)
}
STEER_VERSION::STEER_VERSION(const STEER_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_VERSION)
}

void STEER_VERSION::SharedCtor() {
  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

STEER_VERSION::~STEER_VERSION() {
  // @@protoc_insertion_point(destructor:primary.STEER_VERSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void STEER_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void STEER_VERSION::ArenaDtor(void* object) {
  STEER_VERSION* _this = reinterpret_cast< STEER_VERSION* >(object);
  (void)_this;
}
void STEER_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STEER_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STEER_VERSION& STEER_VERSION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STEER_VERSION_primary_2eproto.base);
  return *internal_default_instance();
}


void STEER_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 canlib_build_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          canlib_build_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STEER_VERSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_canlib_build_time(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_VERSION)
  return target;
}

size_t STEER_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_VERSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_component_version());
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_canlib_build_time());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STEER_VERSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.STEER_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  const STEER_VERSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STEER_VERSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.STEER_VERSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.STEER_VERSION)
    MergeFrom(*source);
  }
}

void STEER_VERSION::MergeFrom(const STEER_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from.canlib_build_time() != 0) {
    _internal_set_canlib_build_time(from._internal_canlib_build_time());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void STEER_VERSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.STEER_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STEER_VERSION::CopyFrom(const STEER_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_VERSION::IsInitialized() const {
  return true;
}

void STEER_VERSION::InternalSwap(STEER_VERSION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_VERSION, _inner_timestamp_)
      + sizeof(STEER_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(STEER_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_VERSION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DAS_VERSION::InitAsDefaultInstance() {
}
class DAS_VERSION::_Internal {
 public:
};

DAS_VERSION::DAS_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.DAS_VERSION)
}
DAS_VERSION::DAS_VERSION(const DAS_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.DAS_VERSION)
}

void DAS_VERSION::SharedCtor() {
  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

DAS_VERSION::~DAS_VERSION() {
  // @@protoc_insertion_point(destructor:primary.DAS_VERSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAS_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DAS_VERSION::ArenaDtor(void* object) {
  DAS_VERSION* _this = reinterpret_cast< DAS_VERSION* >(object);
  (void)_this;
}
void DAS_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAS_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DAS_VERSION& DAS_VERSION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DAS_VERSION_primary_2eproto.base);
  return *internal_default_instance();
}


void DAS_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DAS_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAS_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 canlib_build_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          canlib_build_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAS_VERSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DAS_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_canlib_build_time(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DAS_VERSION)
  return target;
}

size_t DAS_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DAS_VERSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_component_version());
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_canlib_build_time());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAS_VERSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.DAS_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  const DAS_VERSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAS_VERSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.DAS_VERSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.DAS_VERSION)
    MergeFrom(*source);
  }
}

void DAS_VERSION::MergeFrom(const DAS_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DAS_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from.canlib_build_time() != 0) {
    _internal_set_canlib_build_time(from._internal_canlib_build_time());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void DAS_VERSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.DAS_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAS_VERSION::CopyFrom(const DAS_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DAS_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAS_VERSION::IsInitialized() const {
  return true;
}

void DAS_VERSION::InternalSwap(DAS_VERSION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAS_VERSION, _inner_timestamp_)
      + sizeof(DAS_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(DAS_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAS_VERSION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_VERSION::InitAsDefaultInstance() {
}
class HV_VERSION::_Internal {
 public:
};

HV_VERSION::HV_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_VERSION)
}
HV_VERSION::HV_VERSION(const HV_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_VERSION)
}

void HV_VERSION::SharedCtor() {
  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

HV_VERSION::~HV_VERSION() {
  // @@protoc_insertion_point(destructor:primary.HV_VERSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_VERSION::ArenaDtor(void* object) {
  HV_VERSION* _this = reinterpret_cast< HV_VERSION* >(object);
  (void)_this;
}
void HV_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_VERSION& HV_VERSION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_VERSION_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 canlib_build_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          canlib_build_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_VERSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_canlib_build_time(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_VERSION)
  return target;
}

size_t HV_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_VERSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_component_version());
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_canlib_build_time());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_VERSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_VERSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_VERSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_VERSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_VERSION)
    MergeFrom(*source);
  }
}

void HV_VERSION::MergeFrom(const HV_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from.canlib_build_time() != 0) {
    _internal_set_canlib_build_time(from._internal_canlib_build_time());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_VERSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_VERSION::CopyFrom(const HV_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_VERSION::IsInitialized() const {
  return true;
}

void HV_VERSION::InternalSwap(HV_VERSION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_VERSION, _inner_timestamp_)
      + sizeof(HV_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_VERSION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LV_VERSION::InitAsDefaultInstance() {
}
class LV_VERSION::_Internal {
 public:
};

LV_VERSION::LV_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.LV_VERSION)
}
LV_VERSION::LV_VERSION(const LV_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_VERSION)
}

void LV_VERSION::SharedCtor() {
  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

LV_VERSION::~LV_VERSION() {
  // @@protoc_insertion_point(destructor:primary.LV_VERSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LV_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LV_VERSION::ArenaDtor(void* object) {
  LV_VERSION* _this = reinterpret_cast< LV_VERSION* >(object);
  (void)_this;
}
void LV_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LV_VERSION& LV_VERSION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LV_VERSION_primary_2eproto.base);
  return *internal_default_instance();
}


void LV_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 canlib_build_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          canlib_build_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LV_VERSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_canlib_build_time(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_VERSION)
  return target;
}

size_t LV_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_VERSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_component_version());
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_canlib_build_time());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LV_VERSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.LV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  const LV_VERSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LV_VERSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.LV_VERSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.LV_VERSION)
    MergeFrom(*source);
  }
}

void LV_VERSION::MergeFrom(const LV_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from.canlib_build_time() != 0) {
    _internal_set_canlib_build_time(from._internal_canlib_build_time());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void LV_VERSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.LV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LV_VERSION::CopyFrom(const LV_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_VERSION::IsInitialized() const {
  return true;
}

void LV_VERSION::InternalSwap(LV_VERSION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_VERSION, _inner_timestamp_)
      + sizeof(LV_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LV_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_VERSION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TLM_VERSION::InitAsDefaultInstance() {
}
class TLM_VERSION::_Internal {
 public:
};

TLM_VERSION::TLM_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.TLM_VERSION)
}
TLM_VERSION::TLM_VERSION(const TLM_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TLM_VERSION)
}

void TLM_VERSION::SharedCtor() {
  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
}

TLM_VERSION::~TLM_VERSION() {
  // @@protoc_insertion_point(destructor:primary.TLM_VERSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLM_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TLM_VERSION::ArenaDtor(void* object) {
  TLM_VERSION* _this = reinterpret_cast< TLM_VERSION* >(object);
  (void)_this;
}
void TLM_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TLM_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TLM_VERSION& TLM_VERSION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLM_VERSION_primary_2eproto.base);
  return *internal_default_instance();
}


void TLM_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TLM_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLM_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 canlib_build_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          canlib_build_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TLM_VERSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TLM_VERSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_canlib_build_time(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TLM_VERSION)
  return target;
}

size_t TLM_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TLM_VERSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->component_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_component_version());
  }

  // uint32 canlib_build_time = 2;
  if (this->canlib_build_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_canlib_build_time());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TLM_VERSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.TLM_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  const TLM_VERSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLM_VERSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.TLM_VERSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.TLM_VERSION)
    MergeFrom(*source);
  }
}

void TLM_VERSION::MergeFrom(const TLM_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TLM_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from.canlib_build_time() != 0) {
    _internal_set_canlib_build_time(from._internal_canlib_build_time());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void TLM_VERSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.TLM_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLM_VERSION::CopyFrom(const TLM_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TLM_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLM_VERSION::IsInitialized() const {
  return true;
}

void TLM_VERSION::InternalSwap(TLM_VERSION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLM_VERSION, _inner_timestamp_)
      + sizeof(TLM_VERSION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(TLM_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLM_VERSION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TIMESTAMP::InitAsDefaultInstance() {
}
class TIMESTAMP::_Internal {
 public:
};

TIMESTAMP::TIMESTAMP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.TIMESTAMP)
}
TIMESTAMP::TIMESTAMP(const TIMESTAMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.TIMESTAMP)
}

void TIMESTAMP::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(timestamp_));
}

TIMESTAMP::~TIMESTAMP() {
  // @@protoc_insertion_point(destructor:primary.TIMESTAMP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TIMESTAMP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TIMESTAMP::ArenaDtor(void* object) {
  TIMESTAMP* _this = reinterpret_cast< TIMESTAMP* >(object);
  (void)_this;
}
void TIMESTAMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TIMESTAMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TIMESTAMP& TIMESTAMP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TIMESTAMP_primary_2eproto.base);
  return *internal_default_instance();
}


void TIMESTAMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TIMESTAMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TIMESTAMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TIMESTAMP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TIMESTAMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TIMESTAMP)
  return target;
}

size_t TIMESTAMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TIMESTAMP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIMESTAMP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.TIMESTAMP)
  GOOGLE_DCHECK_NE(&from, this);
  const TIMESTAMP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TIMESTAMP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.TIMESTAMP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.TIMESTAMP)
    MergeFrom(*source);
  }
}

void TIMESTAMP::MergeFrom(const TIMESTAMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TIMESTAMP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TIMESTAMP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.TIMESTAMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIMESTAMP::CopyFrom(const TIMESTAMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TIMESTAMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIMESTAMP::IsInitialized() const {
  return true;
}

void TIMESTAMP::InternalSwap(TIMESTAMP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TIMESTAMP, timestamp_)
      + sizeof(TIMESTAMP::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TIMESTAMP, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TIMESTAMP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMBIENT_TEMPERATURE::InitAsDefaultInstance() {
}
class AMBIENT_TEMPERATURE::_Internal {
 public:
};

AMBIENT_TEMPERATURE::AMBIENT_TEMPERATURE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.AMBIENT_TEMPERATURE)
}
AMBIENT_TEMPERATURE::AMBIENT_TEMPERATURE(const AMBIENT_TEMPERATURE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(temp_));
  // @@protoc_insertion_point(copy_constructor:primary.AMBIENT_TEMPERATURE)
}

void AMBIENT_TEMPERATURE::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(temp_));
}

AMBIENT_TEMPERATURE::~AMBIENT_TEMPERATURE() {
  // @@protoc_insertion_point(destructor:primary.AMBIENT_TEMPERATURE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AMBIENT_TEMPERATURE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AMBIENT_TEMPERATURE::ArenaDtor(void* object) {
  AMBIENT_TEMPERATURE* _this = reinterpret_cast< AMBIENT_TEMPERATURE* >(object);
  (void)_this;
}
void AMBIENT_TEMPERATURE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AMBIENT_TEMPERATURE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMBIENT_TEMPERATURE& AMBIENT_TEMPERATURE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMBIENT_TEMPERATURE_primary_2eproto.base);
  return *internal_default_instance();
}


void AMBIENT_TEMPERATURE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.AMBIENT_TEMPERATURE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AMBIENT_TEMPERATURE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AMBIENT_TEMPERATURE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.AMBIENT_TEMPERATURE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 temp = 1;
  if (this->temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_temp(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.AMBIENT_TEMPERATURE)
  return target;
}

size_t AMBIENT_TEMPERATURE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.AMBIENT_TEMPERATURE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // sint32 temp = 1;
  if (this->temp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_temp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMBIENT_TEMPERATURE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.AMBIENT_TEMPERATURE)
  GOOGLE_DCHECK_NE(&from, this);
  const AMBIENT_TEMPERATURE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMBIENT_TEMPERATURE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.AMBIENT_TEMPERATURE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.AMBIENT_TEMPERATURE)
    MergeFrom(*source);
  }
}

void AMBIENT_TEMPERATURE::MergeFrom(const AMBIENT_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.AMBIENT_TEMPERATURE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.temp() != 0) {
    _internal_set_temp(from._internal_temp());
  }
}

void AMBIENT_TEMPERATURE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.AMBIENT_TEMPERATURE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMBIENT_TEMPERATURE::CopyFrom(const AMBIENT_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.AMBIENT_TEMPERATURE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMBIENT_TEMPERATURE::IsInitialized() const {
  return true;
}

void AMBIENT_TEMPERATURE::InternalSwap(AMBIENT_TEMPERATURE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AMBIENT_TEMPERATURE, temp_)
      + sizeof(AMBIENT_TEMPERATURE::temp_)
      - PROTOBUF_FIELD_OFFSET(AMBIENT_TEMPERATURE, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AMBIENT_TEMPERATURE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DATA_LOGGER::InitAsDefaultInstance() {
}
class DATA_LOGGER::_Internal {
 public:
};

DATA_LOGGER::DATA_LOGGER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.DATA_LOGGER)
}
DATA_LOGGER::DATA_LOGGER(const DATA_LOGGER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&placeholder1_, &from.placeholder1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&placeholder1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.DATA_LOGGER)
}

void DATA_LOGGER::SharedCtor() {
  ::memset(&placeholder1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&placeholder1_)) + sizeof(_inner_timestamp_));
}

DATA_LOGGER::~DATA_LOGGER() {
  // @@protoc_insertion_point(destructor:primary.DATA_LOGGER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DATA_LOGGER::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DATA_LOGGER::ArenaDtor(void* object) {
  DATA_LOGGER* _this = reinterpret_cast< DATA_LOGGER* >(object);
  (void)_this;
}
void DATA_LOGGER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DATA_LOGGER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DATA_LOGGER& DATA_LOGGER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DATA_LOGGER_primary_2eproto.base);
  return *internal_default_instance();
}


void DATA_LOGGER::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DATA_LOGGER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&placeholder1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&placeholder1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DATA_LOGGER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 placeholder1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          placeholder1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 placeholder2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          placeholder2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DATA_LOGGER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DATA_LOGGER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 placeholder1 = 1;
  if (this->placeholder1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_placeholder1(), target);
  }

  // uint32 placeholder2 = 2;
  if (this->placeholder2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_placeholder2(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DATA_LOGGER)
  return target;
}

size_t DATA_LOGGER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DATA_LOGGER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 placeholder1 = 1;
  if (this->placeholder1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_placeholder1());
  }

  // uint32 placeholder2 = 2;
  if (this->placeholder2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_placeholder2());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DATA_LOGGER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.DATA_LOGGER)
  GOOGLE_DCHECK_NE(&from, this);
  const DATA_LOGGER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DATA_LOGGER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.DATA_LOGGER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.DATA_LOGGER)
    MergeFrom(*source);
  }
}

void DATA_LOGGER::MergeFrom(const DATA_LOGGER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DATA_LOGGER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.placeholder1() != 0) {
    _internal_set_placeholder1(from._internal_placeholder1());
  }
  if (from.placeholder2() != 0) {
    _internal_set_placeholder2(from._internal_placeholder2());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void DATA_LOGGER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.DATA_LOGGER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DATA_LOGGER::CopyFrom(const DATA_LOGGER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DATA_LOGGER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DATA_LOGGER::IsInitialized() const {
  return true;
}

void DATA_LOGGER::InternalSwap(DATA_LOGGER* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DATA_LOGGER, _inner_timestamp_)
      + sizeof(DATA_LOGGER::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(DATA_LOGGER, placeholder1_)>(
          reinterpret_cast<char*>(&placeholder1_),
          reinterpret_cast<char*>(&other->placeholder1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DATA_LOGGER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_TLM_STATUS::InitAsDefaultInstance() {
}
class SET_TLM_STATUS::_Internal {
 public:
};

SET_TLM_STATUS::SET_TLM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_TLM_STATUS)
}
SET_TLM_STATUS::SET_TLM_STATUS(const SET_TLM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tlm_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(tlm_status_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_TLM_STATUS)
}

void SET_TLM_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tlm_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(tlm_status_));
}

SET_TLM_STATUS::~SET_TLM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_TLM_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_TLM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_TLM_STATUS::ArenaDtor(void* object) {
  SET_TLM_STATUS* _this = reinterpret_cast< SET_TLM_STATUS* >(object);
  (void)_this;
}
void SET_TLM_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_TLM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_TLM_STATUS& SET_TLM_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_TLM_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_TLM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TLM_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tlm_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(tlm_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TLM_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle tlm_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_TLM_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TLM_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle tlm_status = 1;
  if (this->tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TLM_STATUS)
  return target;
}

size_t SET_TLM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TLM_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle tlm_status = 1;
  if (this->tlm_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_TLM_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_TLM_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_TLM_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_TLM_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_TLM_STATUS)
    MergeFrom(*source);
  }
}

void SET_TLM_STATUS::MergeFrom(const SET_TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
}

void SET_TLM_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_TLM_STATUS::CopyFrom(const SET_TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TLM_STATUS::IsInitialized() const {
  return true;
}

void SET_TLM_STATUS::InternalSwap(SET_TLM_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_TLM_STATUS, tlm_status_)
      + sizeof(SET_TLM_STATUS::tlm_status_)
      - PROTOBUF_FIELD_OFFSET(SET_TLM_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TLM_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TLM_STATUS::InitAsDefaultInstance() {
}
class TLM_STATUS::_Internal {
 public:
};

TLM_STATUS::TLM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.TLM_STATUS)
}
TLM_STATUS::TLM_STATUS(const TLM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tlm_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(tlm_status_));
  // @@protoc_insertion_point(copy_constructor:primary.TLM_STATUS)
}

void TLM_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tlm_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(tlm_status_));
}

TLM_STATUS::~TLM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.TLM_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TLM_STATUS::ArenaDtor(void* object) {
  TLM_STATUS* _this = reinterpret_cast< TLM_STATUS* >(object);
  (void)_this;
}
void TLM_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TLM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TLM_STATUS& TLM_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLM_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void TLM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TLM_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tlm_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(tlm_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLM_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle tlm_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TLM_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TLM_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle tlm_status = 1;
  if (this->tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TLM_STATUS)
  return target;
}

size_t TLM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TLM_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle tlm_status = 1;
  if (this->tlm_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TLM_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const TLM_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLM_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.TLM_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.TLM_STATUS)
    MergeFrom(*source);
  }
}

void TLM_STATUS::MergeFrom(const TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
}

void TLM_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLM_STATUS::CopyFrom(const TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLM_STATUS::IsInitialized() const {
  return true;
}

void TLM_STATUS::InternalSwap(TLM_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLM_STATUS, tlm_status_)
      + sizeof(TLM_STATUS::tlm_status_)
      - PROTOBUF_FIELD_OFFSET(TLM_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLM_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STEER_SYSTEM_STATUS::InitAsDefaultInstance() {
}
class STEER_SYSTEM_STATUS::_Internal {
 public:
};

STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.STEER_SYSTEM_STATUS)
}
STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(const STEER_SYSTEM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&soc_temp_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(soc_temp_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_SYSTEM_STATUS)
}

void STEER_SYSTEM_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soc_temp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(soc_temp_));
}

STEER_SYSTEM_STATUS::~STEER_SYSTEM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.STEER_SYSTEM_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void STEER_SYSTEM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void STEER_SYSTEM_STATUS::ArenaDtor(void* object) {
  STEER_SYSTEM_STATUS* _this = reinterpret_cast< STEER_SYSTEM_STATUS* >(object);
  (void)_this;
}
void STEER_SYSTEM_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STEER_SYSTEM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STEER_SYSTEM_STATUS& STEER_SYSTEM_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STEER_SYSTEM_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void STEER_SYSTEM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_SYSTEM_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soc_temp_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(soc_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_SYSTEM_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 soc_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          soc_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STEER_SYSTEM_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_SYSTEM_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->soc_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soc_temp(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_SYSTEM_STATUS)
  return target;
}

size_t STEER_SYSTEM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_SYSTEM_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // uint32 soc_temp = 1;
  if (this->soc_temp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_soc_temp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STEER_SYSTEM_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.STEER_SYSTEM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const STEER_SYSTEM_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STEER_SYSTEM_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.STEER_SYSTEM_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.STEER_SYSTEM_STATUS)
    MergeFrom(*source);
  }
}

void STEER_SYSTEM_STATUS::MergeFrom(const STEER_SYSTEM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_SYSTEM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.soc_temp() != 0) {
    _internal_set_soc_temp(from._internal_soc_temp());
  }
}

void STEER_SYSTEM_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.STEER_SYSTEM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STEER_SYSTEM_STATUS::CopyFrom(const STEER_SYSTEM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_SYSTEM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_SYSTEM_STATUS::IsInitialized() const {
  return true;
}

void STEER_SYSTEM_STATUS::InternalSwap(STEER_SYSTEM_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_SYSTEM_STATUS, soc_temp_)
      + sizeof(STEER_SYSTEM_STATUS::soc_temp_)
      - PROTOBUF_FIELD_OFFSET(STEER_SYSTEM_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_SYSTEM_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_VOLTAGE::InitAsDefaultInstance() {
}
class HV_VOLTAGE::_Internal {
 public:
};

HV_VOLTAGE::HV_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_VOLTAGE)
}
HV_VOLTAGE::HV_VOLTAGE(const HV_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pack_voltage_, &from.pack_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_VOLTAGE)
}

void HV_VOLTAGE::SharedCtor() {
  ::memset(&pack_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&pack_voltage_)) + sizeof(_inner_timestamp_));
}

HV_VOLTAGE::~HV_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.HV_VOLTAGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_VOLTAGE::ArenaDtor(void* object) {
  HV_VOLTAGE* _this = reinterpret_cast< HV_VOLTAGE* >(object);
  (void)_this;
}
void HV_VOLTAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_VOLTAGE& HV_VOLTAGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_VOLTAGE_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pack_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&pack_voltage_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_VOLTAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float pack_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pack_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bus_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bus_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_cell_voltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_cell_voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          min_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_VOLTAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pack_voltage = 1;
  if (!(this->pack_voltage() <= 0 && this->pack_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pack_voltage(), target);
  }

  // float bus_voltage = 2;
  if (!(this->bus_voltage() <= 0 && this->bus_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bus_voltage(), target);
  }

  // float max_cell_voltage = 3;
  if (!(this->max_cell_voltage() <= 0 && this->max_cell_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_cell_voltage(), target);
  }

  // float min_cell_voltage = 4;
  if (!(this->min_cell_voltage() <= 0 && this->min_cell_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_cell_voltage(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_VOLTAGE)
  return target;
}

size_t HV_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_VOLTAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pack_voltage = 1;
  if (!(this->pack_voltage() <= 0 && this->pack_voltage() >= 0)) {
    total_size += 1 + 4;
  }

  // float bus_voltage = 2;
  if (!(this->bus_voltage() <= 0 && this->bus_voltage() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_cell_voltage = 3;
  if (!(this->max_cell_voltage() <= 0 && this->max_cell_voltage() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_cell_voltage = 4;
  if (!(this->min_cell_voltage() <= 0 && this->min_cell_voltage() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_VOLTAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_VOLTAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_VOLTAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_VOLTAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_VOLTAGE)
    MergeFrom(*source);
  }
}

void HV_VOLTAGE::MergeFrom(const HV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.pack_voltage() <= 0 && from.pack_voltage() >= 0)) {
    _internal_set_pack_voltage(from._internal_pack_voltage());
  }
  if (!(from.bus_voltage() <= 0 && from.bus_voltage() >= 0)) {
    _internal_set_bus_voltage(from._internal_bus_voltage());
  }
  if (!(from.max_cell_voltage() <= 0 && from.max_cell_voltage() >= 0)) {
    _internal_set_max_cell_voltage(from._internal_max_cell_voltage());
  }
  if (!(from.min_cell_voltage() <= 0 && from.min_cell_voltage() >= 0)) {
    _internal_set_min_cell_voltage(from._internal_min_cell_voltage());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_VOLTAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_VOLTAGE::CopyFrom(const HV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_VOLTAGE::IsInitialized() const {
  return true;
}

void HV_VOLTAGE::InternalSwap(HV_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_VOLTAGE, _inner_timestamp_)
      + sizeof(HV_VOLTAGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_VOLTAGE, pack_voltage_)>(
          reinterpret_cast<char*>(&pack_voltage_),
          reinterpret_cast<char*>(&other->pack_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_VOLTAGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_CURRENT::InitAsDefaultInstance() {
}
class HV_CURRENT::_Internal {
 public:
};

HV_CURRENT::HV_CURRENT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_CURRENT)
}
HV_CURRENT::HV_CURRENT(const HV_CURRENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&current_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CURRENT)
}

void HV_CURRENT::SharedCtor() {
  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&current_)) + sizeof(_inner_timestamp_));
}

HV_CURRENT::~HV_CURRENT() {
  // @@protoc_insertion_point(destructor:primary.HV_CURRENT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_CURRENT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_CURRENT::ArenaDtor(void* object) {
  HV_CURRENT* _this = reinterpret_cast< HV_CURRENT* >(object);
  (void)_this;
}
void HV_CURRENT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CURRENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_CURRENT& HV_CURRENT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_CURRENT_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_CURRENT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CURRENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&current_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CURRENT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float soc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          soc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_CURRENT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CURRENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float current = 1;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_current(), target);
  }

  // float power = 2;
  if (!(this->power() <= 0 && this->power() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_power(), target);
  }

  // float energy = 3;
  if (!(this->energy() <= 0 && this->energy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_energy(), target);
  }

  // float soc = 4;
  if (!(this->soc() <= 0 && this->soc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_soc(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CURRENT)
  return target;
}

size_t HV_CURRENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CURRENT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float current = 1;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    total_size += 1 + 4;
  }

  // float power = 2;
  if (!(this->power() <= 0 && this->power() >= 0)) {
    total_size += 1 + 4;
  }

  // float energy = 3;
  if (!(this->energy() <= 0 && this->energy() >= 0)) {
    total_size += 1 + 4;
  }

  // float soc = 4;
  if (!(this->soc() <= 0 && this->soc() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_CURRENT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_CURRENT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_CURRENT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_CURRENT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_CURRENT)
    MergeFrom(*source);
  }
}

void HV_CURRENT::MergeFrom(const HV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.current() <= 0 && from.current() >= 0)) {
    _internal_set_current(from._internal_current());
  }
  if (!(from.power() <= 0 && from.power() >= 0)) {
    _internal_set_power(from._internal_power());
  }
  if (!(from.energy() <= 0 && from.energy() >= 0)) {
    _internal_set_energy(from._internal_energy());
  }
  if (!(from.soc() <= 0 && from.soc() >= 0)) {
    _internal_set_soc(from._internal_soc());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_CURRENT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_CURRENT::CopyFrom(const HV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CURRENT::IsInitialized() const {
  return true;
}

void HV_CURRENT::InternalSwap(HV_CURRENT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CURRENT, _inner_timestamp_)
      + sizeof(HV_CURRENT::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_CURRENT, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CURRENT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_TEMP::InitAsDefaultInstance() {
}
class HV_TEMP::_Internal {
 public:
};

HV_TEMP::HV_TEMP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_TEMP)
}
HV_TEMP::HV_TEMP(const HV_TEMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_temp_, &from.average_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_temp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_TEMP)
}

void HV_TEMP::SharedCtor() {
  ::memset(&average_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_temp_) -
      reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
}

HV_TEMP::~HV_TEMP() {
  // @@protoc_insertion_point(destructor:primary.HV_TEMP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_TEMP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_TEMP::ArenaDtor(void* object) {
  HV_TEMP* _this = reinterpret_cast< HV_TEMP* >(object);
  (void)_this;
}
void HV_TEMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_TEMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_TEMP& HV_TEMP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_TEMP_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_TEMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_TEMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_temp_) -
      reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_TEMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float average_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          average_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          min_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_TEMP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_TEMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float average_temp = 1;
  if (!(this->average_temp() <= 0 && this->average_temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_average_temp(), target);
  }

  // float max_temp = 2;
  if (!(this->max_temp() <= 0 && this->max_temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_temp(), target);
  }

  // float min_temp = 3;
  if (!(this->min_temp() <= 0 && this->min_temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_temp(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_TEMP)
  return target;
}

size_t HV_TEMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_TEMP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float average_temp = 1;
  if (!(this->average_temp() <= 0 && this->average_temp() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_temp = 2;
  if (!(this->max_temp() <= 0 && this->max_temp() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float min_temp = 3;
  if (!(this->min_temp() <= 0 && this->min_temp() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_TEMP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_TEMP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_TEMP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_TEMP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_TEMP)
    MergeFrom(*source);
  }
}

void HV_TEMP::MergeFrom(const HV_TEMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.average_temp() <= 0 && from.average_temp() >= 0)) {
    _internal_set_average_temp(from._internal_average_temp());
  }
  if (!(from.max_temp() <= 0 && from.max_temp() >= 0)) {
    _internal_set_max_temp(from._internal_max_temp());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.min_temp() <= 0 && from.min_temp() >= 0)) {
    _internal_set_min_temp(from._internal_min_temp());
  }
}

void HV_TEMP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_TEMP::CopyFrom(const HV_TEMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_TEMP::IsInitialized() const {
  return true;
}

void HV_TEMP::InternalSwap(HV_TEMP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_TEMP, min_temp_)
      + sizeof(HV_TEMP::min_temp_)
      - PROTOBUF_FIELD_OFFSET(HV_TEMP, average_temp_)>(
          reinterpret_cast<char*>(&average_temp_),
          reinterpret_cast<char*>(&other->average_temp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_TEMP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_ERRORS::InitAsDefaultInstance() {
}
class HV_ERRORS::_Internal {
 public:
};

HV_ERRORS::HV_ERRORS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_ERRORS)
}
HV_ERRORS::HV_ERRORS(const HV_ERRORS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&warnings_, &from.warnings_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_ERRORS)
}

void HV_ERRORS::SharedCtor() {
  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
}

HV_ERRORS::~HV_ERRORS() {
  // @@protoc_insertion_point(destructor:primary.HV_ERRORS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_ERRORS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_ERRORS::ArenaDtor(void* object) {
  HV_ERRORS* _this = reinterpret_cast< HV_ERRORS* >(object);
  (void)_this;
}
void HV_ERRORS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_ERRORS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_ERRORS& HV_ERRORS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_ERRORS_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_ERRORS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_ERRORS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_ERRORS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 warnings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          warnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_ERRORS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_ERRORS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->warnings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warnings(), target);
  }

  // uint32 errors = 2;
  if (this->errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errors(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_ERRORS)
  return target;
}

size_t HV_ERRORS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_ERRORS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->warnings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warnings());
  }

  // uint32 errors = 2;
  if (this->errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errors());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_ERRORS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_ERRORS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_ERRORS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_ERRORS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_ERRORS)
    MergeFrom(*source);
  }
}

void HV_ERRORS::MergeFrom(const HV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.warnings() != 0) {
    _internal_set_warnings(from._internal_warnings());
  }
  if (from.errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_ERRORS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_ERRORS::CopyFrom(const HV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_ERRORS::IsInitialized() const {
  return true;
}

void HV_ERRORS::InternalSwap(HV_ERRORS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_ERRORS, _inner_timestamp_)
      + sizeof(HV_ERRORS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_ERRORS, warnings_)>(
          reinterpret_cast<char*>(&warnings_),
          reinterpret_cast<char*>(&other->warnings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_ERRORS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_CAN_FORWARD::InitAsDefaultInstance() {
}
class HV_CAN_FORWARD::_Internal {
 public:
};

HV_CAN_FORWARD::HV_CAN_FORWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_CAN_FORWARD)
}
HV_CAN_FORWARD::HV_CAN_FORWARD(const HV_CAN_FORWARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_forward_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(can_forward_set_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CAN_FORWARD)
}

void HV_CAN_FORWARD::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_forward_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(can_forward_set_));
}

HV_CAN_FORWARD::~HV_CAN_FORWARD() {
  // @@protoc_insertion_point(destructor:primary.HV_CAN_FORWARD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_CAN_FORWARD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_CAN_FORWARD::ArenaDtor(void* object) {
  HV_CAN_FORWARD* _this = reinterpret_cast< HV_CAN_FORWARD* >(object);
  (void)_this;
}
void HV_CAN_FORWARD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CAN_FORWARD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_CAN_FORWARD& HV_CAN_FORWARD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_CAN_FORWARD_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_CAN_FORWARD::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CAN_FORWARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_forward_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(can_forward_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CAN_FORWARD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle can_forward_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_can_forward_set(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_CAN_FORWARD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CAN_FORWARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle can_forward_set = 1;
  if (this->can_forward_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_can_forward_set(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CAN_FORWARD)
  return target;
}

size_t HV_CAN_FORWARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CAN_FORWARD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle can_forward_set = 1;
  if (this->can_forward_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_forward_set());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_CAN_FORWARD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_CAN_FORWARD)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_CAN_FORWARD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_CAN_FORWARD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_CAN_FORWARD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_CAN_FORWARD)
    MergeFrom(*source);
  }
}

void HV_CAN_FORWARD::MergeFrom(const HV_CAN_FORWARD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CAN_FORWARD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.can_forward_set() != 0) {
    _internal_set_can_forward_set(from._internal_can_forward_set());
  }
}

void HV_CAN_FORWARD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_CAN_FORWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_CAN_FORWARD::CopyFrom(const HV_CAN_FORWARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CAN_FORWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CAN_FORWARD::IsInitialized() const {
  return true;
}

void HV_CAN_FORWARD::InternalSwap(HV_CAN_FORWARD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CAN_FORWARD, can_forward_set_)
      + sizeof(HV_CAN_FORWARD::can_forward_set_)
      - PROTOBUF_FIELD_OFFSET(HV_CAN_FORWARD, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CAN_FORWARD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_FANS_OVERRIDE::InitAsDefaultInstance() {
}
class HV_FANS_OVERRIDE::_Internal {
 public:
};

HV_FANS_OVERRIDE::HV_FANS_OVERRIDE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_FANS_OVERRIDE)
}
HV_FANS_OVERRIDE::HV_FANS_OVERRIDE(const HV_FANS_OVERRIDE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fans_override_, &from.fans_override_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&fans_override_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_FANS_OVERRIDE)
}

void HV_FANS_OVERRIDE::SharedCtor() {
  ::memset(&fans_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&fans_override_)) + sizeof(_inner_timestamp_));
}

HV_FANS_OVERRIDE::~HV_FANS_OVERRIDE() {
  // @@protoc_insertion_point(destructor:primary.HV_FANS_OVERRIDE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_FANS_OVERRIDE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_FANS_OVERRIDE::ArenaDtor(void* object) {
  HV_FANS_OVERRIDE* _this = reinterpret_cast< HV_FANS_OVERRIDE* >(object);
  (void)_this;
}
void HV_FANS_OVERRIDE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_FANS_OVERRIDE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_FANS_OVERRIDE& HV_FANS_OVERRIDE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_FANS_OVERRIDE_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_FANS_OVERRIDE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_FANS_OVERRIDE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fans_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&fans_override_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_FANS_OVERRIDE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle fans_override = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fans_override(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // float fans_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fans_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_FANS_OVERRIDE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_FANS_OVERRIDE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle fans_override = 1;
  if (this->fans_override() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_fans_override(), target);
  }

  // float fans_speed = 2;
  if (!(this->fans_speed() <= 0 && this->fans_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fans_speed(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_FANS_OVERRIDE)
  return target;
}

size_t HV_FANS_OVERRIDE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_FANS_OVERRIDE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Toggle fans_override = 1;
  if (this->fans_override() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fans_override());
  }

  // float fans_speed = 2;
  if (!(this->fans_speed() <= 0 && this->fans_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_FANS_OVERRIDE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_FANS_OVERRIDE)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_FANS_OVERRIDE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_FANS_OVERRIDE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_FANS_OVERRIDE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_FANS_OVERRIDE)
    MergeFrom(*source);
  }
}

void HV_FANS_OVERRIDE::MergeFrom(const HV_FANS_OVERRIDE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_FANS_OVERRIDE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fans_override() != 0) {
    _internal_set_fans_override(from._internal_fans_override());
  }
  if (!(from.fans_speed() <= 0 && from.fans_speed() >= 0)) {
    _internal_set_fans_speed(from._internal_fans_speed());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_FANS_OVERRIDE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_FANS_OVERRIDE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_FANS_OVERRIDE::CopyFrom(const HV_FANS_OVERRIDE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_FANS_OVERRIDE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_FANS_OVERRIDE::IsInitialized() const {
  return true;
}

void HV_FANS_OVERRIDE::InternalSwap(HV_FANS_OVERRIDE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_FANS_OVERRIDE, _inner_timestamp_)
      + sizeof(HV_FANS_OVERRIDE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_FANS_OVERRIDE, fans_override_)>(
          reinterpret_cast<char*>(&fans_override_),
          reinterpret_cast<char*>(&other->fans_override_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_FANS_OVERRIDE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_CAN_FORWARD_STATUS::InitAsDefaultInstance() {
}
class HV_CAN_FORWARD_STATUS::_Internal {
 public:
};

HV_CAN_FORWARD_STATUS::HV_CAN_FORWARD_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_CAN_FORWARD_STATUS)
}
HV_CAN_FORWARD_STATUS::HV_CAN_FORWARD_STATUS(const HV_CAN_FORWARD_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_forward_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(can_forward_status_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CAN_FORWARD_STATUS)
}

void HV_CAN_FORWARD_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_forward_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(can_forward_status_));
}

HV_CAN_FORWARD_STATUS::~HV_CAN_FORWARD_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HV_CAN_FORWARD_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_CAN_FORWARD_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_CAN_FORWARD_STATUS::ArenaDtor(void* object) {
  HV_CAN_FORWARD_STATUS* _this = reinterpret_cast< HV_CAN_FORWARD_STATUS* >(object);
  (void)_this;
}
void HV_CAN_FORWARD_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CAN_FORWARD_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_CAN_FORWARD_STATUS& HV_CAN_FORWARD_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_CAN_FORWARD_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_CAN_FORWARD_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CAN_FORWARD_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_forward_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(can_forward_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CAN_FORWARD_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle can_forward_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_can_forward_status(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_CAN_FORWARD_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CAN_FORWARD_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle can_forward_status = 1;
  if (this->can_forward_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_can_forward_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CAN_FORWARD_STATUS)
  return target;
}

size_t HV_CAN_FORWARD_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CAN_FORWARD_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle can_forward_status = 1;
  if (this->can_forward_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_forward_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_CAN_FORWARD_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_CAN_FORWARD_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_CAN_FORWARD_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_CAN_FORWARD_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_CAN_FORWARD_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_CAN_FORWARD_STATUS)
    MergeFrom(*source);
  }
}

void HV_CAN_FORWARD_STATUS::MergeFrom(const HV_CAN_FORWARD_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CAN_FORWARD_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.can_forward_status() != 0) {
    _internal_set_can_forward_status(from._internal_can_forward_status());
  }
}

void HV_CAN_FORWARD_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_CAN_FORWARD_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_CAN_FORWARD_STATUS::CopyFrom(const HV_CAN_FORWARD_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CAN_FORWARD_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CAN_FORWARD_STATUS::IsInitialized() const {
  return true;
}

void HV_CAN_FORWARD_STATUS::InternalSwap(HV_CAN_FORWARD_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CAN_FORWARD_STATUS, can_forward_status_)
      + sizeof(HV_CAN_FORWARD_STATUS::can_forward_status_)
      - PROTOBUF_FIELD_OFFSET(HV_CAN_FORWARD_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CAN_FORWARD_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_FANS_OVERRIDE_STATUS::InitAsDefaultInstance() {
}
class HV_FANS_OVERRIDE_STATUS::_Internal {
 public:
};

HV_FANS_OVERRIDE_STATUS::HV_FANS_OVERRIDE_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_FANS_OVERRIDE_STATUS)
}
HV_FANS_OVERRIDE_STATUS::HV_FANS_OVERRIDE_STATUS(const HV_FANS_OVERRIDE_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fans_override_, &from.fans_override_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&fans_override_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_FANS_OVERRIDE_STATUS)
}

void HV_FANS_OVERRIDE_STATUS::SharedCtor() {
  ::memset(&fans_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&fans_override_)) + sizeof(_inner_timestamp_));
}

HV_FANS_OVERRIDE_STATUS::~HV_FANS_OVERRIDE_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HV_FANS_OVERRIDE_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_FANS_OVERRIDE_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_FANS_OVERRIDE_STATUS::ArenaDtor(void* object) {
  HV_FANS_OVERRIDE_STATUS* _this = reinterpret_cast< HV_FANS_OVERRIDE_STATUS* >(object);
  (void)_this;
}
void HV_FANS_OVERRIDE_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_FANS_OVERRIDE_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_FANS_OVERRIDE_STATUS& HV_FANS_OVERRIDE_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_FANS_OVERRIDE_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_FANS_OVERRIDE_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_FANS_OVERRIDE_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fans_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&fans_override_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_FANS_OVERRIDE_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle fans_override = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fans_override(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // float fans_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fans_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_FANS_OVERRIDE_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_FANS_OVERRIDE_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle fans_override = 1;
  if (this->fans_override() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_fans_override(), target);
  }

  // float fans_speed = 2;
  if (!(this->fans_speed() <= 0 && this->fans_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fans_speed(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_FANS_OVERRIDE_STATUS)
  return target;
}

size_t HV_FANS_OVERRIDE_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_FANS_OVERRIDE_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Toggle fans_override = 1;
  if (this->fans_override() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fans_override());
  }

  // float fans_speed = 2;
  if (!(this->fans_speed() <= 0 && this->fans_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_FANS_OVERRIDE_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_FANS_OVERRIDE_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_FANS_OVERRIDE_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_FANS_OVERRIDE_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_FANS_OVERRIDE_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_FANS_OVERRIDE_STATUS)
    MergeFrom(*source);
  }
}

void HV_FANS_OVERRIDE_STATUS::MergeFrom(const HV_FANS_OVERRIDE_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_FANS_OVERRIDE_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fans_override() != 0) {
    _internal_set_fans_override(from._internal_fans_override());
  }
  if (!(from.fans_speed() <= 0 && from.fans_speed() >= 0)) {
    _internal_set_fans_speed(from._internal_fans_speed());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_FANS_OVERRIDE_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_FANS_OVERRIDE_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_FANS_OVERRIDE_STATUS::CopyFrom(const HV_FANS_OVERRIDE_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_FANS_OVERRIDE_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_FANS_OVERRIDE_STATUS::IsInitialized() const {
  return true;
}

void HV_FANS_OVERRIDE_STATUS::InternalSwap(HV_FANS_OVERRIDE_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_FANS_OVERRIDE_STATUS, _inner_timestamp_)
      + sizeof(HV_FANS_OVERRIDE_STATUS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_FANS_OVERRIDE_STATUS, fans_override_)>(
          reinterpret_cast<char*>(&fans_override_),
          reinterpret_cast<char*>(&other->fans_override_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_FANS_OVERRIDE_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_FEEDBACKS_STATUS::InitAsDefaultInstance() {
}
class HV_FEEDBACKS_STATUS::_Internal {
 public:
};

HV_FEEDBACKS_STATUS::HV_FEEDBACKS_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_FEEDBACKS_STATUS)
}
HV_FEEDBACKS_STATUS::HV_FEEDBACKS_STATUS(const HV_FEEDBACKS_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&feedbacks_status_, &from.feedbacks_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&feedbacks_status_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_FEEDBACKS_STATUS)
}

void HV_FEEDBACKS_STATUS::SharedCtor() {
  ::memset(&feedbacks_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&feedbacks_status_)) + sizeof(_inner_timestamp_));
}

HV_FEEDBACKS_STATUS::~HV_FEEDBACKS_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HV_FEEDBACKS_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_FEEDBACKS_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_FEEDBACKS_STATUS::ArenaDtor(void* object) {
  HV_FEEDBACKS_STATUS* _this = reinterpret_cast< HV_FEEDBACKS_STATUS* >(object);
  (void)_this;
}
void HV_FEEDBACKS_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_FEEDBACKS_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_FEEDBACKS_STATUS& HV_FEEDBACKS_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_FEEDBACKS_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_FEEDBACKS_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_FEEDBACKS_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&feedbacks_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&feedbacks_status_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_FEEDBACKS_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 feedbacks_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          feedbacks_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_circuitry_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_circuitry_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_FEEDBACKS_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_FEEDBACKS_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 feedbacks_status = 1;
  if (this->feedbacks_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_feedbacks_status(), target);
  }

  // uint32 is_circuitry_error = 2;
  if (this->is_circuitry_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_is_circuitry_error(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_FEEDBACKS_STATUS)
  return target;
}

size_t HV_FEEDBACKS_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_FEEDBACKS_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 feedbacks_status = 1;
  if (this->feedbacks_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_feedbacks_status());
  }

  // uint32 is_circuitry_error = 2;
  if (this->is_circuitry_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_circuitry_error());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_FEEDBACKS_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_FEEDBACKS_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_FEEDBACKS_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_FEEDBACKS_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_FEEDBACKS_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_FEEDBACKS_STATUS)
    MergeFrom(*source);
  }
}

void HV_FEEDBACKS_STATUS::MergeFrom(const HV_FEEDBACKS_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_FEEDBACKS_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feedbacks_status() != 0) {
    _internal_set_feedbacks_status(from._internal_feedbacks_status());
  }
  if (from.is_circuitry_error() != 0) {
    _internal_set_is_circuitry_error(from._internal_is_circuitry_error());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_FEEDBACKS_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_FEEDBACKS_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_FEEDBACKS_STATUS::CopyFrom(const HV_FEEDBACKS_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_FEEDBACKS_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_FEEDBACKS_STATUS::IsInitialized() const {
  return true;
}

void HV_FEEDBACKS_STATUS::InternalSwap(HV_FEEDBACKS_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_FEEDBACKS_STATUS, _inner_timestamp_)
      + sizeof(HV_FEEDBACKS_STATUS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_FEEDBACKS_STATUS, feedbacks_status_)>(
          reinterpret_cast<char*>(&feedbacks_status_),
          reinterpret_cast<char*>(&other->feedbacks_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_FEEDBACKS_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_IMD_STATUS::InitAsDefaultInstance() {
}
class HV_IMD_STATUS::_Internal {
 public:
};

HV_IMD_STATUS::HV_IMD_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_IMD_STATUS)
}
HV_IMD_STATUS::HV_IMD_STATUS(const HV_IMD_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&imd_fault_, &from.imd_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&imd_info_) -
    reinterpret_cast<char*>(&imd_fault_)) + sizeof(imd_info_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_IMD_STATUS)
}

void HV_IMD_STATUS::SharedCtor() {
  ::memset(&imd_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imd_info_) -
      reinterpret_cast<char*>(&imd_fault_)) + sizeof(imd_info_));
}

HV_IMD_STATUS::~HV_IMD_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HV_IMD_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_IMD_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_IMD_STATUS::ArenaDtor(void* object) {
  HV_IMD_STATUS* _this = reinterpret_cast< HV_IMD_STATUS* >(object);
  (void)_this;
}
void HV_IMD_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_IMD_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_IMD_STATUS& HV_IMD_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_IMD_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_IMD_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_IMD_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&imd_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imd_info_) -
      reinterpret_cast<char*>(&imd_fault_)) + sizeof(imd_info_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_IMD_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool imd_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          imd_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .primary.ImdStatus imd_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imd_status(static_cast<::primary::ImdStatus>(val));
        } else goto handle_unusual;
        continue;
      // sint32 imd_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          imd_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_IMD_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_IMD_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool imd_fault = 1;
  if (this->imd_fault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_imd_fault(), target);
  }

  // .primary.ImdStatus imd_status = 2;
  if (this->imd_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_imd_status(), target);
  }

  // sint32 imd_info = 3;
  if (this->imd_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_imd_info(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_IMD_STATUS)
  return target;
}

size_t HV_IMD_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_IMD_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool imd_fault = 1;
  if (this->imd_fault() != 0) {
    total_size += 1 + 1;
  }

  // .primary.ImdStatus imd_status = 2;
  if (this->imd_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imd_status());
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // sint32 imd_info = 3;
  if (this->imd_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_imd_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_IMD_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_IMD_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_IMD_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_IMD_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_IMD_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_IMD_STATUS)
    MergeFrom(*source);
  }
}

void HV_IMD_STATUS::MergeFrom(const HV_IMD_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_IMD_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imd_fault() != 0) {
    _internal_set_imd_fault(from._internal_imd_fault());
  }
  if (from.imd_status() != 0) {
    _internal_set_imd_status(from._internal_imd_status());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.imd_info() != 0) {
    _internal_set_imd_info(from._internal_imd_info());
  }
}

void HV_IMD_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_IMD_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_IMD_STATUS::CopyFrom(const HV_IMD_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_IMD_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_IMD_STATUS::IsInitialized() const {
  return true;
}

void HV_IMD_STATUS::InternalSwap(HV_IMD_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_IMD_STATUS, imd_info_)
      + sizeof(HV_IMD_STATUS::imd_info_)
      - PROTOBUF_FIELD_OFFSET(HV_IMD_STATUS, imd_fault_)>(
          reinterpret_cast<char*>(&imd_fault_),
          reinterpret_cast<char*>(&other->imd_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_IMD_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TS_STATUS_DAS::InitAsDefaultInstance() {
}
class TS_STATUS_DAS::_Internal {
 public:
};

TS_STATUS_DAS::TS_STATUS_DAS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.TS_STATUS_DAS)
}
TS_STATUS_DAS::TS_STATUS_DAS(const TS_STATUS_DAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  // @@protoc_insertion_point(copy_constructor:primary.TS_STATUS_DAS)
}

void TS_STATUS_DAS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
}

TS_STATUS_DAS::~TS_STATUS_DAS() {
  // @@protoc_insertion_point(destructor:primary.TS_STATUS_DAS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TS_STATUS_DAS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TS_STATUS_DAS::ArenaDtor(void* object) {
  TS_STATUS_DAS* _this = reinterpret_cast< TS_STATUS_DAS* >(object);
  (void)_this;
}
void TS_STATUS_DAS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TS_STATUS_DAS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TS_STATUS_DAS& TS_STATUS_DAS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TS_STATUS_DAS_primary_2eproto.base);
  return *internal_default_instance();
}


void TS_STATUS_DAS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TS_STATUS_DAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TS_STATUS_DAS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.TsStatus ts_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status(static_cast<::primary::TsStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TS_STATUS_DAS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TS_STATUS_DAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TsStatus ts_status = 1;
  if (this->ts_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TS_STATUS_DAS)
  return target;
}

size_t TS_STATUS_DAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TS_STATUS_DAS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.TsStatus ts_status = 1;
  if (this->ts_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TS_STATUS_DAS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.TS_STATUS_DAS)
  GOOGLE_DCHECK_NE(&from, this);
  const TS_STATUS_DAS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TS_STATUS_DAS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.TS_STATUS_DAS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.TS_STATUS_DAS)
    MergeFrom(*source);
  }
}

void TS_STATUS_DAS::MergeFrom(const TS_STATUS_DAS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TS_STATUS_DAS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.ts_status() != 0) {
    _internal_set_ts_status(from._internal_ts_status());
  }
}

void TS_STATUS_DAS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.TS_STATUS_DAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TS_STATUS_DAS::CopyFrom(const TS_STATUS_DAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TS_STATUS_DAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TS_STATUS_DAS::IsInitialized() const {
  return true;
}

void TS_STATUS_DAS::InternalSwap(TS_STATUS_DAS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TS_STATUS_DAS, ts_status_)
      + sizeof(TS_STATUS_DAS::ts_status_)
      - PROTOBUF_FIELD_OFFSET(TS_STATUS_DAS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TS_STATUS_DAS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TS_STATUS_STEER::InitAsDefaultInstance() {
}
class TS_STATUS_STEER::_Internal {
 public:
};

TS_STATUS_STEER::TS_STATUS_STEER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.TS_STATUS_STEER)
}
TS_STATUS_STEER::TS_STATUS_STEER(const TS_STATUS_STEER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  // @@protoc_insertion_point(copy_constructor:primary.TS_STATUS_STEER)
}

void TS_STATUS_STEER::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
}

TS_STATUS_STEER::~TS_STATUS_STEER() {
  // @@protoc_insertion_point(destructor:primary.TS_STATUS_STEER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TS_STATUS_STEER::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TS_STATUS_STEER::ArenaDtor(void* object) {
  TS_STATUS_STEER* _this = reinterpret_cast< TS_STATUS_STEER* >(object);
  (void)_this;
}
void TS_STATUS_STEER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TS_STATUS_STEER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TS_STATUS_STEER& TS_STATUS_STEER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TS_STATUS_STEER_primary_2eproto.base);
  return *internal_default_instance();
}


void TS_STATUS_STEER::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TS_STATUS_STEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TS_STATUS_STEER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.TsStatus ts_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status(static_cast<::primary::TsStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TS_STATUS_STEER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TS_STATUS_STEER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TsStatus ts_status = 1;
  if (this->ts_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TS_STATUS_STEER)
  return target;
}

size_t TS_STATUS_STEER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TS_STATUS_STEER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.TsStatus ts_status = 1;
  if (this->ts_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TS_STATUS_STEER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.TS_STATUS_STEER)
  GOOGLE_DCHECK_NE(&from, this);
  const TS_STATUS_STEER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TS_STATUS_STEER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.TS_STATUS_STEER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.TS_STATUS_STEER)
    MergeFrom(*source);
  }
}

void TS_STATUS_STEER::MergeFrom(const TS_STATUS_STEER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TS_STATUS_STEER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.ts_status() != 0) {
    _internal_set_ts_status(from._internal_ts_status());
  }
}

void TS_STATUS_STEER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.TS_STATUS_STEER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TS_STATUS_STEER::CopyFrom(const TS_STATUS_STEER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TS_STATUS_STEER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TS_STATUS_STEER::IsInitialized() const {
  return true;
}

void TS_STATUS_STEER::InternalSwap(TS_STATUS_STEER* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TS_STATUS_STEER, ts_status_)
      + sizeof(TS_STATUS_STEER::ts_status_)
      - PROTOBUF_FIELD_OFFSET(TS_STATUS_STEER, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TS_STATUS_STEER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TS_STATUS_HANDCART::InitAsDefaultInstance() {
}
class TS_STATUS_HANDCART::_Internal {
 public:
};

TS_STATUS_HANDCART::TS_STATUS_HANDCART(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.TS_STATUS_HANDCART)
}
TS_STATUS_HANDCART::TS_STATUS_HANDCART(const TS_STATUS_HANDCART& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  // @@protoc_insertion_point(copy_constructor:primary.TS_STATUS_HANDCART)
}

void TS_STATUS_HANDCART::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
}

TS_STATUS_HANDCART::~TS_STATUS_HANDCART() {
  // @@protoc_insertion_point(destructor:primary.TS_STATUS_HANDCART)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TS_STATUS_HANDCART::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TS_STATUS_HANDCART::ArenaDtor(void* object) {
  TS_STATUS_HANDCART* _this = reinterpret_cast< TS_STATUS_HANDCART* >(object);
  (void)_this;
}
void TS_STATUS_HANDCART::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TS_STATUS_HANDCART::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TS_STATUS_HANDCART& TS_STATUS_HANDCART::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TS_STATUS_HANDCART_primary_2eproto.base);
  return *internal_default_instance();
}


void TS_STATUS_HANDCART::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TS_STATUS_HANDCART)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TS_STATUS_HANDCART::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.TsStatus ts_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status(static_cast<::primary::TsStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TS_STATUS_HANDCART::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TS_STATUS_HANDCART)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TsStatus ts_status = 1;
  if (this->ts_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TS_STATUS_HANDCART)
  return target;
}

size_t TS_STATUS_HANDCART::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TS_STATUS_HANDCART)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.TsStatus ts_status = 1;
  if (this->ts_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TS_STATUS_HANDCART::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.TS_STATUS_HANDCART)
  GOOGLE_DCHECK_NE(&from, this);
  const TS_STATUS_HANDCART* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TS_STATUS_HANDCART>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.TS_STATUS_HANDCART)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.TS_STATUS_HANDCART)
    MergeFrom(*source);
  }
}

void TS_STATUS_HANDCART::MergeFrom(const TS_STATUS_HANDCART& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TS_STATUS_HANDCART)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.ts_status() != 0) {
    _internal_set_ts_status(from._internal_ts_status());
  }
}

void TS_STATUS_HANDCART::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.TS_STATUS_HANDCART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TS_STATUS_HANDCART::CopyFrom(const TS_STATUS_HANDCART& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TS_STATUS_HANDCART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TS_STATUS_HANDCART::IsInitialized() const {
  return true;
}

void TS_STATUS_HANDCART::InternalSwap(TS_STATUS_HANDCART* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TS_STATUS_HANDCART, ts_status_)
      + sizeof(TS_STATUS_HANDCART::ts_status_)
      - PROTOBUF_FIELD_OFFSET(TS_STATUS_HANDCART, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TS_STATUS_HANDCART::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_TS_STATUS_DAS::InitAsDefaultInstance() {
}
class SET_TS_STATUS_DAS::_Internal {
 public:
};

SET_TS_STATUS_DAS::SET_TS_STATUS_DAS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_TS_STATUS_DAS)
}
SET_TS_STATUS_DAS::SET_TS_STATUS_DAS(const SET_TS_STATUS_DAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_TS_STATUS_DAS)
}

void SET_TS_STATUS_DAS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
}

SET_TS_STATUS_DAS::~SET_TS_STATUS_DAS() {
  // @@protoc_insertion_point(destructor:primary.SET_TS_STATUS_DAS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_TS_STATUS_DAS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_TS_STATUS_DAS::ArenaDtor(void* object) {
  SET_TS_STATUS_DAS* _this = reinterpret_cast< SET_TS_STATUS_DAS* >(object);
  (void)_this;
}
void SET_TS_STATUS_DAS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_TS_STATUS_DAS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_TS_STATUS_DAS& SET_TS_STATUS_DAS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_TS_STATUS_DAS_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_TS_STATUS_DAS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TS_STATUS_DAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TS_STATUS_DAS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle ts_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status_set(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_TS_STATUS_DAS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TS_STATUS_DAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle ts_status_set = 1;
  if (this->ts_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status_set(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TS_STATUS_DAS)
  return target;
}

size_t SET_TS_STATUS_DAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TS_STATUS_DAS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle ts_status_set = 1;
  if (this->ts_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status_set());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_TS_STATUS_DAS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_TS_STATUS_DAS)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_TS_STATUS_DAS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_TS_STATUS_DAS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_TS_STATUS_DAS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_TS_STATUS_DAS)
    MergeFrom(*source);
  }
}

void SET_TS_STATUS_DAS::MergeFrom(const SET_TS_STATUS_DAS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TS_STATUS_DAS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.ts_status_set() != 0) {
    _internal_set_ts_status_set(from._internal_ts_status_set());
  }
}

void SET_TS_STATUS_DAS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_TS_STATUS_DAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_TS_STATUS_DAS::CopyFrom(const SET_TS_STATUS_DAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TS_STATUS_DAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TS_STATUS_DAS::IsInitialized() const {
  return true;
}

void SET_TS_STATUS_DAS::InternalSwap(SET_TS_STATUS_DAS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_DAS, ts_status_set_)
      + sizeof(SET_TS_STATUS_DAS::ts_status_set_)
      - PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_DAS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TS_STATUS_DAS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_TS_STATUS_HANDCART::InitAsDefaultInstance() {
}
class SET_TS_STATUS_HANDCART::_Internal {
 public:
};

SET_TS_STATUS_HANDCART::SET_TS_STATUS_HANDCART(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_TS_STATUS_HANDCART)
}
SET_TS_STATUS_HANDCART::SET_TS_STATUS_HANDCART(const SET_TS_STATUS_HANDCART& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_TS_STATUS_HANDCART)
}

void SET_TS_STATUS_HANDCART::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
}

SET_TS_STATUS_HANDCART::~SET_TS_STATUS_HANDCART() {
  // @@protoc_insertion_point(destructor:primary.SET_TS_STATUS_HANDCART)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_TS_STATUS_HANDCART::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_TS_STATUS_HANDCART::ArenaDtor(void* object) {
  SET_TS_STATUS_HANDCART* _this = reinterpret_cast< SET_TS_STATUS_HANDCART* >(object);
  (void)_this;
}
void SET_TS_STATUS_HANDCART::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_TS_STATUS_HANDCART::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_TS_STATUS_HANDCART& SET_TS_STATUS_HANDCART::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_TS_STATUS_HANDCART_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_TS_STATUS_HANDCART::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TS_STATUS_HANDCART)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(ts_status_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TS_STATUS_HANDCART::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle ts_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status_set(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_TS_STATUS_HANDCART::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TS_STATUS_HANDCART)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle ts_status_set = 1;
  if (this->ts_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status_set(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TS_STATUS_HANDCART)
  return target;
}

size_t SET_TS_STATUS_HANDCART::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TS_STATUS_HANDCART)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle ts_status_set = 1;
  if (this->ts_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status_set());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_TS_STATUS_HANDCART::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_TS_STATUS_HANDCART)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_TS_STATUS_HANDCART* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_TS_STATUS_HANDCART>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_TS_STATUS_HANDCART)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_TS_STATUS_HANDCART)
    MergeFrom(*source);
  }
}

void SET_TS_STATUS_HANDCART::MergeFrom(const SET_TS_STATUS_HANDCART& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TS_STATUS_HANDCART)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.ts_status_set() != 0) {
    _internal_set_ts_status_set(from._internal_ts_status_set());
  }
}

void SET_TS_STATUS_HANDCART::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_TS_STATUS_HANDCART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_TS_STATUS_HANDCART::CopyFrom(const SET_TS_STATUS_HANDCART& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TS_STATUS_HANDCART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TS_STATUS_HANDCART::IsInitialized() const {
  return true;
}

void SET_TS_STATUS_HANDCART::InternalSwap(SET_TS_STATUS_HANDCART* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_HANDCART, ts_status_set_)
      + sizeof(SET_TS_STATUS_HANDCART::ts_status_set_)
      - PROTOBUF_FIELD_OFFSET(SET_TS_STATUS_HANDCART, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TS_STATUS_HANDCART::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STEER_STATUS::InitAsDefaultInstance() {
}
class STEER_STATUS::_Internal {
 public:
};

STEER_STATUS::STEER_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.STEER_STATUS)
}
STEER_STATUS::STEER_STATUS(const STEER_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&map_pw_, &from.map_pw_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_tv_) -
    reinterpret_cast<char*>(&map_pw_)) + sizeof(map_tv_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_STATUS)
}

void STEER_STATUS::SharedCtor() {
  ::memset(&map_pw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_tv_) -
      reinterpret_cast<char*>(&map_pw_)) + sizeof(map_tv_));
}

STEER_STATUS::~STEER_STATUS() {
  // @@protoc_insertion_point(destructor:primary.STEER_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void STEER_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void STEER_STATUS::ArenaDtor(void* object) {
  STEER_STATUS* _this = reinterpret_cast< STEER_STATUS* >(object);
  (void)_this;
}
void STEER_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STEER_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STEER_STATUS& STEER_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STEER_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void STEER_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&map_pw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_tv_) -
      reinterpret_cast<char*>(&map_pw_)) + sizeof(map_tv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float map_pw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          map_pw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float map_sc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          map_sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float map_tv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          map_tv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STEER_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float map_pw = 1;
  if (!(this->map_pw() <= 0 && this->map_pw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_map_pw(), target);
  }

  // float map_sc = 2;
  if (!(this->map_sc() <= 0 && this->map_sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_map_sc(), target);
  }

  // float map_tv = 3;
  if (!(this->map_tv() <= 0 && this->map_tv() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_map_tv(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_STATUS)
  return target;
}

size_t STEER_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float map_pw = 1;
  if (!(this->map_pw() <= 0 && this->map_pw() >= 0)) {
    total_size += 1 + 4;
  }

  // float map_sc = 2;
  if (!(this->map_sc() <= 0 && this->map_sc() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float map_tv = 3;
  if (!(this->map_tv() <= 0 && this->map_tv() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STEER_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.STEER_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const STEER_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STEER_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.STEER_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.STEER_STATUS)
    MergeFrom(*source);
  }
}

void STEER_STATUS::MergeFrom(const STEER_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.map_pw() <= 0 && from.map_pw() >= 0)) {
    _internal_set_map_pw(from._internal_map_pw());
  }
  if (!(from.map_sc() <= 0 && from.map_sc() >= 0)) {
    _internal_set_map_sc(from._internal_map_sc());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.map_tv() <= 0 && from.map_tv() >= 0)) {
    _internal_set_map_tv(from._internal_map_tv());
  }
}

void STEER_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.STEER_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STEER_STATUS::CopyFrom(const STEER_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_STATUS::IsInitialized() const {
  return true;
}

void STEER_STATUS::InternalSwap(STEER_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_STATUS, map_tv_)
      + sizeof(STEER_STATUS::map_tv_)
      - PROTOBUF_FIELD_OFFSET(STEER_STATUS, map_pw_)>(
          reinterpret_cast<char*>(&map_pw_),
          reinterpret_cast<char*>(&other->map_pw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_CAR_STATUS::InitAsDefaultInstance() {
}
class SET_CAR_STATUS::_Internal {
 public:
};

SET_CAR_STATUS::SET_CAR_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_CAR_STATUS)
}
SET_CAR_STATUS::SET_CAR_STATUS(const SET_CAR_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_status_set_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_status_set_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_CAR_STATUS)
}

void SET_CAR_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_status_set_));
}

SET_CAR_STATUS::~SET_CAR_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_CAR_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_CAR_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_CAR_STATUS::ArenaDtor(void* object) {
  SET_CAR_STATUS* _this = reinterpret_cast< SET_CAR_STATUS* >(object);
  (void)_this;
}
void SET_CAR_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_CAR_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_CAR_STATUS& SET_CAR_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_CAR_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_CAR_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_CAR_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_set_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(car_status_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_CAR_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.SetCarStatus car_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status_set(static_cast<::primary::SetCarStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_CAR_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_CAR_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.SetCarStatus car_status_set = 1;
  if (this->car_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_status_set(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_CAR_STATUS)
  return target;
}

size_t SET_CAR_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_CAR_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.SetCarStatus car_status_set = 1;
  if (this->car_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_status_set());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_CAR_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_CAR_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_CAR_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_CAR_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_CAR_STATUS)
    MergeFrom(*source);
  }
}

void SET_CAR_STATUS::MergeFrom(const SET_CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.car_status_set() != 0) {
    _internal_set_car_status_set(from._internal_car_status_set());
  }
}

void SET_CAR_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_CAR_STATUS::CopyFrom(const SET_CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_CAR_STATUS::IsInitialized() const {
  return true;
}

void SET_CAR_STATUS::InternalSwap(SET_CAR_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_CAR_STATUS, car_status_set_)
      + sizeof(SET_CAR_STATUS::car_status_set_)
      - PROTOBUF_FIELD_OFFSET(SET_CAR_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_CAR_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_PEDALS_RANGE::InitAsDefaultInstance() {
}
class SET_PEDALS_RANGE::_Internal {
 public:
};

SET_PEDALS_RANGE::SET_PEDALS_RANGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_PEDALS_RANGE)
}
SET_PEDALS_RANGE::SET_PEDALS_RANGE(const SET_PEDALS_RANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bound_, &from.bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_PEDALS_RANGE)
}

void SET_PEDALS_RANGE::SharedCtor() {
  ::memset(&bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&bound_)) + sizeof(_inner_timestamp_));
}

SET_PEDALS_RANGE::~SET_PEDALS_RANGE() {
  // @@protoc_insertion_point(destructor:primary.SET_PEDALS_RANGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_PEDALS_RANGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_PEDALS_RANGE::ArenaDtor(void* object) {
  SET_PEDALS_RANGE* _this = reinterpret_cast< SET_PEDALS_RANGE* >(object);
  (void)_this;
}
void SET_PEDALS_RANGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_PEDALS_RANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_PEDALS_RANGE& SET_PEDALS_RANGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_PEDALS_RANGE_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_PEDALS_RANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_PEDALS_RANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&bound_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_PEDALS_RANGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Bound bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bound(static_cast<::primary::Bound>(val));
        } else goto handle_unusual;
        continue;
      // .primary.Pedal pedal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pedal(static_cast<::primary::Pedal>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_PEDALS_RANGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_PEDALS_RANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bound(), target);
  }

  // .primary.Pedal pedal = 2;
  if (this->pedal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pedal(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_PEDALS_RANGE)
  return target;
}

size_t SET_PEDALS_RANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_PEDALS_RANGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->bound() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bound());
  }

  // .primary.Pedal pedal = 2;
  if (this->pedal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pedal());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_PEDALS_RANGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_PEDALS_RANGE)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_PEDALS_RANGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_PEDALS_RANGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_PEDALS_RANGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_PEDALS_RANGE)
    MergeFrom(*source);
  }
}

void SET_PEDALS_RANGE::MergeFrom(const SET_PEDALS_RANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_PEDALS_RANGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  if (from.pedal() != 0) {
    _internal_set_pedal(from._internal_pedal());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void SET_PEDALS_RANGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_PEDALS_RANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_PEDALS_RANGE::CopyFrom(const SET_PEDALS_RANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_PEDALS_RANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_PEDALS_RANGE::IsInitialized() const {
  return true;
}

void SET_PEDALS_RANGE::InternalSwap(SET_PEDALS_RANGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_PEDALS_RANGE, _inner_timestamp_)
      + sizeof(SET_PEDALS_RANGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SET_PEDALS_RANGE, bound_)>(
          reinterpret_cast<char*>(&bound_),
          reinterpret_cast<char*>(&other->bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_PEDALS_RANGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_STEERING_ANGLE_RANGE::InitAsDefaultInstance() {
}
class SET_STEERING_ANGLE_RANGE::_Internal {
 public:
};

SET_STEERING_ANGLE_RANGE::SET_STEERING_ANGLE_RANGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_STEERING_ANGLE_RANGE)
}
SET_STEERING_ANGLE_RANGE::SET_STEERING_ANGLE_RANGE(const SET_STEERING_ANGLE_RANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(bound_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_STEERING_ANGLE_RANGE)
}

void SET_STEERING_ANGLE_RANGE::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bound_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(bound_));
}

SET_STEERING_ANGLE_RANGE::~SET_STEERING_ANGLE_RANGE() {
  // @@protoc_insertion_point(destructor:primary.SET_STEERING_ANGLE_RANGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_STEERING_ANGLE_RANGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_STEERING_ANGLE_RANGE::ArenaDtor(void* object) {
  SET_STEERING_ANGLE_RANGE* _this = reinterpret_cast< SET_STEERING_ANGLE_RANGE* >(object);
  (void)_this;
}
void SET_STEERING_ANGLE_RANGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_STEERING_ANGLE_RANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_STEERING_ANGLE_RANGE& SET_STEERING_ANGLE_RANGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_STEERING_ANGLE_RANGE_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_STEERING_ANGLE_RANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_STEERING_ANGLE_RANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bound_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(bound_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_STEERING_ANGLE_RANGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Bound bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bound(static_cast<::primary::Bound>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_STEERING_ANGLE_RANGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_STEERING_ANGLE_RANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bound(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_STEERING_ANGLE_RANGE)
  return target;
}

size_t SET_STEERING_ANGLE_RANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_STEERING_ANGLE_RANGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Bound bound = 1;
  if (this->bound() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bound());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_STEERING_ANGLE_RANGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_STEERING_ANGLE_RANGE)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_STEERING_ANGLE_RANGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_STEERING_ANGLE_RANGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_STEERING_ANGLE_RANGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_STEERING_ANGLE_RANGE)
    MergeFrom(*source);
  }
}

void SET_STEERING_ANGLE_RANGE::MergeFrom(const SET_STEERING_ANGLE_RANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_STEERING_ANGLE_RANGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
}

void SET_STEERING_ANGLE_RANGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_STEERING_ANGLE_RANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_STEERING_ANGLE_RANGE::CopyFrom(const SET_STEERING_ANGLE_RANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_STEERING_ANGLE_RANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_STEERING_ANGLE_RANGE::IsInitialized() const {
  return true;
}

void SET_STEERING_ANGLE_RANGE::InternalSwap(SET_STEERING_ANGLE_RANGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_STEERING_ANGLE_RANGE, bound_)
      + sizeof(SET_STEERING_ANGLE_RANGE::bound_)
      - PROTOBUF_FIELD_OFFSET(SET_STEERING_ANGLE_RANGE, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_STEERING_ANGLE_RANGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAR_STATUS::InitAsDefaultInstance() {
}
class CAR_STATUS::_Internal {
 public:
};

CAR_STATUS::CAR_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.CAR_STATUS)
}
CAR_STATUS::CAR_STATUS(const CAR_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inverter_l_, &from.inverter_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_status_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  // @@protoc_insertion_point(copy_constructor:primary.CAR_STATUS)
}

void CAR_STATUS::SharedCtor() {
  ::memset(&inverter_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_) -
      reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
}

CAR_STATUS::~CAR_STATUS() {
  // @@protoc_insertion_point(destructor:primary.CAR_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAR_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAR_STATUS::ArenaDtor(void* object) {
  CAR_STATUS* _this = reinterpret_cast< CAR_STATUS* >(object);
  (void)_this;
}
void CAR_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAR_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAR_STATUS& CAR_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAR_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void CAR_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CAR_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inverter_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_) -
      reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAR_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.InverterStatus inverter_l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_l(static_cast<::primary::InverterStatus>(val));
        } else goto handle_unusual;
        continue;
      // .primary.InverterStatus inverter_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_r(static_cast<::primary::InverterStatus>(val));
        } else goto handle_unusual;
        continue;
      // .primary.CarStatus car_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status(static_cast<::primary::CarStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAR_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CAR_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.InverterStatus inverter_l = 1;
  if (this->inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inverter_l(), target);
  }

  // .primary.InverterStatus inverter_r = 2;
  if (this->inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_inverter_r(), target);
  }

  // .primary.CarStatus car_status = 3;
  if (this->car_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_car_status(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CAR_STATUS)
  return target;
}

size_t CAR_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CAR_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.InverterStatus inverter_l = 1;
  if (this->inverter_l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverter_l());
  }

  // .primary.InverterStatus inverter_r = 2;
  if (this->inverter_r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverter_r());
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.CarStatus car_status = 3;
  if (this->car_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAR_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const CAR_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAR_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.CAR_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.CAR_STATUS)
    MergeFrom(*source);
  }
}

void CAR_STATUS::MergeFrom(const CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from.inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.car_status() != 0) {
    _internal_set_car_status(from._internal_car_status());
  }
}

void CAR_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAR_STATUS::CopyFrom(const CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAR_STATUS::IsInitialized() const {
  return true;
}

void CAR_STATUS::InternalSwap(CAR_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAR_STATUS, car_status_)
      + sizeof(CAR_STATUS::car_status_)
      - PROTOBUF_FIELD_OFFSET(CAR_STATUS, inverter_l_)>(
          reinterpret_cast<char*>(&inverter_l_),
          reinterpret_cast<char*>(&other->inverter_l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAR_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DAS_ERRORS::InitAsDefaultInstance() {
}
class DAS_ERRORS::_Internal {
 public:
};

DAS_ERRORS::DAS_ERRORS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.DAS_ERRORS)
}
DAS_ERRORS::DAS_ERRORS(const DAS_ERRORS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&das_error_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(das_error_));
  // @@protoc_insertion_point(copy_constructor:primary.DAS_ERRORS)
}

void DAS_ERRORS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&das_error_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(das_error_));
}

DAS_ERRORS::~DAS_ERRORS() {
  // @@protoc_insertion_point(destructor:primary.DAS_ERRORS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAS_ERRORS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DAS_ERRORS::ArenaDtor(void* object) {
  DAS_ERRORS* _this = reinterpret_cast< DAS_ERRORS* >(object);
  (void)_this;
}
void DAS_ERRORS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAS_ERRORS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DAS_ERRORS& DAS_ERRORS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DAS_ERRORS_primary_2eproto.base);
  return *internal_default_instance();
}


void DAS_ERRORS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DAS_ERRORS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&das_error_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(das_error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAS_ERRORS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 das_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          das_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAS_ERRORS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DAS_ERRORS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 das_error = 1;
  if (this->das_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_das_error(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DAS_ERRORS)
  return target;
}

size_t DAS_ERRORS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DAS_ERRORS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // uint32 das_error = 1;
  if (this->das_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_das_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAS_ERRORS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.DAS_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  const DAS_ERRORS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAS_ERRORS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.DAS_ERRORS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.DAS_ERRORS)
    MergeFrom(*source);
  }
}

void DAS_ERRORS::MergeFrom(const DAS_ERRORS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DAS_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.das_error() != 0) {
    _internal_set_das_error(from._internal_das_error());
  }
}

void DAS_ERRORS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.DAS_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAS_ERRORS::CopyFrom(const DAS_ERRORS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DAS_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAS_ERRORS::IsInitialized() const {
  return true;
}

void DAS_ERRORS::InternalSwap(DAS_ERRORS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAS_ERRORS, das_error_)
      + sizeof(DAS_ERRORS::das_error_)
      - PROTOBUF_FIELD_OFFSET(DAS_ERRORS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAS_ERRORS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LV_CURRENT::InitAsDefaultInstance() {
}
class LV_CURRENT::_Internal {
 public:
};

LV_CURRENT::LV_CURRENT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.LV_CURRENT)
}
LV_CURRENT::LV_CURRENT(const LV_CURRENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(current_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_CURRENT)
}

void LV_CURRENT::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(current_));
}

LV_CURRENT::~LV_CURRENT() {
  // @@protoc_insertion_point(destructor:primary.LV_CURRENT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LV_CURRENT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LV_CURRENT::ArenaDtor(void* object) {
  LV_CURRENT* _this = reinterpret_cast< LV_CURRENT* >(object);
  (void)_this;
}
void LV_CURRENT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_CURRENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LV_CURRENT& LV_CURRENT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LV_CURRENT_primary_2eproto.base);
  return *internal_default_instance();
}


void LV_CURRENT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_CURRENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(current_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_CURRENT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LV_CURRENT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_CURRENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float current = 1;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_current(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_CURRENT)
  return target;
}

size_t LV_CURRENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_CURRENT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float current = 1;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LV_CURRENT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.LV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  const LV_CURRENT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LV_CURRENT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.LV_CURRENT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.LV_CURRENT)
    MergeFrom(*source);
  }
}

void LV_CURRENT::MergeFrom(const LV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.current() <= 0 && from.current() >= 0)) {
    _internal_set_current(from._internal_current());
  }
}

void LV_CURRENT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.LV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LV_CURRENT::CopyFrom(const LV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_CURRENT::IsInitialized() const {
  return true;
}

void LV_CURRENT::InternalSwap(LV_CURRENT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_CURRENT, current_)
      + sizeof(LV_CURRENT::current_)
      - PROTOBUF_FIELD_OFFSET(LV_CURRENT, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_CURRENT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LV_VOLTAGE::InitAsDefaultInstance() {
}
class LV_VOLTAGE::_Internal {
 public:
};

LV_VOLTAGE::LV_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.LV_VOLTAGE)
}
LV_VOLTAGE::LV_VOLTAGE(const LV_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&voltage_1_, &from.voltage_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&voltage_1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_VOLTAGE)
}

void LV_VOLTAGE::SharedCtor() {
  ::memset(&voltage_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&voltage_1_)) + sizeof(_inner_timestamp_));
}

LV_VOLTAGE::~LV_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.LV_VOLTAGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LV_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LV_VOLTAGE::ArenaDtor(void* object) {
  LV_VOLTAGE* _this = reinterpret_cast< LV_VOLTAGE* >(object);
  (void)_this;
}
void LV_VOLTAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LV_VOLTAGE& LV_VOLTAGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LV_VOLTAGE_primary_2eproto.base);
  return *internal_default_instance();
}


void LV_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voltage_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&voltage_1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_VOLTAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float voltage_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float voltage_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float voltage_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          voltage_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float voltage_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          voltage_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LV_VOLTAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float voltage_1 = 1;
  if (!(this->voltage_1() <= 0 && this->voltage_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_voltage_1(), target);
  }

  // float voltage_2 = 2;
  if (!(this->voltage_2() <= 0 && this->voltage_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_voltage_2(), target);
  }

  // float voltage_3 = 3;
  if (!(this->voltage_3() <= 0 && this->voltage_3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_voltage_3(), target);
  }

  // float voltage_4 = 4;
  if (!(this->voltage_4() <= 0 && this->voltage_4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_voltage_4(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_VOLTAGE)
  return target;
}

size_t LV_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_VOLTAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float voltage_1 = 1;
  if (!(this->voltage_1() <= 0 && this->voltage_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float voltage_2 = 2;
  if (!(this->voltage_2() <= 0 && this->voltage_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float voltage_3 = 3;
  if (!(this->voltage_3() <= 0 && this->voltage_3() >= 0)) {
    total_size += 1 + 4;
  }

  // float voltage_4 = 4;
  if (!(this->voltage_4() <= 0 && this->voltage_4() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LV_VOLTAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.LV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const LV_VOLTAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LV_VOLTAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.LV_VOLTAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.LV_VOLTAGE)
    MergeFrom(*source);
  }
}

void LV_VOLTAGE::MergeFrom(const LV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.voltage_1() <= 0 && from.voltage_1() >= 0)) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (!(from.voltage_2() <= 0 && from.voltage_2() >= 0)) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (!(from.voltage_3() <= 0 && from.voltage_3() >= 0)) {
    _internal_set_voltage_3(from._internal_voltage_3());
  }
  if (!(from.voltage_4() <= 0 && from.voltage_4() >= 0)) {
    _internal_set_voltage_4(from._internal_voltage_4());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void LV_VOLTAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.LV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LV_VOLTAGE::CopyFrom(const LV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_VOLTAGE::IsInitialized() const {
  return true;
}

void LV_VOLTAGE::InternalSwap(LV_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_VOLTAGE, _inner_timestamp_)
      + sizeof(LV_VOLTAGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LV_VOLTAGE, voltage_1_)>(
          reinterpret_cast<char*>(&voltage_1_),
          reinterpret_cast<char*>(&other->voltage_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_VOLTAGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LV_TOTAL_VOLTAGE::InitAsDefaultInstance() {
}
class LV_TOTAL_VOLTAGE::_Internal {
 public:
};

LV_TOTAL_VOLTAGE::LV_TOTAL_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.LV_TOTAL_VOLTAGE)
}
LV_TOTAL_VOLTAGE::LV_TOTAL_VOLTAGE(const LV_TOTAL_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_voltage_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(total_voltage_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_TOTAL_VOLTAGE)
}

void LV_TOTAL_VOLTAGE::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_voltage_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(total_voltage_));
}

LV_TOTAL_VOLTAGE::~LV_TOTAL_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.LV_TOTAL_VOLTAGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LV_TOTAL_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LV_TOTAL_VOLTAGE::ArenaDtor(void* object) {
  LV_TOTAL_VOLTAGE* _this = reinterpret_cast< LV_TOTAL_VOLTAGE* >(object);
  (void)_this;
}
void LV_TOTAL_VOLTAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_TOTAL_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LV_TOTAL_VOLTAGE& LV_TOTAL_VOLTAGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LV_TOTAL_VOLTAGE_primary_2eproto.base);
  return *internal_default_instance();
}


void LV_TOTAL_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_TOTAL_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_voltage_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(total_voltage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_TOTAL_VOLTAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float total_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          total_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LV_TOTAL_VOLTAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_TOTAL_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float total_voltage = 1;
  if (!(this->total_voltage() <= 0 && this->total_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_total_voltage(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_TOTAL_VOLTAGE)
  return target;
}

size_t LV_TOTAL_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_TOTAL_VOLTAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float total_voltage = 1;
  if (!(this->total_voltage() <= 0 && this->total_voltage() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LV_TOTAL_VOLTAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.LV_TOTAL_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const LV_TOTAL_VOLTAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LV_TOTAL_VOLTAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.LV_TOTAL_VOLTAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.LV_TOTAL_VOLTAGE)
    MergeFrom(*source);
  }
}

void LV_TOTAL_VOLTAGE::MergeFrom(const LV_TOTAL_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_TOTAL_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.total_voltage() <= 0 && from.total_voltage() >= 0)) {
    _internal_set_total_voltage(from._internal_total_voltage());
  }
}

void LV_TOTAL_VOLTAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.LV_TOTAL_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LV_TOTAL_VOLTAGE::CopyFrom(const LV_TOTAL_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_TOTAL_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_TOTAL_VOLTAGE::IsInitialized() const {
  return true;
}

void LV_TOTAL_VOLTAGE::InternalSwap(LV_TOTAL_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_TOTAL_VOLTAGE, total_voltage_)
      + sizeof(LV_TOTAL_VOLTAGE::total_voltage_)
      - PROTOBUF_FIELD_OFFSET(LV_TOTAL_VOLTAGE, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_TOTAL_VOLTAGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LV_TEMPERATURE::InitAsDefaultInstance() {
}
class LV_TEMPERATURE::_Internal {
 public:
};

LV_TEMPERATURE::LV_TEMPERATURE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.LV_TEMPERATURE)
}
LV_TEMPERATURE::LV_TEMPERATURE(const LV_TEMPERATURE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bp_temperature_1_, &from.bp_temperature_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&bp_temperature_1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_TEMPERATURE)
}

void LV_TEMPERATURE::SharedCtor() {
  ::memset(&bp_temperature_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&bp_temperature_1_)) + sizeof(_inner_timestamp_));
}

LV_TEMPERATURE::~LV_TEMPERATURE() {
  // @@protoc_insertion_point(destructor:primary.LV_TEMPERATURE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LV_TEMPERATURE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LV_TEMPERATURE::ArenaDtor(void* object) {
  LV_TEMPERATURE* _this = reinterpret_cast< LV_TEMPERATURE* >(object);
  (void)_this;
}
void LV_TEMPERATURE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_TEMPERATURE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LV_TEMPERATURE& LV_TEMPERATURE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LV_TEMPERATURE_primary_2eproto.base);
  return *internal_default_instance();
}


void LV_TEMPERATURE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_TEMPERATURE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bp_temperature_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&bp_temperature_1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_TEMPERATURE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float bp_temperature_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          bp_temperature_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bp_temperature_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bp_temperature_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dcdc12_temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dcdc12_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dcdc24_temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          dcdc24_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LV_TEMPERATURE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_TEMPERATURE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float bp_temperature_1 = 1;
  if (!(this->bp_temperature_1() <= 0 && this->bp_temperature_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_bp_temperature_1(), target);
  }

  // float bp_temperature_2 = 2;
  if (!(this->bp_temperature_2() <= 0 && this->bp_temperature_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bp_temperature_2(), target);
  }

  // float dcdc12_temperature = 3;
  if (!(this->dcdc12_temperature() <= 0 && this->dcdc12_temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dcdc12_temperature(), target);
  }

  // float dcdc24_temperature = 4;
  if (!(this->dcdc24_temperature() <= 0 && this->dcdc24_temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dcdc24_temperature(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_TEMPERATURE)
  return target;
}

size_t LV_TEMPERATURE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_TEMPERATURE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float bp_temperature_1 = 1;
  if (!(this->bp_temperature_1() <= 0 && this->bp_temperature_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float bp_temperature_2 = 2;
  if (!(this->bp_temperature_2() <= 0 && this->bp_temperature_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float dcdc12_temperature = 3;
  if (!(this->dcdc12_temperature() <= 0 && this->dcdc12_temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // float dcdc24_temperature = 4;
  if (!(this->dcdc24_temperature() <= 0 && this->dcdc24_temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LV_TEMPERATURE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.LV_TEMPERATURE)
  GOOGLE_DCHECK_NE(&from, this);
  const LV_TEMPERATURE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LV_TEMPERATURE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.LV_TEMPERATURE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.LV_TEMPERATURE)
    MergeFrom(*source);
  }
}

void LV_TEMPERATURE::MergeFrom(const LV_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_TEMPERATURE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.bp_temperature_1() <= 0 && from.bp_temperature_1() >= 0)) {
    _internal_set_bp_temperature_1(from._internal_bp_temperature_1());
  }
  if (!(from.bp_temperature_2() <= 0 && from.bp_temperature_2() >= 0)) {
    _internal_set_bp_temperature_2(from._internal_bp_temperature_2());
  }
  if (!(from.dcdc12_temperature() <= 0 && from.dcdc12_temperature() >= 0)) {
    _internal_set_dcdc12_temperature(from._internal_dcdc12_temperature());
  }
  if (!(from.dcdc24_temperature() <= 0 && from.dcdc24_temperature() >= 0)) {
    _internal_set_dcdc24_temperature(from._internal_dcdc24_temperature());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void LV_TEMPERATURE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.LV_TEMPERATURE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LV_TEMPERATURE::CopyFrom(const LV_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_TEMPERATURE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_TEMPERATURE::IsInitialized() const {
  return true;
}

void LV_TEMPERATURE::InternalSwap(LV_TEMPERATURE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_TEMPERATURE, _inner_timestamp_)
      + sizeof(LV_TEMPERATURE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LV_TEMPERATURE, bp_temperature_1_)>(
          reinterpret_cast<char*>(&bp_temperature_1_),
          reinterpret_cast<char*>(&other->bp_temperature_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_TEMPERATURE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void COOLING_STATUS::InitAsDefaultInstance() {
}
class COOLING_STATUS::_Internal {
 public:
};

COOLING_STATUS::COOLING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.COOLING_STATUS)
}
COOLING_STATUS::COOLING_STATUS(const COOLING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radiators_speed_, &from.radiators_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&radiators_speed_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.COOLING_STATUS)
}

void COOLING_STATUS::SharedCtor() {
  ::memset(&radiators_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&radiators_speed_)) + sizeof(_inner_timestamp_));
}

COOLING_STATUS::~COOLING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.COOLING_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void COOLING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void COOLING_STATUS::ArenaDtor(void* object) {
  COOLING_STATUS* _this = reinterpret_cast< COOLING_STATUS* >(object);
  (void)_this;
}
void COOLING_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COOLING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COOLING_STATUS& COOLING_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COOLING_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void COOLING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.COOLING_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&radiators_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&radiators_speed_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COOLING_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float radiators_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          radiators_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pumps_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pumps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COOLING_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.COOLING_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radiators_speed = 1;
  if (!(this->radiators_speed() <= 0 && this->radiators_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_radiators_speed(), target);
  }

  // float pumps_speed = 2;
  if (!(this->pumps_speed() <= 0 && this->pumps_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pumps_speed(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.COOLING_STATUS)
  return target;
}

size_t COOLING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.COOLING_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float radiators_speed = 1;
  if (!(this->radiators_speed() <= 0 && this->radiators_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float pumps_speed = 2;
  if (!(this->pumps_speed() <= 0 && this->pumps_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COOLING_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.COOLING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const COOLING_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COOLING_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.COOLING_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.COOLING_STATUS)
    MergeFrom(*source);
  }
}

void COOLING_STATUS::MergeFrom(const COOLING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.COOLING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.radiators_speed() <= 0 && from.radiators_speed() >= 0)) {
    _internal_set_radiators_speed(from._internal_radiators_speed());
  }
  if (!(from.pumps_speed() <= 0 && from.pumps_speed() >= 0)) {
    _internal_set_pumps_speed(from._internal_pumps_speed());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void COOLING_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.COOLING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COOLING_STATUS::CopyFrom(const COOLING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.COOLING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COOLING_STATUS::IsInitialized() const {
  return true;
}

void COOLING_STATUS::InternalSwap(COOLING_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(COOLING_STATUS, _inner_timestamp_)
      + sizeof(COOLING_STATUS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(COOLING_STATUS, radiators_speed_)>(
          reinterpret_cast<char*>(&radiators_speed_),
          reinterpret_cast<char*>(&other->radiators_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata COOLING_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_RADIATOR_SPEED::InitAsDefaultInstance() {
}
class SET_RADIATOR_SPEED::_Internal {
 public:
};

SET_RADIATOR_SPEED::SET_RADIATOR_SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_RADIATOR_SPEED)
}
SET_RADIATOR_SPEED::SET_RADIATOR_SPEED(const SET_RADIATOR_SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&radiators_speed_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(radiators_speed_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_RADIATOR_SPEED)
}

void SET_RADIATOR_SPEED::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radiators_speed_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(radiators_speed_));
}

SET_RADIATOR_SPEED::~SET_RADIATOR_SPEED() {
  // @@protoc_insertion_point(destructor:primary.SET_RADIATOR_SPEED)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_RADIATOR_SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_RADIATOR_SPEED::ArenaDtor(void* object) {
  SET_RADIATOR_SPEED* _this = reinterpret_cast< SET_RADIATOR_SPEED* >(object);
  (void)_this;
}
void SET_RADIATOR_SPEED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_RADIATOR_SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_RADIATOR_SPEED& SET_RADIATOR_SPEED::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_RADIATOR_SPEED_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_RADIATOR_SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_RADIATOR_SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radiators_speed_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(radiators_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_RADIATOR_SPEED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float radiators_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          radiators_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_RADIATOR_SPEED::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_RADIATOR_SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radiators_speed = 1;
  if (!(this->radiators_speed() <= 0 && this->radiators_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_radiators_speed(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_RADIATOR_SPEED)
  return target;
}

size_t SET_RADIATOR_SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_RADIATOR_SPEED)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float radiators_speed = 1;
  if (!(this->radiators_speed() <= 0 && this->radiators_speed() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_RADIATOR_SPEED::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_RADIATOR_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_RADIATOR_SPEED* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_RADIATOR_SPEED>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_RADIATOR_SPEED)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_RADIATOR_SPEED)
    MergeFrom(*source);
  }
}

void SET_RADIATOR_SPEED::MergeFrom(const SET_RADIATOR_SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_RADIATOR_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.radiators_speed() <= 0 && from.radiators_speed() >= 0)) {
    _internal_set_radiators_speed(from._internal_radiators_speed());
  }
}

void SET_RADIATOR_SPEED::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_RADIATOR_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_RADIATOR_SPEED::CopyFrom(const SET_RADIATOR_SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_RADIATOR_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_RADIATOR_SPEED::IsInitialized() const {
  return true;
}

void SET_RADIATOR_SPEED::InternalSwap(SET_RADIATOR_SPEED* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_RADIATOR_SPEED, radiators_speed_)
      + sizeof(SET_RADIATOR_SPEED::radiators_speed_)
      - PROTOBUF_FIELD_OFFSET(SET_RADIATOR_SPEED, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_RADIATOR_SPEED::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_PUMPS_SPEED::InitAsDefaultInstance() {
}
class SET_PUMPS_SPEED::_Internal {
 public:
};

SET_PUMPS_SPEED::SET_PUMPS_SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_PUMPS_SPEED)
}
SET_PUMPS_SPEED::SET_PUMPS_SPEED(const SET_PUMPS_SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&pumps_speed_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(pumps_speed_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_PUMPS_SPEED)
}

void SET_PUMPS_SPEED::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pumps_speed_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(pumps_speed_));
}

SET_PUMPS_SPEED::~SET_PUMPS_SPEED() {
  // @@protoc_insertion_point(destructor:primary.SET_PUMPS_SPEED)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_PUMPS_SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_PUMPS_SPEED::ArenaDtor(void* object) {
  SET_PUMPS_SPEED* _this = reinterpret_cast< SET_PUMPS_SPEED* >(object);
  (void)_this;
}
void SET_PUMPS_SPEED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_PUMPS_SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_PUMPS_SPEED& SET_PUMPS_SPEED::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_PUMPS_SPEED_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_PUMPS_SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_PUMPS_SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pumps_speed_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(pumps_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_PUMPS_SPEED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float pumps_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pumps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_PUMPS_SPEED::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_PUMPS_SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pumps_speed = 1;
  if (!(this->pumps_speed() <= 0 && this->pumps_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pumps_speed(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_PUMPS_SPEED)
  return target;
}

size_t SET_PUMPS_SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_PUMPS_SPEED)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float pumps_speed = 1;
  if (!(this->pumps_speed() <= 0 && this->pumps_speed() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_PUMPS_SPEED::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_PUMPS_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_PUMPS_SPEED* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_PUMPS_SPEED>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_PUMPS_SPEED)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_PUMPS_SPEED)
    MergeFrom(*source);
  }
}

void SET_PUMPS_SPEED::MergeFrom(const SET_PUMPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_PUMPS_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.pumps_speed() <= 0 && from.pumps_speed() >= 0)) {
    _internal_set_pumps_speed(from._internal_pumps_speed());
  }
}

void SET_PUMPS_SPEED::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_PUMPS_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_PUMPS_SPEED::CopyFrom(const SET_PUMPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_PUMPS_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_PUMPS_SPEED::IsInitialized() const {
  return true;
}

void SET_PUMPS_SPEED::InternalSwap(SET_PUMPS_SPEED* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_PUMPS_SPEED, pumps_speed_)
      + sizeof(SET_PUMPS_SPEED::pumps_speed_)
      - PROTOBUF_FIELD_OFFSET(SET_PUMPS_SPEED, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_PUMPS_SPEED::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_INVERTER_CONNECTION_STATUS::InitAsDefaultInstance() {
}
class SET_INVERTER_CONNECTION_STATUS::_Internal {
 public:
};

SET_INVERTER_CONNECTION_STATUS::SET_INVERTER_CONNECTION_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_INVERTER_CONNECTION_STATUS)
}
SET_INVERTER_CONNECTION_STATUS::SET_INVERTER_CONNECTION_STATUS(const SET_INVERTER_CONNECTION_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_INVERTER_CONNECTION_STATUS)
}

void SET_INVERTER_CONNECTION_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(status_));
}

SET_INVERTER_CONNECTION_STATUS::~SET_INVERTER_CONNECTION_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_INVERTER_CONNECTION_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_INVERTER_CONNECTION_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_INVERTER_CONNECTION_STATUS::ArenaDtor(void* object) {
  SET_INVERTER_CONNECTION_STATUS* _this = reinterpret_cast< SET_INVERTER_CONNECTION_STATUS* >(object);
  (void)_this;
}
void SET_INVERTER_CONNECTION_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_INVERTER_CONNECTION_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_INVERTER_CONNECTION_STATUS& SET_INVERTER_CONNECTION_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_INVERTER_CONNECTION_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_INVERTER_CONNECTION_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_INVERTER_CONNECTION_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_INVERTER_CONNECTION_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_INVERTER_CONNECTION_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_INVERTER_CONNECTION_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_INVERTER_CONNECTION_STATUS)
  return target;
}

size_t SET_INVERTER_CONNECTION_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_INVERTER_CONNECTION_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_INVERTER_CONNECTION_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_INVERTER_CONNECTION_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_INVERTER_CONNECTION_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_INVERTER_CONNECTION_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_INVERTER_CONNECTION_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_INVERTER_CONNECTION_STATUS)
    MergeFrom(*source);
  }
}

void SET_INVERTER_CONNECTION_STATUS::MergeFrom(const SET_INVERTER_CONNECTION_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_INVERTER_CONNECTION_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SET_INVERTER_CONNECTION_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_INVERTER_CONNECTION_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_INVERTER_CONNECTION_STATUS::CopyFrom(const SET_INVERTER_CONNECTION_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_INVERTER_CONNECTION_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_INVERTER_CONNECTION_STATUS::IsInitialized() const {
  return true;
}

void SET_INVERTER_CONNECTION_STATUS::InternalSwap(SET_INVERTER_CONNECTION_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_INVERTER_CONNECTION_STATUS, status_)
      + sizeof(SET_INVERTER_CONNECTION_STATUS::status_)
      - PROTOBUF_FIELD_OFFSET(SET_INVERTER_CONNECTION_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_INVERTER_CONNECTION_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void INVERTER_CONNECTION_STATUS::InitAsDefaultInstance() {
}
class INVERTER_CONNECTION_STATUS::_Internal {
 public:
};

INVERTER_CONNECTION_STATUS::INVERTER_CONNECTION_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.INVERTER_CONNECTION_STATUS)
}
INVERTER_CONNECTION_STATUS::INVERTER_CONNECTION_STATUS(const INVERTER_CONNECTION_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:primary.INVERTER_CONNECTION_STATUS)
}

void INVERTER_CONNECTION_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(status_));
}

INVERTER_CONNECTION_STATUS::~INVERTER_CONNECTION_STATUS() {
  // @@protoc_insertion_point(destructor:primary.INVERTER_CONNECTION_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void INVERTER_CONNECTION_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void INVERTER_CONNECTION_STATUS::ArenaDtor(void* object) {
  INVERTER_CONNECTION_STATUS* _this = reinterpret_cast< INVERTER_CONNECTION_STATUS* >(object);
  (void)_this;
}
void INVERTER_CONNECTION_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void INVERTER_CONNECTION_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const INVERTER_CONNECTION_STATUS& INVERTER_CONNECTION_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_INVERTER_CONNECTION_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void INVERTER_CONNECTION_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.INVERTER_CONNECTION_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INVERTER_CONNECTION_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* INVERTER_CONNECTION_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.INVERTER_CONNECTION_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.INVERTER_CONNECTION_STATUS)
  return target;
}

size_t INVERTER_CONNECTION_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.INVERTER_CONNECTION_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void INVERTER_CONNECTION_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.INVERTER_CONNECTION_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const INVERTER_CONNECTION_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<INVERTER_CONNECTION_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.INVERTER_CONNECTION_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.INVERTER_CONNECTION_STATUS)
    MergeFrom(*source);
  }
}

void INVERTER_CONNECTION_STATUS::MergeFrom(const INVERTER_CONNECTION_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.INVERTER_CONNECTION_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void INVERTER_CONNECTION_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.INVERTER_CONNECTION_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INVERTER_CONNECTION_STATUS::CopyFrom(const INVERTER_CONNECTION_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.INVERTER_CONNECTION_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INVERTER_CONNECTION_STATUS::IsInitialized() const {
  return true;
}

void INVERTER_CONNECTION_STATUS::InternalSwap(INVERTER_CONNECTION_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INVERTER_CONNECTION_STATUS, status_)
      + sizeof(INVERTER_CONNECTION_STATUS::status_)
      - PROTOBUF_FIELD_OFFSET(INVERTER_CONNECTION_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INVERTER_CONNECTION_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LV_ERRORS::InitAsDefaultInstance() {
}
class LV_ERRORS::_Internal {
 public:
};

LV_ERRORS::LV_ERRORS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.LV_ERRORS)
}
LV_ERRORS::LV_ERRORS(const LV_ERRORS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&warnings_, &from.warnings_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_ERRORS)
}

void LV_ERRORS::SharedCtor() {
  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
}

LV_ERRORS::~LV_ERRORS() {
  // @@protoc_insertion_point(destructor:primary.LV_ERRORS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LV_ERRORS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LV_ERRORS::ArenaDtor(void* object) {
  LV_ERRORS* _this = reinterpret_cast< LV_ERRORS* >(object);
  (void)_this;
}
void LV_ERRORS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_ERRORS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LV_ERRORS& LV_ERRORS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LV_ERRORS_primary_2eproto.base);
  return *internal_default_instance();
}


void LV_ERRORS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_ERRORS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_ERRORS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 warnings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          warnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LV_ERRORS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_ERRORS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->warnings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warnings(), target);
  }

  // uint32 errors = 2;
  if (this->errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errors(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_ERRORS)
  return target;
}

size_t LV_ERRORS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_ERRORS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->warnings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warnings());
  }

  // uint32 errors = 2;
  if (this->errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errors());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LV_ERRORS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.LV_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  const LV_ERRORS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LV_ERRORS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.LV_ERRORS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.LV_ERRORS)
    MergeFrom(*source);
  }
}

void LV_ERRORS::MergeFrom(const LV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.warnings() != 0) {
    _internal_set_warnings(from._internal_warnings());
  }
  if (from.errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void LV_ERRORS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.LV_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LV_ERRORS::CopyFrom(const LV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_ERRORS::IsInitialized() const {
  return true;
}

void LV_ERRORS::InternalSwap(LV_ERRORS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_ERRORS, _inner_timestamp_)
      + sizeof(LV_ERRORS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LV_ERRORS, warnings_)>(
          reinterpret_cast<char*>(&warnings_),
          reinterpret_cast<char*>(&other->warnings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_ERRORS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHUTDOWN_STATUS::InitAsDefaultInstance() {
}
class SHUTDOWN_STATUS::_Internal {
 public:
};

SHUTDOWN_STATUS::SHUTDOWN_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SHUTDOWN_STATUS)
}
SHUTDOWN_STATUS::SHUTDOWN_STATUS(const SHUTDOWN_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(output_));
  // @@protoc_insertion_point(copy_constructor:primary.SHUTDOWN_STATUS)
}

void SHUTDOWN_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(output_));
}

SHUTDOWN_STATUS::~SHUTDOWN_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SHUTDOWN_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SHUTDOWN_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SHUTDOWN_STATUS::ArenaDtor(void* object) {
  SHUTDOWN_STATUS* _this = reinterpret_cast< SHUTDOWN_STATUS* >(object);
  (void)_this;
}
void SHUTDOWN_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SHUTDOWN_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHUTDOWN_STATUS& SHUTDOWN_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHUTDOWN_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void SHUTDOWN_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SHUTDOWN_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(output_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SHUTDOWN_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHUTDOWN_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SHUTDOWN_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool input = 1;
  if (this->input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_input(), target);
  }

  // bool output = 2;
  if (this->output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_output(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SHUTDOWN_STATUS)
  return target;
}

size_t SHUTDOWN_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SHUTDOWN_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // bool input = 1;
  if (this->input() != 0) {
    total_size += 1 + 1;
  }

  // bool output = 2;
  if (this->output() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHUTDOWN_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SHUTDOWN_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const SHUTDOWN_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHUTDOWN_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SHUTDOWN_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SHUTDOWN_STATUS)
    MergeFrom(*source);
  }
}

void SHUTDOWN_STATUS::MergeFrom(const SHUTDOWN_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SHUTDOWN_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.input() != 0) {
    _internal_set_input(from._internal_input());
  }
  if (from.output() != 0) {
    _internal_set_output(from._internal_output());
  }
}

void SHUTDOWN_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SHUTDOWN_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHUTDOWN_STATUS::CopyFrom(const SHUTDOWN_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SHUTDOWN_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHUTDOWN_STATUS::IsInitialized() const {
  return true;
}

void SHUTDOWN_STATUS::InternalSwap(SHUTDOWN_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SHUTDOWN_STATUS, output_)
      + sizeof(SHUTDOWN_STATUS::output_)
      - PROTOBUF_FIELD_OFFSET(SHUTDOWN_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SHUTDOWN_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MARKER::InitAsDefaultInstance() {
}
class MARKER::_Internal {
 public:
};

MARKER::MARKER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.MARKER)
}
MARKER::MARKER(const MARKER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.MARKER)
}

void MARKER::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

MARKER::~MARKER() {
  // @@protoc_insertion_point(destructor:primary.MARKER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MARKER::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MARKER::ArenaDtor(void* object) {
  MARKER* _this = reinterpret_cast< MARKER* >(object);
  (void)_this;
}
void MARKER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MARKER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MARKER& MARKER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MARKER_primary_2eproto.base);
  return *internal_default_instance();
}


void MARKER::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.MARKER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MARKER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MARKER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.MARKER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.MARKER)
  return target;
}

size_t MARKER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.MARKER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MARKER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.MARKER)
  GOOGLE_DCHECK_NE(&from, this);
  const MARKER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MARKER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.MARKER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.MARKER)
    MergeFrom(*source);
  }
}

void MARKER::MergeFrom(const MARKER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.MARKER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void MARKER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.MARKER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MARKER::CopyFrom(const MARKER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.MARKER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MARKER::IsInitialized() const {
  return true;
}

void MARKER::InternalSwap(MARKER* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MARKER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_CELLS_VOLTAGE::InitAsDefaultInstance() {
}
class HV_CELLS_VOLTAGE::_Internal {
 public:
};

HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELLS_VOLTAGE)
}
HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(const HV_CELLS_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELLS_VOLTAGE)
}

void HV_CELLS_VOLTAGE::SharedCtor() {
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(_inner_timestamp_));
}

HV_CELLS_VOLTAGE::~HV_CELLS_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.HV_CELLS_VOLTAGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_CELLS_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_CELLS_VOLTAGE::ArenaDtor(void* object) {
  HV_CELLS_VOLTAGE* _this = reinterpret_cast< HV_CELLS_VOLTAGE* >(object);
  (void)_this;
}
void HV_CELLS_VOLTAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CELLS_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_CELLS_VOLTAGE& HV_CELLS_VOLTAGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_CELLS_VOLTAGE_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_CELLS_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELLS_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELLS_VOLTAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float voltage_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          voltage_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float voltage_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float voltage_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_CELLS_VOLTAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELLS_VOLTAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // float voltage_0 = 2;
  if (!(this->voltage_0() <= 0 && this->voltage_0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_voltage_0(), target);
  }

  // float voltage_1 = 3;
  if (!(this->voltage_1() <= 0 && this->voltage_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_voltage_1(), target);
  }

  // float voltage_2 = 4;
  if (!(this->voltage_2() <= 0 && this->voltage_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_voltage_2(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELLS_VOLTAGE)
  return target;
}

size_t HV_CELLS_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELLS_VOLTAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_index());
  }

  // float voltage_0 = 2;
  if (!(this->voltage_0() <= 0 && this->voltage_0() >= 0)) {
    total_size += 1 + 4;
  }

  // float voltage_1 = 3;
  if (!(this->voltage_1() <= 0 && this->voltage_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float voltage_2 = 4;
  if (!(this->voltage_2() <= 0 && this->voltage_2() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_CELLS_VOLTAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_CELLS_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_CELLS_VOLTAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_CELLS_VOLTAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_CELLS_VOLTAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_CELLS_VOLTAGE)
    MergeFrom(*source);
  }
}

void HV_CELLS_VOLTAGE::MergeFrom(const HV_CELLS_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELLS_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (!(from.voltage_0() <= 0 && from.voltage_0() >= 0)) {
    _internal_set_voltage_0(from._internal_voltage_0());
  }
  if (!(from.voltage_1() <= 0 && from.voltage_1() >= 0)) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (!(from.voltage_2() <= 0 && from.voltage_2() >= 0)) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void HV_CELLS_VOLTAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_CELLS_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_CELLS_VOLTAGE::CopyFrom(const HV_CELLS_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELLS_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELLS_VOLTAGE::IsInitialized() const {
  return true;
}

void HV_CELLS_VOLTAGE::InternalSwap(HV_CELLS_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELLS_VOLTAGE, _inner_timestamp_)
      + sizeof(HV_CELLS_VOLTAGE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HV_CELLS_VOLTAGE, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELLS_VOLTAGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_CELLS_TEMP::InitAsDefaultInstance() {
}
class HV_CELLS_TEMP::_Internal {
 public:
};

HV_CELLS_TEMP::HV_CELLS_TEMP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELLS_TEMP)
}
HV_CELLS_TEMP::HV_CELLS_TEMP(const HV_CELLS_TEMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_5_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(temp_5_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELLS_TEMP)
}

void HV_CELLS_TEMP::SharedCtor() {
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_5_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(temp_5_));
}

HV_CELLS_TEMP::~HV_CELLS_TEMP() {
  // @@protoc_insertion_point(destructor:primary.HV_CELLS_TEMP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_CELLS_TEMP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_CELLS_TEMP::ArenaDtor(void* object) {
  HV_CELLS_TEMP* _this = reinterpret_cast< HV_CELLS_TEMP* >(object);
  (void)_this;
}
void HV_CELLS_TEMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CELLS_TEMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_CELLS_TEMP& HV_CELLS_TEMP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_CELLS_TEMP_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_CELLS_TEMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELLS_TEMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_5_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(temp_5_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELLS_TEMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float temp_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          temp_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temp_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          temp_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temp_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temp_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temp_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          temp_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temp_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          temp_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temp_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          temp_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_CELLS_TEMP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELLS_TEMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // float temp_0 = 2;
  if (!(this->temp_0() <= 0 && this->temp_0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_temp_0(), target);
  }

  // float temp_1 = 3;
  if (!(this->temp_1() <= 0 && this->temp_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_temp_1(), target);
  }

  // float temp_2 = 4;
  if (!(this->temp_2() <= 0 && this->temp_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temp_2(), target);
  }

  // float temp_3 = 5;
  if (!(this->temp_3() <= 0 && this->temp_3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_temp_3(), target);
  }

  // float temp_4 = 6;
  if (!(this->temp_4() <= 0 && this->temp_4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_temp_4(), target);
  }

  // float temp_5 = 7;
  if (!(this->temp_5() <= 0 && this->temp_5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_temp_5(), target);
  }

  // uint64 _inner_timestamp = 8;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELLS_TEMP)
  return target;
}

size_t HV_CELLS_TEMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELLS_TEMP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_index());
  }

  // float temp_0 = 2;
  if (!(this->temp_0() <= 0 && this->temp_0() >= 0)) {
    total_size += 1 + 4;
  }

  // float temp_1 = 3;
  if (!(this->temp_1() <= 0 && this->temp_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float temp_2 = 4;
  if (!(this->temp_2() <= 0 && this->temp_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float temp_3 = 5;
  if (!(this->temp_3() <= 0 && this->temp_3() >= 0)) {
    total_size += 1 + 4;
  }

  // float temp_4 = 6;
  if (!(this->temp_4() <= 0 && this->temp_4() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 8;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float temp_5 = 7;
  if (!(this->temp_5() <= 0 && this->temp_5() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_CELLS_TEMP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_CELLS_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_CELLS_TEMP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_CELLS_TEMP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_CELLS_TEMP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_CELLS_TEMP)
    MergeFrom(*source);
  }
}

void HV_CELLS_TEMP::MergeFrom(const HV_CELLS_TEMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELLS_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (!(from.temp_0() <= 0 && from.temp_0() >= 0)) {
    _internal_set_temp_0(from._internal_temp_0());
  }
  if (!(from.temp_1() <= 0 && from.temp_1() >= 0)) {
    _internal_set_temp_1(from._internal_temp_1());
  }
  if (!(from.temp_2() <= 0 && from.temp_2() >= 0)) {
    _internal_set_temp_2(from._internal_temp_2());
  }
  if (!(from.temp_3() <= 0 && from.temp_3() >= 0)) {
    _internal_set_temp_3(from._internal_temp_3());
  }
  if (!(from.temp_4() <= 0 && from.temp_4() >= 0)) {
    _internal_set_temp_4(from._internal_temp_4());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.temp_5() <= 0 && from.temp_5() >= 0)) {
    _internal_set_temp_5(from._internal_temp_5());
  }
}

void HV_CELLS_TEMP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_CELLS_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_CELLS_TEMP::CopyFrom(const HV_CELLS_TEMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELLS_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELLS_TEMP::IsInitialized() const {
  return true;
}

void HV_CELLS_TEMP::InternalSwap(HV_CELLS_TEMP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELLS_TEMP, temp_5_)
      + sizeof(HV_CELLS_TEMP::temp_5_)
      - PROTOBUF_FIELD_OFFSET(HV_CELLS_TEMP, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELLS_TEMP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HV_CELL_BALANCING_STATUS::InitAsDefaultInstance() {
}
class HV_CELL_BALANCING_STATUS::_Internal {
 public:
};

HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELL_BALANCING_STATUS)
}
HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(const HV_CELL_BALANCING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&balancing_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(balancing_status_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELL_BALANCING_STATUS)
}

void HV_CELL_BALANCING_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balancing_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(balancing_status_));
}

HV_CELL_BALANCING_STATUS::~HV_CELL_BALANCING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HV_CELL_BALANCING_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HV_CELL_BALANCING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HV_CELL_BALANCING_STATUS::ArenaDtor(void* object) {
  HV_CELL_BALANCING_STATUS* _this = reinterpret_cast< HV_CELL_BALANCING_STATUS* >(object);
  (void)_this;
}
void HV_CELL_BALANCING_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CELL_BALANCING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HV_CELL_BALANCING_STATUS& HV_CELL_BALANCING_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HV_CELL_BALANCING_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void HV_CELL_BALANCING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELL_BALANCING_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balancing_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(balancing_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELL_BALANCING_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_balancing_status(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HV_CELL_BALANCING_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELL_BALANCING_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle balancing_status = 1;
  if (this->balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_balancing_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELL_BALANCING_STATUS)
  return target;
}

size_t HV_CELL_BALANCING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELL_BALANCING_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle balancing_status = 1;
  if (this->balancing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_balancing_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HV_CELL_BALANCING_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HV_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const HV_CELL_BALANCING_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HV_CELL_BALANCING_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HV_CELL_BALANCING_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HV_CELL_BALANCING_STATUS)
    MergeFrom(*source);
  }
}

void HV_CELL_BALANCING_STATUS::MergeFrom(const HV_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.balancing_status() != 0) {
    _internal_set_balancing_status(from._internal_balancing_status());
  }
}

void HV_CELL_BALANCING_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HV_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HV_CELL_BALANCING_STATUS::CopyFrom(const HV_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELL_BALANCING_STATUS::IsInitialized() const {
  return true;
}

void HV_CELL_BALANCING_STATUS::InternalSwap(HV_CELL_BALANCING_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELL_BALANCING_STATUS, balancing_status_)
      + sizeof(HV_CELL_BALANCING_STATUS::balancing_status_)
      - PROTOBUF_FIELD_OFFSET(HV_CELL_BALANCING_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELL_BALANCING_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SET_CELL_BALANCING_STATUS::InitAsDefaultInstance() {
}
class SET_CELL_BALANCING_STATUS::_Internal {
 public:
};

SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SET_CELL_BALANCING_STATUS)
}
SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(const SET_CELL_BALANCING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_balancing_status_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(set_balancing_status_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_CELL_BALANCING_STATUS)
}

void SET_CELL_BALANCING_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_balancing_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(set_balancing_status_));
}

SET_CELL_BALANCING_STATUS::~SET_CELL_BALANCING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_CELL_BALANCING_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SET_CELL_BALANCING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SET_CELL_BALANCING_STATUS::ArenaDtor(void* object) {
  SET_CELL_BALANCING_STATUS* _this = reinterpret_cast< SET_CELL_BALANCING_STATUS* >(object);
  (void)_this;
}
void SET_CELL_BALANCING_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_CELL_BALANCING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SET_CELL_BALANCING_STATUS& SET_CELL_BALANCING_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SET_CELL_BALANCING_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void SET_CELL_BALANCING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_CELL_BALANCING_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_balancing_status_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(set_balancing_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_CELL_BALANCING_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .primary.Toggle set_balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_balancing_status(static_cast<::primary::Toggle>(val));
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SET_CELL_BALANCING_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_CELL_BALANCING_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Toggle set_balancing_status = 1;
  if (this->set_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_set_balancing_status(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_CELL_BALANCING_STATUS)
  return target;
}

size_t SET_CELL_BALANCING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_CELL_BALANCING_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // .primary.Toggle set_balancing_status = 1;
  if (this->set_balancing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_set_balancing_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SET_CELL_BALANCING_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SET_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const SET_CELL_BALANCING_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SET_CELL_BALANCING_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SET_CELL_BALANCING_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SET_CELL_BALANCING_STATUS)
    MergeFrom(*source);
  }
}

void SET_CELL_BALANCING_STATUS::MergeFrom(const SET_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.set_balancing_status() != 0) {
    _internal_set_set_balancing_status(from._internal_set_balancing_status());
  }
}

void SET_CELL_BALANCING_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SET_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SET_CELL_BALANCING_STATUS::CopyFrom(const SET_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_CELL_BALANCING_STATUS::IsInitialized() const {
  return true;
}

void SET_CELL_BALANCING_STATUS::InternalSwap(SET_CELL_BALANCING_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_CELL_BALANCING_STATUS, set_balancing_status_)
      + sizeof(SET_CELL_BALANCING_STATUS::set_balancing_status_)
      - PROTOBUF_FIELD_OFFSET(SET_CELL_BALANCING_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_CELL_BALANCING_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HANDCART_STATUS::InitAsDefaultInstance() {
}
class HANDCART_STATUS::_Internal {
 public:
};

HANDCART_STATUS::HANDCART_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.HANDCART_STATUS)
}
HANDCART_STATUS::HANDCART_STATUS(const HANDCART_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:primary.HANDCART_STATUS)
}

void HANDCART_STATUS::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(connected_));
}

HANDCART_STATUS::~HANDCART_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HANDCART_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HANDCART_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HANDCART_STATUS::ArenaDtor(void* object) {
  HANDCART_STATUS* _this = reinterpret_cast< HANDCART_STATUS* >(object);
  (void)_this;
}
void HANDCART_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HANDCART_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HANDCART_STATUS& HANDCART_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HANDCART_STATUS_primary_2eproto.base);
  return *internal_default_instance();
}


void HANDCART_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HANDCART_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(connected_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HANDCART_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HANDCART_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HANDCART_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HANDCART_STATUS)
  return target;
}

size_t HANDCART_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HANDCART_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // bool connected = 1;
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HANDCART_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.HANDCART_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const HANDCART_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HANDCART_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.HANDCART_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.HANDCART_STATUS)
    MergeFrom(*source);
  }
}

void HANDCART_STATUS::MergeFrom(const HANDCART_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HANDCART_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
}

void HANDCART_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.HANDCART_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HANDCART_STATUS::CopyFrom(const HANDCART_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HANDCART_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HANDCART_STATUS::IsInitialized() const {
  return true;
}

void HANDCART_STATUS::InternalSwap(HANDCART_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HANDCART_STATUS, connected_)
      + sizeof(HANDCART_STATUS::connected_)
      - PROTOBUF_FIELD_OFFSET(HANDCART_STATUS, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HANDCART_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPEED::InitAsDefaultInstance() {
}
class SPEED::_Internal {
 public:
};

SPEED::SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.SPEED)
}
SPEED::SPEED(const SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&encoder_r_, &from.encoder_r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.SPEED)
}

void SPEED::SharedCtor() {
  ::memset(&encoder_r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&encoder_r_)) + sizeof(_inner_timestamp_));
}

SPEED::~SPEED() {
  // @@protoc_insertion_point(destructor:primary.SPEED)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SPEED::ArenaDtor(void* object) {
  SPEED* _this = reinterpret_cast< SPEED* >(object);
  (void)_this;
}
void SPEED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPEED& SPEED::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPEED_primary_2eproto.base);
  return *internal_default_instance();
}


void SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&encoder_r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&encoder_r_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPEED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float encoder_r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          encoder_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float encoder_l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          encoder_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float inverter_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          inverter_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float inverter_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          inverter_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPEED::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float encoder_r = 1;
  if (!(this->encoder_r() <= 0 && this->encoder_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_encoder_r(), target);
  }

  // float encoder_l = 2;
  if (!(this->encoder_l() <= 0 && this->encoder_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_encoder_l(), target);
  }

  // float inverter_r = 3;
  if (!(this->inverter_r() <= 0 && this->inverter_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_inverter_r(), target);
  }

  // float inverter_l = 4;
  if (!(this->inverter_l() <= 0 && this->inverter_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_inverter_l(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SPEED)
  return target;
}

size_t SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SPEED)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float encoder_r = 1;
  if (!(this->encoder_r() <= 0 && this->encoder_r() >= 0)) {
    total_size += 1 + 4;
  }

  // float encoder_l = 2;
  if (!(this->encoder_l() <= 0 && this->encoder_l() >= 0)) {
    total_size += 1 + 4;
  }

  // float inverter_r = 3;
  if (!(this->inverter_r() <= 0 && this->inverter_r() >= 0)) {
    total_size += 1 + 4;
  }

  // float inverter_l = 4;
  if (!(this->inverter_l() <= 0 && this->inverter_l() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPEED::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  const SPEED* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPEED>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.SPEED)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.SPEED)
    MergeFrom(*source);
  }
}

void SPEED::MergeFrom(const SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.encoder_r() <= 0 && from.encoder_r() >= 0)) {
    _internal_set_encoder_r(from._internal_encoder_r());
  }
  if (!(from.encoder_l() <= 0 && from.encoder_l() >= 0)) {
    _internal_set_encoder_l(from._internal_encoder_l());
  }
  if (!(from.inverter_r() <= 0 && from.inverter_r() >= 0)) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (!(from.inverter_l() <= 0 && from.inverter_l() >= 0)) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void SPEED::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPEED::CopyFrom(const SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPEED::IsInitialized() const {
  return true;
}

void SPEED::InternalSwap(SPEED* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPEED, _inner_timestamp_)
      + sizeof(SPEED::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SPEED, encoder_r_)>(
          reinterpret_cast<char*>(&encoder_r_),
          reinterpret_cast<char*>(&other->encoder_r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SPEED::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void INV_L_REQUEST::InitAsDefaultInstance() {
}
class INV_L_REQUEST::_Internal {
 public:
};

INV_L_REQUEST::INV_L_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.INV_L_REQUEST)
}
INV_L_REQUEST::INV_L_REQUEST(const INV_L_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_0_, &from.data_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&data_0_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.INV_L_REQUEST)
}

void INV_L_REQUEST::SharedCtor() {
  ::memset(&data_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&data_0_)) + sizeof(_inner_timestamp_));
}

INV_L_REQUEST::~INV_L_REQUEST() {
  // @@protoc_insertion_point(destructor:primary.INV_L_REQUEST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void INV_L_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void INV_L_REQUEST::ArenaDtor(void* object) {
  INV_L_REQUEST* _this = reinterpret_cast< INV_L_REQUEST* >(object);
  (void)_this;
}
void INV_L_REQUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void INV_L_REQUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const INV_L_REQUEST& INV_L_REQUEST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_INV_L_REQUEST_primary_2eproto.base);
  return *internal_default_instance();
}


void INV_L_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.INV_L_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&data_0_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INV_L_REQUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 data_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          data_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          data_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* INV_L_REQUEST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.INV_L_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data_0 = 1;
  if (this->data_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_0(), target);
  }

  // uint32 data_1 = 2;
  if (this->data_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_1(), target);
  }

  // uint32 data_2 = 3;
  if (this->data_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_2(), target);
  }

  // uint32 data_3 = 4;
  if (this->data_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_3(), target);
  }

  // uint32 data_4 = 5;
  if (this->data_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_4(), target);
  }

  // uint32 data_5 = 6;
  if (this->data_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_5(), target);
  }

  // uint32 data_6 = 7;
  if (this->data_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_6(), target);
  }

  // uint32 data_7 = 8;
  if (this->data_7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_data_7(), target);
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.INV_L_REQUEST)
  return target;
}

size_t INV_L_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.INV_L_REQUEST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 data_0 = 1;
  if (this->data_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_0());
  }

  // uint32 data_1 = 2;
  if (this->data_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_1());
  }

  // uint32 data_2 = 3;
  if (this->data_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_2());
  }

  // uint32 data_3 = 4;
  if (this->data_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_3());
  }

  // uint32 data_4 = 5;
  if (this->data_4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_4());
  }

  // uint32 data_5 = 6;
  if (this->data_5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_5());
  }

  // uint32 data_6 = 7;
  if (this->data_6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_6());
  }

  // uint32 data_7 = 8;
  if (this->data_7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_7());
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void INV_L_REQUEST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.INV_L_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  const INV_L_REQUEST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<INV_L_REQUEST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.INV_L_REQUEST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.INV_L_REQUEST)
    MergeFrom(*source);
  }
}

void INV_L_REQUEST::MergeFrom(const INV_L_REQUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.INV_L_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_0() != 0) {
    _internal_set_data_0(from._internal_data_0());
  }
  if (from.data_1() != 0) {
    _internal_set_data_1(from._internal_data_1());
  }
  if (from.data_2() != 0) {
    _internal_set_data_2(from._internal_data_2());
  }
  if (from.data_3() != 0) {
    _internal_set_data_3(from._internal_data_3());
  }
  if (from.data_4() != 0) {
    _internal_set_data_4(from._internal_data_4());
  }
  if (from.data_5() != 0) {
    _internal_set_data_5(from._internal_data_5());
  }
  if (from.data_6() != 0) {
    _internal_set_data_6(from._internal_data_6());
  }
  if (from.data_7() != 0) {
    _internal_set_data_7(from._internal_data_7());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void INV_L_REQUEST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.INV_L_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INV_L_REQUEST::CopyFrom(const INV_L_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.INV_L_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INV_L_REQUEST::IsInitialized() const {
  return true;
}

void INV_L_REQUEST::InternalSwap(INV_L_REQUEST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INV_L_REQUEST, _inner_timestamp_)
      + sizeof(INV_L_REQUEST::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(INV_L_REQUEST, data_0_)>(
          reinterpret_cast<char*>(&data_0_),
          reinterpret_cast<char*>(&other->data_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INV_L_REQUEST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void INV_R_REQUEST::InitAsDefaultInstance() {
}
class INV_R_REQUEST::_Internal {
 public:
};

INV_R_REQUEST::INV_R_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.INV_R_REQUEST)
}
INV_R_REQUEST::INV_R_REQUEST(const INV_R_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_0_, &from.data_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&data_0_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.INV_R_REQUEST)
}

void INV_R_REQUEST::SharedCtor() {
  ::memset(&data_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&data_0_)) + sizeof(_inner_timestamp_));
}

INV_R_REQUEST::~INV_R_REQUEST() {
  // @@protoc_insertion_point(destructor:primary.INV_R_REQUEST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void INV_R_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void INV_R_REQUEST::ArenaDtor(void* object) {
  INV_R_REQUEST* _this = reinterpret_cast< INV_R_REQUEST* >(object);
  (void)_this;
}
void INV_R_REQUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void INV_R_REQUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const INV_R_REQUEST& INV_R_REQUEST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_INV_R_REQUEST_primary_2eproto.base);
  return *internal_default_instance();
}


void INV_R_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.INV_R_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&data_0_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INV_R_REQUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 data_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          data_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          data_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* INV_R_REQUEST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.INV_R_REQUEST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data_0 = 1;
  if (this->data_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_0(), target);
  }

  // uint32 data_1 = 2;
  if (this->data_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_1(), target);
  }

  // uint32 data_2 = 3;
  if (this->data_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_2(), target);
  }

  // uint32 data_3 = 4;
  if (this->data_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_3(), target);
  }

  // uint32 data_4 = 5;
  if (this->data_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_4(), target);
  }

  // uint32 data_5 = 6;
  if (this->data_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_5(), target);
  }

  // uint32 data_6 = 7;
  if (this->data_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_6(), target);
  }

  // uint32 data_7 = 8;
  if (this->data_7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_data_7(), target);
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.INV_R_REQUEST)
  return target;
}

size_t INV_R_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.INV_R_REQUEST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 data_0 = 1;
  if (this->data_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_0());
  }

  // uint32 data_1 = 2;
  if (this->data_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_1());
  }

  // uint32 data_2 = 3;
  if (this->data_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_2());
  }

  // uint32 data_3 = 4;
  if (this->data_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_3());
  }

  // uint32 data_4 = 5;
  if (this->data_4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_4());
  }

  // uint32 data_5 = 6;
  if (this->data_5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_5());
  }

  // uint32 data_6 = 7;
  if (this->data_6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_6());
  }

  // uint32 data_7 = 8;
  if (this->data_7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_7());
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void INV_R_REQUEST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.INV_R_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  const INV_R_REQUEST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<INV_R_REQUEST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.INV_R_REQUEST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.INV_R_REQUEST)
    MergeFrom(*source);
  }
}

void INV_R_REQUEST::MergeFrom(const INV_R_REQUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.INV_R_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_0() != 0) {
    _internal_set_data_0(from._internal_data_0());
  }
  if (from.data_1() != 0) {
    _internal_set_data_1(from._internal_data_1());
  }
  if (from.data_2() != 0) {
    _internal_set_data_2(from._internal_data_2());
  }
  if (from.data_3() != 0) {
    _internal_set_data_3(from._internal_data_3());
  }
  if (from.data_4() != 0) {
    _internal_set_data_4(from._internal_data_4());
  }
  if (from.data_5() != 0) {
    _internal_set_data_5(from._internal_data_5());
  }
  if (from.data_6() != 0) {
    _internal_set_data_6(from._internal_data_6());
  }
  if (from.data_7() != 0) {
    _internal_set_data_7(from._internal_data_7());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void INV_R_REQUEST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.INV_R_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INV_R_REQUEST::CopyFrom(const INV_R_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.INV_R_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INV_R_REQUEST::IsInitialized() const {
  return true;
}

void INV_R_REQUEST::InternalSwap(INV_R_REQUEST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INV_R_REQUEST, _inner_timestamp_)
      + sizeof(INV_R_REQUEST::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(INV_R_REQUEST, data_0_)>(
          reinterpret_cast<char*>(&data_0_),
          reinterpret_cast<char*>(&other->data_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INV_R_REQUEST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void INV_L_RESPONSE::InitAsDefaultInstance() {
}
class INV_L_RESPONSE::_Internal {
 public:
};

INV_L_RESPONSE::INV_L_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.INV_L_RESPONSE)
}
INV_L_RESPONSE::INV_L_RESPONSE(const INV_L_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reg_id_, &from.reg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.INV_L_RESPONSE)
}

void INV_L_RESPONSE::SharedCtor() {
  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
}

INV_L_RESPONSE::~INV_L_RESPONSE() {
  // @@protoc_insertion_point(destructor:primary.INV_L_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void INV_L_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void INV_L_RESPONSE::ArenaDtor(void* object) {
  INV_L_RESPONSE* _this = reinterpret_cast< INV_L_RESPONSE* >(object);
  (void)_this;
}
void INV_L_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void INV_L_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const INV_L_RESPONSE& INV_L_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_INV_L_RESPONSE_primary_2eproto.base);
  return *internal_default_instance();
}


void INV_L_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.INV_L_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INV_L_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          data_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* INV_L_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.INV_L_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->reg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reg_id(), target);
  }

  // uint32 data_0 = 2;
  if (this->data_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_0(), target);
  }

  // uint32 data_1 = 3;
  if (this->data_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_1(), target);
  }

  // uint32 data_2 = 4;
  if (this->data_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_2(), target);
  }

  // uint32 data_3 = 5;
  if (this->data_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_3(), target);
  }

  // uint32 data_4 = 6;
  if (this->data_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_4(), target);
  }

  // uint32 data_5 = 7;
  if (this->data_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_5(), target);
  }

  // uint32 data_6 = 8;
  if (this->data_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_data_6(), target);
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.INV_L_RESPONSE)
  return target;
}

size_t INV_L_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.INV_L_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->reg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reg_id());
  }

  // uint32 data_0 = 2;
  if (this->data_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_0());
  }

  // uint32 data_1 = 3;
  if (this->data_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_1());
  }

  // uint32 data_2 = 4;
  if (this->data_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_2());
  }

  // uint32 data_3 = 5;
  if (this->data_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_3());
  }

  // uint32 data_4 = 6;
  if (this->data_4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_4());
  }

  // uint32 data_5 = 7;
  if (this->data_5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_5());
  }

  // uint32 data_6 = 8;
  if (this->data_6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_6());
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void INV_L_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.INV_L_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const INV_L_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<INV_L_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.INV_L_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.INV_L_RESPONSE)
    MergeFrom(*source);
  }
}

void INV_L_RESPONSE::MergeFrom(const INV_L_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.INV_L_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg_id() != 0) {
    _internal_set_reg_id(from._internal_reg_id());
  }
  if (from.data_0() != 0) {
    _internal_set_data_0(from._internal_data_0());
  }
  if (from.data_1() != 0) {
    _internal_set_data_1(from._internal_data_1());
  }
  if (from.data_2() != 0) {
    _internal_set_data_2(from._internal_data_2());
  }
  if (from.data_3() != 0) {
    _internal_set_data_3(from._internal_data_3());
  }
  if (from.data_4() != 0) {
    _internal_set_data_4(from._internal_data_4());
  }
  if (from.data_5() != 0) {
    _internal_set_data_5(from._internal_data_5());
  }
  if (from.data_6() != 0) {
    _internal_set_data_6(from._internal_data_6());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void INV_L_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.INV_L_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INV_L_RESPONSE::CopyFrom(const INV_L_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.INV_L_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INV_L_RESPONSE::IsInitialized() const {
  return true;
}

void INV_L_RESPONSE::InternalSwap(INV_L_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INV_L_RESPONSE, _inner_timestamp_)
      + sizeof(INV_L_RESPONSE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(INV_L_RESPONSE, reg_id_)>(
          reinterpret_cast<char*>(&reg_id_),
          reinterpret_cast<char*>(&other->reg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INV_L_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void INV_R_RESPONSE::InitAsDefaultInstance() {
}
class INV_R_RESPONSE::_Internal {
 public:
};

INV_R_RESPONSE::INV_R_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.INV_R_RESPONSE)
}
INV_R_RESPONSE::INV_R_RESPONSE(const INV_R_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reg_id_, &from.reg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:primary.INV_R_RESPONSE)
}

void INV_R_RESPONSE::SharedCtor() {
  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
}

INV_R_RESPONSE::~INV_R_RESPONSE() {
  // @@protoc_insertion_point(destructor:primary.INV_R_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void INV_R_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void INV_R_RESPONSE::ArenaDtor(void* object) {
  INV_R_RESPONSE* _this = reinterpret_cast< INV_R_RESPONSE* >(object);
  (void)_this;
}
void INV_R_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void INV_R_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const INV_R_RESPONSE& INV_R_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_INV_R_RESPONSE_primary_2eproto.base);
  return *internal_default_instance();
}


void INV_R_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.INV_R_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INV_R_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          data_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* INV_R_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.INV_R_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->reg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reg_id(), target);
  }

  // uint32 data_0 = 2;
  if (this->data_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_0(), target);
  }

  // uint32 data_1 = 3;
  if (this->data_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_1(), target);
  }

  // uint32 data_2 = 4;
  if (this->data_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_2(), target);
  }

  // uint32 data_3 = 5;
  if (this->data_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_3(), target);
  }

  // uint32 data_4 = 6;
  if (this->data_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_4(), target);
  }

  // uint32 data_5 = 7;
  if (this->data_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_5(), target);
  }

  // uint32 data_6 = 8;
  if (this->data_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_data_6(), target);
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.INV_R_RESPONSE)
  return target;
}

size_t INV_R_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.INV_R_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->reg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reg_id());
  }

  // uint32 data_0 = 2;
  if (this->data_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_0());
  }

  // uint32 data_1 = 3;
  if (this->data_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_1());
  }

  // uint32 data_2 = 4;
  if (this->data_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_2());
  }

  // uint32 data_3 = 5;
  if (this->data_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_3());
  }

  // uint32 data_4 = 6;
  if (this->data_4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_4());
  }

  // uint32 data_5 = 7;
  if (this->data_5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_5());
  }

  // uint32 data_6 = 8;
  if (this->data_6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_6());
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void INV_R_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.INV_R_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const INV_R_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<INV_R_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.INV_R_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.INV_R_RESPONSE)
    MergeFrom(*source);
  }
}

void INV_R_RESPONSE::MergeFrom(const INV_R_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.INV_R_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg_id() != 0) {
    _internal_set_reg_id(from._internal_reg_id());
  }
  if (from.data_0() != 0) {
    _internal_set_data_0(from._internal_data_0());
  }
  if (from.data_1() != 0) {
    _internal_set_data_1(from._internal_data_1());
  }
  if (from.data_2() != 0) {
    _internal_set_data_2(from._internal_data_2());
  }
  if (from.data_3() != 0) {
    _internal_set_data_3(from._internal_data_3());
  }
  if (from.data_4() != 0) {
    _internal_set_data_4(from._internal_data_4());
  }
  if (from.data_5() != 0) {
    _internal_set_data_5(from._internal_data_5());
  }
  if (from.data_6() != 0) {
    _internal_set_data_6(from._internal_data_6());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void INV_R_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.INV_R_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INV_R_RESPONSE::CopyFrom(const INV_R_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.INV_R_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INV_R_RESPONSE::IsInitialized() const {
  return true;
}

void INV_R_RESPONSE::InternalSwap(INV_R_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INV_R_RESPONSE, _inner_timestamp_)
      + sizeof(INV_R_RESPONSE::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(INV_R_RESPONSE, reg_id_)>(
          reinterpret_cast<char*>(&reg_id_),
          reinterpret_cast<char*>(&other->reg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INV_R_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_0_TX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_0_TX::_Internal {
 public:
};

FLASH_CELLBOARD_0_TX::FLASH_CELLBOARD_0_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_0_TX)
}
FLASH_CELLBOARD_0_TX::FLASH_CELLBOARD_0_TX(const FLASH_CELLBOARD_0_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_0_TX)
}

void FLASH_CELLBOARD_0_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_0_TX::~FLASH_CELLBOARD_0_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_0_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_0_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_0_TX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_0_TX* _this = reinterpret_cast< FLASH_CELLBOARD_0_TX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_0_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_0_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_0_TX& FLASH_CELLBOARD_0_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_0_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_0_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_0_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_0_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_0_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_0_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_0_TX)
  return target;
}

size_t FLASH_CELLBOARD_0_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_0_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_0_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_0_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_0_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_0_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_0_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_0_TX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_0_TX::MergeFrom(const FLASH_CELLBOARD_0_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_0_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_0_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_0_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_0_TX::CopyFrom(const FLASH_CELLBOARD_0_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_0_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_0_TX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_0_TX::InternalSwap(FLASH_CELLBOARD_0_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_0_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_0_RX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_0_RX::_Internal {
 public:
};

FLASH_CELLBOARD_0_RX::FLASH_CELLBOARD_0_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_0_RX)
}
FLASH_CELLBOARD_0_RX::FLASH_CELLBOARD_0_RX(const FLASH_CELLBOARD_0_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_0_RX)
}

void FLASH_CELLBOARD_0_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_0_RX::~FLASH_CELLBOARD_0_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_0_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_0_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_0_RX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_0_RX* _this = reinterpret_cast< FLASH_CELLBOARD_0_RX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_0_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_0_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_0_RX& FLASH_CELLBOARD_0_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_0_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_0_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_0_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_0_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_0_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_0_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_0_RX)
  return target;
}

size_t FLASH_CELLBOARD_0_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_0_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_0_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_0_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_0_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_0_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_0_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_0_RX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_0_RX::MergeFrom(const FLASH_CELLBOARD_0_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_0_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_0_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_0_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_0_RX::CopyFrom(const FLASH_CELLBOARD_0_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_0_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_0_RX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_0_RX::InternalSwap(FLASH_CELLBOARD_0_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_0_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_1_TX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_1_TX::_Internal {
 public:
};

FLASH_CELLBOARD_1_TX::FLASH_CELLBOARD_1_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_1_TX)
}
FLASH_CELLBOARD_1_TX::FLASH_CELLBOARD_1_TX(const FLASH_CELLBOARD_1_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_1_TX)
}

void FLASH_CELLBOARD_1_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_1_TX::~FLASH_CELLBOARD_1_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_1_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_1_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_1_TX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_1_TX* _this = reinterpret_cast< FLASH_CELLBOARD_1_TX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_1_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_1_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_1_TX& FLASH_CELLBOARD_1_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_1_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_1_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_1_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_1_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_1_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_1_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_1_TX)
  return target;
}

size_t FLASH_CELLBOARD_1_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_1_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_1_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_1_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_1_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_1_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_1_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_1_TX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_1_TX::MergeFrom(const FLASH_CELLBOARD_1_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_1_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_1_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_1_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_1_TX::CopyFrom(const FLASH_CELLBOARD_1_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_1_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_1_TX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_1_TX::InternalSwap(FLASH_CELLBOARD_1_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_1_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_1_RX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_1_RX::_Internal {
 public:
};

FLASH_CELLBOARD_1_RX::FLASH_CELLBOARD_1_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_1_RX)
}
FLASH_CELLBOARD_1_RX::FLASH_CELLBOARD_1_RX(const FLASH_CELLBOARD_1_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_1_RX)
}

void FLASH_CELLBOARD_1_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_1_RX::~FLASH_CELLBOARD_1_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_1_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_1_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_1_RX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_1_RX* _this = reinterpret_cast< FLASH_CELLBOARD_1_RX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_1_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_1_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_1_RX& FLASH_CELLBOARD_1_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_1_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_1_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_1_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_1_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_1_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_1_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_1_RX)
  return target;
}

size_t FLASH_CELLBOARD_1_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_1_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_1_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_1_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_1_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_1_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_1_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_1_RX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_1_RX::MergeFrom(const FLASH_CELLBOARD_1_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_1_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_1_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_1_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_1_RX::CopyFrom(const FLASH_CELLBOARD_1_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_1_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_1_RX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_1_RX::InternalSwap(FLASH_CELLBOARD_1_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_1_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_2_TX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_2_TX::_Internal {
 public:
};

FLASH_CELLBOARD_2_TX::FLASH_CELLBOARD_2_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_2_TX)
}
FLASH_CELLBOARD_2_TX::FLASH_CELLBOARD_2_TX(const FLASH_CELLBOARD_2_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_2_TX)
}

void FLASH_CELLBOARD_2_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_2_TX::~FLASH_CELLBOARD_2_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_2_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_2_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_2_TX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_2_TX* _this = reinterpret_cast< FLASH_CELLBOARD_2_TX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_2_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_2_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_2_TX& FLASH_CELLBOARD_2_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_2_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_2_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_2_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_2_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_2_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_2_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_2_TX)
  return target;
}

size_t FLASH_CELLBOARD_2_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_2_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_2_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_2_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_2_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_2_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_2_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_2_TX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_2_TX::MergeFrom(const FLASH_CELLBOARD_2_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_2_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_2_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_2_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_2_TX::CopyFrom(const FLASH_CELLBOARD_2_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_2_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_2_TX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_2_TX::InternalSwap(FLASH_CELLBOARD_2_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_2_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_2_RX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_2_RX::_Internal {
 public:
};

FLASH_CELLBOARD_2_RX::FLASH_CELLBOARD_2_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_2_RX)
}
FLASH_CELLBOARD_2_RX::FLASH_CELLBOARD_2_RX(const FLASH_CELLBOARD_2_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_2_RX)
}

void FLASH_CELLBOARD_2_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_2_RX::~FLASH_CELLBOARD_2_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_2_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_2_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_2_RX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_2_RX* _this = reinterpret_cast< FLASH_CELLBOARD_2_RX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_2_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_2_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_2_RX& FLASH_CELLBOARD_2_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_2_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_2_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_2_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_2_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_2_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_2_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_2_RX)
  return target;
}

size_t FLASH_CELLBOARD_2_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_2_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_2_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_2_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_2_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_2_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_2_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_2_RX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_2_RX::MergeFrom(const FLASH_CELLBOARD_2_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_2_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_2_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_2_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_2_RX::CopyFrom(const FLASH_CELLBOARD_2_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_2_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_2_RX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_2_RX::InternalSwap(FLASH_CELLBOARD_2_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_2_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_3_TX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_3_TX::_Internal {
 public:
};

FLASH_CELLBOARD_3_TX::FLASH_CELLBOARD_3_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_3_TX)
}
FLASH_CELLBOARD_3_TX::FLASH_CELLBOARD_3_TX(const FLASH_CELLBOARD_3_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_3_TX)
}

void FLASH_CELLBOARD_3_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_3_TX::~FLASH_CELLBOARD_3_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_3_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_3_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_3_TX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_3_TX* _this = reinterpret_cast< FLASH_CELLBOARD_3_TX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_3_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_3_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_3_TX& FLASH_CELLBOARD_3_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_3_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_3_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_3_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_3_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_3_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_3_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_3_TX)
  return target;
}

size_t FLASH_CELLBOARD_3_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_3_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_3_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_3_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_3_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_3_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_3_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_3_TX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_3_TX::MergeFrom(const FLASH_CELLBOARD_3_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_3_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_3_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_3_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_3_TX::CopyFrom(const FLASH_CELLBOARD_3_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_3_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_3_TX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_3_TX::InternalSwap(FLASH_CELLBOARD_3_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_3_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_3_RX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_3_RX::_Internal {
 public:
};

FLASH_CELLBOARD_3_RX::FLASH_CELLBOARD_3_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_3_RX)
}
FLASH_CELLBOARD_3_RX::FLASH_CELLBOARD_3_RX(const FLASH_CELLBOARD_3_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_3_RX)
}

void FLASH_CELLBOARD_3_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_3_RX::~FLASH_CELLBOARD_3_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_3_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_3_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_3_RX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_3_RX* _this = reinterpret_cast< FLASH_CELLBOARD_3_RX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_3_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_3_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_3_RX& FLASH_CELLBOARD_3_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_3_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_3_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_3_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_3_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_3_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_3_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_3_RX)
  return target;
}

size_t FLASH_CELLBOARD_3_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_3_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_3_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_3_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_3_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_3_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_3_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_3_RX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_3_RX::MergeFrom(const FLASH_CELLBOARD_3_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_3_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_3_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_3_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_3_RX::CopyFrom(const FLASH_CELLBOARD_3_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_3_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_3_RX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_3_RX::InternalSwap(FLASH_CELLBOARD_3_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_3_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_4_TX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_4_TX::_Internal {
 public:
};

FLASH_CELLBOARD_4_TX::FLASH_CELLBOARD_4_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_4_TX)
}
FLASH_CELLBOARD_4_TX::FLASH_CELLBOARD_4_TX(const FLASH_CELLBOARD_4_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_4_TX)
}

void FLASH_CELLBOARD_4_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_4_TX::~FLASH_CELLBOARD_4_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_4_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_4_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_4_TX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_4_TX* _this = reinterpret_cast< FLASH_CELLBOARD_4_TX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_4_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_4_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_4_TX& FLASH_CELLBOARD_4_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_4_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_4_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_4_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_4_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_4_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_4_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_4_TX)
  return target;
}

size_t FLASH_CELLBOARD_4_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_4_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_4_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_4_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_4_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_4_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_4_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_4_TX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_4_TX::MergeFrom(const FLASH_CELLBOARD_4_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_4_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_4_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_4_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_4_TX::CopyFrom(const FLASH_CELLBOARD_4_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_4_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_4_TX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_4_TX::InternalSwap(FLASH_CELLBOARD_4_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_4_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_4_RX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_4_RX::_Internal {
 public:
};

FLASH_CELLBOARD_4_RX::FLASH_CELLBOARD_4_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_4_RX)
}
FLASH_CELLBOARD_4_RX::FLASH_CELLBOARD_4_RX(const FLASH_CELLBOARD_4_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_4_RX)
}

void FLASH_CELLBOARD_4_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_4_RX::~FLASH_CELLBOARD_4_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_4_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_4_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_4_RX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_4_RX* _this = reinterpret_cast< FLASH_CELLBOARD_4_RX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_4_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_4_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_4_RX& FLASH_CELLBOARD_4_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_4_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_4_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_4_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_4_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_4_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_4_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_4_RX)
  return target;
}

size_t FLASH_CELLBOARD_4_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_4_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_4_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_4_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_4_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_4_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_4_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_4_RX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_4_RX::MergeFrom(const FLASH_CELLBOARD_4_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_4_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_4_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_4_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_4_RX::CopyFrom(const FLASH_CELLBOARD_4_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_4_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_4_RX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_4_RX::InternalSwap(FLASH_CELLBOARD_4_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_4_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_5_TX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_5_TX::_Internal {
 public:
};

FLASH_CELLBOARD_5_TX::FLASH_CELLBOARD_5_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_5_TX)
}
FLASH_CELLBOARD_5_TX::FLASH_CELLBOARD_5_TX(const FLASH_CELLBOARD_5_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_5_TX)
}

void FLASH_CELLBOARD_5_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_5_TX::~FLASH_CELLBOARD_5_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_5_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_5_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_5_TX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_5_TX* _this = reinterpret_cast< FLASH_CELLBOARD_5_TX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_5_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_5_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_5_TX& FLASH_CELLBOARD_5_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_5_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_5_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_5_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_5_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_5_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_5_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_5_TX)
  return target;
}

size_t FLASH_CELLBOARD_5_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_5_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_5_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_5_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_5_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_5_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_5_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_5_TX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_5_TX::MergeFrom(const FLASH_CELLBOARD_5_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_5_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_5_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_5_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_5_TX::CopyFrom(const FLASH_CELLBOARD_5_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_5_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_5_TX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_5_TX::InternalSwap(FLASH_CELLBOARD_5_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_5_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_CELLBOARD_5_RX::InitAsDefaultInstance() {
}
class FLASH_CELLBOARD_5_RX::_Internal {
 public:
};

FLASH_CELLBOARD_5_RX::FLASH_CELLBOARD_5_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_CELLBOARD_5_RX)
}
FLASH_CELLBOARD_5_RX::FLASH_CELLBOARD_5_RX(const FLASH_CELLBOARD_5_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_CELLBOARD_5_RX)
}

void FLASH_CELLBOARD_5_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_CELLBOARD_5_RX::~FLASH_CELLBOARD_5_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_CELLBOARD_5_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_CELLBOARD_5_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_CELLBOARD_5_RX::ArenaDtor(void* object) {
  FLASH_CELLBOARD_5_RX* _this = reinterpret_cast< FLASH_CELLBOARD_5_RX* >(object);
  (void)_this;
}
void FLASH_CELLBOARD_5_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_CELLBOARD_5_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_CELLBOARD_5_RX& FLASH_CELLBOARD_5_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_CELLBOARD_5_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_CELLBOARD_5_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_CELLBOARD_5_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_CELLBOARD_5_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_CELLBOARD_5_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_CELLBOARD_5_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_CELLBOARD_5_RX)
  return target;
}

size_t FLASH_CELLBOARD_5_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_CELLBOARD_5_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_CELLBOARD_5_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_CELLBOARD_5_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_CELLBOARD_5_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_CELLBOARD_5_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_CELLBOARD_5_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_CELLBOARD_5_RX)
    MergeFrom(*source);
  }
}

void FLASH_CELLBOARD_5_RX::MergeFrom(const FLASH_CELLBOARD_5_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_CELLBOARD_5_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_CELLBOARD_5_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_CELLBOARD_5_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_CELLBOARD_5_RX::CopyFrom(const FLASH_CELLBOARD_5_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_CELLBOARD_5_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_CELLBOARD_5_RX::IsInitialized() const {
  return true;
}

void FLASH_CELLBOARD_5_RX::InternalSwap(FLASH_CELLBOARD_5_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_CELLBOARD_5_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_BMS_HV_TX::InitAsDefaultInstance() {
}
class FLASH_BMS_HV_TX::_Internal {
 public:
};

FLASH_BMS_HV_TX::FLASH_BMS_HV_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_BMS_HV_TX)
}
FLASH_BMS_HV_TX::FLASH_BMS_HV_TX(const FLASH_BMS_HV_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_BMS_HV_TX)
}

void FLASH_BMS_HV_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_BMS_HV_TX::~FLASH_BMS_HV_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_BMS_HV_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_BMS_HV_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_BMS_HV_TX::ArenaDtor(void* object) {
  FLASH_BMS_HV_TX* _this = reinterpret_cast< FLASH_BMS_HV_TX* >(object);
  (void)_this;
}
void FLASH_BMS_HV_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_BMS_HV_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_BMS_HV_TX& FLASH_BMS_HV_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_BMS_HV_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_BMS_HV_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_BMS_HV_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_BMS_HV_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_BMS_HV_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_BMS_HV_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_BMS_HV_TX)
  return target;
}

size_t FLASH_BMS_HV_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_BMS_HV_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_BMS_HV_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_BMS_HV_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_BMS_HV_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_BMS_HV_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_BMS_HV_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_BMS_HV_TX)
    MergeFrom(*source);
  }
}

void FLASH_BMS_HV_TX::MergeFrom(const FLASH_BMS_HV_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_BMS_HV_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_BMS_HV_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_BMS_HV_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_BMS_HV_TX::CopyFrom(const FLASH_BMS_HV_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_BMS_HV_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_BMS_HV_TX::IsInitialized() const {
  return true;
}

void FLASH_BMS_HV_TX::InternalSwap(FLASH_BMS_HV_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_BMS_HV_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_BMS_HV_RX::InitAsDefaultInstance() {
}
class FLASH_BMS_HV_RX::_Internal {
 public:
};

FLASH_BMS_HV_RX::FLASH_BMS_HV_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_BMS_HV_RX)
}
FLASH_BMS_HV_RX::FLASH_BMS_HV_RX(const FLASH_BMS_HV_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_BMS_HV_RX)
}

void FLASH_BMS_HV_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_BMS_HV_RX::~FLASH_BMS_HV_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_BMS_HV_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_BMS_HV_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_BMS_HV_RX::ArenaDtor(void* object) {
  FLASH_BMS_HV_RX* _this = reinterpret_cast< FLASH_BMS_HV_RX* >(object);
  (void)_this;
}
void FLASH_BMS_HV_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_BMS_HV_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_BMS_HV_RX& FLASH_BMS_HV_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_BMS_HV_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_BMS_HV_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_BMS_HV_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_BMS_HV_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_BMS_HV_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_BMS_HV_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_BMS_HV_RX)
  return target;
}

size_t FLASH_BMS_HV_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_BMS_HV_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_BMS_HV_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_BMS_HV_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_BMS_HV_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_BMS_HV_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_BMS_HV_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_BMS_HV_RX)
    MergeFrom(*source);
  }
}

void FLASH_BMS_HV_RX::MergeFrom(const FLASH_BMS_HV_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_BMS_HV_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_BMS_HV_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_BMS_HV_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_BMS_HV_RX::CopyFrom(const FLASH_BMS_HV_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_BMS_HV_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_BMS_HV_RX::IsInitialized() const {
  return true;
}

void FLASH_BMS_HV_RX::InternalSwap(FLASH_BMS_HV_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_BMS_HV_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_BMS_LV_TX::InitAsDefaultInstance() {
}
class FLASH_BMS_LV_TX::_Internal {
 public:
};

FLASH_BMS_LV_TX::FLASH_BMS_LV_TX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_BMS_LV_TX)
}
FLASH_BMS_LV_TX::FLASH_BMS_LV_TX(const FLASH_BMS_LV_TX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_BMS_LV_TX)
}

void FLASH_BMS_LV_TX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_BMS_LV_TX::~FLASH_BMS_LV_TX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_BMS_LV_TX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_BMS_LV_TX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_BMS_LV_TX::ArenaDtor(void* object) {
  FLASH_BMS_LV_TX* _this = reinterpret_cast< FLASH_BMS_LV_TX* >(object);
  (void)_this;
}
void FLASH_BMS_LV_TX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_BMS_LV_TX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_BMS_LV_TX& FLASH_BMS_LV_TX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_BMS_LV_TX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_BMS_LV_TX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_BMS_LV_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_BMS_LV_TX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_BMS_LV_TX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_BMS_LV_TX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_BMS_LV_TX)
  return target;
}

size_t FLASH_BMS_LV_TX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_BMS_LV_TX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_BMS_LV_TX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_BMS_LV_TX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_BMS_LV_TX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_BMS_LV_TX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_BMS_LV_TX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_BMS_LV_TX)
    MergeFrom(*source);
  }
}

void FLASH_BMS_LV_TX::MergeFrom(const FLASH_BMS_LV_TX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_BMS_LV_TX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_BMS_LV_TX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_BMS_LV_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_BMS_LV_TX::CopyFrom(const FLASH_BMS_LV_TX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_BMS_LV_TX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_BMS_LV_TX::IsInitialized() const {
  return true;
}

void FLASH_BMS_LV_TX::InternalSwap(FLASH_BMS_LV_TX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_BMS_LV_TX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FLASH_BMS_LV_RX::InitAsDefaultInstance() {
}
class FLASH_BMS_LV_RX::_Internal {
 public:
};

FLASH_BMS_LV_RX::FLASH_BMS_LV_RX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.FLASH_BMS_LV_RX)
}
FLASH_BMS_LV_RX::FLASH_BMS_LV_RX(const FLASH_BMS_LV_RX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.FLASH_BMS_LV_RX)
}

void FLASH_BMS_LV_RX::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

FLASH_BMS_LV_RX::~FLASH_BMS_LV_RX() {
  // @@protoc_insertion_point(destructor:primary.FLASH_BMS_LV_RX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FLASH_BMS_LV_RX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FLASH_BMS_LV_RX::ArenaDtor(void* object) {
  FLASH_BMS_LV_RX* _this = reinterpret_cast< FLASH_BMS_LV_RX* >(object);
  (void)_this;
}
void FLASH_BMS_LV_RX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLASH_BMS_LV_RX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FLASH_BMS_LV_RX& FLASH_BMS_LV_RX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FLASH_BMS_LV_RX_primary_2eproto.base);
  return *internal_default_instance();
}


void FLASH_BMS_LV_RX::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.FLASH_BMS_LV_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLASH_BMS_LV_RX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLASH_BMS_LV_RX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.FLASH_BMS_LV_RX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.FLASH_BMS_LV_RX)
  return target;
}

size_t FLASH_BMS_LV_RX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.FLASH_BMS_LV_RX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FLASH_BMS_LV_RX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.FLASH_BMS_LV_RX)
  GOOGLE_DCHECK_NE(&from, this);
  const FLASH_BMS_LV_RX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FLASH_BMS_LV_RX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.FLASH_BMS_LV_RX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.FLASH_BMS_LV_RX)
    MergeFrom(*source);
  }
}

void FLASH_BMS_LV_RX::MergeFrom(const FLASH_BMS_LV_RX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.FLASH_BMS_LV_RX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void FLASH_BMS_LV_RX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.FLASH_BMS_LV_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLASH_BMS_LV_RX::CopyFrom(const FLASH_BMS_LV_RX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.FLASH_BMS_LV_RX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLASH_BMS_LV_RX::IsInitialized() const {
  return true;
}

void FLASH_BMS_LV_RX::InternalSwap(FLASH_BMS_LV_RX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLASH_BMS_LV_RX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BRUSA_NLG5_CTL::InitAsDefaultInstance() {
}
class BRUSA_NLG5_CTL::_Internal {
 public:
};

BRUSA_NLG5_CTL::BRUSA_NLG5_CTL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BRUSA_NLG5_CTL)
}
BRUSA_NLG5_CTL::BRUSA_NLG5_CTL(const BRUSA_NLG5_CTL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BRUSA_NLG5_CTL)
}

void BRUSA_NLG5_CTL::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BRUSA_NLG5_CTL::~BRUSA_NLG5_CTL() {
  // @@protoc_insertion_point(destructor:primary.BRUSA_NLG5_CTL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BRUSA_NLG5_CTL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BRUSA_NLG5_CTL::ArenaDtor(void* object) {
  BRUSA_NLG5_CTL* _this = reinterpret_cast< BRUSA_NLG5_CTL* >(object);
  (void)_this;
}
void BRUSA_NLG5_CTL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BRUSA_NLG5_CTL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BRUSA_NLG5_CTL& BRUSA_NLG5_CTL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BRUSA_NLG5_CTL_primary_2eproto.base);
  return *internal_default_instance();
}


void BRUSA_NLG5_CTL::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BRUSA_NLG5_CTL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BRUSA_NLG5_CTL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BRUSA_NLG5_CTL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BRUSA_NLG5_CTL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BRUSA_NLG5_CTL)
  return target;
}

size_t BRUSA_NLG5_CTL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BRUSA_NLG5_CTL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BRUSA_NLG5_CTL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BRUSA_NLG5_CTL)
  GOOGLE_DCHECK_NE(&from, this);
  const BRUSA_NLG5_CTL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BRUSA_NLG5_CTL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BRUSA_NLG5_CTL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BRUSA_NLG5_CTL)
    MergeFrom(*source);
  }
}

void BRUSA_NLG5_CTL::MergeFrom(const BRUSA_NLG5_CTL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BRUSA_NLG5_CTL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BRUSA_NLG5_CTL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BRUSA_NLG5_CTL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRUSA_NLG5_CTL::CopyFrom(const BRUSA_NLG5_CTL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BRUSA_NLG5_CTL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRUSA_NLG5_CTL::IsInitialized() const {
  return true;
}

void BRUSA_NLG5_CTL::InternalSwap(BRUSA_NLG5_CTL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BRUSA_NLG5_CTL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BRUSA_ST::InitAsDefaultInstance() {
}
class BRUSA_ST::_Internal {
 public:
};

BRUSA_ST::BRUSA_ST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BRUSA_ST)
}
BRUSA_ST::BRUSA_ST(const BRUSA_ST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BRUSA_ST)
}

void BRUSA_ST::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BRUSA_ST::~BRUSA_ST() {
  // @@protoc_insertion_point(destructor:primary.BRUSA_ST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BRUSA_ST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BRUSA_ST::ArenaDtor(void* object) {
  BRUSA_ST* _this = reinterpret_cast< BRUSA_ST* >(object);
  (void)_this;
}
void BRUSA_ST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BRUSA_ST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BRUSA_ST& BRUSA_ST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BRUSA_ST_primary_2eproto.base);
  return *internal_default_instance();
}


void BRUSA_ST::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BRUSA_ST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BRUSA_ST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BRUSA_ST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BRUSA_ST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BRUSA_ST)
  return target;
}

size_t BRUSA_ST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BRUSA_ST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BRUSA_ST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BRUSA_ST)
  GOOGLE_DCHECK_NE(&from, this);
  const BRUSA_ST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BRUSA_ST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BRUSA_ST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BRUSA_ST)
    MergeFrom(*source);
  }
}

void BRUSA_ST::MergeFrom(const BRUSA_ST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BRUSA_ST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BRUSA_ST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BRUSA_ST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRUSA_ST::CopyFrom(const BRUSA_ST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BRUSA_ST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRUSA_ST::IsInitialized() const {
  return true;
}

void BRUSA_ST::InternalSwap(BRUSA_ST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BRUSA_ST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BRUSA_ACT_I::InitAsDefaultInstance() {
}
class BRUSA_ACT_I::_Internal {
 public:
};

BRUSA_ACT_I::BRUSA_ACT_I(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BRUSA_ACT_I)
}
BRUSA_ACT_I::BRUSA_ACT_I(const BRUSA_ACT_I& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BRUSA_ACT_I)
}

void BRUSA_ACT_I::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BRUSA_ACT_I::~BRUSA_ACT_I() {
  // @@protoc_insertion_point(destructor:primary.BRUSA_ACT_I)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BRUSA_ACT_I::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BRUSA_ACT_I::ArenaDtor(void* object) {
  BRUSA_ACT_I* _this = reinterpret_cast< BRUSA_ACT_I* >(object);
  (void)_this;
}
void BRUSA_ACT_I::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BRUSA_ACT_I::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BRUSA_ACT_I& BRUSA_ACT_I::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BRUSA_ACT_I_primary_2eproto.base);
  return *internal_default_instance();
}


void BRUSA_ACT_I::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BRUSA_ACT_I)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BRUSA_ACT_I::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BRUSA_ACT_I::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BRUSA_ACT_I)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BRUSA_ACT_I)
  return target;
}

size_t BRUSA_ACT_I::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BRUSA_ACT_I)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BRUSA_ACT_I::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BRUSA_ACT_I)
  GOOGLE_DCHECK_NE(&from, this);
  const BRUSA_ACT_I* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BRUSA_ACT_I>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BRUSA_ACT_I)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BRUSA_ACT_I)
    MergeFrom(*source);
  }
}

void BRUSA_ACT_I::MergeFrom(const BRUSA_ACT_I& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BRUSA_ACT_I)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BRUSA_ACT_I::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BRUSA_ACT_I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRUSA_ACT_I::CopyFrom(const BRUSA_ACT_I& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BRUSA_ACT_I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRUSA_ACT_I::IsInitialized() const {
  return true;
}

void BRUSA_ACT_I::InternalSwap(BRUSA_ACT_I* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BRUSA_ACT_I::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BRUSA_ACT_II::InitAsDefaultInstance() {
}
class BRUSA_ACT_II::_Internal {
 public:
};

BRUSA_ACT_II::BRUSA_ACT_II(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BRUSA_ACT_II)
}
BRUSA_ACT_II::BRUSA_ACT_II(const BRUSA_ACT_II& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BRUSA_ACT_II)
}

void BRUSA_ACT_II::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BRUSA_ACT_II::~BRUSA_ACT_II() {
  // @@protoc_insertion_point(destructor:primary.BRUSA_ACT_II)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BRUSA_ACT_II::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BRUSA_ACT_II::ArenaDtor(void* object) {
  BRUSA_ACT_II* _this = reinterpret_cast< BRUSA_ACT_II* >(object);
  (void)_this;
}
void BRUSA_ACT_II::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BRUSA_ACT_II::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BRUSA_ACT_II& BRUSA_ACT_II::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BRUSA_ACT_II_primary_2eproto.base);
  return *internal_default_instance();
}


void BRUSA_ACT_II::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BRUSA_ACT_II)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BRUSA_ACT_II::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BRUSA_ACT_II::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BRUSA_ACT_II)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BRUSA_ACT_II)
  return target;
}

size_t BRUSA_ACT_II::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BRUSA_ACT_II)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BRUSA_ACT_II::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BRUSA_ACT_II)
  GOOGLE_DCHECK_NE(&from, this);
  const BRUSA_ACT_II* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BRUSA_ACT_II>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BRUSA_ACT_II)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BRUSA_ACT_II)
    MergeFrom(*source);
  }
}

void BRUSA_ACT_II::MergeFrom(const BRUSA_ACT_II& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BRUSA_ACT_II)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BRUSA_ACT_II::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BRUSA_ACT_II)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRUSA_ACT_II::CopyFrom(const BRUSA_ACT_II& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BRUSA_ACT_II)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRUSA_ACT_II::IsInitialized() const {
  return true;
}

void BRUSA_ACT_II::InternalSwap(BRUSA_ACT_II* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BRUSA_ACT_II::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BRUSA_TEMP::InitAsDefaultInstance() {
}
class BRUSA_TEMP::_Internal {
 public:
};

BRUSA_TEMP::BRUSA_TEMP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BRUSA_TEMP)
}
BRUSA_TEMP::BRUSA_TEMP(const BRUSA_TEMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BRUSA_TEMP)
}

void BRUSA_TEMP::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BRUSA_TEMP::~BRUSA_TEMP() {
  // @@protoc_insertion_point(destructor:primary.BRUSA_TEMP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BRUSA_TEMP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BRUSA_TEMP::ArenaDtor(void* object) {
  BRUSA_TEMP* _this = reinterpret_cast< BRUSA_TEMP* >(object);
  (void)_this;
}
void BRUSA_TEMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BRUSA_TEMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BRUSA_TEMP& BRUSA_TEMP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BRUSA_TEMP_primary_2eproto.base);
  return *internal_default_instance();
}


void BRUSA_TEMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BRUSA_TEMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BRUSA_TEMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BRUSA_TEMP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BRUSA_TEMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BRUSA_TEMP)
  return target;
}

size_t BRUSA_TEMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BRUSA_TEMP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BRUSA_TEMP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BRUSA_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  const BRUSA_TEMP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BRUSA_TEMP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BRUSA_TEMP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BRUSA_TEMP)
    MergeFrom(*source);
  }
}

void BRUSA_TEMP::MergeFrom(const BRUSA_TEMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BRUSA_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BRUSA_TEMP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BRUSA_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRUSA_TEMP::CopyFrom(const BRUSA_TEMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BRUSA_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRUSA_TEMP::IsInitialized() const {
  return true;
}

void BRUSA_TEMP::InternalSwap(BRUSA_TEMP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BRUSA_TEMP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BRUSA_ERR::InitAsDefaultInstance() {
}
class BRUSA_ERR::_Internal {
 public:
};

BRUSA_ERR::BRUSA_ERR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.BRUSA_ERR)
}
BRUSA_ERR::BRUSA_ERR(const BRUSA_ERR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.BRUSA_ERR)
}

void BRUSA_ERR::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

BRUSA_ERR::~BRUSA_ERR() {
  // @@protoc_insertion_point(destructor:primary.BRUSA_ERR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BRUSA_ERR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BRUSA_ERR::ArenaDtor(void* object) {
  BRUSA_ERR* _this = reinterpret_cast< BRUSA_ERR* >(object);
  (void)_this;
}
void BRUSA_ERR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BRUSA_ERR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BRUSA_ERR& BRUSA_ERR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BRUSA_ERR_primary_2eproto.base);
  return *internal_default_instance();
}


void BRUSA_ERR::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.BRUSA_ERR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BRUSA_ERR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BRUSA_ERR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.BRUSA_ERR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.BRUSA_ERR)
  return target;
}

size_t BRUSA_ERR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.BRUSA_ERR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BRUSA_ERR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.BRUSA_ERR)
  GOOGLE_DCHECK_NE(&from, this);
  const BRUSA_ERR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BRUSA_ERR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.BRUSA_ERR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.BRUSA_ERR)
    MergeFrom(*source);
  }
}

void BRUSA_ERR::MergeFrom(const BRUSA_ERR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.BRUSA_ERR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void BRUSA_ERR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.BRUSA_ERR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRUSA_ERR::CopyFrom(const BRUSA_ERR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.BRUSA_ERR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRUSA_ERR::IsInitialized() const {
  return true;
}

void BRUSA_ERR::InternalSwap(BRUSA_ERR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BRUSA_ERR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CONTROL_OUTPUT::InitAsDefaultInstance() {
}
class CONTROL_OUTPUT::_Internal {
 public:
};

CONTROL_OUTPUT::CONTROL_OUTPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.CONTROL_OUTPUT)
}
CONTROL_OUTPUT::CONTROL_OUTPUT(const CONTROL_OUTPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&estimated_velocity_, &from.estimated_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_r_) -
    reinterpret_cast<char*>(&estimated_velocity_)) + sizeof(torque_r_));
  // @@protoc_insertion_point(copy_constructor:primary.CONTROL_OUTPUT)
}

void CONTROL_OUTPUT::SharedCtor() {
  ::memset(&estimated_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_r_) -
      reinterpret_cast<char*>(&estimated_velocity_)) + sizeof(torque_r_));
}

CONTROL_OUTPUT::~CONTROL_OUTPUT() {
  // @@protoc_insertion_point(destructor:primary.CONTROL_OUTPUT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CONTROL_OUTPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CONTROL_OUTPUT::ArenaDtor(void* object) {
  CONTROL_OUTPUT* _this = reinterpret_cast< CONTROL_OUTPUT* >(object);
  (void)_this;
}
void CONTROL_OUTPUT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CONTROL_OUTPUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CONTROL_OUTPUT& CONTROL_OUTPUT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CONTROL_OUTPUT_primary_2eproto.base);
  return *internal_default_instance();
}


void CONTROL_OUTPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CONTROL_OUTPUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&estimated_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_r_) -
      reinterpret_cast<char*>(&estimated_velocity_)) + sizeof(torque_r_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CONTROL_OUTPUT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float estimated_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          estimated_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tmax_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          tmax_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tmax_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tmax_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float torque_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          torque_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float torque_r = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          torque_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CONTROL_OUTPUT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CONTROL_OUTPUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float estimated_velocity = 1;
  if (!(this->estimated_velocity() <= 0 && this->estimated_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_estimated_velocity(), target);
  }

  // float tmax_r = 2;
  if (!(this->tmax_r() <= 0 && this->tmax_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_tmax_r(), target);
  }

  // float tmax_l = 3;
  if (!(this->tmax_l() <= 0 && this->tmax_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tmax_l(), target);
  }

  // float torque_l = 4;
  if (!(this->torque_l() <= 0 && this->torque_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_torque_l(), target);
  }

  // float torque_r = 5;
  if (!(this->torque_r() <= 0 && this->torque_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_torque_r(), target);
  }

  // uint64 _inner_timestamp = 6;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CONTROL_OUTPUT)
  return target;
}

size_t CONTROL_OUTPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CONTROL_OUTPUT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float estimated_velocity = 1;
  if (!(this->estimated_velocity() <= 0 && this->estimated_velocity() >= 0)) {
    total_size += 1 + 4;
  }

  // float tmax_r = 2;
  if (!(this->tmax_r() <= 0 && this->tmax_r() >= 0)) {
    total_size += 1 + 4;
  }

  // float tmax_l = 3;
  if (!(this->tmax_l() <= 0 && this->tmax_l() >= 0)) {
    total_size += 1 + 4;
  }

  // float torque_l = 4;
  if (!(this->torque_l() <= 0 && this->torque_l() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 6;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float torque_r = 5;
  if (!(this->torque_r() <= 0 && this->torque_r() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CONTROL_OUTPUT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.CONTROL_OUTPUT)
  GOOGLE_DCHECK_NE(&from, this);
  const CONTROL_OUTPUT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CONTROL_OUTPUT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.CONTROL_OUTPUT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.CONTROL_OUTPUT)
    MergeFrom(*source);
  }
}

void CONTROL_OUTPUT::MergeFrom(const CONTROL_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CONTROL_OUTPUT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.estimated_velocity() <= 0 && from.estimated_velocity() >= 0)) {
    _internal_set_estimated_velocity(from._internal_estimated_velocity());
  }
  if (!(from.tmax_r() <= 0 && from.tmax_r() >= 0)) {
    _internal_set_tmax_r(from._internal_tmax_r());
  }
  if (!(from.tmax_l() <= 0 && from.tmax_l() >= 0)) {
    _internal_set_tmax_l(from._internal_tmax_l());
  }
  if (!(from.torque_l() <= 0 && from.torque_l() >= 0)) {
    _internal_set_torque_l(from._internal_torque_l());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.torque_r() <= 0 && from.torque_r() >= 0)) {
    _internal_set_torque_r(from._internal_torque_r());
  }
}

void CONTROL_OUTPUT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.CONTROL_OUTPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CONTROL_OUTPUT::CopyFrom(const CONTROL_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CONTROL_OUTPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONTROL_OUTPUT::IsInitialized() const {
  return true;
}

void CONTROL_OUTPUT::InternalSwap(CONTROL_OUTPUT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CONTROL_OUTPUT, torque_r_)
      + sizeof(CONTROL_OUTPUT::torque_r_)
      - PROTOBUF_FIELD_OFFSET(CONTROL_OUTPUT, estimated_velocity_)>(
          reinterpret_cast<char*>(&estimated_velocity_),
          reinterpret_cast<char*>(&other->estimated_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CONTROL_OUTPUT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LC_RESET::InitAsDefaultInstance() {
}
class LC_RESET::_Internal {
 public:
};

LC_RESET::LC_RESET(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.LC_RESET)
}
LC_RESET::LC_RESET(const LC_RESET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _inner_timestamp_ = from._inner_timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.LC_RESET)
}

void LC_RESET::SharedCtor() {
  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
}

LC_RESET::~LC_RESET() {
  // @@protoc_insertion_point(destructor:primary.LC_RESET)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LC_RESET::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LC_RESET::ArenaDtor(void* object) {
  LC_RESET* _this = reinterpret_cast< LC_RESET* >(object);
  (void)_this;
}
void LC_RESET::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LC_RESET::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LC_RESET& LC_RESET::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LC_RESET_primary_2eproto.base);
  return *internal_default_instance();
}


void LC_RESET::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LC_RESET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _inner_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LC_RESET::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _inner_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LC_RESET::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LC_RESET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LC_RESET)
  return target;
}

size_t LC_RESET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LC_RESET)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 1;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LC_RESET::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.LC_RESET)
  GOOGLE_DCHECK_NE(&from, this);
  const LC_RESET* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LC_RESET>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.LC_RESET)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.LC_RESET)
    MergeFrom(*source);
  }
}

void LC_RESET::MergeFrom(const LC_RESET& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LC_RESET)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void LC_RESET::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.LC_RESET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_RESET::CopyFrom(const LC_RESET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LC_RESET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_RESET::IsInitialized() const {
  return true;
}

void LC_RESET::InternalSwap(LC_RESET* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_inner_timestamp_, other->_inner_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LC_RESET::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pack::InitAsDefaultInstance() {
}
class Pack::_Internal {
 public:
};

Pack::Pack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bms_hv_jmp_to_blt_(arena),
  bms_lv_jmp_to_blt_(arena),
  steer_version_(arena),
  das_version_(arena),
  hv_version_(arena),
  lv_version_(arena),
  tlm_version_(arena),
  timestamp_(arena),
  ambient_temperature_(arena),
  data_logger_(arena),
  set_tlm_status_(arena),
  tlm_status_(arena),
  steer_system_status_(arena),
  hv_voltage_(arena),
  hv_current_(arena),
  hv_temp_(arena),
  hv_errors_(arena),
  hv_can_forward_(arena),
  hv_fans_override_(arena),
  hv_can_forward_status_(arena),
  hv_fans_override_status_(arena),
  hv_feedbacks_status_(arena),
  hv_imd_status_(arena),
  ts_status_das_(arena),
  ts_status_steer_(arena),
  ts_status_handcart_(arena),
  set_ts_status_das_(arena),
  set_ts_status_handcart_(arena),
  steer_status_(arena),
  set_car_status_(arena),
  set_pedals_range_(arena),
  set_steering_angle_range_(arena),
  car_status_(arena),
  das_errors_(arena),
  lv_current_(arena),
  lv_voltage_(arena),
  lv_total_voltage_(arena),
  lv_temperature_(arena),
  cooling_status_(arena),
  set_radiator_speed_(arena),
  set_pumps_speed_(arena),
  set_inverter_connection_status_(arena),
  inverter_connection_status_(arena),
  lv_errors_(arena),
  shutdown_status_(arena),
  marker_(arena),
  hv_cells_voltage_(arena),
  hv_cells_temp_(arena),
  hv_cell_balancing_status_(arena),
  set_cell_balancing_status_(arena),
  handcart_status_(arena),
  speed_(arena),
  inv_l_request_(arena),
  inv_r_request_(arena),
  inv_l_response_(arena),
  inv_r_response_(arena),
  flash_cellboard_0_tx_(arena),
  flash_cellboard_0_rx_(arena),
  flash_cellboard_1_tx_(arena),
  flash_cellboard_1_rx_(arena),
  flash_cellboard_2_tx_(arena),
  flash_cellboard_2_rx_(arena),
  flash_cellboard_3_tx_(arena),
  flash_cellboard_3_rx_(arena),
  flash_cellboard_4_tx_(arena),
  flash_cellboard_4_rx_(arena),
  flash_cellboard_5_tx_(arena),
  flash_cellboard_5_rx_(arena),
  flash_bms_hv_tx_(arena),
  flash_bms_hv_rx_(arena),
  flash_bms_lv_tx_(arena),
  flash_bms_lv_rx_(arena),
  brusa_nlg5_ctl_(arena),
  brusa_st_(arena),
  brusa_act_i_(arena),
  brusa_act_ii_(arena),
  brusa_temp_(arena),
  brusa_err_(arena),
  control_output_(arena),
  lc_reset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:primary.Pack)
}
Pack::Pack(const Pack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bms_hv_jmp_to_blt_(from.bms_hv_jmp_to_blt_),
      bms_lv_jmp_to_blt_(from.bms_lv_jmp_to_blt_),
      steer_version_(from.steer_version_),
      das_version_(from.das_version_),
      hv_version_(from.hv_version_),
      lv_version_(from.lv_version_),
      tlm_version_(from.tlm_version_),
      timestamp_(from.timestamp_),
      ambient_temperature_(from.ambient_temperature_),
      data_logger_(from.data_logger_),
      set_tlm_status_(from.set_tlm_status_),
      tlm_status_(from.tlm_status_),
      steer_system_status_(from.steer_system_status_),
      hv_voltage_(from.hv_voltage_),
      hv_current_(from.hv_current_),
      hv_temp_(from.hv_temp_),
      hv_errors_(from.hv_errors_),
      hv_can_forward_(from.hv_can_forward_),
      hv_fans_override_(from.hv_fans_override_),
      hv_can_forward_status_(from.hv_can_forward_status_),
      hv_fans_override_status_(from.hv_fans_override_status_),
      hv_feedbacks_status_(from.hv_feedbacks_status_),
      hv_imd_status_(from.hv_imd_status_),
      ts_status_das_(from.ts_status_das_),
      ts_status_steer_(from.ts_status_steer_),
      ts_status_handcart_(from.ts_status_handcart_),
      set_ts_status_das_(from.set_ts_status_das_),
      set_ts_status_handcart_(from.set_ts_status_handcart_),
      steer_status_(from.steer_status_),
      set_car_status_(from.set_car_status_),
      set_pedals_range_(from.set_pedals_range_),
      set_steering_angle_range_(from.set_steering_angle_range_),
      car_status_(from.car_status_),
      das_errors_(from.das_errors_),
      lv_current_(from.lv_current_),
      lv_voltage_(from.lv_voltage_),
      lv_total_voltage_(from.lv_total_voltage_),
      lv_temperature_(from.lv_temperature_),
      cooling_status_(from.cooling_status_),
      set_radiator_speed_(from.set_radiator_speed_),
      set_pumps_speed_(from.set_pumps_speed_),
      set_inverter_connection_status_(from.set_inverter_connection_status_),
      inverter_connection_status_(from.inverter_connection_status_),
      lv_errors_(from.lv_errors_),
      shutdown_status_(from.shutdown_status_),
      marker_(from.marker_),
      hv_cells_voltage_(from.hv_cells_voltage_),
      hv_cells_temp_(from.hv_cells_temp_),
      hv_cell_balancing_status_(from.hv_cell_balancing_status_),
      set_cell_balancing_status_(from.set_cell_balancing_status_),
      handcart_status_(from.handcart_status_),
      speed_(from.speed_),
      inv_l_request_(from.inv_l_request_),
      inv_r_request_(from.inv_r_request_),
      inv_l_response_(from.inv_l_response_),
      inv_r_response_(from.inv_r_response_),
      flash_cellboard_0_tx_(from.flash_cellboard_0_tx_),
      flash_cellboard_0_rx_(from.flash_cellboard_0_rx_),
      flash_cellboard_1_tx_(from.flash_cellboard_1_tx_),
      flash_cellboard_1_rx_(from.flash_cellboard_1_rx_),
      flash_cellboard_2_tx_(from.flash_cellboard_2_tx_),
      flash_cellboard_2_rx_(from.flash_cellboard_2_rx_),
      flash_cellboard_3_tx_(from.flash_cellboard_3_tx_),
      flash_cellboard_3_rx_(from.flash_cellboard_3_rx_),
      flash_cellboard_4_tx_(from.flash_cellboard_4_tx_),
      flash_cellboard_4_rx_(from.flash_cellboard_4_rx_),
      flash_cellboard_5_tx_(from.flash_cellboard_5_tx_),
      flash_cellboard_5_rx_(from.flash_cellboard_5_rx_),
      flash_bms_hv_tx_(from.flash_bms_hv_tx_),
      flash_bms_hv_rx_(from.flash_bms_hv_rx_),
      flash_bms_lv_tx_(from.flash_bms_lv_tx_),
      flash_bms_lv_rx_(from.flash_bms_lv_rx_),
      brusa_nlg5_ctl_(from.brusa_nlg5_ctl_),
      brusa_st_(from.brusa_st_),
      brusa_act_i_(from.brusa_act_i_),
      brusa_act_ii_(from.brusa_act_ii_),
      brusa_temp_(from.brusa_temp_),
      brusa_err_(from.brusa_err_),
      control_output_(from.control_output_),
      lc_reset_(from.lc_reset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:primary.Pack)
}

void Pack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pack_primary_2eproto.base);
}

Pack::~Pack() {
  // @@protoc_insertion_point(destructor:primary.Pack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pack::ArenaDtor(void* object) {
  Pack* _this = reinterpret_cast< Pack* >(object);
  (void)_this;
}
void Pack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pack& Pack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pack_primary_2eproto.base);
  return *internal_default_instance();
}


void Pack::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.Pack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bms_hv_jmp_to_blt_.Clear();
  bms_lv_jmp_to_blt_.Clear();
  steer_version_.Clear();
  das_version_.Clear();
  hv_version_.Clear();
  lv_version_.Clear();
  tlm_version_.Clear();
  timestamp_.Clear();
  ambient_temperature_.Clear();
  data_logger_.Clear();
  set_tlm_status_.Clear();
  tlm_status_.Clear();
  steer_system_status_.Clear();
  hv_voltage_.Clear();
  hv_current_.Clear();
  hv_temp_.Clear();
  hv_errors_.Clear();
  hv_can_forward_.Clear();
  hv_fans_override_.Clear();
  hv_can_forward_status_.Clear();
  hv_fans_override_status_.Clear();
  hv_feedbacks_status_.Clear();
  hv_imd_status_.Clear();
  ts_status_das_.Clear();
  ts_status_steer_.Clear();
  ts_status_handcart_.Clear();
  set_ts_status_das_.Clear();
  set_ts_status_handcart_.Clear();
  steer_status_.Clear();
  set_car_status_.Clear();
  set_pedals_range_.Clear();
  set_steering_angle_range_.Clear();
  car_status_.Clear();
  das_errors_.Clear();
  lv_current_.Clear();
  lv_voltage_.Clear();
  lv_total_voltage_.Clear();
  lv_temperature_.Clear();
  cooling_status_.Clear();
  set_radiator_speed_.Clear();
  set_pumps_speed_.Clear();
  set_inverter_connection_status_.Clear();
  inverter_connection_status_.Clear();
  lv_errors_.Clear();
  shutdown_status_.Clear();
  marker_.Clear();
  hv_cells_voltage_.Clear();
  hv_cells_temp_.Clear();
  hv_cell_balancing_status_.Clear();
  set_cell_balancing_status_.Clear();
  handcart_status_.Clear();
  speed_.Clear();
  inv_l_request_.Clear();
  inv_r_request_.Clear();
  inv_l_response_.Clear();
  inv_r_response_.Clear();
  flash_cellboard_0_tx_.Clear();
  flash_cellboard_0_rx_.Clear();
  flash_cellboard_1_tx_.Clear();
  flash_cellboard_1_rx_.Clear();
  flash_cellboard_2_tx_.Clear();
  flash_cellboard_2_rx_.Clear();
  flash_cellboard_3_tx_.Clear();
  flash_cellboard_3_rx_.Clear();
  flash_cellboard_4_tx_.Clear();
  flash_cellboard_4_rx_.Clear();
  flash_cellboard_5_tx_.Clear();
  flash_cellboard_5_rx_.Clear();
  flash_bms_hv_tx_.Clear();
  flash_bms_hv_rx_.Clear();
  flash_bms_lv_tx_.Clear();
  flash_bms_lv_rx_.Clear();
  brusa_nlg5_ctl_.Clear();
  brusa_st_.Clear();
  brusa_act_i_.Clear();
  brusa_act_ii_.Clear();
  brusa_temp_.Clear();
  brusa_err_.Clear();
  control_output_.Clear();
  lc_reset_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .primary.BMS_HV_JMP_TO_BLT BMS_HV_JMP_TO_BLT = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bms_hv_jmp_to_blt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.BMS_LV_JMP_TO_BLT BMS_LV_JMP_TO_BLT = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bms_lv_jmp_to_blt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.STEER_VERSION STEER_VERSION = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steer_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.DAS_VERSION DAS_VERSION = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_das_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_VERSION HV_VERSION = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.LV_VERSION LV_VERSION = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lv_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.TLM_VERSION TLM_VERSION = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlm_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.TIMESTAMP TIMESTAMP = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timestamp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.AMBIENT_TEMPERATURE AMBIENT_TEMPERATURE = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ambient_temperature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.DATA_LOGGER DATA_LOGGER = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_logger(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_TLM_STATUS SET_TLM_STATUS = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_set_tlm_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.TLM_STATUS TLM_STATUS = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlm_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.STEER_SYSTEM_STATUS STEER_SYSTEM_STATUS = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steer_system_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_VOLTAGE HV_VOLTAGE = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_CURRENT HV_CURRENT = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hv_current(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_TEMP HV_TEMP = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_temp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_ERRORS HV_ERRORS = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_CAN_FORWARD HV_CAN_FORWARD = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_can_forward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_FANS_OVERRIDE HV_FANS_OVERRIDE = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_fans_override(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_CAN_FORWARD_STATUS HV_CAN_FORWARD_STATUS = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_can_forward_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_FANS_OVERRIDE_STATUS HV_FANS_OVERRIDE_STATUS = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_fans_override_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_FEEDBACKS_STATUS HV_FEEDBACKS_STATUS = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_feedbacks_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_IMD_STATUS HV_IMD_STATUS = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_imd_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.TS_STATUS_DAS TS_STATUS_DAS = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ts_status_das(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.TS_STATUS_STEER TS_STATUS_STEER = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ts_status_steer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.TS_STATUS_HANDCART TS_STATUS_HANDCART = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ts_status_handcart(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_TS_STATUS_DAS SET_TS_STATUS_DAS = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_ts_status_das(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_TS_STATUS_HANDCART SET_TS_STATUS_HANDCART = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_ts_status_handcart(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.STEER_STATUS STEER_STATUS = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_steer_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_CAR_STATUS SET_CAR_STATUS = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_car_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_PEDALS_RANGE SET_PEDALS_RANGE = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_pedals_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_STEERING_ANGLE_RANGE SET_STEERING_ANGLE_RANGE = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_steering_angle_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.CAR_STATUS CAR_STATUS = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_car_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.DAS_ERRORS DAS_ERRORS = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_das_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.LV_CURRENT LV_CURRENT = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_current(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.LV_VOLTAGE LV_VOLTAGE = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.LV_TOTAL_VOLTAGE LV_TOTAL_VOLTAGE = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_total_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<298>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.LV_TEMPERATURE LV_TEMPERATURE = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_temperature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.COOLING_STATUS COOLING_STATUS = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cooling_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_RADIATOR_SPEED SET_RADIATOR_SPEED = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_radiator_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_PUMPS_SPEED SET_PUMPS_SPEED = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_pumps_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_INVERTER_CONNECTION_STATUS SET_INVERTER_CONNECTION_STATUS = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_inverter_connection_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.INVERTER_CONNECTION_STATUS INVERTER_CONNECTION_STATUS = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inverter_connection_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.LV_ERRORS LV_ERRORS = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lv_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SHUTDOWN_STATUS SHUTDOWN_STATUS = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shutdown_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.MARKER MARKER = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<370>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_CELLS_VOLTAGE HV_CELLS_VOLTAGE = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cells_voltage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_CELLS_TEMP HV_CELLS_TEMP = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cells_temp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HV_CELL_BALANCING_STATUS HV_CELL_BALANCING_STATUS = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hv_cell_balancing_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SET_CELL_BALANCING_STATUS SET_CELL_BALANCING_STATUS = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_set_cell_balancing_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.HANDCART_STATUS HANDCART_STATUS = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_handcart_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.SPEED SPEED = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<418>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.INV_L_REQUEST INV_L_REQUEST = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_l_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<426>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.INV_R_REQUEST INV_R_REQUEST = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_r_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.INV_L_RESPONSE INV_L_RESPONSE = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_l_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.INV_R_RESPONSE INV_R_RESPONSE = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inv_r_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<450>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_0_TX FLASH_CELLBOARD_0_TX = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_0_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_0_RX FLASH_CELLBOARD_0_RX = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_0_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_1_TX FLASH_CELLBOARD_1_TX = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_1_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<474>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_1_RX FLASH_CELLBOARD_1_RX = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_1_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_2_TX FLASH_CELLBOARD_2_TX = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_2_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<490>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_2_RX FLASH_CELLBOARD_2_RX = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_2_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_3_TX FLASH_CELLBOARD_3_TX = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_3_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<506>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_3_RX FLASH_CELLBOARD_3_RX = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_3_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<514>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_4_TX FLASH_CELLBOARD_4_TX = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_4_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<522>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_4_RX FLASH_CELLBOARD_4_RX = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_4_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<530>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_5_TX FLASH_CELLBOARD_5_TX = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_5_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<538>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_CELLBOARD_5_RX FLASH_CELLBOARD_5_RX = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_cellboard_5_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<546>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_BMS_HV_TX FLASH_BMS_HV_TX = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_bms_hv_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<554>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_BMS_HV_RX FLASH_BMS_HV_RX = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_bms_hv_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_BMS_LV_TX FLASH_BMS_LV_TX = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_bms_lv_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<570>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.FLASH_BMS_LV_RX FLASH_BMS_LV_RX = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flash_bms_lv_rx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<578>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.BRUSA_NLG5_CTL BRUSA_NLG5_CTL = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brusa_nlg5_ctl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<586>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.BRUSA_ST BRUSA_ST = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brusa_st(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<594>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.BRUSA_ACT_I BRUSA_ACT_I = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brusa_act_i(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<602>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.BRUSA_ACT_II BRUSA_ACT_II = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brusa_act_ii(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<610>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.BRUSA_TEMP BRUSA_TEMP = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brusa_temp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<618>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.BRUSA_ERR BRUSA_ERR = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_brusa_err(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<626>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.CONTROL_OUTPUT CONTROL_OUTPUT = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_control_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<634>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .primary.LC_RESET LC_RESET = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lc_reset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<642>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.Pack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .primary.BMS_HV_JMP_TO_BLT BMS_HV_JMP_TO_BLT = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bms_hv_jmp_to_blt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bms_hv_jmp_to_blt(i), target, stream);
  }

  // repeated .primary.BMS_LV_JMP_TO_BLT BMS_LV_JMP_TO_BLT = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bms_lv_jmp_to_blt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bms_lv_jmp_to_blt(i), target, stream);
  }

  // repeated .primary.STEER_VERSION STEER_VERSION = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steer_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_steer_version(i), target, stream);
  }

  // repeated .primary.DAS_VERSION DAS_VERSION = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_das_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_das_version(i), target, stream);
  }

  // repeated .primary.HV_VERSION HV_VERSION = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_hv_version(i), target, stream);
  }

  // repeated .primary.LV_VERSION LV_VERSION = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_lv_version(i), target, stream);
  }

  // repeated .primary.TLM_VERSION TLM_VERSION = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlm_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tlm_version(i), target, stream);
  }

  // repeated .primary.TIMESTAMP TIMESTAMP = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timestamp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_timestamp(i), target, stream);
  }

  // repeated .primary.AMBIENT_TEMPERATURE AMBIENT_TEMPERATURE = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ambient_temperature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_ambient_temperature(i), target, stream);
  }

  // repeated .primary.DATA_LOGGER DATA_LOGGER = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_logger_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_data_logger(i), target, stream);
  }

  // repeated .primary.SET_TLM_STATUS SET_TLM_STATUS = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_tlm_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_set_tlm_status(i), target, stream);
  }

  // repeated .primary.TLM_STATUS TLM_STATUS = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlm_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_tlm_status(i), target, stream);
  }

  // repeated .primary.STEER_SYSTEM_STATUS STEER_SYSTEM_STATUS = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steer_system_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_steer_system_status(i), target, stream);
  }

  // repeated .primary.HV_VOLTAGE HV_VOLTAGE = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_voltage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_hv_voltage(i), target, stream);
  }

  // repeated .primary.HV_CURRENT HV_CURRENT = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_current_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_hv_current(i), target, stream);
  }

  // repeated .primary.HV_TEMP HV_TEMP = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_temp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_hv_temp(i), target, stream);
  }

  // repeated .primary.HV_ERRORS HV_ERRORS = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_hv_errors(i), target, stream);
  }

  // repeated .primary.HV_CAN_FORWARD HV_CAN_FORWARD = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_can_forward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_hv_can_forward(i), target, stream);
  }

  // repeated .primary.HV_FANS_OVERRIDE HV_FANS_OVERRIDE = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_fans_override_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_hv_fans_override(i), target, stream);
  }

  // repeated .primary.HV_CAN_FORWARD_STATUS HV_CAN_FORWARD_STATUS = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_can_forward_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_hv_can_forward_status(i), target, stream);
  }

  // repeated .primary.HV_FANS_OVERRIDE_STATUS HV_FANS_OVERRIDE_STATUS = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_fans_override_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_hv_fans_override_status(i), target, stream);
  }

  // repeated .primary.HV_FEEDBACKS_STATUS HV_FEEDBACKS_STATUS = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_feedbacks_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_hv_feedbacks_status(i), target, stream);
  }

  // repeated .primary.HV_IMD_STATUS HV_IMD_STATUS = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_imd_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_hv_imd_status(i), target, stream);
  }

  // repeated .primary.TS_STATUS_DAS TS_STATUS_DAS = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ts_status_das_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_ts_status_das(i), target, stream);
  }

  // repeated .primary.TS_STATUS_STEER TS_STATUS_STEER = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ts_status_steer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_ts_status_steer(i), target, stream);
  }

  // repeated .primary.TS_STATUS_HANDCART TS_STATUS_HANDCART = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ts_status_handcart_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_ts_status_handcart(i), target, stream);
  }

  // repeated .primary.SET_TS_STATUS_DAS SET_TS_STATUS_DAS = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_ts_status_das_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_set_ts_status_das(i), target, stream);
  }

  // repeated .primary.SET_TS_STATUS_HANDCART SET_TS_STATUS_HANDCART = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_ts_status_handcart_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_set_ts_status_handcart(i), target, stream);
  }

  // repeated .primary.STEER_STATUS STEER_STATUS = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steer_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_steer_status(i), target, stream);
  }

  // repeated .primary.SET_CAR_STATUS SET_CAR_STATUS = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_car_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_set_car_status(i), target, stream);
  }

  // repeated .primary.SET_PEDALS_RANGE SET_PEDALS_RANGE = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_pedals_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_set_pedals_range(i), target, stream);
  }

  // repeated .primary.SET_STEERING_ANGLE_RANGE SET_STEERING_ANGLE_RANGE = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_steering_angle_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_set_steering_angle_range(i), target, stream);
  }

  // repeated .primary.CAR_STATUS CAR_STATUS = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_car_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_car_status(i), target, stream);
  }

  // repeated .primary.DAS_ERRORS DAS_ERRORS = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_das_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_das_errors(i), target, stream);
  }

  // repeated .primary.LV_CURRENT LV_CURRENT = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_current_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_lv_current(i), target, stream);
  }

  // repeated .primary.LV_VOLTAGE LV_VOLTAGE = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_voltage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_lv_voltage(i), target, stream);
  }

  // repeated .primary.LV_TOTAL_VOLTAGE LV_TOTAL_VOLTAGE = 37;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_total_voltage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, this->_internal_lv_total_voltage(i), target, stream);
  }

  // repeated .primary.LV_TEMPERATURE LV_TEMPERATURE = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_temperature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, this->_internal_lv_temperature(i), target, stream);
  }

  // repeated .primary.COOLING_STATUS COOLING_STATUS = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cooling_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, this->_internal_cooling_status(i), target, stream);
  }

  // repeated .primary.SET_RADIATOR_SPEED SET_RADIATOR_SPEED = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_radiator_speed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_set_radiator_speed(i), target, stream);
  }

  // repeated .primary.SET_PUMPS_SPEED SET_PUMPS_SPEED = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_pumps_speed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, this->_internal_set_pumps_speed(i), target, stream);
  }

  // repeated .primary.SET_INVERTER_CONNECTION_STATUS SET_INVERTER_CONNECTION_STATUS = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_inverter_connection_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, this->_internal_set_inverter_connection_status(i), target, stream);
  }

  // repeated .primary.INVERTER_CONNECTION_STATUS INVERTER_CONNECTION_STATUS = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inverter_connection_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_inverter_connection_status(i), target, stream);
  }

  // repeated .primary.LV_ERRORS LV_ERRORS = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lv_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, this->_internal_lv_errors(i), target, stream);
  }

  // repeated .primary.SHUTDOWN_STATUS SHUTDOWN_STATUS = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shutdown_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, this->_internal_shutdown_status(i), target, stream);
  }

  // repeated .primary.MARKER MARKER = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marker_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, this->_internal_marker(i), target, stream);
  }

  // repeated .primary.HV_CELLS_VOLTAGE HV_CELLS_VOLTAGE = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_cells_voltage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, this->_internal_hv_cells_voltage(i), target, stream);
  }

  // repeated .primary.HV_CELLS_TEMP HV_CELLS_TEMP = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_cells_temp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_hv_cells_temp(i), target, stream);
  }

  // repeated .primary.HV_CELL_BALANCING_STATUS HV_CELL_BALANCING_STATUS = 49;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hv_cell_balancing_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, this->_internal_hv_cell_balancing_status(i), target, stream);
  }

  // repeated .primary.SET_CELL_BALANCING_STATUS SET_CELL_BALANCING_STATUS = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_cell_balancing_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_set_cell_balancing_status(i), target, stream);
  }

  // repeated .primary.HANDCART_STATUS HANDCART_STATUS = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_handcart_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, this->_internal_handcart_status(i), target, stream);
  }

  // repeated .primary.SPEED SPEED = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, this->_internal_speed(i), target, stream);
  }

  // repeated .primary.INV_L_REQUEST INV_L_REQUEST = 53;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inv_l_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, this->_internal_inv_l_request(i), target, stream);
  }

  // repeated .primary.INV_R_REQUEST INV_R_REQUEST = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inv_r_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, this->_internal_inv_r_request(i), target, stream);
  }

  // repeated .primary.INV_L_RESPONSE INV_L_RESPONSE = 55;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inv_l_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, this->_internal_inv_l_response(i), target, stream);
  }

  // repeated .primary.INV_R_RESPONSE INV_R_RESPONSE = 56;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inv_r_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, this->_internal_inv_r_response(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_0_TX FLASH_CELLBOARD_0_TX = 57;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_0_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, this->_internal_flash_cellboard_0_tx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_0_RX FLASH_CELLBOARD_0_RX = 58;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_0_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, this->_internal_flash_cellboard_0_rx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_1_TX FLASH_CELLBOARD_1_TX = 59;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_1_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, this->_internal_flash_cellboard_1_tx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_1_RX FLASH_CELLBOARD_1_RX = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_1_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, this->_internal_flash_cellboard_1_rx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_2_TX FLASH_CELLBOARD_2_TX = 61;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_2_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, this->_internal_flash_cellboard_2_tx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_2_RX FLASH_CELLBOARD_2_RX = 62;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_2_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, this->_internal_flash_cellboard_2_rx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_3_TX FLASH_CELLBOARD_3_TX = 63;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_3_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, this->_internal_flash_cellboard_3_tx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_3_RX FLASH_CELLBOARD_3_RX = 64;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_3_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, this->_internal_flash_cellboard_3_rx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_4_TX FLASH_CELLBOARD_4_TX = 65;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_4_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, this->_internal_flash_cellboard_4_tx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_4_RX FLASH_CELLBOARD_4_RX = 66;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_4_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, this->_internal_flash_cellboard_4_rx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_5_TX FLASH_CELLBOARD_5_TX = 67;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_5_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, this->_internal_flash_cellboard_5_tx(i), target, stream);
  }

  // repeated .primary.FLASH_CELLBOARD_5_RX FLASH_CELLBOARD_5_RX = 68;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_cellboard_5_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, this->_internal_flash_cellboard_5_rx(i), target, stream);
  }

  // repeated .primary.FLASH_BMS_HV_TX FLASH_BMS_HV_TX = 69;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_bms_hv_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, this->_internal_flash_bms_hv_tx(i), target, stream);
  }

  // repeated .primary.FLASH_BMS_HV_RX FLASH_BMS_HV_RX = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_bms_hv_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, this->_internal_flash_bms_hv_rx(i), target, stream);
  }

  // repeated .primary.FLASH_BMS_LV_TX FLASH_BMS_LV_TX = 71;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_bms_lv_tx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, this->_internal_flash_bms_lv_tx(i), target, stream);
  }

  // repeated .primary.FLASH_BMS_LV_RX FLASH_BMS_LV_RX = 72;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flash_bms_lv_rx_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, this->_internal_flash_bms_lv_rx(i), target, stream);
  }

  // repeated .primary.BRUSA_NLG5_CTL BRUSA_NLG5_CTL = 73;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brusa_nlg5_ctl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(73, this->_internal_brusa_nlg5_ctl(i), target, stream);
  }

  // repeated .primary.BRUSA_ST BRUSA_ST = 74;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brusa_st_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, this->_internal_brusa_st(i), target, stream);
  }

  // repeated .primary.BRUSA_ACT_I BRUSA_ACT_I = 75;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brusa_act_i_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, this->_internal_brusa_act_i(i), target, stream);
  }

  // repeated .primary.BRUSA_ACT_II BRUSA_ACT_II = 76;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brusa_act_ii_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, this->_internal_brusa_act_ii(i), target, stream);
  }

  // repeated .primary.BRUSA_TEMP BRUSA_TEMP = 77;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brusa_temp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, this->_internal_brusa_temp(i), target, stream);
  }

  // repeated .primary.BRUSA_ERR BRUSA_ERR = 78;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brusa_err_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, this->_internal_brusa_err(i), target, stream);
  }

  // repeated .primary.CONTROL_OUTPUT CONTROL_OUTPUT = 79;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, this->_internal_control_output(i), target, stream);
  }

  // repeated .primary.LC_RESET LC_RESET = 80;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lc_reset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, this->_internal_lc_reset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.Pack)
  return target;
}

size_t Pack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.Pack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .primary.BMS_HV_JMP_TO_BLT BMS_HV_JMP_TO_BLT = 1;
  total_size += 1UL * this->_internal_bms_hv_jmp_to_blt_size();
  for (const auto& msg : this->bms_hv_jmp_to_blt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.BMS_LV_JMP_TO_BLT BMS_LV_JMP_TO_BLT = 2;
  total_size += 1UL * this->_internal_bms_lv_jmp_to_blt_size();
  for (const auto& msg : this->bms_lv_jmp_to_blt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.STEER_VERSION STEER_VERSION = 3;
  total_size += 1UL * this->_internal_steer_version_size();
  for (const auto& msg : this->steer_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.DAS_VERSION DAS_VERSION = 4;
  total_size += 1UL * this->_internal_das_version_size();
  for (const auto& msg : this->das_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_VERSION HV_VERSION = 5;
  total_size += 1UL * this->_internal_hv_version_size();
  for (const auto& msg : this->hv_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_VERSION LV_VERSION = 6;
  total_size += 1UL * this->_internal_lv_version_size();
  for (const auto& msg : this->lv_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TLM_VERSION TLM_VERSION = 7;
  total_size += 1UL * this->_internal_tlm_version_size();
  for (const auto& msg : this->tlm_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TIMESTAMP TIMESTAMP = 8;
  total_size += 1UL * this->_internal_timestamp_size();
  for (const auto& msg : this->timestamp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.AMBIENT_TEMPERATURE AMBIENT_TEMPERATURE = 9;
  total_size += 1UL * this->_internal_ambient_temperature_size();
  for (const auto& msg : this->ambient_temperature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.DATA_LOGGER DATA_LOGGER = 10;
  total_size += 1UL * this->_internal_data_logger_size();
  for (const auto& msg : this->data_logger_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_TLM_STATUS SET_TLM_STATUS = 11;
  total_size += 1UL * this->_internal_set_tlm_status_size();
  for (const auto& msg : this->set_tlm_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TLM_STATUS TLM_STATUS = 12;
  total_size += 1UL * this->_internal_tlm_status_size();
  for (const auto& msg : this->tlm_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.STEER_SYSTEM_STATUS STEER_SYSTEM_STATUS = 13;
  total_size += 1UL * this->_internal_steer_system_status_size();
  for (const auto& msg : this->steer_system_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_VOLTAGE HV_VOLTAGE = 14;
  total_size += 1UL * this->_internal_hv_voltage_size();
  for (const auto& msg : this->hv_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CURRENT HV_CURRENT = 15;
  total_size += 1UL * this->_internal_hv_current_size();
  for (const auto& msg : this->hv_current_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_TEMP HV_TEMP = 16;
  total_size += 2UL * this->_internal_hv_temp_size();
  for (const auto& msg : this->hv_temp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_ERRORS HV_ERRORS = 17;
  total_size += 2UL * this->_internal_hv_errors_size();
  for (const auto& msg : this->hv_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CAN_FORWARD HV_CAN_FORWARD = 18;
  total_size += 2UL * this->_internal_hv_can_forward_size();
  for (const auto& msg : this->hv_can_forward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_FANS_OVERRIDE HV_FANS_OVERRIDE = 19;
  total_size += 2UL * this->_internal_hv_fans_override_size();
  for (const auto& msg : this->hv_fans_override_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CAN_FORWARD_STATUS HV_CAN_FORWARD_STATUS = 20;
  total_size += 2UL * this->_internal_hv_can_forward_status_size();
  for (const auto& msg : this->hv_can_forward_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_FANS_OVERRIDE_STATUS HV_FANS_OVERRIDE_STATUS = 21;
  total_size += 2UL * this->_internal_hv_fans_override_status_size();
  for (const auto& msg : this->hv_fans_override_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_FEEDBACKS_STATUS HV_FEEDBACKS_STATUS = 22;
  total_size += 2UL * this->_internal_hv_feedbacks_status_size();
  for (const auto& msg : this->hv_feedbacks_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_IMD_STATUS HV_IMD_STATUS = 23;
  total_size += 2UL * this->_internal_hv_imd_status_size();
  for (const auto& msg : this->hv_imd_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TS_STATUS_DAS TS_STATUS_DAS = 24;
  total_size += 2UL * this->_internal_ts_status_das_size();
  for (const auto& msg : this->ts_status_das_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TS_STATUS_STEER TS_STATUS_STEER = 25;
  total_size += 2UL * this->_internal_ts_status_steer_size();
  for (const auto& msg : this->ts_status_steer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.TS_STATUS_HANDCART TS_STATUS_HANDCART = 26;
  total_size += 2UL * this->_internal_ts_status_handcart_size();
  for (const auto& msg : this->ts_status_handcart_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_TS_STATUS_DAS SET_TS_STATUS_DAS = 27;
  total_size += 2UL * this->_internal_set_ts_status_das_size();
  for (const auto& msg : this->set_ts_status_das_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_TS_STATUS_HANDCART SET_TS_STATUS_HANDCART = 28;
  total_size += 2UL * this->_internal_set_ts_status_handcart_size();
  for (const auto& msg : this->set_ts_status_handcart_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.STEER_STATUS STEER_STATUS = 29;
  total_size += 2UL * this->_internal_steer_status_size();
  for (const auto& msg : this->steer_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_CAR_STATUS SET_CAR_STATUS = 30;
  total_size += 2UL * this->_internal_set_car_status_size();
  for (const auto& msg : this->set_car_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_PEDALS_RANGE SET_PEDALS_RANGE = 31;
  total_size += 2UL * this->_internal_set_pedals_range_size();
  for (const auto& msg : this->set_pedals_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_STEERING_ANGLE_RANGE SET_STEERING_ANGLE_RANGE = 32;
  total_size += 2UL * this->_internal_set_steering_angle_range_size();
  for (const auto& msg : this->set_steering_angle_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.CAR_STATUS CAR_STATUS = 33;
  total_size += 2UL * this->_internal_car_status_size();
  for (const auto& msg : this->car_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.DAS_ERRORS DAS_ERRORS = 34;
  total_size += 2UL * this->_internal_das_errors_size();
  for (const auto& msg : this->das_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_CURRENT LV_CURRENT = 35;
  total_size += 2UL * this->_internal_lv_current_size();
  for (const auto& msg : this->lv_current_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_VOLTAGE LV_VOLTAGE = 36;
  total_size += 2UL * this->_internal_lv_voltage_size();
  for (const auto& msg : this->lv_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_TOTAL_VOLTAGE LV_TOTAL_VOLTAGE = 37;
  total_size += 2UL * this->_internal_lv_total_voltage_size();
  for (const auto& msg : this->lv_total_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_TEMPERATURE LV_TEMPERATURE = 38;
  total_size += 2UL * this->_internal_lv_temperature_size();
  for (const auto& msg : this->lv_temperature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.COOLING_STATUS COOLING_STATUS = 39;
  total_size += 2UL * this->_internal_cooling_status_size();
  for (const auto& msg : this->cooling_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_RADIATOR_SPEED SET_RADIATOR_SPEED = 40;
  total_size += 2UL * this->_internal_set_radiator_speed_size();
  for (const auto& msg : this->set_radiator_speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_PUMPS_SPEED SET_PUMPS_SPEED = 41;
  total_size += 2UL * this->_internal_set_pumps_speed_size();
  for (const auto& msg : this->set_pumps_speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_INVERTER_CONNECTION_STATUS SET_INVERTER_CONNECTION_STATUS = 42;
  total_size += 2UL * this->_internal_set_inverter_connection_status_size();
  for (const auto& msg : this->set_inverter_connection_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.INVERTER_CONNECTION_STATUS INVERTER_CONNECTION_STATUS = 43;
  total_size += 2UL * this->_internal_inverter_connection_status_size();
  for (const auto& msg : this->inverter_connection_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LV_ERRORS LV_ERRORS = 44;
  total_size += 2UL * this->_internal_lv_errors_size();
  for (const auto& msg : this->lv_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SHUTDOWN_STATUS SHUTDOWN_STATUS = 45;
  total_size += 2UL * this->_internal_shutdown_status_size();
  for (const auto& msg : this->shutdown_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.MARKER MARKER = 46;
  total_size += 2UL * this->_internal_marker_size();
  for (const auto& msg : this->marker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CELLS_VOLTAGE HV_CELLS_VOLTAGE = 47;
  total_size += 2UL * this->_internal_hv_cells_voltage_size();
  for (const auto& msg : this->hv_cells_voltage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CELLS_TEMP HV_CELLS_TEMP = 48;
  total_size += 2UL * this->_internal_hv_cells_temp_size();
  for (const auto& msg : this->hv_cells_temp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HV_CELL_BALANCING_STATUS HV_CELL_BALANCING_STATUS = 49;
  total_size += 2UL * this->_internal_hv_cell_balancing_status_size();
  for (const auto& msg : this->hv_cell_balancing_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SET_CELL_BALANCING_STATUS SET_CELL_BALANCING_STATUS = 50;
  total_size += 2UL * this->_internal_set_cell_balancing_status_size();
  for (const auto& msg : this->set_cell_balancing_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.HANDCART_STATUS HANDCART_STATUS = 51;
  total_size += 2UL * this->_internal_handcart_status_size();
  for (const auto& msg : this->handcart_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.SPEED SPEED = 52;
  total_size += 2UL * this->_internal_speed_size();
  for (const auto& msg : this->speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.INV_L_REQUEST INV_L_REQUEST = 53;
  total_size += 2UL * this->_internal_inv_l_request_size();
  for (const auto& msg : this->inv_l_request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.INV_R_REQUEST INV_R_REQUEST = 54;
  total_size += 2UL * this->_internal_inv_r_request_size();
  for (const auto& msg : this->inv_r_request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.INV_L_RESPONSE INV_L_RESPONSE = 55;
  total_size += 2UL * this->_internal_inv_l_response_size();
  for (const auto& msg : this->inv_l_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.INV_R_RESPONSE INV_R_RESPONSE = 56;
  total_size += 2UL * this->_internal_inv_r_response_size();
  for (const auto& msg : this->inv_r_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_0_TX FLASH_CELLBOARD_0_TX = 57;
  total_size += 2UL * this->_internal_flash_cellboard_0_tx_size();
  for (const auto& msg : this->flash_cellboard_0_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_0_RX FLASH_CELLBOARD_0_RX = 58;
  total_size += 2UL * this->_internal_flash_cellboard_0_rx_size();
  for (const auto& msg : this->flash_cellboard_0_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_1_TX FLASH_CELLBOARD_1_TX = 59;
  total_size += 2UL * this->_internal_flash_cellboard_1_tx_size();
  for (const auto& msg : this->flash_cellboard_1_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_1_RX FLASH_CELLBOARD_1_RX = 60;
  total_size += 2UL * this->_internal_flash_cellboard_1_rx_size();
  for (const auto& msg : this->flash_cellboard_1_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_2_TX FLASH_CELLBOARD_2_TX = 61;
  total_size += 2UL * this->_internal_flash_cellboard_2_tx_size();
  for (const auto& msg : this->flash_cellboard_2_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_2_RX FLASH_CELLBOARD_2_RX = 62;
  total_size += 2UL * this->_internal_flash_cellboard_2_rx_size();
  for (const auto& msg : this->flash_cellboard_2_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_3_TX FLASH_CELLBOARD_3_TX = 63;
  total_size += 2UL * this->_internal_flash_cellboard_3_tx_size();
  for (const auto& msg : this->flash_cellboard_3_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_3_RX FLASH_CELLBOARD_3_RX = 64;
  total_size += 2UL * this->_internal_flash_cellboard_3_rx_size();
  for (const auto& msg : this->flash_cellboard_3_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_4_TX FLASH_CELLBOARD_4_TX = 65;
  total_size += 2UL * this->_internal_flash_cellboard_4_tx_size();
  for (const auto& msg : this->flash_cellboard_4_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_4_RX FLASH_CELLBOARD_4_RX = 66;
  total_size += 2UL * this->_internal_flash_cellboard_4_rx_size();
  for (const auto& msg : this->flash_cellboard_4_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_5_TX FLASH_CELLBOARD_5_TX = 67;
  total_size += 2UL * this->_internal_flash_cellboard_5_tx_size();
  for (const auto& msg : this->flash_cellboard_5_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_CELLBOARD_5_RX FLASH_CELLBOARD_5_RX = 68;
  total_size += 2UL * this->_internal_flash_cellboard_5_rx_size();
  for (const auto& msg : this->flash_cellboard_5_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_BMS_HV_TX FLASH_BMS_HV_TX = 69;
  total_size += 2UL * this->_internal_flash_bms_hv_tx_size();
  for (const auto& msg : this->flash_bms_hv_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_BMS_HV_RX FLASH_BMS_HV_RX = 70;
  total_size += 2UL * this->_internal_flash_bms_hv_rx_size();
  for (const auto& msg : this->flash_bms_hv_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_BMS_LV_TX FLASH_BMS_LV_TX = 71;
  total_size += 2UL * this->_internal_flash_bms_lv_tx_size();
  for (const auto& msg : this->flash_bms_lv_tx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.FLASH_BMS_LV_RX FLASH_BMS_LV_RX = 72;
  total_size += 2UL * this->_internal_flash_bms_lv_rx_size();
  for (const auto& msg : this->flash_bms_lv_rx_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.BRUSA_NLG5_CTL BRUSA_NLG5_CTL = 73;
  total_size += 2UL * this->_internal_brusa_nlg5_ctl_size();
  for (const auto& msg : this->brusa_nlg5_ctl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.BRUSA_ST BRUSA_ST = 74;
  total_size += 2UL * this->_internal_brusa_st_size();
  for (const auto& msg : this->brusa_st_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.BRUSA_ACT_I BRUSA_ACT_I = 75;
  total_size += 2UL * this->_internal_brusa_act_i_size();
  for (const auto& msg : this->brusa_act_i_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.BRUSA_ACT_II BRUSA_ACT_II = 76;
  total_size += 2UL * this->_internal_brusa_act_ii_size();
  for (const auto& msg : this->brusa_act_ii_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.BRUSA_TEMP BRUSA_TEMP = 77;
  total_size += 2UL * this->_internal_brusa_temp_size();
  for (const auto& msg : this->brusa_temp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.BRUSA_ERR BRUSA_ERR = 78;
  total_size += 2UL * this->_internal_brusa_err_size();
  for (const auto& msg : this->brusa_err_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.CONTROL_OUTPUT CONTROL_OUTPUT = 79;
  total_size += 2UL * this->_internal_control_output_size();
  for (const auto& msg : this->control_output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .primary.LC_RESET LC_RESET = 80;
  total_size += 2UL * this->_internal_lc_reset_size();
  for (const auto& msg : this->lc_reset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:primary.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  const Pack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:primary.Pack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:primary.Pack)
    MergeFrom(*source);
  }
}

void Pack::MergeFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bms_hv_jmp_to_blt_.MergeFrom(from.bms_hv_jmp_to_blt_);
  bms_lv_jmp_to_blt_.MergeFrom(from.bms_lv_jmp_to_blt_);
  steer_version_.MergeFrom(from.steer_version_);
  das_version_.MergeFrom(from.das_version_);
  hv_version_.MergeFrom(from.hv_version_);
  lv_version_.MergeFrom(from.lv_version_);
  tlm_version_.MergeFrom(from.tlm_version_);
  timestamp_.MergeFrom(from.timestamp_);
  ambient_temperature_.MergeFrom(from.ambient_temperature_);
  data_logger_.MergeFrom(from.data_logger_);
  set_tlm_status_.MergeFrom(from.set_tlm_status_);
  tlm_status_.MergeFrom(from.tlm_status_);
  steer_system_status_.MergeFrom(from.steer_system_status_);
  hv_voltage_.MergeFrom(from.hv_voltage_);
  hv_current_.MergeFrom(from.hv_current_);
  hv_temp_.MergeFrom(from.hv_temp_);
  hv_errors_.MergeFrom(from.hv_errors_);
  hv_can_forward_.MergeFrom(from.hv_can_forward_);
  hv_fans_override_.MergeFrom(from.hv_fans_override_);
  hv_can_forward_status_.MergeFrom(from.hv_can_forward_status_);
  hv_fans_override_status_.MergeFrom(from.hv_fans_override_status_);
  hv_feedbacks_status_.MergeFrom(from.hv_feedbacks_status_);
  hv_imd_status_.MergeFrom(from.hv_imd_status_);
  ts_status_das_.MergeFrom(from.ts_status_das_);
  ts_status_steer_.MergeFrom(from.ts_status_steer_);
  ts_status_handcart_.MergeFrom(from.ts_status_handcart_);
  set_ts_status_das_.MergeFrom(from.set_ts_status_das_);
  set_ts_status_handcart_.MergeFrom(from.set_ts_status_handcart_);
  steer_status_.MergeFrom(from.steer_status_);
  set_car_status_.MergeFrom(from.set_car_status_);
  set_pedals_range_.MergeFrom(from.set_pedals_range_);
  set_steering_angle_range_.MergeFrom(from.set_steering_angle_range_);
  car_status_.MergeFrom(from.car_status_);
  das_errors_.MergeFrom(from.das_errors_);
  lv_current_.MergeFrom(from.lv_current_);
  lv_voltage_.MergeFrom(from.lv_voltage_);
  lv_total_voltage_.MergeFrom(from.lv_total_voltage_);
  lv_temperature_.MergeFrom(from.lv_temperature_);
  cooling_status_.MergeFrom(from.cooling_status_);
  set_radiator_speed_.MergeFrom(from.set_radiator_speed_);
  set_pumps_speed_.MergeFrom(from.set_pumps_speed_);
  set_inverter_connection_status_.MergeFrom(from.set_inverter_connection_status_);
  inverter_connection_status_.MergeFrom(from.inverter_connection_status_);
  lv_errors_.MergeFrom(from.lv_errors_);
  shutdown_status_.MergeFrom(from.shutdown_status_);
  marker_.MergeFrom(from.marker_);
  hv_cells_voltage_.MergeFrom(from.hv_cells_voltage_);
  hv_cells_temp_.MergeFrom(from.hv_cells_temp_);
  hv_cell_balancing_status_.MergeFrom(from.hv_cell_balancing_status_);
  set_cell_balancing_status_.MergeFrom(from.set_cell_balancing_status_);
  handcart_status_.MergeFrom(from.handcart_status_);
  speed_.MergeFrom(from.speed_);
  inv_l_request_.MergeFrom(from.inv_l_request_);
  inv_r_request_.MergeFrom(from.inv_r_request_);
  inv_l_response_.MergeFrom(from.inv_l_response_);
  inv_r_response_.MergeFrom(from.inv_r_response_);
  flash_cellboard_0_tx_.MergeFrom(from.flash_cellboard_0_tx_);
  flash_cellboard_0_rx_.MergeFrom(from.flash_cellboard_0_rx_);
  flash_cellboard_1_tx_.MergeFrom(from.flash_cellboard_1_tx_);
  flash_cellboard_1_rx_.MergeFrom(from.flash_cellboard_1_rx_);
  flash_cellboard_2_tx_.MergeFrom(from.flash_cellboard_2_tx_);
  flash_cellboard_2_rx_.MergeFrom(from.flash_cellboard_2_rx_);
  flash_cellboard_3_tx_.MergeFrom(from.flash_cellboard_3_tx_);
  flash_cellboard_3_rx_.MergeFrom(from.flash_cellboard_3_rx_);
  flash_cellboard_4_tx_.MergeFrom(from.flash_cellboard_4_tx_);
  flash_cellboard_4_rx_.MergeFrom(from.flash_cellboard_4_rx_);
  flash_cellboard_5_tx_.MergeFrom(from.flash_cellboard_5_tx_);
  flash_cellboard_5_rx_.MergeFrom(from.flash_cellboard_5_rx_);
  flash_bms_hv_tx_.MergeFrom(from.flash_bms_hv_tx_);
  flash_bms_hv_rx_.MergeFrom(from.flash_bms_hv_rx_);
  flash_bms_lv_tx_.MergeFrom(from.flash_bms_lv_tx_);
  flash_bms_lv_rx_.MergeFrom(from.flash_bms_lv_rx_);
  brusa_nlg5_ctl_.MergeFrom(from.brusa_nlg5_ctl_);
  brusa_st_.MergeFrom(from.brusa_st_);
  brusa_act_i_.MergeFrom(from.brusa_act_i_);
  brusa_act_ii_.MergeFrom(from.brusa_act_ii_);
  brusa_temp_.MergeFrom(from.brusa_temp_);
  brusa_err_.MergeFrom(from.brusa_err_);
  control_output_.MergeFrom(from.control_output_);
  lc_reset_.MergeFrom(from.lc_reset_);
}

void Pack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:primary.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pack::CopyFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack::IsInitialized() const {
  return true;
}

void Pack::InternalSwap(Pack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bms_hv_jmp_to_blt_.InternalSwap(&other->bms_hv_jmp_to_blt_);
  bms_lv_jmp_to_blt_.InternalSwap(&other->bms_lv_jmp_to_blt_);
  steer_version_.InternalSwap(&other->steer_version_);
  das_version_.InternalSwap(&other->das_version_);
  hv_version_.InternalSwap(&other->hv_version_);
  lv_version_.InternalSwap(&other->lv_version_);
  tlm_version_.InternalSwap(&other->tlm_version_);
  timestamp_.InternalSwap(&other->timestamp_);
  ambient_temperature_.InternalSwap(&other->ambient_temperature_);
  data_logger_.InternalSwap(&other->data_logger_);
  set_tlm_status_.InternalSwap(&other->set_tlm_status_);
  tlm_status_.InternalSwap(&other->tlm_status_);
  steer_system_status_.InternalSwap(&other->steer_system_status_);
  hv_voltage_.InternalSwap(&other->hv_voltage_);
  hv_current_.InternalSwap(&other->hv_current_);
  hv_temp_.InternalSwap(&other->hv_temp_);
  hv_errors_.InternalSwap(&other->hv_errors_);
  hv_can_forward_.InternalSwap(&other->hv_can_forward_);
  hv_fans_override_.InternalSwap(&other->hv_fans_override_);
  hv_can_forward_status_.InternalSwap(&other->hv_can_forward_status_);
  hv_fans_override_status_.InternalSwap(&other->hv_fans_override_status_);
  hv_feedbacks_status_.InternalSwap(&other->hv_feedbacks_status_);
  hv_imd_status_.InternalSwap(&other->hv_imd_status_);
  ts_status_das_.InternalSwap(&other->ts_status_das_);
  ts_status_steer_.InternalSwap(&other->ts_status_steer_);
  ts_status_handcart_.InternalSwap(&other->ts_status_handcart_);
  set_ts_status_das_.InternalSwap(&other->set_ts_status_das_);
  set_ts_status_handcart_.InternalSwap(&other->set_ts_status_handcart_);
  steer_status_.InternalSwap(&other->steer_status_);
  set_car_status_.InternalSwap(&other->set_car_status_);
  set_pedals_range_.InternalSwap(&other->set_pedals_range_);
  set_steering_angle_range_.InternalSwap(&other->set_steering_angle_range_);
  car_status_.InternalSwap(&other->car_status_);
  das_errors_.InternalSwap(&other->das_errors_);
  lv_current_.InternalSwap(&other->lv_current_);
  lv_voltage_.InternalSwap(&other->lv_voltage_);
  lv_total_voltage_.InternalSwap(&other->lv_total_voltage_);
  lv_temperature_.InternalSwap(&other->lv_temperature_);
  cooling_status_.InternalSwap(&other->cooling_status_);
  set_radiator_speed_.InternalSwap(&other->set_radiator_speed_);
  set_pumps_speed_.InternalSwap(&other->set_pumps_speed_);
  set_inverter_connection_status_.InternalSwap(&other->set_inverter_connection_status_);
  inverter_connection_status_.InternalSwap(&other->inverter_connection_status_);
  lv_errors_.InternalSwap(&other->lv_errors_);
  shutdown_status_.InternalSwap(&other->shutdown_status_);
  marker_.InternalSwap(&other->marker_);
  hv_cells_voltage_.InternalSwap(&other->hv_cells_voltage_);
  hv_cells_temp_.InternalSwap(&other->hv_cells_temp_);
  hv_cell_balancing_status_.InternalSwap(&other->hv_cell_balancing_status_);
  set_cell_balancing_status_.InternalSwap(&other->set_cell_balancing_status_);
  handcart_status_.InternalSwap(&other->handcart_status_);
  speed_.InternalSwap(&other->speed_);
  inv_l_request_.InternalSwap(&other->inv_l_request_);
  inv_r_request_.InternalSwap(&other->inv_r_request_);
  inv_l_response_.InternalSwap(&other->inv_l_response_);
  inv_r_response_.InternalSwap(&other->inv_r_response_);
  flash_cellboard_0_tx_.InternalSwap(&other->flash_cellboard_0_tx_);
  flash_cellboard_0_rx_.InternalSwap(&other->flash_cellboard_0_rx_);
  flash_cellboard_1_tx_.InternalSwap(&other->flash_cellboard_1_tx_);
  flash_cellboard_1_rx_.InternalSwap(&other->flash_cellboard_1_rx_);
  flash_cellboard_2_tx_.InternalSwap(&other->flash_cellboard_2_tx_);
  flash_cellboard_2_rx_.InternalSwap(&other->flash_cellboard_2_rx_);
  flash_cellboard_3_tx_.InternalSwap(&other->flash_cellboard_3_tx_);
  flash_cellboard_3_rx_.InternalSwap(&other->flash_cellboard_3_rx_);
  flash_cellboard_4_tx_.InternalSwap(&other->flash_cellboard_4_tx_);
  flash_cellboard_4_rx_.InternalSwap(&other->flash_cellboard_4_rx_);
  flash_cellboard_5_tx_.InternalSwap(&other->flash_cellboard_5_tx_);
  flash_cellboard_5_rx_.InternalSwap(&other->flash_cellboard_5_rx_);
  flash_bms_hv_tx_.InternalSwap(&other->flash_bms_hv_tx_);
  flash_bms_hv_rx_.InternalSwap(&other->flash_bms_hv_rx_);
  flash_bms_lv_tx_.InternalSwap(&other->flash_bms_lv_tx_);
  flash_bms_lv_rx_.InternalSwap(&other->flash_bms_lv_rx_);
  brusa_nlg5_ctl_.InternalSwap(&other->brusa_nlg5_ctl_);
  brusa_st_.InternalSwap(&other->brusa_st_);
  brusa_act_i_.InternalSwap(&other->brusa_act_i_);
  brusa_act_ii_.InternalSwap(&other->brusa_act_ii_);
  brusa_temp_.InternalSwap(&other->brusa_temp_);
  brusa_err_.InternalSwap(&other->brusa_err_);
  control_output_.InternalSwap(&other->control_output_);
  lc_reset_.InternalSwap(&other->lc_reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pack::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace primary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::primary::BMS_HV_JMP_TO_BLT* Arena::CreateMaybeMessage< ::primary::BMS_HV_JMP_TO_BLT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BMS_HV_JMP_TO_BLT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::BMS_LV_JMP_TO_BLT* Arena::CreateMaybeMessage< ::primary::BMS_LV_JMP_TO_BLT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BMS_LV_JMP_TO_BLT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::STEER_VERSION* Arena::CreateMaybeMessage< ::primary::STEER_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DAS_VERSION* Arena::CreateMaybeMessage< ::primary::DAS_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DAS_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_VERSION* Arena::CreateMaybeMessage< ::primary::HV_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_VERSION* Arena::CreateMaybeMessage< ::primary::LV_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TLM_VERSION* Arena::CreateMaybeMessage< ::primary::TLM_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TLM_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TIMESTAMP* Arena::CreateMaybeMessage< ::primary::TIMESTAMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TIMESTAMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::AMBIENT_TEMPERATURE* Arena::CreateMaybeMessage< ::primary::AMBIENT_TEMPERATURE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::AMBIENT_TEMPERATURE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DATA_LOGGER* Arena::CreateMaybeMessage< ::primary::DATA_LOGGER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DATA_LOGGER >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TLM_STATUS* Arena::CreateMaybeMessage< ::primary::SET_TLM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TLM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TLM_STATUS* Arena::CreateMaybeMessage< ::primary::TLM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TLM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::STEER_SYSTEM_STATUS* Arena::CreateMaybeMessage< ::primary::STEER_SYSTEM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_SYSTEM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_VOLTAGE* Arena::CreateMaybeMessage< ::primary::HV_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CURRENT* Arena::CreateMaybeMessage< ::primary::HV_CURRENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CURRENT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_TEMP* Arena::CreateMaybeMessage< ::primary::HV_TEMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_TEMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_ERRORS* Arena::CreateMaybeMessage< ::primary::HV_ERRORS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_ERRORS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CAN_FORWARD* Arena::CreateMaybeMessage< ::primary::HV_CAN_FORWARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CAN_FORWARD >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_FANS_OVERRIDE* Arena::CreateMaybeMessage< ::primary::HV_FANS_OVERRIDE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_FANS_OVERRIDE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CAN_FORWARD_STATUS* Arena::CreateMaybeMessage< ::primary::HV_CAN_FORWARD_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CAN_FORWARD_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_FANS_OVERRIDE_STATUS* Arena::CreateMaybeMessage< ::primary::HV_FANS_OVERRIDE_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_FANS_OVERRIDE_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_FEEDBACKS_STATUS* Arena::CreateMaybeMessage< ::primary::HV_FEEDBACKS_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_FEEDBACKS_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_IMD_STATUS* Arena::CreateMaybeMessage< ::primary::HV_IMD_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_IMD_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TS_STATUS_DAS* Arena::CreateMaybeMessage< ::primary::TS_STATUS_DAS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TS_STATUS_DAS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TS_STATUS_STEER* Arena::CreateMaybeMessage< ::primary::TS_STATUS_STEER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TS_STATUS_STEER >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TS_STATUS_HANDCART* Arena::CreateMaybeMessage< ::primary::TS_STATUS_HANDCART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TS_STATUS_HANDCART >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TS_STATUS_DAS* Arena::CreateMaybeMessage< ::primary::SET_TS_STATUS_DAS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TS_STATUS_DAS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TS_STATUS_HANDCART* Arena::CreateMaybeMessage< ::primary::SET_TS_STATUS_HANDCART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TS_STATUS_HANDCART >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::STEER_STATUS* Arena::CreateMaybeMessage< ::primary::STEER_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_CAR_STATUS* Arena::CreateMaybeMessage< ::primary::SET_CAR_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_CAR_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_PEDALS_RANGE* Arena::CreateMaybeMessage< ::primary::SET_PEDALS_RANGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_PEDALS_RANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_STEERING_ANGLE_RANGE* Arena::CreateMaybeMessage< ::primary::SET_STEERING_ANGLE_RANGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_STEERING_ANGLE_RANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CAR_STATUS* Arena::CreateMaybeMessage< ::primary::CAR_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CAR_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DAS_ERRORS* Arena::CreateMaybeMessage< ::primary::DAS_ERRORS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DAS_ERRORS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_CURRENT* Arena::CreateMaybeMessage< ::primary::LV_CURRENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_CURRENT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_VOLTAGE* Arena::CreateMaybeMessage< ::primary::LV_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_TOTAL_VOLTAGE* Arena::CreateMaybeMessage< ::primary::LV_TOTAL_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_TOTAL_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_TEMPERATURE* Arena::CreateMaybeMessage< ::primary::LV_TEMPERATURE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_TEMPERATURE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::COOLING_STATUS* Arena::CreateMaybeMessage< ::primary::COOLING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::COOLING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_RADIATOR_SPEED* Arena::CreateMaybeMessage< ::primary::SET_RADIATOR_SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_RADIATOR_SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_PUMPS_SPEED* Arena::CreateMaybeMessage< ::primary::SET_PUMPS_SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_PUMPS_SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_INVERTER_CONNECTION_STATUS* Arena::CreateMaybeMessage< ::primary::SET_INVERTER_CONNECTION_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_INVERTER_CONNECTION_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::INVERTER_CONNECTION_STATUS* Arena::CreateMaybeMessage< ::primary::INVERTER_CONNECTION_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::INVERTER_CONNECTION_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_ERRORS* Arena::CreateMaybeMessage< ::primary::LV_ERRORS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_ERRORS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SHUTDOWN_STATUS* Arena::CreateMaybeMessage< ::primary::SHUTDOWN_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SHUTDOWN_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::MARKER* Arena::CreateMaybeMessage< ::primary::MARKER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::MARKER >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELLS_VOLTAGE* Arena::CreateMaybeMessage< ::primary::HV_CELLS_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELLS_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELLS_TEMP* Arena::CreateMaybeMessage< ::primary::HV_CELLS_TEMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELLS_TEMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELL_BALANCING_STATUS* Arena::CreateMaybeMessage< ::primary::HV_CELL_BALANCING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELL_BALANCING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_CELL_BALANCING_STATUS* Arena::CreateMaybeMessage< ::primary::SET_CELL_BALANCING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_CELL_BALANCING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HANDCART_STATUS* Arena::CreateMaybeMessage< ::primary::HANDCART_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HANDCART_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SPEED* Arena::CreateMaybeMessage< ::primary::SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::INV_L_REQUEST* Arena::CreateMaybeMessage< ::primary::INV_L_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::INV_L_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::INV_R_REQUEST* Arena::CreateMaybeMessage< ::primary::INV_R_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::INV_R_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::INV_L_RESPONSE* Arena::CreateMaybeMessage< ::primary::INV_L_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::INV_L_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::INV_R_RESPONSE* Arena::CreateMaybeMessage< ::primary::INV_R_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::INV_R_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_0_TX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_0_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_0_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_0_RX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_0_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_0_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_1_TX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_1_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_1_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_1_RX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_1_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_1_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_2_TX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_2_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_2_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_2_RX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_2_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_2_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_3_TX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_3_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_3_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_3_RX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_3_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_3_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_4_TX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_4_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_4_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_4_RX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_4_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_4_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_5_TX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_5_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_5_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_CELLBOARD_5_RX* Arena::CreateMaybeMessage< ::primary::FLASH_CELLBOARD_5_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_CELLBOARD_5_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_BMS_HV_TX* Arena::CreateMaybeMessage< ::primary::FLASH_BMS_HV_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_BMS_HV_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_BMS_HV_RX* Arena::CreateMaybeMessage< ::primary::FLASH_BMS_HV_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_BMS_HV_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_BMS_LV_TX* Arena::CreateMaybeMessage< ::primary::FLASH_BMS_LV_TX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_BMS_LV_TX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::FLASH_BMS_LV_RX* Arena::CreateMaybeMessage< ::primary::FLASH_BMS_LV_RX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::FLASH_BMS_LV_RX >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::BRUSA_NLG5_CTL* Arena::CreateMaybeMessage< ::primary::BRUSA_NLG5_CTL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BRUSA_NLG5_CTL >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::BRUSA_ST* Arena::CreateMaybeMessage< ::primary::BRUSA_ST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BRUSA_ST >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::BRUSA_ACT_I* Arena::CreateMaybeMessage< ::primary::BRUSA_ACT_I >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BRUSA_ACT_I >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::BRUSA_ACT_II* Arena::CreateMaybeMessage< ::primary::BRUSA_ACT_II >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BRUSA_ACT_II >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::BRUSA_TEMP* Arena::CreateMaybeMessage< ::primary::BRUSA_TEMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BRUSA_TEMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::BRUSA_ERR* Arena::CreateMaybeMessage< ::primary::BRUSA_ERR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::BRUSA_ERR >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CONTROL_OUTPUT* Arena::CreateMaybeMessage< ::primary::CONTROL_OUTPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CONTROL_OUTPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LC_RESET* Arena::CreateMaybeMessage< ::primary::LC_RESET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LC_RESET >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Pack* Arena::CreateMaybeMessage< ::primary::Pack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Pack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
