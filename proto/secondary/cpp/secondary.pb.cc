// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: secondary.proto

#include "secondary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CONTROL_STATE_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPS_COORDS_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPS_SPEED_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMU_ACCELERATION_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMU_ANGULAR_RATE_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_0_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_1_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_2_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_3_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_0_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_1_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_2_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_3_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_0_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_1_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_2_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_3_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_0_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_1_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_2_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_3_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LAP_COUNT_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LC_STATUS_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PEDALS_OUTPUT_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEERING_ANGLE_secondary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_secondary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPMS_secondary_2eproto;
namespace secondary {
class IMU_ANGULAR_RATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMU_ANGULAR_RATE> _instance;
} _IMU_ANGULAR_RATE_default_instance_;
class IMU_ACCELERATIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMU_ACCELERATION> _instance;
} _IMU_ACCELERATION_default_instance_;
class IRTS_FL_0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FL_0> _instance;
} _IRTS_FL_0_default_instance_;
class IRTS_FL_1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FL_1> _instance;
} _IRTS_FL_1_default_instance_;
class IRTS_FL_2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FL_2> _instance;
} _IRTS_FL_2_default_instance_;
class IRTS_FL_3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FL_3> _instance;
} _IRTS_FL_3_default_instance_;
class IRTS_FR_0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FR_0> _instance;
} _IRTS_FR_0_default_instance_;
class IRTS_FR_1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FR_1> _instance;
} _IRTS_FR_1_default_instance_;
class IRTS_FR_2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FR_2> _instance;
} _IRTS_FR_2_default_instance_;
class IRTS_FR_3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_FR_3> _instance;
} _IRTS_FR_3_default_instance_;
class IRTS_RL_0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RL_0> _instance;
} _IRTS_RL_0_default_instance_;
class IRTS_RL_1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RL_1> _instance;
} _IRTS_RL_1_default_instance_;
class IRTS_RL_2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RL_2> _instance;
} _IRTS_RL_2_default_instance_;
class IRTS_RL_3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RL_3> _instance;
} _IRTS_RL_3_default_instance_;
class IRTS_RR_0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RR_0> _instance;
} _IRTS_RR_0_default_instance_;
class IRTS_RR_1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RR_1> _instance;
} _IRTS_RR_1_default_instance_;
class IRTS_RR_2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RR_2> _instance;
} _IRTS_RR_2_default_instance_;
class IRTS_RR_3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRTS_RR_3> _instance;
} _IRTS_RR_3_default_instance_;
class GPS_COORDSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPS_COORDS> _instance;
} _GPS_COORDS_default_instance_;
class GPS_SPEEDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPS_SPEED> _instance;
} _GPS_SPEED_default_instance_;
class LAP_COUNTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LAP_COUNT> _instance;
} _LAP_COUNT_default_instance_;
class PEDALS_OUTPUTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PEDALS_OUTPUT> _instance;
} _PEDALS_OUTPUT_default_instance_;
class STEERING_ANGLEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STEERING_ANGLE> _instance;
} _STEERING_ANGLE_default_instance_;
class CONTROL_STATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CONTROL_STATE> _instance;
} _CONTROL_STATE_default_instance_;
class TPMSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPMS> _instance;
} _TPMS_default_instance_;
class LC_STATUSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LC_STATUS> _instance;
} _LC_STATUS_default_instance_;
class PackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pack> _instance;
} _Pack_default_instance_;
}  // namespace secondary
static void InitDefaultsscc_info_CONTROL_STATE_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_CONTROL_STATE_default_instance_;
    new (ptr) ::secondary::CONTROL_STATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::CONTROL_STATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CONTROL_STATE_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CONTROL_STATE_secondary_2eproto}, {}};

static void InitDefaultsscc_info_GPS_COORDS_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_GPS_COORDS_default_instance_;
    new (ptr) ::secondary::GPS_COORDS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::GPS_COORDS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPS_COORDS_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPS_COORDS_secondary_2eproto}, {}};

static void InitDefaultsscc_info_GPS_SPEED_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_GPS_SPEED_default_instance_;
    new (ptr) ::secondary::GPS_SPEED();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::GPS_SPEED::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPS_SPEED_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPS_SPEED_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IMU_ACCELERATION_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IMU_ACCELERATION_default_instance_;
    new (ptr) ::secondary::IMU_ACCELERATION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IMU_ACCELERATION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMU_ACCELERATION_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMU_ACCELERATION_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IMU_ANGULAR_RATE_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IMU_ANGULAR_RATE_default_instance_;
    new (ptr) ::secondary::IMU_ANGULAR_RATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IMU_ANGULAR_RATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMU_ANGULAR_RATE_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMU_ANGULAR_RATE_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FL_0_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FL_0_default_instance_;
    new (ptr) ::secondary::IRTS_FL_0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FL_0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_0_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FL_0_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FL_1_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FL_1_default_instance_;
    new (ptr) ::secondary::IRTS_FL_1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FL_1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_1_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FL_1_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FL_2_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FL_2_default_instance_;
    new (ptr) ::secondary::IRTS_FL_2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FL_2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_2_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FL_2_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FL_3_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FL_3_default_instance_;
    new (ptr) ::secondary::IRTS_FL_3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FL_3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FL_3_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FL_3_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FR_0_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FR_0_default_instance_;
    new (ptr) ::secondary::IRTS_FR_0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FR_0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_0_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FR_0_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FR_1_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FR_1_default_instance_;
    new (ptr) ::secondary::IRTS_FR_1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FR_1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_1_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FR_1_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FR_2_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FR_2_default_instance_;
    new (ptr) ::secondary::IRTS_FR_2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FR_2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_2_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FR_2_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_FR_3_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_FR_3_default_instance_;
    new (ptr) ::secondary::IRTS_FR_3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_FR_3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_FR_3_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_FR_3_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RL_0_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RL_0_default_instance_;
    new (ptr) ::secondary::IRTS_RL_0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RL_0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_0_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RL_0_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RL_1_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RL_1_default_instance_;
    new (ptr) ::secondary::IRTS_RL_1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RL_1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_1_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RL_1_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RL_2_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RL_2_default_instance_;
    new (ptr) ::secondary::IRTS_RL_2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RL_2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_2_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RL_2_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RL_3_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RL_3_default_instance_;
    new (ptr) ::secondary::IRTS_RL_3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RL_3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RL_3_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RL_3_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RR_0_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RR_0_default_instance_;
    new (ptr) ::secondary::IRTS_RR_0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RR_0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_0_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RR_0_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RR_1_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RR_1_default_instance_;
    new (ptr) ::secondary::IRTS_RR_1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RR_1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_1_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RR_1_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RR_2_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RR_2_default_instance_;
    new (ptr) ::secondary::IRTS_RR_2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RR_2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_2_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RR_2_secondary_2eproto}, {}};

static void InitDefaultsscc_info_IRTS_RR_3_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_IRTS_RR_3_default_instance_;
    new (ptr) ::secondary::IRTS_RR_3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::IRTS_RR_3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRTS_RR_3_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRTS_RR_3_secondary_2eproto}, {}};

static void InitDefaultsscc_info_LAP_COUNT_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_LAP_COUNT_default_instance_;
    new (ptr) ::secondary::LAP_COUNT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::LAP_COUNT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LAP_COUNT_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LAP_COUNT_secondary_2eproto}, {}};

static void InitDefaultsscc_info_LC_STATUS_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_LC_STATUS_default_instance_;
    new (ptr) ::secondary::LC_STATUS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::LC_STATUS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LC_STATUS_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LC_STATUS_secondary_2eproto}, {}};

static void InitDefaultsscc_info_PEDALS_OUTPUT_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_PEDALS_OUTPUT_default_instance_;
    new (ptr) ::secondary::PEDALS_OUTPUT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::PEDALS_OUTPUT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PEDALS_OUTPUT_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PEDALS_OUTPUT_secondary_2eproto}, {}};

static void InitDefaultsscc_info_Pack_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_Pack_default_instance_;
    new (ptr) ::secondary::Pack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::Pack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<26> scc_info_Pack_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 26, 0, InitDefaultsscc_info_Pack_secondary_2eproto}, {
      &scc_info_IMU_ANGULAR_RATE_secondary_2eproto.base,
      &scc_info_IMU_ACCELERATION_secondary_2eproto.base,
      &scc_info_IRTS_FL_0_secondary_2eproto.base,
      &scc_info_IRTS_FL_1_secondary_2eproto.base,
      &scc_info_IRTS_FL_2_secondary_2eproto.base,
      &scc_info_IRTS_FL_3_secondary_2eproto.base,
      &scc_info_IRTS_FR_0_secondary_2eproto.base,
      &scc_info_IRTS_FR_1_secondary_2eproto.base,
      &scc_info_IRTS_FR_2_secondary_2eproto.base,
      &scc_info_IRTS_FR_3_secondary_2eproto.base,
      &scc_info_IRTS_RL_0_secondary_2eproto.base,
      &scc_info_IRTS_RL_1_secondary_2eproto.base,
      &scc_info_IRTS_RL_2_secondary_2eproto.base,
      &scc_info_IRTS_RL_3_secondary_2eproto.base,
      &scc_info_IRTS_RR_0_secondary_2eproto.base,
      &scc_info_IRTS_RR_1_secondary_2eproto.base,
      &scc_info_IRTS_RR_2_secondary_2eproto.base,
      &scc_info_IRTS_RR_3_secondary_2eproto.base,
      &scc_info_GPS_COORDS_secondary_2eproto.base,
      &scc_info_GPS_SPEED_secondary_2eproto.base,
      &scc_info_LAP_COUNT_secondary_2eproto.base,
      &scc_info_PEDALS_OUTPUT_secondary_2eproto.base,
      &scc_info_STEERING_ANGLE_secondary_2eproto.base,
      &scc_info_CONTROL_STATE_secondary_2eproto.base,
      &scc_info_TPMS_secondary_2eproto.base,
      &scc_info_LC_STATUS_secondary_2eproto.base,}};

static void InitDefaultsscc_info_STEERING_ANGLE_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_STEERING_ANGLE_default_instance_;
    new (ptr) ::secondary::STEERING_ANGLE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::STEERING_ANGLE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STEERING_ANGLE_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STEERING_ANGLE_secondary_2eproto}, {}};

static void InitDefaultsscc_info_TPMS_secondary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::secondary::_TPMS_default_instance_;
    new (ptr) ::secondary::TPMS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::secondary::TPMS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPMS_secondary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TPMS_secondary_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_secondary_2eproto[27];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_secondary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_secondary_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_secondary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_x_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_y_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_z_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_x_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_y_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_z_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, temperature_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel4_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel8_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel12_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel16_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, latitude_),
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, longitude_),
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, speed_),
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, lap_count_),
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, lap_time_),
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, apps_),
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, bse_front_),
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, bse_rear_),
  PROTOBUF_FIELD_OFFSET(::secondary::PEDALS_OUTPUT, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::STEERING_ANGLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::STEERING_ANGLE, angle_),
  PROTOBUF_FIELD_OFFSET(::secondary::STEERING_ANGLE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_STATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_STATE, map_pw_),
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_STATE, map_sc_),
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_STATE, map_tv_),
  PROTOBUF_FIELD_OFFSET(::secondary::CONTROL_STATE, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, fl_pressure_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, fr_pressure_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, rl_pressure_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, rr_pressure_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, fl_temperature_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, fr_temperature_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, rl_temperature_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, rr_temperature_),
  PROTOBUF_FIELD_OFFSET(::secondary::TPMS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::LC_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::LC_STATUS, last_time_),
  PROTOBUF_FIELD_OFFSET(::secondary::LC_STATUS, lap_number_),
  PROTOBUF_FIELD_OFFSET(::secondary::LC_STATUS, _inner_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, imu_angular_rate_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, imu_acceleration_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fl_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_fr_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rl_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_0_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_1_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_2_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, irts_rr_3_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, gps_coords_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, gps_speed_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, lap_count_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, pedals_output_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, steering_angle_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, control_state_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, tpms_),
  PROTOBUF_FIELD_OFFSET(::secondary::Pack, lc_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::secondary::IMU_ANGULAR_RATE)},
  { 9, -1, sizeof(::secondary::IMU_ACCELERATION)},
  { 19, -1, sizeof(::secondary::IRTS_FL_0)},
  { 29, -1, sizeof(::secondary::IRTS_FL_1)},
  { 39, -1, sizeof(::secondary::IRTS_FL_2)},
  { 49, -1, sizeof(::secondary::IRTS_FL_3)},
  { 59, -1, sizeof(::secondary::IRTS_FR_0)},
  { 69, -1, sizeof(::secondary::IRTS_FR_1)},
  { 79, -1, sizeof(::secondary::IRTS_FR_2)},
  { 89, -1, sizeof(::secondary::IRTS_FR_3)},
  { 99, -1, sizeof(::secondary::IRTS_RL_0)},
  { 109, -1, sizeof(::secondary::IRTS_RL_1)},
  { 119, -1, sizeof(::secondary::IRTS_RL_2)},
  { 129, -1, sizeof(::secondary::IRTS_RL_3)},
  { 139, -1, sizeof(::secondary::IRTS_RR_0)},
  { 149, -1, sizeof(::secondary::IRTS_RR_1)},
  { 159, -1, sizeof(::secondary::IRTS_RR_2)},
  { 169, -1, sizeof(::secondary::IRTS_RR_3)},
  { 179, -1, sizeof(::secondary::GPS_COORDS)},
  { 187, -1, sizeof(::secondary::GPS_SPEED)},
  { 194, -1, sizeof(::secondary::LAP_COUNT)},
  { 202, -1, sizeof(::secondary::PEDALS_OUTPUT)},
  { 211, -1, sizeof(::secondary::STEERING_ANGLE)},
  { 218, -1, sizeof(::secondary::CONTROL_STATE)},
  { 227, -1, sizeof(::secondary::TPMS)},
  { 241, -1, sizeof(::secondary::LC_STATUS)},
  { 249, -1, sizeof(::secondary::Pack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IMU_ANGULAR_RATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IMU_ACCELERATION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_GPS_COORDS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_GPS_SPEED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_LAP_COUNT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_PEDALS_OUTPUT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_STEERING_ANGLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_CONTROL_STATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_TPMS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_LC_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_Pack_default_instance_),
};

const char descriptor_table_protodef_secondary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017secondary.proto\022\tsecondary\"h\n\020IMU_ANGU"
  "LAR_RATE\022\022\n\nang_rate_x\030\001 \001(\002\022\022\n\nang_rate"
  "_y\030\002 \001(\002\022\022\n\nang_rate_z\030\003 \001(\002\022\030\n\020_inner_t"
  "imestamp\030\004 \001(\004\"t\n\020IMU_ACCELERATION\022\017\n\007ac"
  "cel_x\030\001 \001(\002\022\017\n\007accel_y\030\002 \001(\002\022\017\n\007accel_z\030"
  "\003 \001(\002\022\023\n\013temperature\030\004 \001(\021\022\030\n\020_inner_tim"
  "estamp\030\005 \001(\004\"m\n\tIRTS_FL_0\022\020\n\010channel1\030\001 "
  "\001(\002\022\020\n\010channel2\030\002 \001(\002\022\020\n\010channel3\030\003 \001(\002\022"
  "\020\n\010channel4\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 "
  "\001(\004\"m\n\tIRTS_FL_1\022\020\n\010channel5\030\001 \001(\002\022\020\n\010ch"
  "annel6\030\002 \001(\002\022\020\n\010channel7\030\003 \001(\002\022\020\n\010channe"
  "l8\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 \001(\004\"p\n\tIR"
  "TS_FL_2\022\020\n\010channel9\030\001 \001(\002\022\021\n\tchannel10\030\002"
  " \001(\002\022\021\n\tchannel11\030\003 \001(\002\022\021\n\tchannel12\030\004 \001"
  "(\002\022\030\n\020_inner_timestamp\030\005 \001(\004\"q\n\tIRTS_FL_"
  "3\022\021\n\tchannel13\030\001 \001(\002\022\021\n\tchannel14\030\002 \001(\002\022"
  "\021\n\tchannel15\030\003 \001(\002\022\021\n\tchannel16\030\004 \001(\002\022\030\n"
  "\020_inner_timestamp\030\005 \001(\004\"m\n\tIRTS_FR_0\022\020\n\010"
  "channel1\030\001 \001(\002\022\020\n\010channel2\030\002 \001(\002\022\020\n\010chan"
  "nel3\030\003 \001(\002\022\020\n\010channel4\030\004 \001(\002\022\030\n\020_inner_t"
  "imestamp\030\005 \001(\004\"m\n\tIRTS_FR_1\022\020\n\010channel5\030"
  "\001 \001(\002\022\020\n\010channel6\030\002 \001(\002\022\020\n\010channel7\030\003 \001("
  "\002\022\020\n\010channel8\030\004 \001(\002\022\030\n\020_inner_timestamp\030"
  "\005 \001(\004\"p\n\tIRTS_FR_2\022\020\n\010channel9\030\001 \001(\002\022\021\n\t"
  "channel10\030\002 \001(\002\022\021\n\tchannel11\030\003 \001(\002\022\021\n\tch"
  "annel12\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 \001(\004\""
  "q\n\tIRTS_FR_3\022\021\n\tchannel13\030\001 \001(\002\022\021\n\tchann"
  "el14\030\002 \001(\002\022\021\n\tchannel15\030\003 \001(\002\022\021\n\tchannel"
  "16\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 \001(\004\"m\n\tIR"
  "TS_RL_0\022\020\n\010channel1\030\001 \001(\002\022\020\n\010channel2\030\002 "
  "\001(\002\022\020\n\010channel3\030\003 \001(\002\022\020\n\010channel4\030\004 \001(\002\022"
  "\030\n\020_inner_timestamp\030\005 \001(\004\"m\n\tIRTS_RL_1\022\020"
  "\n\010channel5\030\001 \001(\002\022\020\n\010channel6\030\002 \001(\002\022\020\n\010ch"
  "annel7\030\003 \001(\002\022\020\n\010channel8\030\004 \001(\002\022\030\n\020_inner"
  "_timestamp\030\005 \001(\004\"p\n\tIRTS_RL_2\022\020\n\010channel"
  "9\030\001 \001(\002\022\021\n\tchannel10\030\002 \001(\002\022\021\n\tchannel11\030"
  "\003 \001(\002\022\021\n\tchannel12\030\004 \001(\002\022\030\n\020_inner_times"
  "tamp\030\005 \001(\004\"q\n\tIRTS_RL_3\022\021\n\tchannel13\030\001 \001"
  "(\002\022\021\n\tchannel14\030\002 \001(\002\022\021\n\tchannel15\030\003 \001(\002"
  "\022\021\n\tchannel16\030\004 \001(\002\022\030\n\020_inner_timestamp\030"
  "\005 \001(\004\"m\n\tIRTS_RR_0\022\020\n\010channel1\030\001 \001(\002\022\020\n\010"
  "channel2\030\002 \001(\002\022\020\n\010channel3\030\003 \001(\002\022\020\n\010chan"
  "nel4\030\004 \001(\002\022\030\n\020_inner_timestamp\030\005 \001(\004\"m\n\t"
  "IRTS_RR_1\022\020\n\010channel5\030\001 \001(\002\022\020\n\010channel6\030"
  "\002 \001(\002\022\020\n\010channel7\030\003 \001(\002\022\020\n\010channel8\030\004 \001("
  "\002\022\030\n\020_inner_timestamp\030\005 \001(\004\"p\n\tIRTS_RR_2"
  "\022\020\n\010channel9\030\001 \001(\002\022\021\n\tchannel10\030\002 \001(\002\022\021\n"
  "\tchannel11\030\003 \001(\002\022\021\n\tchannel12\030\004 \001(\002\022\030\n\020_"
  "inner_timestamp\030\005 \001(\004\"q\n\tIRTS_RR_3\022\021\n\tch"
  "annel13\030\001 \001(\002\022\021\n\tchannel14\030\002 \001(\002\022\021\n\tchan"
  "nel15\030\003 \001(\002\022\021\n\tchannel16\030\004 \001(\002\022\030\n\020_inner"
  "_timestamp\030\005 \001(\004\"K\n\nGPS_COORDS\022\020\n\010latitu"
  "de\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\022\030\n\020_inner_ti"
  "mestamp\030\003 \001(\004\"4\n\tGPS_SPEED\022\r\n\005speed\030\001 \001("
  "\r\022\030\n\020_inner_timestamp\030\002 \001(\004\"J\n\tLAP_COUNT"
  "\022\021\n\tlap_count\030\001 \001(\r\022\020\n\010lap_time\030\002 \001(\r\022\030\n"
  "\020_inner_timestamp\030\003 \001(\004\"\\\n\rPEDALS_OUTPUT"
  "\022\014\n\004apps\030\001 \001(\r\022\021\n\tbse_front\030\002 \001(\002\022\020\n\010bse"
  "_rear\030\003 \001(\002\022\030\n\020_inner_timestamp\030\004 \001(\004\"9\n"
  "\016STEERING_ANGLE\022\r\n\005angle\030\001 \001(\002\022\030\n\020_inner"
  "_timestamp\030\002 \001(\004\"Y\n\rCONTROL_STATE\022\016\n\006map"
  "_pw\030\001 \001(\002\022\016\n\006map_sc\030\002 \001(\002\022\016\n\006map_tv\030\003 \001("
  "\002\022\030\n\020_inner_timestamp\030\004 \001(\004\"\324\001\n\004TPMS\022\023\n\013"
  "fl_pressure\030\001 \001(\002\022\023\n\013fr_pressure\030\002 \001(\002\022\023"
  "\n\013rl_pressure\030\003 \001(\002\022\023\n\013rr_pressure\030\004 \001(\002"
  "\022\026\n\016fl_temperature\030\005 \001(\r\022\026\n\016fr_temperatu"
  "re\030\006 \001(\r\022\026\n\016rl_temperature\030\007 \001(\r\022\026\n\016rr_t"
  "emperature\030\010 \001(\r\022\030\n\020_inner_timestamp\030\t \001"
  "(\004\"L\n\tLC_STATUS\022\021\n\tlast_time\030\001 \001(\r\022\022\n\nla"
  "p_number\030\002 \001(\021\022\030\n\020_inner_timestamp\030\003 \001(\004"
  "\"\336\010\n\004Pack\0225\n\020IMU_ANGULAR_RATE\030\001 \003(\0132\033.se"
  "condary.IMU_ANGULAR_RATE\0225\n\020IMU_ACCELERA"
  "TION\030\002 \003(\0132\033.secondary.IMU_ACCELERATION\022"
  "\'\n\tIRTS_FL_0\030\003 \003(\0132\024.secondary.IRTS_FL_0"
  "\022\'\n\tIRTS_FL_1\030\004 \003(\0132\024.secondary.IRTS_FL_"
  "1\022\'\n\tIRTS_FL_2\030\005 \003(\0132\024.secondary.IRTS_FL"
  "_2\022\'\n\tIRTS_FL_3\030\006 \003(\0132\024.secondary.IRTS_F"
  "L_3\022\'\n\tIRTS_FR_0\030\007 \003(\0132\024.secondary.IRTS_"
  "FR_0\022\'\n\tIRTS_FR_1\030\010 \003(\0132\024.secondary.IRTS"
  "_FR_1\022\'\n\tIRTS_FR_2\030\t \003(\0132\024.secondary.IRT"
  "S_FR_2\022\'\n\tIRTS_FR_3\030\n \003(\0132\024.secondary.IR"
  "TS_FR_3\022\'\n\tIRTS_RL_0\030\013 \003(\0132\024.secondary.I"
  "RTS_RL_0\022\'\n\tIRTS_RL_1\030\014 \003(\0132\024.secondary."
  "IRTS_RL_1\022\'\n\tIRTS_RL_2\030\r \003(\0132\024.secondary"
  ".IRTS_RL_2\022\'\n\tIRTS_RL_3\030\016 \003(\0132\024.secondar"
  "y.IRTS_RL_3\022\'\n\tIRTS_RR_0\030\017 \003(\0132\024.seconda"
  "ry.IRTS_RR_0\022\'\n\tIRTS_RR_1\030\020 \003(\0132\024.second"
  "ary.IRTS_RR_1\022\'\n\tIRTS_RR_2\030\021 \003(\0132\024.secon"
  "dary.IRTS_RR_2\022\'\n\tIRTS_RR_3\030\022 \003(\0132\024.seco"
  "ndary.IRTS_RR_3\022)\n\nGPS_COORDS\030\023 \003(\0132\025.se"
  "condary.GPS_COORDS\022\'\n\tGPS_SPEED\030\024 \003(\0132\024."
  "secondary.GPS_SPEED\022\'\n\tLAP_COUNT\030\025 \003(\0132\024"
  ".secondary.LAP_COUNT\022/\n\rPEDALS_OUTPUT\030\026 "
  "\003(\0132\030.secondary.PEDALS_OUTPUT\0221\n\016STEERIN"
  "G_ANGLE\030\027 \003(\0132\031.secondary.STEERING_ANGLE"
  "\022/\n\rCONTROL_STATE\030\030 \003(\0132\030.secondary.CONT"
  "ROL_STATE\022\035\n\004TPMS\030\031 \003(\0132\017.secondary.TPMS"
  "\022\'\n\tLC_STATUS\030\032 \003(\0132\024.secondary.LC_STATU"
  "Sb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_secondary_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_secondary_2eproto_sccs[27] = {
  &scc_info_CONTROL_STATE_secondary_2eproto.base,
  &scc_info_GPS_COORDS_secondary_2eproto.base,
  &scc_info_GPS_SPEED_secondary_2eproto.base,
  &scc_info_IMU_ACCELERATION_secondary_2eproto.base,
  &scc_info_IMU_ANGULAR_RATE_secondary_2eproto.base,
  &scc_info_IRTS_FL_0_secondary_2eproto.base,
  &scc_info_IRTS_FL_1_secondary_2eproto.base,
  &scc_info_IRTS_FL_2_secondary_2eproto.base,
  &scc_info_IRTS_FL_3_secondary_2eproto.base,
  &scc_info_IRTS_FR_0_secondary_2eproto.base,
  &scc_info_IRTS_FR_1_secondary_2eproto.base,
  &scc_info_IRTS_FR_2_secondary_2eproto.base,
  &scc_info_IRTS_FR_3_secondary_2eproto.base,
  &scc_info_IRTS_RL_0_secondary_2eproto.base,
  &scc_info_IRTS_RL_1_secondary_2eproto.base,
  &scc_info_IRTS_RL_2_secondary_2eproto.base,
  &scc_info_IRTS_RL_3_secondary_2eproto.base,
  &scc_info_IRTS_RR_0_secondary_2eproto.base,
  &scc_info_IRTS_RR_1_secondary_2eproto.base,
  &scc_info_IRTS_RR_2_secondary_2eproto.base,
  &scc_info_IRTS_RR_3_secondary_2eproto.base,
  &scc_info_LAP_COUNT_secondary_2eproto.base,
  &scc_info_LC_STATUS_secondary_2eproto.base,
  &scc_info_PEDALS_OUTPUT_secondary_2eproto.base,
  &scc_info_Pack_secondary_2eproto.base,
  &scc_info_STEERING_ANGLE_secondary_2eproto.base,
  &scc_info_TPMS_secondary_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_secondary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_secondary_2eproto = {
  false, false, descriptor_table_protodef_secondary_2eproto, "secondary.proto", 3929,
  &descriptor_table_secondary_2eproto_once, descriptor_table_secondary_2eproto_sccs, descriptor_table_secondary_2eproto_deps, 27, 0,
  schemas, file_default_instances, TableStruct_secondary_2eproto::offsets,
  file_level_metadata_secondary_2eproto, 27, file_level_enum_descriptors_secondary_2eproto, file_level_service_descriptors_secondary_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_secondary_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_secondary_2eproto)), true);
namespace secondary {

// ===================================================================

void IMU_ANGULAR_RATE::InitAsDefaultInstance() {
}
class IMU_ANGULAR_RATE::_Internal {
 public:
};

IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IMU_ANGULAR_RATE)
}
IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(const IMU_ANGULAR_RATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ang_rate_x_, &from.ang_rate_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ang_rate_z_) -
    reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
  // @@protoc_insertion_point(copy_constructor:secondary.IMU_ANGULAR_RATE)
}

void IMU_ANGULAR_RATE::SharedCtor() {
  ::memset(&ang_rate_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_rate_z_) -
      reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
}

IMU_ANGULAR_RATE::~IMU_ANGULAR_RATE() {
  // @@protoc_insertion_point(destructor:secondary.IMU_ANGULAR_RATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IMU_ANGULAR_RATE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IMU_ANGULAR_RATE::ArenaDtor(void* object) {
  IMU_ANGULAR_RATE* _this = reinterpret_cast< IMU_ANGULAR_RATE* >(object);
  (void)_this;
}
void IMU_ANGULAR_RATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMU_ANGULAR_RATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMU_ANGULAR_RATE& IMU_ANGULAR_RATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMU_ANGULAR_RATE_secondary_2eproto.base);
  return *internal_default_instance();
}


void IMU_ANGULAR_RATE::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IMU_ANGULAR_RATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ang_rate_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_rate_z_) -
      reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_ANGULAR_RATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ang_rate_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ang_rate_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ang_rate_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ang_rate_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ang_rate_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ang_rate_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMU_ANGULAR_RATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IMU_ANGULAR_RATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ang_rate_x = 1;
  if (!(this->ang_rate_x() <= 0 && this->ang_rate_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ang_rate_x(), target);
  }

  // float ang_rate_y = 2;
  if (!(this->ang_rate_y() <= 0 && this->ang_rate_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ang_rate_y(), target);
  }

  // float ang_rate_z = 3;
  if (!(this->ang_rate_z() <= 0 && this->ang_rate_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ang_rate_z(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IMU_ANGULAR_RATE)
  return target;
}

size_t IMU_ANGULAR_RATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IMU_ANGULAR_RATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ang_rate_x = 1;
  if (!(this->ang_rate_x() <= 0 && this->ang_rate_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float ang_rate_y = 2;
  if (!(this->ang_rate_y() <= 0 && this->ang_rate_y() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float ang_rate_z = 3;
  if (!(this->ang_rate_z() <= 0 && this->ang_rate_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMU_ANGULAR_RATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IMU_ANGULAR_RATE)
  GOOGLE_DCHECK_NE(&from, this);
  const IMU_ANGULAR_RATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMU_ANGULAR_RATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IMU_ANGULAR_RATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IMU_ANGULAR_RATE)
    MergeFrom(*source);
  }
}

void IMU_ANGULAR_RATE::MergeFrom(const IMU_ANGULAR_RATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IMU_ANGULAR_RATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ang_rate_x() <= 0 && from.ang_rate_x() >= 0)) {
    _internal_set_ang_rate_x(from._internal_ang_rate_x());
  }
  if (!(from.ang_rate_y() <= 0 && from.ang_rate_y() >= 0)) {
    _internal_set_ang_rate_y(from._internal_ang_rate_y());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.ang_rate_z() <= 0 && from.ang_rate_z() >= 0)) {
    _internal_set_ang_rate_z(from._internal_ang_rate_z());
  }
}

void IMU_ANGULAR_RATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IMU_ANGULAR_RATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMU_ANGULAR_RATE::CopyFrom(const IMU_ANGULAR_RATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IMU_ANGULAR_RATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_ANGULAR_RATE::IsInitialized() const {
  return true;
}

void IMU_ANGULAR_RATE::InternalSwap(IMU_ANGULAR_RATE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_ANGULAR_RATE, ang_rate_z_)
      + sizeof(IMU_ANGULAR_RATE::ang_rate_z_)
      - PROTOBUF_FIELD_OFFSET(IMU_ANGULAR_RATE, ang_rate_x_)>(
          reinterpret_cast<char*>(&ang_rate_x_),
          reinterpret_cast<char*>(&other->ang_rate_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_ANGULAR_RATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IMU_ACCELERATION::InitAsDefaultInstance() {
}
class IMU_ACCELERATION::_Internal {
 public:
};

IMU_ACCELERATION::IMU_ACCELERATION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IMU_ACCELERATION)
}
IMU_ACCELERATION::IMU_ACCELERATION(const IMU_ACCELERATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accel_x_, &from.accel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&accel_x_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IMU_ACCELERATION)
}

void IMU_ACCELERATION::SharedCtor() {
  ::memset(&accel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&accel_x_)) + sizeof(_inner_timestamp_));
}

IMU_ACCELERATION::~IMU_ACCELERATION() {
  // @@protoc_insertion_point(destructor:secondary.IMU_ACCELERATION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IMU_ACCELERATION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IMU_ACCELERATION::ArenaDtor(void* object) {
  IMU_ACCELERATION* _this = reinterpret_cast< IMU_ACCELERATION* >(object);
  (void)_this;
}
void IMU_ACCELERATION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMU_ACCELERATION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMU_ACCELERATION& IMU_ACCELERATION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMU_ACCELERATION_secondary_2eproto.base);
  return *internal_default_instance();
}


void IMU_ACCELERATION::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IMU_ACCELERATION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&accel_x_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_ACCELERATION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float accel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          accel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accel_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          accel_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMU_ACCELERATION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IMU_ACCELERATION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float accel_x = 1;
  if (!(this->accel_x() <= 0 && this->accel_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_accel_x(), target);
  }

  // float accel_y = 2;
  if (!(this->accel_y() <= 0 && this->accel_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_accel_y(), target);
  }

  // float accel_z = 3;
  if (!(this->accel_z() <= 0 && this->accel_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_accel_z(), target);
  }

  // sint32 temperature = 4;
  if (this->temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_temperature(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IMU_ACCELERATION)
  return target;
}

size_t IMU_ACCELERATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IMU_ACCELERATION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float accel_x = 1;
  if (!(this->accel_x() <= 0 && this->accel_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float accel_y = 2;
  if (!(this->accel_y() <= 0 && this->accel_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float accel_z = 3;
  if (!(this->accel_z() <= 0 && this->accel_z() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 temperature = 4;
  if (this->temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_temperature());
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMU_ACCELERATION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IMU_ACCELERATION)
  GOOGLE_DCHECK_NE(&from, this);
  const IMU_ACCELERATION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMU_ACCELERATION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IMU_ACCELERATION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IMU_ACCELERATION)
    MergeFrom(*source);
  }
}

void IMU_ACCELERATION::MergeFrom(const IMU_ACCELERATION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IMU_ACCELERATION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.accel_x() <= 0 && from.accel_x() >= 0)) {
    _internal_set_accel_x(from._internal_accel_x());
  }
  if (!(from.accel_y() <= 0 && from.accel_y() >= 0)) {
    _internal_set_accel_y(from._internal_accel_y());
  }
  if (!(from.accel_z() <= 0 && from.accel_z() >= 0)) {
    _internal_set_accel_z(from._internal_accel_z());
  }
  if (from.temperature() != 0) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IMU_ACCELERATION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IMU_ACCELERATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMU_ACCELERATION::CopyFrom(const IMU_ACCELERATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IMU_ACCELERATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_ACCELERATION::IsInitialized() const {
  return true;
}

void IMU_ACCELERATION::InternalSwap(IMU_ACCELERATION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_ACCELERATION, _inner_timestamp_)
      + sizeof(IMU_ACCELERATION::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IMU_ACCELERATION, accel_x_)>(
          reinterpret_cast<char*>(&accel_x_),
          reinterpret_cast<char*>(&other->accel_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_ACCELERATION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FL_0::InitAsDefaultInstance() {
}
class IRTS_FL_0::_Internal {
 public:
};

IRTS_FL_0::IRTS_FL_0(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_0)
}
IRTS_FL_0::IRTS_FL_0(const IRTS_FL_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_0)
}

void IRTS_FL_0::SharedCtor() {
  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
}

IRTS_FL_0::~IRTS_FL_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_0)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FL_0::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FL_0::ArenaDtor(void* object) {
  IRTS_FL_0* _this = reinterpret_cast< IRTS_FL_0* >(object);
  (void)_this;
}
void IRTS_FL_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FL_0& IRTS_FL_0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FL_0_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FL_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FL_0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel1(), target);
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel2(), target);
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel3(), target);
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_0)
  return target;
}

size_t IRTS_FL_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FL_0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FL_0)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FL_0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FL_0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FL_0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FL_0)
    MergeFrom(*source);
  }
}

void IRTS_FL_0::MergeFrom(const IRTS_FL_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel1() <= 0 && from.channel1() >= 0)) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (!(from.channel2() <= 0 && from.channel2() >= 0)) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (!(from.channel3() <= 0 && from.channel3() >= 0)) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (!(from.channel4() <= 0 && from.channel4() >= 0)) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FL_0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FL_0::CopyFrom(const IRTS_FL_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_0::IsInitialized() const {
  return true;
}

void IRTS_FL_0::InternalSwap(IRTS_FL_0* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_0, _inner_timestamp_)
      + sizeof(IRTS_FL_0::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FL_1::InitAsDefaultInstance() {
}
class IRTS_FL_1::_Internal {
 public:
};

IRTS_FL_1::IRTS_FL_1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_1)
}
IRTS_FL_1::IRTS_FL_1(const IRTS_FL_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_1)
}

void IRTS_FL_1::SharedCtor() {
  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
}

IRTS_FL_1::~IRTS_FL_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FL_1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FL_1::ArenaDtor(void* object) {
  IRTS_FL_1* _this = reinterpret_cast< IRTS_FL_1* >(object);
  (void)_this;
}
void IRTS_FL_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FL_1& IRTS_FL_1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FL_1_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FL_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FL_1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel5(), target);
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel6(), target);
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel7(), target);
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_1)
  return target;
}

size_t IRTS_FL_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FL_1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FL_1)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FL_1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FL_1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FL_1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FL_1)
    MergeFrom(*source);
  }
}

void IRTS_FL_1::MergeFrom(const IRTS_FL_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel5() <= 0 && from.channel5() >= 0)) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (!(from.channel6() <= 0 && from.channel6() >= 0)) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (!(from.channel7() <= 0 && from.channel7() >= 0)) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (!(from.channel8() <= 0 && from.channel8() >= 0)) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FL_1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FL_1::CopyFrom(const IRTS_FL_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_1::IsInitialized() const {
  return true;
}

void IRTS_FL_1::InternalSwap(IRTS_FL_1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_1, _inner_timestamp_)
      + sizeof(IRTS_FL_1::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FL_2::InitAsDefaultInstance() {
}
class IRTS_FL_2::_Internal {
 public:
};

IRTS_FL_2::IRTS_FL_2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_2)
}
IRTS_FL_2::IRTS_FL_2(const IRTS_FL_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_2)
}

void IRTS_FL_2::SharedCtor() {
  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
}

IRTS_FL_2::~IRTS_FL_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FL_2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FL_2::ArenaDtor(void* object) {
  IRTS_FL_2* _this = reinterpret_cast< IRTS_FL_2* >(object);
  (void)_this;
}
void IRTS_FL_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FL_2& IRTS_FL_2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FL_2_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FL_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FL_2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel9(), target);
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel10(), target);
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel11(), target);
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_2)
  return target;
}

size_t IRTS_FL_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FL_2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FL_2)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FL_2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FL_2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FL_2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FL_2)
    MergeFrom(*source);
  }
}

void IRTS_FL_2::MergeFrom(const IRTS_FL_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel9() <= 0 && from.channel9() >= 0)) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (!(from.channel10() <= 0 && from.channel10() >= 0)) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (!(from.channel11() <= 0 && from.channel11() >= 0)) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (!(from.channel12() <= 0 && from.channel12() >= 0)) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FL_2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FL_2::CopyFrom(const IRTS_FL_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_2::IsInitialized() const {
  return true;
}

void IRTS_FL_2::InternalSwap(IRTS_FL_2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_2, _inner_timestamp_)
      + sizeof(IRTS_FL_2::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FL_3::InitAsDefaultInstance() {
}
class IRTS_FL_3::_Internal {
 public:
};

IRTS_FL_3::IRTS_FL_3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_3)
}
IRTS_FL_3::IRTS_FL_3(const IRTS_FL_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_3)
}

void IRTS_FL_3::SharedCtor() {
  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
}

IRTS_FL_3::~IRTS_FL_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FL_3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FL_3::ArenaDtor(void* object) {
  IRTS_FL_3* _this = reinterpret_cast< IRTS_FL_3* >(object);
  (void)_this;
}
void IRTS_FL_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FL_3& IRTS_FL_3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FL_3_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FL_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FL_3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel13(), target);
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel14(), target);
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel15(), target);
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_3)
  return target;
}

size_t IRTS_FL_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FL_3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FL_3)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FL_3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FL_3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FL_3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FL_3)
    MergeFrom(*source);
  }
}

void IRTS_FL_3::MergeFrom(const IRTS_FL_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel13() <= 0 && from.channel13() >= 0)) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (!(from.channel14() <= 0 && from.channel14() >= 0)) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (!(from.channel15() <= 0 && from.channel15() >= 0)) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (!(from.channel16() <= 0 && from.channel16() >= 0)) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FL_3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FL_3::CopyFrom(const IRTS_FL_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_3::IsInitialized() const {
  return true;
}

void IRTS_FL_3::InternalSwap(IRTS_FL_3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_3, _inner_timestamp_)
      + sizeof(IRTS_FL_3::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FR_0::InitAsDefaultInstance() {
}
class IRTS_FR_0::_Internal {
 public:
};

IRTS_FR_0::IRTS_FR_0(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_0)
}
IRTS_FR_0::IRTS_FR_0(const IRTS_FR_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_0)
}

void IRTS_FR_0::SharedCtor() {
  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
}

IRTS_FR_0::~IRTS_FR_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_0)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FR_0::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FR_0::ArenaDtor(void* object) {
  IRTS_FR_0* _this = reinterpret_cast< IRTS_FR_0* >(object);
  (void)_this;
}
void IRTS_FR_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FR_0& IRTS_FR_0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FR_0_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FR_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FR_0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel1(), target);
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel2(), target);
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel3(), target);
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_0)
  return target;
}

size_t IRTS_FR_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FR_0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FR_0)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FR_0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FR_0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FR_0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FR_0)
    MergeFrom(*source);
  }
}

void IRTS_FR_0::MergeFrom(const IRTS_FR_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel1() <= 0 && from.channel1() >= 0)) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (!(from.channel2() <= 0 && from.channel2() >= 0)) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (!(from.channel3() <= 0 && from.channel3() >= 0)) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (!(from.channel4() <= 0 && from.channel4() >= 0)) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FR_0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FR_0::CopyFrom(const IRTS_FR_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_0::IsInitialized() const {
  return true;
}

void IRTS_FR_0::InternalSwap(IRTS_FR_0* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_0, _inner_timestamp_)
      + sizeof(IRTS_FR_0::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FR_1::InitAsDefaultInstance() {
}
class IRTS_FR_1::_Internal {
 public:
};

IRTS_FR_1::IRTS_FR_1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_1)
}
IRTS_FR_1::IRTS_FR_1(const IRTS_FR_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_1)
}

void IRTS_FR_1::SharedCtor() {
  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
}

IRTS_FR_1::~IRTS_FR_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FR_1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FR_1::ArenaDtor(void* object) {
  IRTS_FR_1* _this = reinterpret_cast< IRTS_FR_1* >(object);
  (void)_this;
}
void IRTS_FR_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FR_1& IRTS_FR_1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FR_1_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FR_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FR_1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel5(), target);
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel6(), target);
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel7(), target);
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_1)
  return target;
}

size_t IRTS_FR_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FR_1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FR_1)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FR_1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FR_1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FR_1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FR_1)
    MergeFrom(*source);
  }
}

void IRTS_FR_1::MergeFrom(const IRTS_FR_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel5() <= 0 && from.channel5() >= 0)) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (!(from.channel6() <= 0 && from.channel6() >= 0)) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (!(from.channel7() <= 0 && from.channel7() >= 0)) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (!(from.channel8() <= 0 && from.channel8() >= 0)) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FR_1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FR_1::CopyFrom(const IRTS_FR_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_1::IsInitialized() const {
  return true;
}

void IRTS_FR_1::InternalSwap(IRTS_FR_1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_1, _inner_timestamp_)
      + sizeof(IRTS_FR_1::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FR_2::InitAsDefaultInstance() {
}
class IRTS_FR_2::_Internal {
 public:
};

IRTS_FR_2::IRTS_FR_2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_2)
}
IRTS_FR_2::IRTS_FR_2(const IRTS_FR_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_2)
}

void IRTS_FR_2::SharedCtor() {
  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
}

IRTS_FR_2::~IRTS_FR_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FR_2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FR_2::ArenaDtor(void* object) {
  IRTS_FR_2* _this = reinterpret_cast< IRTS_FR_2* >(object);
  (void)_this;
}
void IRTS_FR_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FR_2& IRTS_FR_2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FR_2_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FR_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FR_2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel9(), target);
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel10(), target);
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel11(), target);
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_2)
  return target;
}

size_t IRTS_FR_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FR_2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FR_2)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FR_2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FR_2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FR_2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FR_2)
    MergeFrom(*source);
  }
}

void IRTS_FR_2::MergeFrom(const IRTS_FR_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel9() <= 0 && from.channel9() >= 0)) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (!(from.channel10() <= 0 && from.channel10() >= 0)) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (!(from.channel11() <= 0 && from.channel11() >= 0)) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (!(from.channel12() <= 0 && from.channel12() >= 0)) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FR_2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FR_2::CopyFrom(const IRTS_FR_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_2::IsInitialized() const {
  return true;
}

void IRTS_FR_2::InternalSwap(IRTS_FR_2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_2, _inner_timestamp_)
      + sizeof(IRTS_FR_2::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_FR_3::InitAsDefaultInstance() {
}
class IRTS_FR_3::_Internal {
 public:
};

IRTS_FR_3::IRTS_FR_3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_3)
}
IRTS_FR_3::IRTS_FR_3(const IRTS_FR_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_3)
}

void IRTS_FR_3::SharedCtor() {
  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
}

IRTS_FR_3::~IRTS_FR_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_FR_3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_FR_3::ArenaDtor(void* object) {
  IRTS_FR_3* _this = reinterpret_cast< IRTS_FR_3* >(object);
  (void)_this;
}
void IRTS_FR_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_FR_3& IRTS_FR_3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_FR_3_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_FR_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_FR_3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel13(), target);
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel14(), target);
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel15(), target);
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_3)
  return target;
}

size_t IRTS_FR_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_FR_3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_FR_3)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_FR_3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_FR_3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_FR_3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_FR_3)
    MergeFrom(*source);
  }
}

void IRTS_FR_3::MergeFrom(const IRTS_FR_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel13() <= 0 && from.channel13() >= 0)) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (!(from.channel14() <= 0 && from.channel14() >= 0)) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (!(from.channel15() <= 0 && from.channel15() >= 0)) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (!(from.channel16() <= 0 && from.channel16() >= 0)) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_FR_3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_FR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_FR_3::CopyFrom(const IRTS_FR_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_3::IsInitialized() const {
  return true;
}

void IRTS_FR_3::InternalSwap(IRTS_FR_3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_3, _inner_timestamp_)
      + sizeof(IRTS_FR_3::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RL_0::InitAsDefaultInstance() {
}
class IRTS_RL_0::_Internal {
 public:
};

IRTS_RL_0::IRTS_RL_0(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_0)
}
IRTS_RL_0::IRTS_RL_0(const IRTS_RL_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_0)
}

void IRTS_RL_0::SharedCtor() {
  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
}

IRTS_RL_0::~IRTS_RL_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_0)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RL_0::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RL_0::ArenaDtor(void* object) {
  IRTS_RL_0* _this = reinterpret_cast< IRTS_RL_0* >(object);
  (void)_this;
}
void IRTS_RL_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RL_0& IRTS_RL_0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RL_0_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RL_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RL_0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel1(), target);
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel2(), target);
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel3(), target);
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_0)
  return target;
}

size_t IRTS_RL_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RL_0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RL_0)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RL_0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RL_0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RL_0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RL_0)
    MergeFrom(*source);
  }
}

void IRTS_RL_0::MergeFrom(const IRTS_RL_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel1() <= 0 && from.channel1() >= 0)) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (!(from.channel2() <= 0 && from.channel2() >= 0)) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (!(from.channel3() <= 0 && from.channel3() >= 0)) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (!(from.channel4() <= 0 && from.channel4() >= 0)) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RL_0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RL_0::CopyFrom(const IRTS_RL_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_0::IsInitialized() const {
  return true;
}

void IRTS_RL_0::InternalSwap(IRTS_RL_0* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_0, _inner_timestamp_)
      + sizeof(IRTS_RL_0::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RL_1::InitAsDefaultInstance() {
}
class IRTS_RL_1::_Internal {
 public:
};

IRTS_RL_1::IRTS_RL_1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_1)
}
IRTS_RL_1::IRTS_RL_1(const IRTS_RL_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_1)
}

void IRTS_RL_1::SharedCtor() {
  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
}

IRTS_RL_1::~IRTS_RL_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RL_1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RL_1::ArenaDtor(void* object) {
  IRTS_RL_1* _this = reinterpret_cast< IRTS_RL_1* >(object);
  (void)_this;
}
void IRTS_RL_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RL_1& IRTS_RL_1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RL_1_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RL_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RL_1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel5(), target);
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel6(), target);
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel7(), target);
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_1)
  return target;
}

size_t IRTS_RL_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RL_1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RL_1)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RL_1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RL_1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RL_1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RL_1)
    MergeFrom(*source);
  }
}

void IRTS_RL_1::MergeFrom(const IRTS_RL_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel5() <= 0 && from.channel5() >= 0)) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (!(from.channel6() <= 0 && from.channel6() >= 0)) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (!(from.channel7() <= 0 && from.channel7() >= 0)) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (!(from.channel8() <= 0 && from.channel8() >= 0)) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RL_1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RL_1::CopyFrom(const IRTS_RL_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_1::IsInitialized() const {
  return true;
}

void IRTS_RL_1::InternalSwap(IRTS_RL_1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_1, _inner_timestamp_)
      + sizeof(IRTS_RL_1::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RL_2::InitAsDefaultInstance() {
}
class IRTS_RL_2::_Internal {
 public:
};

IRTS_RL_2::IRTS_RL_2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_2)
}
IRTS_RL_2::IRTS_RL_2(const IRTS_RL_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_2)
}

void IRTS_RL_2::SharedCtor() {
  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
}

IRTS_RL_2::~IRTS_RL_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RL_2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RL_2::ArenaDtor(void* object) {
  IRTS_RL_2* _this = reinterpret_cast< IRTS_RL_2* >(object);
  (void)_this;
}
void IRTS_RL_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RL_2& IRTS_RL_2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RL_2_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RL_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RL_2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel9(), target);
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel10(), target);
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel11(), target);
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_2)
  return target;
}

size_t IRTS_RL_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RL_2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RL_2)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RL_2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RL_2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RL_2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RL_2)
    MergeFrom(*source);
  }
}

void IRTS_RL_2::MergeFrom(const IRTS_RL_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel9() <= 0 && from.channel9() >= 0)) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (!(from.channel10() <= 0 && from.channel10() >= 0)) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (!(from.channel11() <= 0 && from.channel11() >= 0)) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (!(from.channel12() <= 0 && from.channel12() >= 0)) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RL_2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RL_2::CopyFrom(const IRTS_RL_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_2::IsInitialized() const {
  return true;
}

void IRTS_RL_2::InternalSwap(IRTS_RL_2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_2, _inner_timestamp_)
      + sizeof(IRTS_RL_2::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RL_3::InitAsDefaultInstance() {
}
class IRTS_RL_3::_Internal {
 public:
};

IRTS_RL_3::IRTS_RL_3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_3)
}
IRTS_RL_3::IRTS_RL_3(const IRTS_RL_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_3)
}

void IRTS_RL_3::SharedCtor() {
  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
}

IRTS_RL_3::~IRTS_RL_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RL_3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RL_3::ArenaDtor(void* object) {
  IRTS_RL_3* _this = reinterpret_cast< IRTS_RL_3* >(object);
  (void)_this;
}
void IRTS_RL_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RL_3& IRTS_RL_3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RL_3_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RL_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RL_3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel13(), target);
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel14(), target);
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel15(), target);
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_3)
  return target;
}

size_t IRTS_RL_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RL_3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RL_3)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RL_3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RL_3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RL_3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RL_3)
    MergeFrom(*source);
  }
}

void IRTS_RL_3::MergeFrom(const IRTS_RL_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel13() <= 0 && from.channel13() >= 0)) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (!(from.channel14() <= 0 && from.channel14() >= 0)) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (!(from.channel15() <= 0 && from.channel15() >= 0)) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (!(from.channel16() <= 0 && from.channel16() >= 0)) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RL_3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RL_3::CopyFrom(const IRTS_RL_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_3::IsInitialized() const {
  return true;
}

void IRTS_RL_3::InternalSwap(IRTS_RL_3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_3, _inner_timestamp_)
      + sizeof(IRTS_RL_3::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RR_0::InitAsDefaultInstance() {
}
class IRTS_RR_0::_Internal {
 public:
};

IRTS_RR_0::IRTS_RR_0(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_0)
}
IRTS_RR_0::IRTS_RR_0(const IRTS_RR_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_0)
}

void IRTS_RR_0::SharedCtor() {
  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
}

IRTS_RR_0::~IRTS_RR_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_0)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RR_0::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RR_0::ArenaDtor(void* object) {
  IRTS_RR_0* _this = reinterpret_cast< IRTS_RR_0* >(object);
  (void)_this;
}
void IRTS_RR_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RR_0& IRTS_RR_0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RR_0_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RR_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RR_0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel1(), target);
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel2(), target);
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel3(), target);
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel4(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_0)
  return target;
}

size_t IRTS_RR_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel1 = 1;
  if (!(this->channel1() <= 0 && this->channel1() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel2 = 2;
  if (!(this->channel2() <= 0 && this->channel2() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel3 = 3;
  if (!(this->channel3() <= 0 && this->channel3() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel4 = 4;
  if (!(this->channel4() <= 0 && this->channel4() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RR_0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RR_0)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RR_0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RR_0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RR_0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RR_0)
    MergeFrom(*source);
  }
}

void IRTS_RR_0::MergeFrom(const IRTS_RR_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel1() <= 0 && from.channel1() >= 0)) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (!(from.channel2() <= 0 && from.channel2() >= 0)) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (!(from.channel3() <= 0 && from.channel3() >= 0)) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (!(from.channel4() <= 0 && from.channel4() >= 0)) {
    _internal_set_channel4(from._internal_channel4());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RR_0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RR_0::CopyFrom(const IRTS_RR_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_0::IsInitialized() const {
  return true;
}

void IRTS_RR_0::InternalSwap(IRTS_RR_0* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_0, _inner_timestamp_)
      + sizeof(IRTS_RR_0::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RR_1::InitAsDefaultInstance() {
}
class IRTS_RR_1::_Internal {
 public:
};

IRTS_RR_1::IRTS_RR_1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_1)
}
IRTS_RR_1::IRTS_RR_1(const IRTS_RR_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_1)
}

void IRTS_RR_1::SharedCtor() {
  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
}

IRTS_RR_1::~IRTS_RR_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RR_1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RR_1::ArenaDtor(void* object) {
  IRTS_RR_1* _this = reinterpret_cast< IRTS_RR_1* >(object);
  (void)_this;
}
void IRTS_RR_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RR_1& IRTS_RR_1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RR_1_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RR_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RR_1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel5(), target);
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel6(), target);
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel7(), target);
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel8(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_1)
  return target;
}

size_t IRTS_RR_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel5 = 1;
  if (!(this->channel5() <= 0 && this->channel5() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel6 = 2;
  if (!(this->channel6() <= 0 && this->channel6() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel7 = 3;
  if (!(this->channel7() <= 0 && this->channel7() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel8 = 4;
  if (!(this->channel8() <= 0 && this->channel8() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RR_1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RR_1)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RR_1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RR_1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RR_1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RR_1)
    MergeFrom(*source);
  }
}

void IRTS_RR_1::MergeFrom(const IRTS_RR_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel5() <= 0 && from.channel5() >= 0)) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (!(from.channel6() <= 0 && from.channel6() >= 0)) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (!(from.channel7() <= 0 && from.channel7() >= 0)) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (!(from.channel8() <= 0 && from.channel8() >= 0)) {
    _internal_set_channel8(from._internal_channel8());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RR_1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RR_1::CopyFrom(const IRTS_RR_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_1::IsInitialized() const {
  return true;
}

void IRTS_RR_1::InternalSwap(IRTS_RR_1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_1, _inner_timestamp_)
      + sizeof(IRTS_RR_1::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RR_2::InitAsDefaultInstance() {
}
class IRTS_RR_2::_Internal {
 public:
};

IRTS_RR_2::IRTS_RR_2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_2)
}
IRTS_RR_2::IRTS_RR_2(const IRTS_RR_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_2)
}

void IRTS_RR_2::SharedCtor() {
  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
}

IRTS_RR_2::~IRTS_RR_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RR_2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RR_2::ArenaDtor(void* object) {
  IRTS_RR_2* _this = reinterpret_cast< IRTS_RR_2* >(object);
  (void)_this;
}
void IRTS_RR_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RR_2& IRTS_RR_2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RR_2_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RR_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RR_2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel9(), target);
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel10(), target);
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel11(), target);
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel12(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_2)
  return target;
}

size_t IRTS_RR_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel9 = 1;
  if (!(this->channel9() <= 0 && this->channel9() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel10 = 2;
  if (!(this->channel10() <= 0 && this->channel10() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel11 = 3;
  if (!(this->channel11() <= 0 && this->channel11() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel12 = 4;
  if (!(this->channel12() <= 0 && this->channel12() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RR_2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RR_2)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RR_2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RR_2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RR_2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RR_2)
    MergeFrom(*source);
  }
}

void IRTS_RR_2::MergeFrom(const IRTS_RR_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel9() <= 0 && from.channel9() >= 0)) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (!(from.channel10() <= 0 && from.channel10() >= 0)) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (!(from.channel11() <= 0 && from.channel11() >= 0)) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (!(from.channel12() <= 0 && from.channel12() >= 0)) {
    _internal_set_channel12(from._internal_channel12());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RR_2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RR_2::CopyFrom(const IRTS_RR_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_2::IsInitialized() const {
  return true;
}

void IRTS_RR_2::InternalSwap(IRTS_RR_2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_2, _inner_timestamp_)
      + sizeof(IRTS_RR_2::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRTS_RR_3::InitAsDefaultInstance() {
}
class IRTS_RR_3::_Internal {
 public:
};

IRTS_RR_3::IRTS_RR_3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_3)
}
IRTS_RR_3::IRTS_RR_3(const IRTS_RR_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_3)
}

void IRTS_RR_3::SharedCtor() {
  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
}

IRTS_RR_3::~IRTS_RR_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRTS_RR_3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRTS_RR_3::ArenaDtor(void* object) {
  IRTS_RR_3* _this = reinterpret_cast< IRTS_RR_3* >(object);
  (void)_this;
}
void IRTS_RR_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRTS_RR_3& IRTS_RR_3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRTS_RR_3_secondary_2eproto.base);
  return *internal_default_instance();
}


void IRTS_RR_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRTS_RR_3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel13(), target);
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel14(), target);
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel15(), target);
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel16(), target);
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_3)
  return target;
}

size_t IRTS_RR_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel13 = 1;
  if (!(this->channel13() <= 0 && this->channel13() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel14 = 2;
  if (!(this->channel14() <= 0 && this->channel14() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel15 = 3;
  if (!(this->channel15() <= 0 && this->channel15() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel16 = 4;
  if (!(this->channel16() <= 0 && this->channel16() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 5;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRTS_RR_3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.IRTS_RR_3)
  GOOGLE_DCHECK_NE(&from, this);
  const IRTS_RR_3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRTS_RR_3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.IRTS_RR_3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.IRTS_RR_3)
    MergeFrom(*source);
  }
}

void IRTS_RR_3::MergeFrom(const IRTS_RR_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel13() <= 0 && from.channel13() >= 0)) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (!(from.channel14() <= 0 && from.channel14() >= 0)) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (!(from.channel15() <= 0 && from.channel15() >= 0)) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (!(from.channel16() <= 0 && from.channel16() >= 0)) {
    _internal_set_channel16(from._internal_channel16());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void IRTS_RR_3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.IRTS_RR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRTS_RR_3::CopyFrom(const IRTS_RR_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_3::IsInitialized() const {
  return true;
}

void IRTS_RR_3::InternalSwap(IRTS_RR_3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_3, _inner_timestamp_)
      + sizeof(IRTS_RR_3::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPS_COORDS::InitAsDefaultInstance() {
}
class GPS_COORDS::_Internal {
 public:
};

GPS_COORDS::GPS_COORDS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.GPS_COORDS)
}
GPS_COORDS::GPS_COORDS(const GPS_COORDS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.GPS_COORDS)
}

void GPS_COORDS::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(_inner_timestamp_));
}

GPS_COORDS::~GPS_COORDS() {
  // @@protoc_insertion_point(destructor:secondary.GPS_COORDS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPS_COORDS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GPS_COORDS::ArenaDtor(void* object) {
  GPS_COORDS* _this = reinterpret_cast< GPS_COORDS* >(object);
  (void)_this;
}
void GPS_COORDS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPS_COORDS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPS_COORDS& GPS_COORDS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPS_COORDS_secondary_2eproto.base);
  return *internal_default_instance();
}


void GPS_COORDS::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.GPS_COORDS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS_COORDS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPS_COORDS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.GPS_COORDS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // float longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.GPS_COORDS)
  return target;
}

size_t GPS_COORDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.GPS_COORDS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPS_COORDS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.GPS_COORDS)
  GOOGLE_DCHECK_NE(&from, this);
  const GPS_COORDS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPS_COORDS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.GPS_COORDS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.GPS_COORDS)
    MergeFrom(*source);
  }
}

void GPS_COORDS::MergeFrom(const GPS_COORDS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.GPS_COORDS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void GPS_COORDS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.GPS_COORDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS_COORDS::CopyFrom(const GPS_COORDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.GPS_COORDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS_COORDS::IsInitialized() const {
  return true;
}

void GPS_COORDS::InternalSwap(GPS_COORDS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPS_COORDS, _inner_timestamp_)
      + sizeof(GPS_COORDS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GPS_COORDS, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS_COORDS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPS_SPEED::InitAsDefaultInstance() {
}
class GPS_SPEED::_Internal {
 public:
};

GPS_SPEED::GPS_SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.GPS_SPEED)
}
GPS_SPEED::GPS_SPEED(const GPS_SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:secondary.GPS_SPEED)
}

void GPS_SPEED::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(speed_));
}

GPS_SPEED::~GPS_SPEED() {
  // @@protoc_insertion_point(destructor:secondary.GPS_SPEED)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPS_SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GPS_SPEED::ArenaDtor(void* object) {
  GPS_SPEED* _this = reinterpret_cast< GPS_SPEED* >(object);
  (void)_this;
}
void GPS_SPEED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPS_SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPS_SPEED& GPS_SPEED::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPS_SPEED_secondary_2eproto.base);
  return *internal_default_instance();
}


void GPS_SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.GPS_SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS_SPEED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPS_SPEED::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.GPS_SPEED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_speed(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.GPS_SPEED)
  return target;
}

size_t GPS_SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.GPS_SPEED)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // uint32 speed = 1;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPS_SPEED::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.GPS_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  const GPS_SPEED* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPS_SPEED>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.GPS_SPEED)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.GPS_SPEED)
    MergeFrom(*source);
  }
}

void GPS_SPEED::MergeFrom(const GPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.GPS_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
}

void GPS_SPEED::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.GPS_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS_SPEED::CopyFrom(const GPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.GPS_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS_SPEED::IsInitialized() const {
  return true;
}

void GPS_SPEED::InternalSwap(GPS_SPEED* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPS_SPEED, speed_)
      + sizeof(GPS_SPEED::speed_)
      - PROTOBUF_FIELD_OFFSET(GPS_SPEED, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS_SPEED::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LAP_COUNT::InitAsDefaultInstance() {
}
class LAP_COUNT::_Internal {
 public:
};

LAP_COUNT::LAP_COUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.LAP_COUNT)
}
LAP_COUNT::LAP_COUNT(const LAP_COUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lap_count_, &from.lap_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&lap_count_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.LAP_COUNT)
}

void LAP_COUNT::SharedCtor() {
  ::memset(&lap_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&lap_count_)) + sizeof(_inner_timestamp_));
}

LAP_COUNT::~LAP_COUNT() {
  // @@protoc_insertion_point(destructor:secondary.LAP_COUNT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LAP_COUNT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LAP_COUNT::ArenaDtor(void* object) {
  LAP_COUNT* _this = reinterpret_cast< LAP_COUNT* >(object);
  (void)_this;
}
void LAP_COUNT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LAP_COUNT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LAP_COUNT& LAP_COUNT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LAP_COUNT_secondary_2eproto.base);
  return *internal_default_instance();
}


void LAP_COUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.LAP_COUNT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lap_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&lap_count_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LAP_COUNT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lap_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lap_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lap_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LAP_COUNT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.LAP_COUNT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lap_count = 1;
  if (this->lap_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lap_count(), target);
  }

  // uint32 lap_time = 2;
  if (this->lap_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lap_time(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.LAP_COUNT)
  return target;
}

size_t LAP_COUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.LAP_COUNT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lap_count = 1;
  if (this->lap_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lap_count());
  }

  // uint32 lap_time = 2;
  if (this->lap_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lap_time());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LAP_COUNT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.LAP_COUNT)
  GOOGLE_DCHECK_NE(&from, this);
  const LAP_COUNT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LAP_COUNT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.LAP_COUNT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.LAP_COUNT)
    MergeFrom(*source);
  }
}

void LAP_COUNT::MergeFrom(const LAP_COUNT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.LAP_COUNT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lap_count() != 0) {
    _internal_set_lap_count(from._internal_lap_count());
  }
  if (from.lap_time() != 0) {
    _internal_set_lap_time(from._internal_lap_time());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void LAP_COUNT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.LAP_COUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LAP_COUNT::CopyFrom(const LAP_COUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.LAP_COUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LAP_COUNT::IsInitialized() const {
  return true;
}

void LAP_COUNT::InternalSwap(LAP_COUNT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LAP_COUNT, _inner_timestamp_)
      + sizeof(LAP_COUNT::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LAP_COUNT, lap_count_)>(
          reinterpret_cast<char*>(&lap_count_),
          reinterpret_cast<char*>(&other->lap_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LAP_COUNT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PEDALS_OUTPUT::InitAsDefaultInstance() {
}
class PEDALS_OUTPUT::_Internal {
 public:
};

PEDALS_OUTPUT::PEDALS_OUTPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.PEDALS_OUTPUT)
}
PEDALS_OUTPUT::PEDALS_OUTPUT(const PEDALS_OUTPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&apps_, &from.apps_,
    static_cast<size_t>(reinterpret_cast<char*>(&bse_rear_) -
    reinterpret_cast<char*>(&apps_)) + sizeof(bse_rear_));
  // @@protoc_insertion_point(copy_constructor:secondary.PEDALS_OUTPUT)
}

void PEDALS_OUTPUT::SharedCtor() {
  ::memset(&apps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bse_rear_) -
      reinterpret_cast<char*>(&apps_)) + sizeof(bse_rear_));
}

PEDALS_OUTPUT::~PEDALS_OUTPUT() {
  // @@protoc_insertion_point(destructor:secondary.PEDALS_OUTPUT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PEDALS_OUTPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PEDALS_OUTPUT::ArenaDtor(void* object) {
  PEDALS_OUTPUT* _this = reinterpret_cast< PEDALS_OUTPUT* >(object);
  (void)_this;
}
void PEDALS_OUTPUT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PEDALS_OUTPUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PEDALS_OUTPUT& PEDALS_OUTPUT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PEDALS_OUTPUT_secondary_2eproto.base);
  return *internal_default_instance();
}


void PEDALS_OUTPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.PEDALS_OUTPUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&apps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bse_rear_) -
      reinterpret_cast<char*>(&apps_)) + sizeof(bse_rear_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PEDALS_OUTPUT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bse_front = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bse_front_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bse_rear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          bse_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PEDALS_OUTPUT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.PEDALS_OUTPUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 apps = 1;
  if (this->apps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_apps(), target);
  }

  // float bse_front = 2;
  if (!(this->bse_front() <= 0 && this->bse_front() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bse_front(), target);
  }

  // float bse_rear = 3;
  if (!(this->bse_rear() <= 0 && this->bse_rear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bse_rear(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.PEDALS_OUTPUT)
  return target;
}

size_t PEDALS_OUTPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.PEDALS_OUTPUT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 apps = 1;
  if (this->apps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apps());
  }

  // float bse_front = 2;
  if (!(this->bse_front() <= 0 && this->bse_front() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float bse_rear = 3;
  if (!(this->bse_rear() <= 0 && this->bse_rear() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PEDALS_OUTPUT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.PEDALS_OUTPUT)
  GOOGLE_DCHECK_NE(&from, this);
  const PEDALS_OUTPUT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PEDALS_OUTPUT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.PEDALS_OUTPUT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.PEDALS_OUTPUT)
    MergeFrom(*source);
  }
}

void PEDALS_OUTPUT::MergeFrom(const PEDALS_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.PEDALS_OUTPUT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.apps() != 0) {
    _internal_set_apps(from._internal_apps());
  }
  if (!(from.bse_front() <= 0 && from.bse_front() >= 0)) {
    _internal_set_bse_front(from._internal_bse_front());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.bse_rear() <= 0 && from.bse_rear() >= 0)) {
    _internal_set_bse_rear(from._internal_bse_rear());
  }
}

void PEDALS_OUTPUT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.PEDALS_OUTPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEDALS_OUTPUT::CopyFrom(const PEDALS_OUTPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.PEDALS_OUTPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEDALS_OUTPUT::IsInitialized() const {
  return true;
}

void PEDALS_OUTPUT::InternalSwap(PEDALS_OUTPUT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PEDALS_OUTPUT, bse_rear_)
      + sizeof(PEDALS_OUTPUT::bse_rear_)
      - PROTOBUF_FIELD_OFFSET(PEDALS_OUTPUT, apps_)>(
          reinterpret_cast<char*>(&apps_),
          reinterpret_cast<char*>(&other->apps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PEDALS_OUTPUT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STEERING_ANGLE::InitAsDefaultInstance() {
}
class STEERING_ANGLE::_Internal {
 public:
};

STEERING_ANGLE::STEERING_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.STEERING_ANGLE)
}
STEERING_ANGLE::STEERING_ANGLE(const STEERING_ANGLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_inner_timestamp_, &from._inner_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:secondary.STEERING_ANGLE)
}

void STEERING_ANGLE::SharedCtor() {
  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(angle_));
}

STEERING_ANGLE::~STEERING_ANGLE() {
  // @@protoc_insertion_point(destructor:secondary.STEERING_ANGLE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void STEERING_ANGLE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void STEERING_ANGLE::ArenaDtor(void* object) {
  STEERING_ANGLE* _this = reinterpret_cast< STEERING_ANGLE* >(object);
  (void)_this;
}
void STEERING_ANGLE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STEERING_ANGLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STEERING_ANGLE& STEERING_ANGLE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STEERING_ANGLE_secondary_2eproto.base);
  return *internal_default_instance();
}


void STEERING_ANGLE::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.STEERING_ANGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_inner_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&_inner_timestamp_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEERING_ANGLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STEERING_ANGLE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.STEERING_ANGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_angle(), target);
  }

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.STEERING_ANGLE)
  return target;
}

size_t STEERING_ANGLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.STEERING_ANGLE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 _inner_timestamp = 2;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STEERING_ANGLE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.STEERING_ANGLE)
  GOOGLE_DCHECK_NE(&from, this);
  const STEERING_ANGLE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STEERING_ANGLE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.STEERING_ANGLE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.STEERING_ANGLE)
    MergeFrom(*source);
  }
}

void STEERING_ANGLE::MergeFrom(const STEERING_ANGLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.STEERING_ANGLE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
}

void STEERING_ANGLE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.STEERING_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STEERING_ANGLE::CopyFrom(const STEERING_ANGLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.STEERING_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEERING_ANGLE::IsInitialized() const {
  return true;
}

void STEERING_ANGLE::InternalSwap(STEERING_ANGLE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEERING_ANGLE, angle_)
      + sizeof(STEERING_ANGLE::angle_)
      - PROTOBUF_FIELD_OFFSET(STEERING_ANGLE, _inner_timestamp_)>(
          reinterpret_cast<char*>(&_inner_timestamp_),
          reinterpret_cast<char*>(&other->_inner_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEERING_ANGLE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CONTROL_STATE::InitAsDefaultInstance() {
}
class CONTROL_STATE::_Internal {
 public:
};

CONTROL_STATE::CONTROL_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.CONTROL_STATE)
}
CONTROL_STATE::CONTROL_STATE(const CONTROL_STATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&map_pw_, &from.map_pw_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_tv_) -
    reinterpret_cast<char*>(&map_pw_)) + sizeof(map_tv_));
  // @@protoc_insertion_point(copy_constructor:secondary.CONTROL_STATE)
}

void CONTROL_STATE::SharedCtor() {
  ::memset(&map_pw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_tv_) -
      reinterpret_cast<char*>(&map_pw_)) + sizeof(map_tv_));
}

CONTROL_STATE::~CONTROL_STATE() {
  // @@protoc_insertion_point(destructor:secondary.CONTROL_STATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CONTROL_STATE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CONTROL_STATE::ArenaDtor(void* object) {
  CONTROL_STATE* _this = reinterpret_cast< CONTROL_STATE* >(object);
  (void)_this;
}
void CONTROL_STATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CONTROL_STATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CONTROL_STATE& CONTROL_STATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CONTROL_STATE_secondary_2eproto.base);
  return *internal_default_instance();
}


void CONTROL_STATE::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.CONTROL_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&map_pw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_tv_) -
      reinterpret_cast<char*>(&map_pw_)) + sizeof(map_tv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CONTROL_STATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float map_pw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          map_pw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float map_sc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          map_sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float map_tv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          map_tv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CONTROL_STATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.CONTROL_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float map_pw = 1;
  if (!(this->map_pw() <= 0 && this->map_pw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_map_pw(), target);
  }

  // float map_sc = 2;
  if (!(this->map_sc() <= 0 && this->map_sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_map_sc(), target);
  }

  // float map_tv = 3;
  if (!(this->map_tv() <= 0 && this->map_tv() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_map_tv(), target);
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.CONTROL_STATE)
  return target;
}

size_t CONTROL_STATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.CONTROL_STATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float map_pw = 1;
  if (!(this->map_pw() <= 0 && this->map_pw() >= 0)) {
    total_size += 1 + 4;
  }

  // float map_sc = 2;
  if (!(this->map_sc() <= 0 && this->map_sc() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 _inner_timestamp = 4;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  // float map_tv = 3;
  if (!(this->map_tv() <= 0 && this->map_tv() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CONTROL_STATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.CONTROL_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  const CONTROL_STATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CONTROL_STATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.CONTROL_STATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.CONTROL_STATE)
    MergeFrom(*source);
  }
}

void CONTROL_STATE::MergeFrom(const CONTROL_STATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.CONTROL_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.map_pw() <= 0 && from.map_pw() >= 0)) {
    _internal_set_map_pw(from._internal_map_pw());
  }
  if (!(from.map_sc() <= 0 && from.map_sc() >= 0)) {
    _internal_set_map_sc(from._internal_map_sc());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
  if (!(from.map_tv() <= 0 && from.map_tv() >= 0)) {
    _internal_set_map_tv(from._internal_map_tv());
  }
}

void CONTROL_STATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.CONTROL_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CONTROL_STATE::CopyFrom(const CONTROL_STATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.CONTROL_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONTROL_STATE::IsInitialized() const {
  return true;
}

void CONTROL_STATE::InternalSwap(CONTROL_STATE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CONTROL_STATE, map_tv_)
      + sizeof(CONTROL_STATE::map_tv_)
      - PROTOBUF_FIELD_OFFSET(CONTROL_STATE, map_pw_)>(
          reinterpret_cast<char*>(&map_pw_),
          reinterpret_cast<char*>(&other->map_pw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CONTROL_STATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TPMS::InitAsDefaultInstance() {
}
class TPMS::_Internal {
 public:
};

TPMS::TPMS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.TPMS)
}
TPMS::TPMS(const TPMS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fl_pressure_, &from.fl_pressure_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&fl_pressure_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.TPMS)
}

void TPMS::SharedCtor() {
  ::memset(&fl_pressure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&fl_pressure_)) + sizeof(_inner_timestamp_));
}

TPMS::~TPMS() {
  // @@protoc_insertion_point(destructor:secondary.TPMS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TPMS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TPMS::ArenaDtor(void* object) {
  TPMS* _this = reinterpret_cast< TPMS* >(object);
  (void)_this;
}
void TPMS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TPMS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TPMS& TPMS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPMS_secondary_2eproto.base);
  return *internal_default_instance();
}


void TPMS::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.TPMS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fl_pressure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&fl_pressure_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPMS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float fl_pressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fl_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fr_pressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fr_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rl_pressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          rl_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rr_pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          rr_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 fl_temperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fl_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fr_temperature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fr_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rl_temperature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rl_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rr_temperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rr_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TPMS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.TPMS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fl_pressure = 1;
  if (!(this->fl_pressure() <= 0 && this->fl_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fl_pressure(), target);
  }

  // float fr_pressure = 2;
  if (!(this->fr_pressure() <= 0 && this->fr_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fr_pressure(), target);
  }

  // float rl_pressure = 3;
  if (!(this->rl_pressure() <= 0 && this->rl_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rl_pressure(), target);
  }

  // float rr_pressure = 4;
  if (!(this->rr_pressure() <= 0 && this->rr_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rr_pressure(), target);
  }

  // uint32 fl_temperature = 5;
  if (this->fl_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_fl_temperature(), target);
  }

  // uint32 fr_temperature = 6;
  if (this->fr_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fr_temperature(), target);
  }

  // uint32 rl_temperature = 7;
  if (this->rl_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rl_temperature(), target);
  }

  // uint32 rr_temperature = 8;
  if (this->rr_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rr_temperature(), target);
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.TPMS)
  return target;
}

size_t TPMS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.TPMS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fl_pressure = 1;
  if (!(this->fl_pressure() <= 0 && this->fl_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float fr_pressure = 2;
  if (!(this->fr_pressure() <= 0 && this->fr_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float rl_pressure = 3;
  if (!(this->rl_pressure() <= 0 && this->rl_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float rr_pressure = 4;
  if (!(this->rr_pressure() <= 0 && this->rr_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 fl_temperature = 5;
  if (this->fl_temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fl_temperature());
  }

  // uint32 fr_temperature = 6;
  if (this->fr_temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fr_temperature());
  }

  // uint32 rl_temperature = 7;
  if (this->rl_temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rl_temperature());
  }

  // uint32 rr_temperature = 8;
  if (this->rr_temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rr_temperature());
  }

  // uint64 _inner_timestamp = 9;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPMS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.TPMS)
  GOOGLE_DCHECK_NE(&from, this);
  const TPMS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPMS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.TPMS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.TPMS)
    MergeFrom(*source);
  }
}

void TPMS::MergeFrom(const TPMS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.TPMS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fl_pressure() <= 0 && from.fl_pressure() >= 0)) {
    _internal_set_fl_pressure(from._internal_fl_pressure());
  }
  if (!(from.fr_pressure() <= 0 && from.fr_pressure() >= 0)) {
    _internal_set_fr_pressure(from._internal_fr_pressure());
  }
  if (!(from.rl_pressure() <= 0 && from.rl_pressure() >= 0)) {
    _internal_set_rl_pressure(from._internal_rl_pressure());
  }
  if (!(from.rr_pressure() <= 0 && from.rr_pressure() >= 0)) {
    _internal_set_rr_pressure(from._internal_rr_pressure());
  }
  if (from.fl_temperature() != 0) {
    _internal_set_fl_temperature(from._internal_fl_temperature());
  }
  if (from.fr_temperature() != 0) {
    _internal_set_fr_temperature(from._internal_fr_temperature());
  }
  if (from.rl_temperature() != 0) {
    _internal_set_rl_temperature(from._internal_rl_temperature());
  }
  if (from.rr_temperature() != 0) {
    _internal_set_rr_temperature(from._internal_rr_temperature());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void TPMS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.TPMS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPMS::CopyFrom(const TPMS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.TPMS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPMS::IsInitialized() const {
  return true;
}

void TPMS::InternalSwap(TPMS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPMS, _inner_timestamp_)
      + sizeof(TPMS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(TPMS, fl_pressure_)>(
          reinterpret_cast<char*>(&fl_pressure_),
          reinterpret_cast<char*>(&other->fl_pressure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPMS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LC_STATUS::InitAsDefaultInstance() {
}
class LC_STATUS::_Internal {
 public:
};

LC_STATUS::LC_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.LC_STATUS)
}
LC_STATUS::LC_STATUS(const LC_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_time_, &from.last_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_inner_timestamp_) -
    reinterpret_cast<char*>(&last_time_)) + sizeof(_inner_timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.LC_STATUS)
}

void LC_STATUS::SharedCtor() {
  ::memset(&last_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&last_time_)) + sizeof(_inner_timestamp_));
}

LC_STATUS::~LC_STATUS() {
  // @@protoc_insertion_point(destructor:secondary.LC_STATUS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LC_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LC_STATUS::ArenaDtor(void* object) {
  LC_STATUS* _this = reinterpret_cast< LC_STATUS* >(object);
  (void)_this;
}
void LC_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LC_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LC_STATUS& LC_STATUS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LC_STATUS_secondary_2eproto.base);
  return *internal_default_instance();
}


void LC_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.LC_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&last_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_inner_timestamp_) -
      reinterpret_cast<char*>(&last_time_)) + sizeof(_inner_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LC_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 last_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lap_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lap_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _inner_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _inner_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LC_STATUS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.LC_STATUS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 last_time = 1;
  if (this->last_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_time(), target);
  }

  // sint32 lap_number = 2;
  if (this->lap_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_lap_number(), target);
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal__inner_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.LC_STATUS)
  return target;
}

size_t LC_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.LC_STATUS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 last_time = 1;
  if (this->last_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_time());
  }

  // sint32 lap_number = 2;
  if (this->lap_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lap_number());
  }

  // uint64 _inner_timestamp = 3;
  if (this->_inner_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal__inner_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LC_STATUS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.LC_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const LC_STATUS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LC_STATUS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.LC_STATUS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.LC_STATUS)
    MergeFrom(*source);
  }
}

void LC_STATUS::MergeFrom(const LC_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.LC_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_time() != 0) {
    _internal_set_last_time(from._internal_last_time());
  }
  if (from.lap_number() != 0) {
    _internal_set_lap_number(from._internal_lap_number());
  }
  if (from._inner_timestamp() != 0) {
    _internal_set__inner_timestamp(from._internal__inner_timestamp());
  }
}

void LC_STATUS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.LC_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_STATUS::CopyFrom(const LC_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.LC_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_STATUS::IsInitialized() const {
  return true;
}

void LC_STATUS::InternalSwap(LC_STATUS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LC_STATUS, _inner_timestamp_)
      + sizeof(LC_STATUS::_inner_timestamp_)
      - PROTOBUF_FIELD_OFFSET(LC_STATUS, last_time_)>(
          reinterpret_cast<char*>(&last_time_),
          reinterpret_cast<char*>(&other->last_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LC_STATUS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pack::InitAsDefaultInstance() {
}
class Pack::_Internal {
 public:
};

Pack::Pack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  imu_angular_rate_(arena),
  imu_acceleration_(arena),
  irts_fl_0_(arena),
  irts_fl_1_(arena),
  irts_fl_2_(arena),
  irts_fl_3_(arena),
  irts_fr_0_(arena),
  irts_fr_1_(arena),
  irts_fr_2_(arena),
  irts_fr_3_(arena),
  irts_rl_0_(arena),
  irts_rl_1_(arena),
  irts_rl_2_(arena),
  irts_rl_3_(arena),
  irts_rr_0_(arena),
  irts_rr_1_(arena),
  irts_rr_2_(arena),
  irts_rr_3_(arena),
  gps_coords_(arena),
  gps_speed_(arena),
  lap_count_(arena),
  pedals_output_(arena),
  steering_angle_(arena),
  control_state_(arena),
  tpms_(arena),
  lc_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:secondary.Pack)
}
Pack::Pack(const Pack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      imu_angular_rate_(from.imu_angular_rate_),
      imu_acceleration_(from.imu_acceleration_),
      irts_fl_0_(from.irts_fl_0_),
      irts_fl_1_(from.irts_fl_1_),
      irts_fl_2_(from.irts_fl_2_),
      irts_fl_3_(from.irts_fl_3_),
      irts_fr_0_(from.irts_fr_0_),
      irts_fr_1_(from.irts_fr_1_),
      irts_fr_2_(from.irts_fr_2_),
      irts_fr_3_(from.irts_fr_3_),
      irts_rl_0_(from.irts_rl_0_),
      irts_rl_1_(from.irts_rl_1_),
      irts_rl_2_(from.irts_rl_2_),
      irts_rl_3_(from.irts_rl_3_),
      irts_rr_0_(from.irts_rr_0_),
      irts_rr_1_(from.irts_rr_1_),
      irts_rr_2_(from.irts_rr_2_),
      irts_rr_3_(from.irts_rr_3_),
      gps_coords_(from.gps_coords_),
      gps_speed_(from.gps_speed_),
      lap_count_(from.lap_count_),
      pedals_output_(from.pedals_output_),
      steering_angle_(from.steering_angle_),
      control_state_(from.control_state_),
      tpms_(from.tpms_),
      lc_status_(from.lc_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:secondary.Pack)
}

void Pack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pack_secondary_2eproto.base);
}

Pack::~Pack() {
  // @@protoc_insertion_point(destructor:secondary.Pack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pack::ArenaDtor(void* object) {
  Pack* _this = reinterpret_cast< Pack* >(object);
  (void)_this;
}
void Pack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pack& Pack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pack_secondary_2eproto.base);
  return *internal_default_instance();
}


void Pack::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.Pack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_angular_rate_.Clear();
  imu_acceleration_.Clear();
  irts_fl_0_.Clear();
  irts_fl_1_.Clear();
  irts_fl_2_.Clear();
  irts_fl_3_.Clear();
  irts_fr_0_.Clear();
  irts_fr_1_.Clear();
  irts_fr_2_.Clear();
  irts_fr_3_.Clear();
  irts_rl_0_.Clear();
  irts_rl_1_.Clear();
  irts_rl_2_.Clear();
  irts_rl_3_.Clear();
  irts_rr_0_.Clear();
  irts_rr_1_.Clear();
  irts_rr_2_.Clear();
  irts_rr_3_.Clear();
  gps_coords_.Clear();
  gps_speed_.Clear();
  lap_count_.Clear();
  pedals_output_.Clear();
  steering_angle_.Clear();
  control_state_.Clear();
  tpms_.Clear();
  lc_status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .secondary.IMU_ANGULAR_RATE IMU_ANGULAR_RATE = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu_angular_rate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IMU_ACCELERATION IMU_ACCELERATION = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu_acceleration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_0 IRTS_FL_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_1 IRTS_FL_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_2 IRTS_FL_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FL_3 IRTS_FL_3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fl_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_0 IRTS_FR_0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_1 IRTS_FR_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_2 IRTS_FR_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_FR_3 IRTS_FR_3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_fr_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_0 IRTS_RL_0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_1 IRTS_RL_1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_2 IRTS_RL_2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RL_3 IRTS_RL_3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rl_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_0 IRTS_RR_0 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_0(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_1 IRTS_RR_1 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_2 IRTS_RR_2 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.IRTS_RR_3 IRTS_RR_3 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_irts_rr_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.GPS_COORDS GPS_COORDS = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gps_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.GPS_SPEED GPS_SPEED = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gps_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.LAP_COUNT LAP_COUNT = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lap_count(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.PEDALS_OUTPUT PEDALS_OUTPUT = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pedals_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.STEERING_ANGLE STEERING_ANGLE = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_steering_angle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.CONTROL_STATE CONTROL_STATE = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_control_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.TPMS TPMS = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tpms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .secondary.LC_STATUS LC_STATUS = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lc_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.Pack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .secondary.IMU_ANGULAR_RATE IMU_ANGULAR_RATE = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imu_angular_rate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_imu_angular_rate(i), target, stream);
  }

  // repeated .secondary.IMU_ACCELERATION IMU_ACCELERATION = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imu_acceleration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_imu_acceleration(i), target, stream);
  }

  // repeated .secondary.IRTS_FL_0 IRTS_FL_0 = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fl_0_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_irts_fl_0(i), target, stream);
  }

  // repeated .secondary.IRTS_FL_1 IRTS_FL_1 = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fl_1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_irts_fl_1(i), target, stream);
  }

  // repeated .secondary.IRTS_FL_2 IRTS_FL_2 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fl_2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_irts_fl_2(i), target, stream);
  }

  // repeated .secondary.IRTS_FL_3 IRTS_FL_3 = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fl_3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_irts_fl_3(i), target, stream);
  }

  // repeated .secondary.IRTS_FR_0 IRTS_FR_0 = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fr_0_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_irts_fr_0(i), target, stream);
  }

  // repeated .secondary.IRTS_FR_1 IRTS_FR_1 = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fr_1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_irts_fr_1(i), target, stream);
  }

  // repeated .secondary.IRTS_FR_2 IRTS_FR_2 = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fr_2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_irts_fr_2(i), target, stream);
  }

  // repeated .secondary.IRTS_FR_3 IRTS_FR_3 = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_fr_3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_irts_fr_3(i), target, stream);
  }

  // repeated .secondary.IRTS_RL_0 IRTS_RL_0 = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rl_0_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_irts_rl_0(i), target, stream);
  }

  // repeated .secondary.IRTS_RL_1 IRTS_RL_1 = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rl_1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_irts_rl_1(i), target, stream);
  }

  // repeated .secondary.IRTS_RL_2 IRTS_RL_2 = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rl_2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_irts_rl_2(i), target, stream);
  }

  // repeated .secondary.IRTS_RL_3 IRTS_RL_3 = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rl_3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_irts_rl_3(i), target, stream);
  }

  // repeated .secondary.IRTS_RR_0 IRTS_RR_0 = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rr_0_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_irts_rr_0(i), target, stream);
  }

  // repeated .secondary.IRTS_RR_1 IRTS_RR_1 = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rr_1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_irts_rr_1(i), target, stream);
  }

  // repeated .secondary.IRTS_RR_2 IRTS_RR_2 = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rr_2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_irts_rr_2(i), target, stream);
  }

  // repeated .secondary.IRTS_RR_3 IRTS_RR_3 = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_irts_rr_3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_irts_rr_3(i), target, stream);
  }

  // repeated .secondary.GPS_COORDS GPS_COORDS = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gps_coords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_gps_coords(i), target, stream);
  }

  // repeated .secondary.GPS_SPEED GPS_SPEED = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gps_speed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_gps_speed(i), target, stream);
  }

  // repeated .secondary.LAP_COUNT LAP_COUNT = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lap_count_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_lap_count(i), target, stream);
  }

  // repeated .secondary.PEDALS_OUTPUT PEDALS_OUTPUT = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pedals_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_pedals_output(i), target, stream);
  }

  // repeated .secondary.STEERING_ANGLE STEERING_ANGLE = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steering_angle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_steering_angle(i), target, stream);
  }

  // repeated .secondary.CONTROL_STATE CONTROL_STATE = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_control_state(i), target, stream);
  }

  // repeated .secondary.TPMS TPMS = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tpms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_tpms(i), target, stream);
  }

  // repeated .secondary.LC_STATUS LC_STATUS = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lc_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_lc_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.Pack)
  return target;
}

size_t Pack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.Pack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .secondary.IMU_ANGULAR_RATE IMU_ANGULAR_RATE = 1;
  total_size += 1UL * this->_internal_imu_angular_rate_size();
  for (const auto& msg : this->imu_angular_rate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IMU_ACCELERATION IMU_ACCELERATION = 2;
  total_size += 1UL * this->_internal_imu_acceleration_size();
  for (const auto& msg : this->imu_acceleration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_0 IRTS_FL_0 = 3;
  total_size += 1UL * this->_internal_irts_fl_0_size();
  for (const auto& msg : this->irts_fl_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_1 IRTS_FL_1 = 4;
  total_size += 1UL * this->_internal_irts_fl_1_size();
  for (const auto& msg : this->irts_fl_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_2 IRTS_FL_2 = 5;
  total_size += 1UL * this->_internal_irts_fl_2_size();
  for (const auto& msg : this->irts_fl_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FL_3 IRTS_FL_3 = 6;
  total_size += 1UL * this->_internal_irts_fl_3_size();
  for (const auto& msg : this->irts_fl_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_0 IRTS_FR_0 = 7;
  total_size += 1UL * this->_internal_irts_fr_0_size();
  for (const auto& msg : this->irts_fr_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_1 IRTS_FR_1 = 8;
  total_size += 1UL * this->_internal_irts_fr_1_size();
  for (const auto& msg : this->irts_fr_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_2 IRTS_FR_2 = 9;
  total_size += 1UL * this->_internal_irts_fr_2_size();
  for (const auto& msg : this->irts_fr_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_FR_3 IRTS_FR_3 = 10;
  total_size += 1UL * this->_internal_irts_fr_3_size();
  for (const auto& msg : this->irts_fr_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_0 IRTS_RL_0 = 11;
  total_size += 1UL * this->_internal_irts_rl_0_size();
  for (const auto& msg : this->irts_rl_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_1 IRTS_RL_1 = 12;
  total_size += 1UL * this->_internal_irts_rl_1_size();
  for (const auto& msg : this->irts_rl_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_2 IRTS_RL_2 = 13;
  total_size += 1UL * this->_internal_irts_rl_2_size();
  for (const auto& msg : this->irts_rl_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RL_3 IRTS_RL_3 = 14;
  total_size += 1UL * this->_internal_irts_rl_3_size();
  for (const auto& msg : this->irts_rl_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_0 IRTS_RR_0 = 15;
  total_size += 1UL * this->_internal_irts_rr_0_size();
  for (const auto& msg : this->irts_rr_0_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_1 IRTS_RR_1 = 16;
  total_size += 2UL * this->_internal_irts_rr_1_size();
  for (const auto& msg : this->irts_rr_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_2 IRTS_RR_2 = 17;
  total_size += 2UL * this->_internal_irts_rr_2_size();
  for (const auto& msg : this->irts_rr_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.IRTS_RR_3 IRTS_RR_3 = 18;
  total_size += 2UL * this->_internal_irts_rr_3_size();
  for (const auto& msg : this->irts_rr_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.GPS_COORDS GPS_COORDS = 19;
  total_size += 2UL * this->_internal_gps_coords_size();
  for (const auto& msg : this->gps_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.GPS_SPEED GPS_SPEED = 20;
  total_size += 2UL * this->_internal_gps_speed_size();
  for (const auto& msg : this->gps_speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.LAP_COUNT LAP_COUNT = 21;
  total_size += 2UL * this->_internal_lap_count_size();
  for (const auto& msg : this->lap_count_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.PEDALS_OUTPUT PEDALS_OUTPUT = 22;
  total_size += 2UL * this->_internal_pedals_output_size();
  for (const auto& msg : this->pedals_output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.STEERING_ANGLE STEERING_ANGLE = 23;
  total_size += 2UL * this->_internal_steering_angle_size();
  for (const auto& msg : this->steering_angle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.CONTROL_STATE CONTROL_STATE = 24;
  total_size += 2UL * this->_internal_control_state_size();
  for (const auto& msg : this->control_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.TPMS TPMS = 25;
  total_size += 2UL * this->_internal_tpms_size();
  for (const auto& msg : this->tpms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .secondary.LC_STATUS LC_STATUS = 26;
  total_size += 2UL * this->_internal_lc_status_size();
  for (const auto& msg : this->lc_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:secondary.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  const Pack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:secondary.Pack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:secondary.Pack)
    MergeFrom(*source);
  }
}

void Pack::MergeFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imu_angular_rate_.MergeFrom(from.imu_angular_rate_);
  imu_acceleration_.MergeFrom(from.imu_acceleration_);
  irts_fl_0_.MergeFrom(from.irts_fl_0_);
  irts_fl_1_.MergeFrom(from.irts_fl_1_);
  irts_fl_2_.MergeFrom(from.irts_fl_2_);
  irts_fl_3_.MergeFrom(from.irts_fl_3_);
  irts_fr_0_.MergeFrom(from.irts_fr_0_);
  irts_fr_1_.MergeFrom(from.irts_fr_1_);
  irts_fr_2_.MergeFrom(from.irts_fr_2_);
  irts_fr_3_.MergeFrom(from.irts_fr_3_);
  irts_rl_0_.MergeFrom(from.irts_rl_0_);
  irts_rl_1_.MergeFrom(from.irts_rl_1_);
  irts_rl_2_.MergeFrom(from.irts_rl_2_);
  irts_rl_3_.MergeFrom(from.irts_rl_3_);
  irts_rr_0_.MergeFrom(from.irts_rr_0_);
  irts_rr_1_.MergeFrom(from.irts_rr_1_);
  irts_rr_2_.MergeFrom(from.irts_rr_2_);
  irts_rr_3_.MergeFrom(from.irts_rr_3_);
  gps_coords_.MergeFrom(from.gps_coords_);
  gps_speed_.MergeFrom(from.gps_speed_);
  lap_count_.MergeFrom(from.lap_count_);
  pedals_output_.MergeFrom(from.pedals_output_);
  steering_angle_.MergeFrom(from.steering_angle_);
  control_state_.MergeFrom(from.control_state_);
  tpms_.MergeFrom(from.tpms_);
  lc_status_.MergeFrom(from.lc_status_);
}

void Pack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:secondary.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pack::CopyFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack::IsInitialized() const {
  return true;
}

void Pack::InternalSwap(Pack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imu_angular_rate_.InternalSwap(&other->imu_angular_rate_);
  imu_acceleration_.InternalSwap(&other->imu_acceleration_);
  irts_fl_0_.InternalSwap(&other->irts_fl_0_);
  irts_fl_1_.InternalSwap(&other->irts_fl_1_);
  irts_fl_2_.InternalSwap(&other->irts_fl_2_);
  irts_fl_3_.InternalSwap(&other->irts_fl_3_);
  irts_fr_0_.InternalSwap(&other->irts_fr_0_);
  irts_fr_1_.InternalSwap(&other->irts_fr_1_);
  irts_fr_2_.InternalSwap(&other->irts_fr_2_);
  irts_fr_3_.InternalSwap(&other->irts_fr_3_);
  irts_rl_0_.InternalSwap(&other->irts_rl_0_);
  irts_rl_1_.InternalSwap(&other->irts_rl_1_);
  irts_rl_2_.InternalSwap(&other->irts_rl_2_);
  irts_rl_3_.InternalSwap(&other->irts_rl_3_);
  irts_rr_0_.InternalSwap(&other->irts_rr_0_);
  irts_rr_1_.InternalSwap(&other->irts_rr_1_);
  irts_rr_2_.InternalSwap(&other->irts_rr_2_);
  irts_rr_3_.InternalSwap(&other->irts_rr_3_);
  gps_coords_.InternalSwap(&other->gps_coords_);
  gps_speed_.InternalSwap(&other->gps_speed_);
  lap_count_.InternalSwap(&other->lap_count_);
  pedals_output_.InternalSwap(&other->pedals_output_);
  steering_angle_.InternalSwap(&other->steering_angle_);
  control_state_.InternalSwap(&other->control_state_);
  tpms_.InternalSwap(&other->tpms_);
  lc_status_.InternalSwap(&other->lc_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pack::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace secondary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::secondary::IMU_ANGULAR_RATE* Arena::CreateMaybeMessage< ::secondary::IMU_ANGULAR_RATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IMU_ANGULAR_RATE >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IMU_ACCELERATION* Arena::CreateMaybeMessage< ::secondary::IMU_ACCELERATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IMU_ACCELERATION >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_0* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_1* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_2* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_3* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_0* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_1* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_2* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_3* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_0* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_1* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_2* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_3* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_0* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_1* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_2* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_3* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::GPS_COORDS* Arena::CreateMaybeMessage< ::secondary::GPS_COORDS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::GPS_COORDS >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::GPS_SPEED* Arena::CreateMaybeMessage< ::secondary::GPS_SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::GPS_SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::LAP_COUNT* Arena::CreateMaybeMessage< ::secondary::LAP_COUNT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::LAP_COUNT >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::PEDALS_OUTPUT* Arena::CreateMaybeMessage< ::secondary::PEDALS_OUTPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::PEDALS_OUTPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::STEERING_ANGLE* Arena::CreateMaybeMessage< ::secondary::STEERING_ANGLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::STEERING_ANGLE >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::CONTROL_STATE* Arena::CreateMaybeMessage< ::secondary::CONTROL_STATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::CONTROL_STATE >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::TPMS* Arena::CreateMaybeMessage< ::secondary::TPMS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::TPMS >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::LC_STATUS* Arena::CreateMaybeMessage< ::secondary::LC_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::LC_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::Pack* Arena::CreateMaybeMessage< ::secondary::Pack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::Pack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
